{"tests.benchmark_kv_store": ["pickledb.load", "sqlitedict.SqliteDict", "diskcache.FanoutCache", "shelve.open", "IPython.get_ipython", "<builtin>.print"], "IPython.get_ipython": [], "<builtin>.print": [], "diskcache.FanoutCache": [], "shelve.open": [], "sqlitedict.SqliteDict": [], "pickledb.load": [], "tests.stress_test_core": ["random.seed", "tests.stress_test_core.stress_test", "<builtin>.int", "<builtin>.print", "time.time", "argparse.ArgumentParser"], "<builtin>.int": [], "tests.stress_test_core.make_keys": ["random.choice"], "tests.stress_test_core.make_keys.make_int": ["<builtin>.int", "random.randrange"], "random.randrange": [], "tests.stress_test_core.make_keys.make_long": ["<builtin>.int", "random.randrange"], "tests.stress_test_core.make_keys.make_unicode": ["random.randint", "<builtin>.int", "random.sample"], "random.randint": [], "random.sample": [], "tests.stress_test_core.make_keys.make_bytes": ["random.randint", "<builtin>.int", "random.sample"], "tests.stress_test_core.make_keys.make_float": ["random.random"], "random.random": [], "tests.stress_test_core.make_keys.make_object": ["tests.stress_test_core.make_keys.make_float", "random.randint"], "random.choice": [], "tests.stress_test_core.make_vals": ["random.choice"], "tests.stress_test_core.make_vals.make_int": ["<builtin>.int", "random.randrange"], "tests.stress_test_core.make_vals.make_long": ["<builtin>.int", "random.randrange"], "tests.stress_test_core.make_vals.make_unicode": ["random.randint", "<builtin>.int", "random.sample"], "tests.stress_test_core.make_vals.make_bytes": ["random.randint", "<builtin>.int", "random.sample"], "tests.stress_test_core.make_vals.make_float": ["random.random"], "tests.stress_test_core.make_vals.make_object": ["random.randint", "<builtin>.int", "tests.stress_test_core.make_vals.make_float"], "tests.stress_test_core.key_ops": ["random.expovariate", "<builtin>.next", "random.random", "tests.stress_test_core.make_keys", "<builtin>.range", "<builtin>.int", "tests.stress_test_core.make_vals"], "<builtin>.next": [], "random.expovariate": [], "<builtin>.range": [], "tests.stress_test_core.all_ops": ["<builtin>.range", "random.choice", "tests.stress_test_core.key_ops", "<builtin>.next"], "tests.stress_test_core.worker": ["collections.defaultdict", "<builtin>.iter", "<builtin>.enumerate", "time.time", "diskcache.Cache"], "collections.defaultdict": [], "diskcache.Cache": [], "<builtin>.iter": [], "<builtin>.enumerate": [], "time.time": [], "tests.stress_test_core.dispatch": ["collections.defaultdict", "pickle.load", "<builtin>.open", "pickle.dump", "queue.Queue", "<builtin>.enumerate", "<builtin>.range", "threading.Thread"], "<builtin>.open": [], "pickle.load": [], "queue.Queue": [], "threading.Thread": [], "pickle.dump": [], "tests.stress_test_core.percentile": ["<builtin>.int", "<builtin>.sorted", "<builtin>.len"], "<builtin>.sorted": [], "<builtin>.len": [], "tests.stress_test_core.stress_test": ["collections.defaultdict", "pickle.load", "<builtin>.open", "tests.stress_test_core.all_ops", "shutil.rmtree", "<builtin>.list", "pickle.dump", "warnings.simplefilter", "os.remove", "diskcache.Cache", "<builtin>.enumerate", "<builtin>.range", "multiprocessing.Process", "threading.Thread", "utils.display"], "shutil.rmtree": [], "multiprocessing.Process": [], "<builtin>.list": [], "warnings.simplefilter": [], "os.remove": [], "utils.display": [], "tests.stress_test_core.stress_test_lru": ["tests.stress_test_core.stress_test"], "tests.stress_test_core.stress_test_lfu": ["tests.stress_test_core.stress_test"], "tests.stress_test_core.stress_test_none": ["tests.stress_test_core.stress_test"], "tests.stress_test_core.stress_test_mp": ["tests.stress_test_core.stress_test"], "argparse.ArgumentParser": [], "random.seed": [], "tests.stress_test_index_mp": ["tests.stress_test_index_mp.test", "tests.stress_test_index_mp.register"], "tests.stress_test_index_mp.register": [], "tests.stress_test_index_mp.stress_get": ["random.randrange"], "tests.stress_test_index_mp.stress_set": ["random.random", "random.randrange"], "tests.stress_test_index_mp.stress_del": ["random.randrange"], "tests.stress_test_index_mp.stress_pop": ["random.randrange"], "tests.stress_test_index_mp.stress_popitem": ["random.randrange"], "tests.stress_test_index_mp.stress_iter": ["itertools.islice"], "itertools.islice": [], "tests.stress_test_index_mp.stress_reversed": ["itertools.islice", "<builtin>.reversed"], "<builtin>.reversed": [], "tests.stress_test_index_mp.stress_len": ["<builtin>.len"], "tests.stress_test_index_mp.stress": ["random.seed", "random.choice", "<builtin>.range"], "tests.stress_test_index_mp.test": ["<builtin>.all", "time.sleep", "itertools.count", "diskcache.Index", "<builtin>.len", "random.seed", "<builtin>.enumerate", "<builtin>.range", "multiprocessing.Process", "<builtin>.print"], "diskcache.Index": [], "itertools.count": [], "time.sleep": [], "<builtin>.all": [], "tests.benchmark_glob": ["os.mkdir", "<builtin>.open", "shutil.rmtree", "<builtin>.len", "timeit.timeit", "utils.secs", "<builtin>.range", "os.path.join", "<builtin>.print"], "os.mkdir": [], "os.path.join": [], "timeit.timeit": [], "utils.secs": [], "tests.issue_109": ["tests.issue_109.main"], "tests.issue_109.main": ["time.sleep", "<builtin>.str", "time.monotonic", "diskcache.FanoutCache", "<builtin>.len", "argparse.ArgumentParser", "<builtin>.range", "<builtin>.int", "<builtin>.sorted", "<builtin>.print"], "<builtin>.str": [], "time.monotonic": [], "tests.test_doctest": [], "tests.test_doctest.test_core": ["doctest.testmod"], "doctest.testmod": [], "tests.test_doctest.test_djangocache": ["doctest.testmod"], "tests.test_doctest.test_fanout": ["doctest.testmod"], "tests.test_doctest.test_persistent": ["doctest.testmod"], "tests.test_doctest.test_recipes": ["doctest.testmod"], "tests.test_doctest.test_tutorial": ["doctest.testfile"], "doctest.testfile": [], "tests.test_fanout": ["warnings.simplefilter", "pytest.fixture"], "pytest.fixture": [], "tests.test_fanout.cache": ["shutil.rmtree", "diskcache.FanoutCache"], "tests.test_fanout.test_init": ["<builtin>.setattr", "<builtin>.getattr", "diskcache.DEFAULT_SETTINGS.copy", "diskcache.DEFAULT_SETTINGS.items"], "diskcache.DEFAULT_SETTINGS.copy": [], "<builtin>.getattr": [], "diskcache.DEFAULT_SETTINGS.items": [], "<builtin>.setattr": [], "tests.test_fanout.test_set_get_delete": ["<builtin>.range", "<builtin>.len"], "tests.test_fanout.test_set_timeout": ["unittest.mock.Mock", "unittest.mock.patch.object"], "unittest.mock.Mock": [], "tests.test_fanout.test_set_timeout.<lambda1>": [], "unittest.mock.patch.object": [], "tests.test_fanout.test_touch": [], "tests.test_fanout.test_touch_timeout": ["unittest.mock.Mock", "unittest.mock.patch.object"], "tests.test_fanout.test_touch_timeout.<lambda1>": [], "tests.test_fanout.test_add": [], "tests.test_fanout.test_add_timeout": ["unittest.mock.Mock", "unittest.mock.patch.object"], "tests.test_fanout.test_add_timeout.<lambda1>": [], "tests.test_fanout.stress_add": ["<builtin>.range", "time.sleep"], "tests.test_fanout.test_add_concurrent": ["shutil.rmtree", "<builtin>.sum", "diskcache.FanoutCache", "collections.deque", "<builtin>.range", "threading.Thread"], "collections.deque": [], "<builtin>.sum": [], "tests.test_fanout.test_incr": [], "tests.test_fanout.test_incr_timeout": ["unittest.mock.Mock", "unittest.mock.patch.object"], "tests.test_fanout.test_incr_timeout.<lambda1>": [], "tests.test_fanout.test_decr": [], "tests.test_fanout.test_decr_timeout": ["unittest.mock.Mock", "unittest.mock.patch.object"], "tests.test_fanout.test_decr_timeout.<lambda1>": [], "tests.test_fanout.stress_incr": ["<builtin>.range", "time.sleep"], "tests.test_fanout.test_incr_concurrent": ["threading.Thread", "shutil.rmtree", "<builtin>.range", "diskcache.FanoutCache"], "tests.test_fanout.test_getsetdel": ["io.BytesIO", "<builtin>.enumerate", "<builtin>.len"], "io.BytesIO": [], "tests.test_fanout.test_get_timeout": ["unittest.mock.Mock", "unittest.mock.patch.object"], "tests.test_fanout.test_get_timeout.<lambda1>": [], "tests.test_fanout.test_pop": ["<builtin>.range"], "tests.test_fanout.test_pop_timeout": ["unittest.mock.Mock", "unittest.mock.patch.object"], "tests.test_fanout.test_pop_timeout.<lambda1>": [], "tests.test_fanout.test_delete_timeout": ["unittest.mock.Mock", "unittest.mock.patch.object"], "tests.test_fanout.test_delete_timeout.<lambda1>": [], "tests.test_fanout.test_delitem": [], "tests.test_fanout.test_delitem_keyerror": ["pytest.raises"], "pytest.raises": [], "tests.test_fanout.test_tag_index": [], "tests.test_fanout.test_read": [], "tests.test_fanout.test_read_keyerror": ["pytest.raises"], "tests.test_fanout.test_getitem_keyerror": ["pytest.raises"], "tests.test_fanout.test_expire": ["<builtin>.range", "time.sleep", "<builtin>.len"], "tests.test_fanout.test_evict": ["<builtin>.range", "<builtin>.len"], "tests.test_fanout.test_size_limit_with_files": ["<builtin>.range"], "tests.test_fanout.test_size_limit_with_database": ["<builtin>.range", "<builtin>.len"], "tests.test_fanout.test_clear": ["<builtin>.range", "<builtin>.len"], "tests.test_fanout.test_remove_timeout": ["unittest.mock.Mock", "unittest.mock.patch.object", "diskcache.Timeout"], "diskcache.Timeout": [], "tests.test_fanout.test_reset_timeout": ["unittest.mock.Mock", "unittest.mock.patch.object"], "tests.test_fanout.test_stats": ["<builtin>.range", "<builtin>.len"], "tests.test_fanout.test_volume": ["<builtin>.sum"], "tests.test_fanout.test_iter": ["<builtin>.range", "<builtin>.set"], "<builtin>.set": [], "tests.test_fanout.test_iter_expire": ["<builtin>.range", "<builtin>.set", "time.sleep"], "tests.test_fanout.test_reversed": ["<builtin>.list", "<builtin>.range", "<builtin>.reversed"], "tests.test_fanout.test_pickle": ["<builtin>.enumerate", "pickle.dumps", "pickle.loads"], "pickle.dumps": [], "pickle.loads": [], "tests.test_fanout.test_memoize": ["<builtin>.range", "tests.test_fanout.test_memoize.fibiter", "tests.test_fanout.test_memoize.fibrec"], "tests.test_fanout.test_memoize.fibiter": ["<builtin>.range"], "tests.test_fanout.test_memoize.fibrec": ["tests.test_fanout.test_memoize.fibrec"], "tests.test_fanout.test_copy": ["<builtin>.str", "shutil.rmtree", "diskcache.FanoutCache", "shutil.copytree", "tempfile.mkdtemp", "<builtin>.range", "<builtin>.int"], "tempfile.mkdtemp": [], "shutil.copytree": [], "tests.test_fanout.run": ["subprocess.check_output", "<builtin>.print"], "subprocess.check_output": [], "tests.test_fanout.test_rsync": ["<builtin>.str", "tests.test_fanout.run", "diskcache.FanoutCache", "shutil.rmtree", "tempfile.mkdtemp", "<builtin>.range", "<builtin>.int"], "tests.test_fanout.SHA256FilenameDisk.filename": ["hashlib.sha256", "os.path.join"], "hashlib.sha256": [], "tests.test_fanout.test_custom_filename_disk": ["hashlib.sha256", "<builtin>.open", "<builtin>.str", "shutil.rmtree", "diskcache.FanoutCache", "diskcache.Disk.hash", "diskcache.Disk.__init__", "<builtin>.range", "<builtin>.int", "os.path.join"], "diskcache.Disk.__init__": [], "diskcache.Disk.hash": [], "tests.stress_test_fanout": ["tests.stress_test_fanout.stress_test", "random.seed", "<builtin>.int", "<builtin>.print", "time.time", "argparse.ArgumentParser"], "tests.stress_test_fanout.make_keys": ["random.choice"], "tests.stress_test_fanout.make_keys.make_int": ["<builtin>.int", "random.randrange"], "tests.stress_test_fanout.make_keys.make_long": ["<builtin>.int", "random.randrange"], "tests.stress_test_fanout.make_keys.make_unicode": ["random.randint", "<builtin>.int", "random.sample"], "tests.stress_test_fanout.make_keys.make_bytes": ["random.randint", "<builtin>.int", "random.sample"], "tests.stress_test_fanout.make_keys.make_float": ["random.random"], "tests.stress_test_fanout.make_keys.make_object": ["random.randint", "tests.stress_test_fanout.make_keys.make_float"], "tests.stress_test_fanout.make_vals": ["random.choice"], "tests.stress_test_fanout.make_vals.make_int": ["<builtin>.int", "random.randrange"], "tests.stress_test_fanout.make_vals.make_long": ["<builtin>.int", "random.randrange"], "tests.stress_test_fanout.make_vals.make_unicode": ["random.randint", "<builtin>.int", "random.sample"], "tests.stress_test_fanout.make_vals.make_bytes": ["random.randint", "<builtin>.int", "random.sample"], "tests.stress_test_fanout.make_vals.make_float": ["random.random"], "tests.stress_test_fanout.make_vals.make_object": ["random.randint", "<builtin>.int", "tests.stress_test_fanout.make_vals.make_float"], "tests.stress_test_fanout.key_ops": ["random.expovariate", "tests.stress_test_fanout.make_vals", "tests.stress_test_fanout.make_keys", "<builtin>.next", "random.random", "<builtin>.range", "<builtin>.int"], "tests.stress_test_fanout.all_ops": ["tests.stress_test_fanout.key_ops", "random.choice", "<builtin>.next", "<builtin>.range"], "tests.stress_test_fanout.worker": ["<builtin>.enumerate", "<builtin>.iter", "time.time", "diskcache.FanoutCache"], "tests.stress_test_fanout.dispatch": ["pickle.load", "<builtin>.open", "pickle.dump", "queue.Queue", "<builtin>.enumerate", "<builtin>.range", "time.time", "threading.Thread"], "tests.stress_test_fanout.percentile": ["<builtin>.int", "<builtin>.sorted", "<builtin>.len"], "tests.stress_test_fanout.stress_test": ["pickle.load", "<builtin>.open", "shutil.rmtree", "tests.stress_test_fanout.all_ops", "diskcache.FanoutCache", "<builtin>.list", "pickle.dump", "warnings.simplefilter", "os.remove", "<builtin>.enumerate", "<builtin>.range", "multiprocessing.Process", "threading.Thread", "utils.display"], "tests.stress_test_fanout.stress_test_lru": ["tests.stress_test_fanout.stress_test"], "tests.stress_test_fanout.stress_test_lfu": ["tests.stress_test_fanout.stress_test"], "tests.stress_test_fanout.stress_test_none": ["tests.stress_test_fanout.stress_test"], "tests.stress_test_fanout.stress_test_mp": ["tests.stress_test_fanout.stress_test"], "tests.settings": ["os.path.dirname", "os.path.join", "os.path.abspath"], "os.path.abspath": [], "os.path.dirname": [], "tests.plot": ["tests.plot.main"], "tests.plot.parse_timing": ["<builtin>.float"], "<builtin>.float": [], "tests.plot.parse_row": [], "tests.plot.parse_data": ["re.compile", "tests.plot.parse_row", "collections.OrderedDict", "<builtin>.len", "<builtin>.zip", "<builtin>.dict"], "re.compile": [], "collections.OrderedDict": [], "<builtin>.zip": [], "<builtin>.dict": [], "tests.plot.make_plot": ["tests.plot.parse_timing", "matplotlib.pyplot.close", "matplotlib.pyplot.subplots", "matplotlib.pyplot.show", "<builtin>.len", "<builtin>.list", "matplotlib.pyplot.savefig", "<builtin>.enumerate", "<builtin>.zip"], "matplotlib.pyplot.subplots": [], "matplotlib.pyplot.show": [], "matplotlib.pyplot.savefig": [], "matplotlib.pyplot.close": [], "tests.plot.main": ["tests.plot.make_plot", "tests.plot.parse_data", "argparse.FileType", "argparse.ArgumentParser"], "argparse.FileType": [], "tests.models": [], "tests.models.expensive_calculation": ["django.utils.timezone.now"], "django.utils.timezone.now": [], "django.db.models.CharField": [], "tests.models.Poll": ["django.db.models.CharField", "django.db.models.DateTimeField"], "django.db.models.DateTimeField": [], "tests.test_core": ["pytest.mark.filterwarnings", "pytest.fixture"], "pytest.mark.filterwarnings": [], "tests.test_core.cache": ["shutil.rmtree", "diskcache.Cache"], "tests.test_core.test_init": ["<builtin>.getattr", "diskcache.DEFAULT_SETTINGS.items"], "tests.test_core.test_init_disk": ["shutil.rmtree", "diskcache.Cache"], "tests.test_core.test_disk_reset": ["shutil.rmtree", "diskcache.Cache"], "tests.test_core.test_disk_valueerror": ["diskcache.Disk", "pytest.raises", "diskcache.Cache"], "diskcache.Disk": [], "tests.test_core.test_custom_disk": ["<builtin>.zip", "tests.test_core.test_memoize_iter", "shutil.rmtree", "diskcache.Cache"], "tests.test_core.test_memoize_iter": ["tests.test_core.test_memoize_iter.test", "<builtin>.len"], "tests.test_core.SHA256FilenameDisk.filename": ["hashlib.sha256", "os.path.join"], "tests.test_core.test_custom_filename_disk": ["hashlib.sha256", "<builtin>.open", "<builtin>.str", "shutil.rmtree", "<builtin>.range", "<builtin>.int", "os.path.join", "diskcache.Cache"], "tests.test_core.test_init_makedirs": ["unittest.mock.Mock", "shutil.rmtree", "<builtin>.OSError", "diskcache.Cache", "tempfile.mkdtemp", "unittest.mock.patch", "pytest.raises"], "<builtin>.OSError": [], "unittest.mock.patch": [], "tests.test_core.test_pragma_error": ["unittest.mock.Mock", "os.getpid", "unittest.mock.patch.object", "unittest.mock.patch", "pytest.raises"], "os.getpid": [], "tests.test_core.test_pragma_error.<lambda1>": [], "tests.test_core.test_close_error": ["tests.test_core.test_close_error.LocalTest.__init__", "unittest.mock.patch.object"], "tests.test_core.test_close_error.LocalTest.__init__": [], "tests.test_core.test_close_error.LocalTest.__getattr__": ["unittest.mock.Mock"], "tests.test_core.test_getsetdel": ["io.BytesIO", "<builtin>.enumerate", "<builtin>.len"], "tests.test_core.test_get_keyerror1": ["pytest.raises"], "tests.test_core.test_get_keyerror4": ["unittest.mock.Mock", "<builtin>.IOError", "unittest.mock.patch", "pytest.raises"], "<builtin>.IOError": [], "tests.test_core.test_read": [], "tests.test_core.test_read_keyerror": ["pytest.raises"], "tests.test_core.test_set_twice": [], "tests.test_core.test_set_timeout": ["os.getpid", "unittest.mock.Mock", "unittest.mock.patch.object", "pytest.raises"], "tests.test_core.test_raw": ["io.BytesIO"], "tests.test_core.test_get": [], "tests.test_core.test_get_expired_fast_path": ["time.sleep"], "tests.test_core.test_get_ioerror_fast_path": ["unittest.mock.Mock", "<builtin>.IOError", "unittest.mock.patch.object"], "tests.test_core.test_get_expired_slow_path": ["time.sleep"], "tests.test_core.test_pop": ["time.sleep"], "tests.test_core.test_pop_ioerror": ["unittest.mock.Mock", "<builtin>.IOError", "unittest.mock.patch.object"], "tests.test_core.test_delete": ["<builtin>.len"], "tests.test_core.test_del": ["pytest.raises"], "tests.test_core.test_del_expired": ["time.sleep", "pytest.raises"], "tests.test_core.test_stats": ["<builtin>.range", "<builtin>.len"], "tests.test_core.test_path": ["<builtin>.open", "<builtin>.len"], "tests.test_core.test_expire_rows": ["<builtin>.range", "time.sleep", "<builtin>.len"], "tests.test_core.test_least_recently_stored": ["<builtin>.enumerate", "<builtin>.range", "<builtin>.int", "<builtin>.len"], "tests.test_core.test_least_recently_used": ["<builtin>.range", "<builtin>.int", "time.sleep", "<builtin>.len"], "tests.test_core.test_least_frequently_used": ["<builtin>.range", "<builtin>.int", "<builtin>.len"], "tests.test_core.test_check": ["os.rename", "<builtin>.len", "os.remove", "warnings.filterwarnings", "warnings.catch_warnings"], "os.rename": [], "warnings.catch_warnings": [], "warnings.filterwarnings": [], "tests.test_core.test_integrity_check": ["io.open", "<builtin>.len", "warnings.filterwarnings", "<builtin>.range", "os.path.join", "diskcache.Cache", "warnings.catch_warnings"], "io.open": [], "tests.test_core.test_expire": ["unittest.mock.Mock", "<builtin>.len", "time.time", "<builtin>.range", "unittest.mock.patch"], "tests.test_core.test_tag_index": ["shutil.rmtree", "diskcache.Cache"], "tests.test_core.test_evict": ["<builtin>.range", "<builtin>.len"], "tests.test_core.test_clear": ["<builtin>.range", "<builtin>.len"], "tests.test_core.test_clear_timeout": ["unittest.mock.Mock", "unittest.mock.patch.object", "pytest.raises"], "tests.test_core.test_tag": [], "tests.test_core.test_with": ["diskcache.Cache"], "tests.test_core.test_contains": [], "tests.test_core.test_touch": [], "tests.test_core.test_add": ["time.sleep"], "tests.test_core.test_add_large_value": [], "tests.test_core.test_add_timeout": ["os.getpid", "unittest.mock.Mock", "unittest.mock.patch.object", "pytest.raises"], "tests.test_core.test_incr": ["time.sleep"], "tests.test_core.test_incr_insert_keyerror": ["pytest.raises"], "tests.test_core.test_incr_update_keyerror": ["time.sleep", "pytest.raises"], "tests.test_core.test_decr": ["time.sleep"], "tests.test_core.test_iter": ["<builtin>.all", "<builtin>.iter", "<builtin>.next", "<builtin>.list", "<builtin>.enumerate", "<builtin>.zip", "pytest.raises"], "tests.test_core.test_iter_expire": ["<builtin>.list", "<builtin>.range", "<builtin>.len"], "tests.test_core.test_iter_error": ["<builtin>.iter", "<builtin>.next", "pytest.raises"], "tests.test_core.test_reversed": ["<builtin>.all", "<builtin>.next", "<builtin>.reversed", "<builtin>.enumerate", "<builtin>.zip"], "tests.test_core.test_reversed_error": ["<builtin>.next", "<builtin>.reversed", "pytest.raises"], "tests.test_core.test_push_pull": ["<builtin>.range", "<builtin>.len"], "tests.test_core.test_push_pull_prefix": ["<builtin>.range", "<builtin>.len"], "tests.test_core.test_push_pull_extras": ["time.time", "<builtin>.len"], "tests.test_core.test_push_pull_expire": ["time.sleep", "<builtin>.len"], "tests.test_core.test_push_peek_expire": ["time.sleep", "<builtin>.len"], "tests.test_core.test_push_pull_large_value": ["<builtin>.len"], "tests.test_core.test_push_peek_large_value": ["<builtin>.len"], "tests.test_core.test_pull_ioerror": ["unittest.mock.Mock", "<builtin>.IOError", "unittest.mock.patch.object"], "tests.test_core.test_peek_ioerror": ["unittest.mock.Mock", "<builtin>.IOError", "unittest.mock.patch.object"], "tests.test_core.test_peekitem_extras": ["time.sleep", "pytest.raises"], "tests.test_core.test_peekitem_ioerror": ["unittest.mock.Mock", "<builtin>.IOError", "unittest.mock.patch.object"], "tests.test_core.test_iterkeys": ["<builtin>.list"], "tests.test_core.test_pickle": ["<builtin>.enumerate", "pickle.dumps", "pickle.loads"], "tests.test_core.test_pragmas": ["<builtin>.range", "<builtin>.all", "threading.Thread"], "tests.test_core.test_pragmas.compare_pragmas": ["diskcache.DEFAULT_SETTINGS.items", "<builtin>.print"], "tests.test_core.test_size_limit_with_files": ["<builtin>.range"], "tests.test_core.test_size_limit_with_database": ["<builtin>.range", "<builtin>.len"], "tests.test_core.test_cull_eviction_policy_none": ["<builtin>.range", "<builtin>.len"], "tests.test_core.test_cull_size_limit_0": ["<builtin>.range", "<builtin>.len"], "tests.test_core.test_cull_timeout": ["unittest.mock.Mock", "unittest.mock.patch.object", "pytest.raises"], "tests.test_core.test_cull_timeout.<lambda1>": [], "tests.test_core.test_cull_timeout.<lambda2>": ["<builtin>.int"], "tests.test_core.test_key_roundtrip": ["<builtin>.list", "<builtin>.len"], "tests.test_core.test_constant": ["<builtin>.repr"], "<builtin>.repr": [], "tests.test_core.test_copy": ["<builtin>.str", "shutil.rmtree", "shutil.copytree", "tempfile.mkdtemp", "<builtin>.range", "<builtin>.int", "diskcache.Cache"], "tests.test_core.run": ["subprocess.check_output", "<builtin>.print"], "tests.test_core.test_rsync": ["tests.test_core.run", "<builtin>.str", "shutil.rmtree", "tempfile.mkdtemp", "<builtin>.range", "<builtin>.int", "diskcache.Cache"], "tests.test_core.test_custom_eviction_policy": ["<builtin>.range", "<builtin>.int", "<builtin>.str", "time.sleep"], "tests.test_core.test_lru_incr": [], "tests.test_core.test_memoize": ["tests.test_core.test_memoize.fibrec", "<builtin>.range", "tests.test_core.test_memoize.fibiter"], "tests.test_core.test_memoize.fibiter": ["<builtin>.range"], "tests.test_core.test_memoize.fibrec": ["tests.test_core.test_memoize.fibrec"], "tests.test_core.test_memoize_kwargs": ["tests.test_core.test_memoize_kwargs.foo"], "tests.test_core.test_memoize_kwargs.foo": [], "tests.test_core.test_cleanup_dirs": ["<builtin>.range", "os.listdir", "<builtin>.len"], "os.listdir": [], "tests.test_core.test_disk_write_os_error": ["unittest.mock.Mock", "unittest.mock.patch", "pytest.raises"], "tests.test_core.test_memoize_ignore": ["tests.test_core.test_memoize_ignore.test"], "tests.test_core.test_memoize_ignore.test": [], "tests.test_core.test_memoize_iter.test": ["<builtin>.sum"], "tests.settings_benchmark": [], "tests": [], "tests.test_index": ["pytest.fixture"], "tests.test_index.rmdir": ["shutil.rmtree"], "tests.test_index.index": ["tests.test_index.rmdir", "diskcache.Index"], "tests.test_index.test_init": ["tests.test_index.rmdir", "diskcache.Index", "tempfile.mkdtemp"], "tests.test_index.test_getsetdel": ["<builtin>.enumerate", "<builtin>.len"], "tests.test_index.test_pop": ["<builtin>.enumerate", "<builtin>.len"], "tests.test_index.test_pop_keyerror": ["pytest.raises"], "tests.test_index.test_popitem": ["<builtin>.enumerate", "<builtin>.len"], "tests.test_index.test_popitem_keyerror": ["pytest.raises"], "tests.test_index.test_setdefault": [], "tests.test_index.test_iter": ["<builtin>.enumerate"], "tests.test_index.test_reversed": ["<builtin>.enumerate", "<builtin>.reversed", "<builtin>.len"], "tests.test_index.test_state": ["pickle.dumps", "pickle.loads"], "tests.test_index.test_memoize": ["tests.test_index.test_memoize.fibiter", "<builtin>.range", "tests.test_index.test_memoize.fibrec"], "tests.test_index.test_memoize.fibiter": ["<builtin>.range"], "tests.test_index.test_memoize.fibrec": ["tests.test_index.test_memoize.fibrec"], "tests.test_index.test_repr": ["<builtin>.repr"], "tests.stress_test_index": ["tests.stress_test_index.test", "tests.stress_test_index.register"], "tests.stress_test_index.register": [], "tests.stress_test_index.stress_get": ["random.randrange"], "tests.stress_test_index.stress_set": ["random.random", "random.randrange"], "tests.stress_test_index.stress_pop": ["random.randrange"], "tests.stress_test_index.stress_popitem": ["random.randrange", "<builtin>.len"], "tests.stress_test_index.stress_iter": ["<builtin>.zip", "itertools.islice", "<builtin>.all"], "tests.stress_test_index.stress_reversed": ["<builtin>.zip", "itertools.islice", "<builtin>.reversed", "<builtin>.all"], "tests.stress_test_index.stress_len": ["<builtin>.len"], "tests.stress_test_index.stress": ["<builtin>.range", "random.choice", "<builtin>.len", "<builtin>.print"], "tests.stress_test_index.test": ["collections.OrderedDict", "diskcache.Index", "random.seed", "tests.stress_test_index.stress", "<builtin>.enumerate", "<builtin>.range"], "tests.stress_test_deque": ["tests.stress_test_deque.test", "tests.stress_test_deque.lencheck", "tests.stress_test_deque.register"], "tests.stress_test_deque.register": [], "tests.stress_test_deque.lencheck": ["functools.wraps"], "functools.wraps": [], "tests.stress_test_deque.lencheck.wrapper": ["tests.stress_test_deque.stress_set", "tests.stress_test_deque.stress_rotate", "tests.stress_test_deque.stress_popleft", "<builtin>.len", "tests.stress_test_deque.stress_del", "tests.stress_test_deque.stress_pop", "tests.stress_test_deque.stress_get"], "tests.stress_test_deque.stress_rotate": ["<builtin>.zip", "random.randrange", "<builtin>.len", "<builtin>.all"], "tests.stress_test_deque.stress_pop": [], "tests.stress_test_deque.stress_get": ["random.randrange", "<builtin>.len"], "tests.stress_test_deque.stress_set": ["random.random", "random.randrange", "<builtin>.len"], "tests.stress_test_deque.stress_popleft": [], "tests.stress_test_deque.stress_del": ["random.randrange", "<builtin>.len"], "tests.stress_test_deque.stress_iadd": ["random.random", "<builtin>.range"], "tests.stress_test_deque.stress_iter": ["<builtin>.zip", "<builtin>.all"], "tests.stress_test_deque.stress_reversed": ["<builtin>.zip", "<builtin>.all", "<builtin>.reversed"], "tests.stress_test_deque.stress_append": ["random.random"], "tests.stress_test_deque.stress_appendleft": ["random.random"], "tests.stress_test_deque.stress_reverse": ["<builtin>.zip", "<builtin>.all"], "tests.stress_test_deque.stress": ["<builtin>.range", "random.choice", "<builtin>.len", "<builtin>.print"], "tests.stress_test_deque.test": ["<builtin>.all", "diskcache.Deque", "random.seed", "collections.deque", "tests.stress_test_deque.stress", "<builtin>.range", "<builtin>.zip"], "diskcache.Deque": [], "tests.benchmark_djangocache": ["<builtin>.int", "tests.benchmark_djangocache.dispatch", "argparse.ArgumentParser"], "tests.benchmark_djangocache.setup": ["django.setup", "os.environ.setdefault"], "os.environ.setdefault": [], "django.setup": [], "tests.benchmark_djangocache.worker": ["collections.defaultdict", "time.sleep", "<builtin>.open", "random.randrange", "<builtin>.str", "tests.benchmark_djangocache.setup", "random.random", "random.seed", "pickle.dump", "<builtin>.range", "time.time"], "tests.benchmark_djangocache.prepare": ["<builtin>.range", "<builtin>.str", "tests.benchmark_djangocache.setup"], "tests.benchmark_djangocache.dispatch": ["collections.defaultdict", "pickle.load", "<builtin>.open", "shutil.rmtree", "tests.benchmark_djangocache.setup", "os.remove", "<builtin>.range", "multiprocessing.Process", "utils.display"], "tests.benchmark_incr": ["tests.benchmark_incr.main", "<builtin>.int"], "tests.benchmark_incr.worker": ["json.dump", "time.sleep", "<builtin>.open", "<builtin>.range", "time.time", "diskcache.Cache"], "json.dump": [], "tests.benchmark_incr.main": ["<builtin>.open", "shutil.rmtree", "json.load", "<builtin>.len", "utils.secs", "<builtin>.range", "<builtin>.int", "multiprocessing.Process", "diskcache.Cache", "<builtin>.print"], "json.load": [], "tests.benchmark_core": ["<builtin>.int", "warnings.warn", "tests.benchmark_core.dispatch", "argparse.ArgumentParser"], "warnings.warn": [], "tests.benchmark_core.worker": ["collections.defaultdict", "time.sleep", "<builtin>.open", "random.randrange", "<builtin>.str", "random.random", "random.seed", "pickle.dump", "<builtin>.range", "time.time"], "tests.benchmark_core.dispatch": ["collections.defaultdict", "pickle.load", "<builtin>.open", "<builtin>.str", "shutil.rmtree", "os.remove", "<builtin>.range", "multiprocessing.Process", "utils.display"], "tests.issue_85": ["tests.issue_85.remove_cache_dir", "tests.issue_85.create_data_table", "tests.issue_85.multi_threading_init_test", "collections.deque", "tests.issue_85.init_django", "tests.issue_85.test_transaction_errors", "tests.issue_85.show_sqlite_compile_options"], "tests.issue_85.remove_cache_dir": ["shutil.rmtree", "<builtin>.print"], "tests.issue_85.init_django": ["os.environ.setdefault", "django.setup", "<builtin>.print"], "tests.issue_85.multi_threading_init_test": ["<builtin>.range", "threading.Thread", "<builtin>.print"], "tests.issue_85.multi_threading_init_test.run": ["django.core.cache.cache.get"], "django.core.cache.cache.get": [], "tests.issue_85.show_sqlite_compile_options": ["<builtin>.print"], "tests.issue_85.create_data_table": ["<builtin>.range", "<builtin>.print"], "tests.issue_85.run": ["time.sleep", "threading.get_ident", "<builtin>.len", "random.random", "<builtin>.enumerate"], "threading.get_ident": [], "tests.issue_85.test_transaction_errors": ["<builtin>.len", "<builtin>.range", "threading.Thread", "<builtin>.print"], "tests.test_recipes": ["pytest.fixture"], "tests.test_recipes.cache": ["shutil.rmtree", "diskcache.Cache"], "tests.test_recipes.test_averager": ["<builtin>.range", "diskcache.Averager"], "diskcache.Averager": [], "tests.test_recipes.test_lock": ["diskcache.Lock", "time.sleep", "threading.Thread"], "diskcache.Lock": [], "tests.test_recipes.test_lock.worker": ["time.sleep"], "tests.test_recipes.test_rlock": ["time.sleep", "threading.Thread", "diskcache.RLock"], "diskcache.RLock": [], "tests.test_recipes.test_rlock.worker": ["time.sleep"], "tests.test_recipes.test_semaphore": ["threading.Thread", "time.sleep", "diskcache.BoundedSemaphore"], "diskcache.BoundedSemaphore": [], "tests.test_recipes.test_semaphore.worker": ["time.sleep"], "tests.test_recipes.test_memoize_stampede": ["tests.test_recipes.test_memoize_stampede.worker", "diskcache.memoize_stampede", "time.time"], "diskcache.memoize_stampede": [], "tests.test_recipes.test_memoize_stampede.worker": ["time.sleep"], "tests.plot_early_recompute": ["tests.plot_early_recompute.main"], "tests.plot_early_recompute.make_timer": ["threading.Lock"], "threading.Lock": [], "tests.plot_early_recompute.make_timer.timer": ["functools.wraps"], "tests.plot_early_recompute.make_timer.timer.wrapper": ["time.time"], "tests.plot_early_recompute.make_worker": ["tests.plot_early_recompute.make_timer", "tests.plot_early_recompute.make_timer.timer"], "tests.plot_early_recompute.make_worker.worker": ["time.sleep"], "tests.plot_early_recompute.make_repeater": [], "tests.plot_early_recompute.make_repeater.repeat": ["tests.plot_early_recompute.make_worker.worker", "time.sleep", "time.time"], "tests.plot_early_recompute.frange": [], "tests.plot_early_recompute.plot": ["matplotlib.pyplot.subplots", "<builtin>.max", "tests.plot_early_recompute.frange", "<builtin>.min", "matplotlib.pyplot.savefig"], "<builtin>.min": [], "<builtin>.max": [], "tests.plot_early_recompute.main": ["tests.plot_early_recompute.make_repeater", "tests.plot_early_recompute.plot", "shutil.rmtree", "diskcache.memoize_stampede", "tests.plot_early_recompute.make_worker", "tests.plot_early_recompute.make_worker.worker", "<builtin>.reversed", "diskcache.barrier", "tests.plot_early_recompute.make_timer", "diskcache.Cache", "<builtin>.print"], "diskcache.barrier": [], "tests.utils": [], "tests.utils.percentile": ["<builtin>.int", "<builtin>.sorted", "<builtin>.len"], "tests.utils.secs": [], "tests.utils.run": ["subprocess.check_output", "<builtin>.print"], "tests.utils.mount_ramdisk": ["tests.utils.run", "os.makedirs"], "os.makedirs": [], "tests.utils.unmount_ramdisk": ["tests.utils.run"], "tests.utils.display": ["tests.utils.secs", "<builtin>.sum", "<builtin>.len", "tests.utils.percentile", "<builtin>.print"], "tests.test_deque": ["pytest.fixture"], "tests.test_deque.rmdir": ["shutil.rmtree"], "tests.test_deque.deque": ["diskcache.Deque", "tests.test_deque.rmdir"], "tests.test_deque.test_init": ["<builtin>.list", "tests.test_deque.rmdir", "diskcache.Deque", "tempfile.mkdtemp"], "tests.test_deque.test_getsetdel": ["<builtin>.list", "<builtin>.range", "<builtin>.len"], "tests.test_deque.test_index_positive": ["unittest.mock.MagicMock", "unittest.mock.patch.object"], "unittest.mock.MagicMock": [], "tests.test_deque.test_index_negative": ["unittest.mock.MagicMock", "unittest.mock.patch.object"], "tests.test_deque.test_index_out_of_range": ["unittest.mock.MagicMock", "unittest.mock.patch.object", "pytest.raises"], "tests.test_deque.test_iter_keyerror": ["unittest.mock.MagicMock", "<builtin>.iter", "unittest.mock.patch.object", "<builtin>.list"], "tests.test_deque.test_reversed": ["<builtin>.list", "<builtin>.reversed"], "tests.test_deque.test_reversed_keyerror": ["unittest.mock.MagicMock", "<builtin>.reversed", "unittest.mock.patch.object", "<builtin>.list"], "tests.test_deque.test_state": ["<builtin>.list", "pickle.dumps", "pickle.loads"], "tests.test_deque.test_compare": [], "tests.test_deque.test_indexerror_negative": ["pytest.raises"], "tests.test_deque.test_indexerror": ["pytest.raises"], "tests.test_deque.test_repr": ["diskcache.Deque", "<builtin>.repr", "tempfile.mkdtemp"], "tests.test_deque.test_count": ["<builtin>.enumerate"], "tests.test_deque.test_extend": ["<builtin>.list"], "tests.test_deque.test_extendleft": ["<builtin>.list", "<builtin>.reversed"], "tests.test_deque.test_pop": ["<builtin>.list"], "tests.test_deque.test_pop_indexerror": ["pytest.raises"], "tests.test_deque.test_popleft": ["<builtin>.list"], "tests.test_deque.test_popleft_indexerror": ["pytest.raises"], "tests.test_deque.test_remove": [], "tests.test_deque.test_remove_valueerror": ["pytest.raises"], "tests.test_deque.test_remove_keyerror": ["unittest.mock.MagicMock", "unittest.mock.patch.object"], "tests.test_deque.test_reverse": [], "tests.test_deque.test_rotate_typeerror": ["pytest.raises"], "tests.test_deque.test_rotate": [], "tests.test_deque.test_rotate_negative": [], "tests.test_deque.test_rotate_indexerror": ["unittest.mock.MagicMock", "unittest.mock.patch.object"], "tests.test_deque.test_rotate_indexerror_negative": ["unittest.mock.MagicMock", "unittest.mock.patch.object"], "tests.test_djangocache": ["os.getpid", "django.setup", "os.environ.setdefault"], "tests.test_djangocache.f": [], "tests.test_djangocache.C.m": [], "tests.test_djangocache.Unpicklable.__getstate__": ["pickle.PickleError"], "pickle.PickleError": [], "tests.test_djangocache.empty_response": ["django.http.HttpResponse"], "django.http.HttpResponse": [], "tests.test_djangocache.custom_key_func": [], "tests.test_djangocache.caches_setting_for_tests": ["<builtin>.set"], "django.test.RequestFactory": [], "tests.test_djangocache.BaseCacheTests": ["django.test.RequestFactory"], "tests.test_djangocache.BaseCacheTests.tearDown": ["django.core.cache.cache.clear"], "django.core.cache.cache.clear": [], "tests.test_djangocache.BaseCacheTests.test_simple": ["django.core.cache.cache.get", "django.core.cache.cache.set"], "django.core.cache.cache.set": [], "tests.test_djangocache.BaseCacheTests.test_default_used_when_none_is_set": ["django.core.cache.cache.get", "django.core.cache.cache.set"], "tests.test_djangocache.BaseCacheTests.test_add": ["django.core.cache.cache.get", "django.core.cache.cache.add"], "django.core.cache.cache.add": [], "tests.test_djangocache.BaseCacheTests.test_prefix": ["django.core.cache.cache.get", "django.core.cache.cache.set"], "tests.test_djangocache.BaseCacheTests.test_non_existent": ["django.core.cache.cache.get"], "tests.test_djangocache.BaseCacheTests.test_get_many": ["<builtin>.iter", "django.core.cache.cache.get_many", "django.core.cache.cache.set_many"], "django.core.cache.cache.set_many": [], "django.core.cache.cache.get_many": [], "tests.test_djangocache.BaseCacheTests.test_delete": ["django.core.cache.cache.get", "django.core.cache.cache.set_many", "django.core.cache.cache.delete"], "django.core.cache.cache.delete": [], "tests.test_djangocache.BaseCacheTests.test_delete_nonexistent": ["django.core.cache.cache.delete"], "tests.test_djangocache.BaseCacheTests.test_has_key": ["django.core.cache.cache.has_key", "django.core.cache.cache.set"], "django.core.cache.cache.has_key": [], "tests.test_djangocache.BaseCacheTests.test_in": ["django.core.cache.cache.set"], "tests.test_djangocache.BaseCacheTests.test_incr": ["django.core.cache.cache.get", "django.core.cache.cache.incr", "django.core.cache.cache.set"], "django.core.cache.cache.incr": [], "tests.test_djangocache.BaseCacheTests.test_decr": ["django.core.cache.cache.get", "django.core.cache.cache.decr", "django.core.cache.cache.set"], "django.core.cache.cache.decr": [], "tests.test_djangocache.BaseCacheTests.test_close": ["<builtin>.hasattr", "django.core.cache.cache.close"], "<builtin>.hasattr": [], "django.core.cache.cache.close": [], "tests.test_djangocache.BaseCacheTests.test_data_types": ["django.core.cache.cache.get", "django.core.cache.cache.set"], "tests.test_djangocache.BaseCacheTests.test_cache_read_for_model_instance": ["models.Poll.objects.count", "django.core.cache.cache.get", "models.Poll.objects.create", "django.core.cache.cache.set", "models.Poll.objects.all"], "models.Poll.objects.all": [], "models.Poll.objects.create": [], "models.Poll.objects.count": [], "tests.test_djangocache.BaseCacheTests.test_cache_write_for_model_instance_with_deferred": ["models.Poll.objects.create", "models.Poll.objects.all", "django.core.cache.cache.set"], "tests.test_djangocache.BaseCacheTests.test_cache_read_for_model_instance_with_deferred": ["django.core.cache.cache.get", "models.Poll.objects.create", "models.Poll.objects.all", "django.core.cache.cache.set"], "tests.test_djangocache.BaseCacheTests.test_expiration": ["time.sleep", "django.core.cache.cache.get", "django.core.cache.cache.add", "django.core.cache.cache.set", "django.core.cache.cache.has_key"], "tests.test_djangocache.BaseCacheTests.test_touch": ["django.core.cache.cache.has_key", "django.core.cache.cache.set", "time.sleep", "django.core.cache.cache.touch"], "django.core.cache.cache.touch": [], "tests.test_djangocache.BaseCacheTests.test_unicode": ["django.core.cache.cache.get", "django.core.cache.cache.delete", "django.core.cache.cache.add", "django.core.cache.cache.set", "django.core.cache.cache.set_many"], "tests.test_djangocache.BaseCacheTests.test_binary_string": ["django.core.cache.cache.get", "zlib.decompress", "django.core.cache.cache.add", "zlib.compress", "django.core.cache.cache.set", "django.core.cache.cache.set_many"], "zlib.compress": [], "zlib.decompress": [], "tests.test_djangocache.BaseCacheTests.test_set_many": ["django.core.cache.cache.get", "django.core.cache.cache.set_many"], "tests.test_djangocache.BaseCacheTests.test_set_many_returns_empty_list_on_success": ["django.core.cache.cache.set_many"], "tests.test_djangocache.BaseCacheTests.test_set_many_expiration": ["django.core.cache.cache.get", "django.core.cache.cache.set_many", "time.sleep"], "tests.test_djangocache.BaseCacheTests.test_delete_many": ["django.core.cache.cache.delete_many", "django.core.cache.cache.get", "django.core.cache.cache.set_many"], "django.core.cache.cache.delete_many": [], "tests.test_djangocache.BaseCacheTests.test_clear": ["django.core.cache.cache.get", "django.core.cache.cache.set_many", "django.core.cache.cache.clear"], "tests.test_djangocache.BaseCacheTests.test_long_timeout": ["django.core.cache.cache.get", "django.core.cache.cache.add", "django.core.cache.cache.set", "django.core.cache.cache.set_many"], "tests.test_djangocache.BaseCacheTests.test_forever_timeout": ["time.sleep", "django.core.cache.cache.get", "django.core.cache.cache.add", "django.core.cache.cache.set", "django.core.cache.cache.set_many", "django.core.cache.cache.touch"], "tests.test_djangocache.BaseCacheTests.test_zero_timeout": ["django.core.cache.cache.get", "django.core.cache.cache.add", "django.core.cache.cache.set", "django.core.cache.cache.set_many", "django.core.cache.cache.touch"], "tests.test_djangocache.BaseCacheTests.test_float_timeout": ["django.core.cache.cache.get", "django.core.cache.cache.set"], "tests.test_djangocache.BaseCacheTests._perform_cull_test": ["<builtin>.range"], "tests.test_djangocache.BaseCacheTests.test_cull": ["tests.test_djangocache.BaseCacheTests._perform_cull_test"], "tests.test_djangocache.BaseCacheTests.test_zero_cull": ["tests.test_djangocache.BaseCacheTests._perform_cull_test"], "tests.test_djangocache.BaseCacheTests.test_cull_delete_when_store_empty": [], "tests.test_djangocache.BaseCacheTests._perform_invalid_key_test": ["<builtin>.str", "<builtin>.getattr"], "tests.test_djangocache.BaseCacheTests._perform_invalid_key_test.func": [], "tests.test_djangocache.BaseCacheTests.test_invalid_key_characters": ["tests.test_djangocache.BaseCacheTests._perform_invalid_key_test"], "tests.test_djangocache.BaseCacheTests.test_invalid_key_length": ["tests.test_djangocache.BaseCacheTests._perform_invalid_key_test"], "tests.test_djangocache.BaseCacheTests.test_cache_versioning_get_set": ["django.core.cache.cache.get", "django.core.cache.cache.set"], "tests.test_djangocache.BaseCacheTests.test_cache_versioning_add": ["django.core.cache.cache.get", "django.core.cache.cache.add"], "tests.test_djangocache.BaseCacheTests.test_cache_versioning_has_key": ["django.core.cache.cache.has_key", "django.core.cache.cache.set"], "tests.test_djangocache.BaseCacheTests.test_cache_versioning_delete": ["django.core.cache.cache.get", "django.core.cache.cache.set", "django.core.cache.cache.delete"], "tests.test_djangocache.BaseCacheTests.test_cache_versioning_incr_decr": ["django.core.cache.cache.get", "django.core.cache.cache.incr", "django.core.cache.cache.decr", "django.core.cache.cache.set"], "tests.test_djangocache.BaseCacheTests.test_cache_versioning_get_set_many": ["django.core.cache.cache.get_many", "django.core.cache.cache.set_many"], "tests.test_djangocache.BaseCacheTests.test_incr_version": ["django.core.cache.cache.get", "django.core.cache.cache.set", "django.core.cache.cache.incr_version"], "django.core.cache.cache.incr_version": [], "tests.test_djangocache.BaseCacheTests.test_decr_version": ["django.core.cache.cache.get", "django.core.cache.cache.set", "django.core.cache.cache.decr_version"], "django.core.cache.cache.decr_version": [], "tests.test_djangocache.BaseCacheTests.test_custom_key_func": ["django.core.cache.cache.get", "django.core.cache.cache.set"], "tests.test_djangocache.BaseCacheTests.test_cache_write_unpicklable_object": ["django.middleware.cache.UpdateCacheMiddleware", "django.middleware.cache.FetchFromCacheMiddleware"], "django.middleware.cache.FetchFromCacheMiddleware": [], "tests.test_djangocache.BaseCacheTests.test_cache_write_unpicklable_object.get_response": ["django.http.HttpResponse"], "django.middleware.cache.UpdateCacheMiddleware": [], "tests.test_djangocache.BaseCacheTests.test_cache_write_unpicklable_object.<lambda1>": [], "tests.test_djangocache.BaseCacheTests.test_add_fail_on_pickleerror": ["django.core.cache.cache.add"], "tests.test_djangocache.BaseCacheTests.test_set_fail_on_pickleerror": ["django.core.cache.cache.set"], "tests.test_djangocache.BaseCacheTests.test_get_or_set": ["django.core.cache.cache.get", "django.core.cache.cache.get_or_set"], "django.core.cache.cache.get_or_set": [], "tests.test_djangocache.BaseCacheTests.test_get_or_set_callable": ["django.core.cache.cache.get", "tests.test_djangocache.BaseCacheTests.test_get_or_set_callable.my_callable", "django.core.cache.cache.get_or_set"], "tests.test_djangocache.BaseCacheTests.test_get_or_set_callable.my_callable": [], "tests.test_djangocache.BaseCacheTests.test_get_or_set_callable.<lambda1>": [], "tests.test_djangocache.BaseCacheTests.test_get_or_set_version": ["django.core.cache.cache.get", "django.core.cache.cache.get_or_set"], "tests.test_djangocache.BaseCacheTests.test_get_or_set_racing": ["unittest.mock.patch", "django.core.cache.cache.get_or_set"], "tests.test_djangocache.PicklingSideEffect.__init__": [], "tests.test_djangocache.PicklingSideEffect.__getstate__": [], "tests.test_djangocache.DiskCacheTests.setUp": ["django.test.signals.setting_changed.send", "django.conf.settings.CACHES.values", "<builtin>.super", "tempfile.mkdtemp"], "<builtin>.super": [], "django.conf.settings.CACHES.values": [], "django.test.signals.setting_changed.send": [], "tests.test_djangocache.DiskCacheTests.tearDown": ["django.core.cache.cache.close", "<builtin>.super", "shutil.rmtree"], "tests.test_djangocache.DiskCacheTests.test_ignores_non_cache_files": ["<builtin>.open", "os.utime", "os.path.exists", "django.core.cache.cache.clear", "os.remove", "os.path.join", "django.test.TestCase.assertTrue"], "os.utime": [], "os.path.exists": [], "django.test.TestCase.assertTrue": [], "tests.test_djangocache.DiskCacheTests.test_creates_cache_dir_if_nonexistent": ["django.test.TestCase.assertTrue", "django.core.cache.cache.set", "os.rmdir", "os.path.exists"], "os.rmdir": [], "tests.test_djangocache.DiskCacheTests.test_clear_does_not_remove_cache_dir": ["os.path.exists", "django.core.cache.cache.clear", "django.test.TestCase.assertTrue"], "tests.test_djangocache.DiskCacheTests.test_cache_write_unpicklable_type": ["django.core.cache.cache.set"], "tests.test_djangocache.DiskCacheTests.test_cull": ["django.core.cache.cache.cull"], "django.core.cache.cache.cull": [], "tests.test_djangocache.DiskCacheTests.test_zero_cull": [], "tests.test_djangocache.DiskCacheTests.test_invalid_key_characters": [], "tests.test_djangocache.DiskCacheTests.test_invalid_key_length": [], "tests.test_djangocache.DiskCacheTests.test_directory": ["django.test.TestCase.assertTrue"], "tests.test_djangocache.DiskCacheTests.test_read": ["django.test.TestCase.assertEqual", "django.core.cache.cache.read", "django.core.cache.cache.set", "django.test.TestCase.assertTrue"], "django.core.cache.cache.read": [], "django.test.TestCase.assertEqual": [], "tests.test_djangocache.DiskCacheTests.test_expire": ["django.test.TestCase.assertEqual", "time.sleep", "django.core.cache.cache.get", "django.core.cache.cache.set", "django.core.cache.cache.clear", "django.core.cache.cache.expire"], "django.core.cache.cache.expire": [], "tests.test_djangocache.DiskCacheTests.test_evict": ["django.test.TestCase.assertEqual", "django.core.cache.cache.drop_tag_index", "django.core.cache.cache.get", "django.core.cache.cache.create_tag_index", "django.core.cache.cache.set", "django.core.cache.cache.clear", "django.core.cache.cache.evict", "<builtin>.range"], "django.core.cache.cache.evict": [], "django.core.cache.cache.create_tag_index": [], "django.core.cache.cache.drop_tag_index": [], "tests.test_djangocache.DiskCacheTests.test_pop": ["django.test.TestCase.assertEqual", "django.core.cache.cache.set", "django.core.cache.cache.clear", "<builtin>.range", "django.core.cache.cache.pop"], "django.core.cache.cache.pop": [], "tests.test_djangocache.DiskCacheTests.test_cache": ["django.core.cache.cache.cache", "django.test.TestCase.assertEqual", "os.path.join"], "django.core.cache.cache.cache": [], "tests.test_djangocache.DiskCacheTests.test_deque": ["django.test.TestCase.assertEqual", "django.core.cache.cache.deque", "os.path.join"], "django.core.cache.cache.deque": [], "tests.test_djangocache.DiskCacheTests.test_index": ["os.path.join", "django.core.cache.cache.index", "django.test.TestCase.assertEqual"], "django.core.cache.cache.index": [], "tests.test_djangocache.DiskCacheTests.test_memoize": ["django.core.cache.cache.memoize", "django.test.TestCase.assertEqual", "tests.test_djangocache.DiskCacheTests.test_memoize.fibiter", "django.core.cache.cache.stats", "django.test.TestCase.assertRaises", "tests.test_djangocache.DiskCacheTests.test_memoize.fibrec", "<builtin>.range"], "django.test.TestCase.assertRaises": [], "django.core.cache.cache.memoize": [], "tests.test_djangocache.DiskCacheTests.test_memoize.test": [], "tests.test_djangocache.DiskCacheTests.test_memoize.fibiter": ["<builtin>.range"], "tests.test_djangocache.DiskCacheTests.test_memoize.fibrec": ["tests.test_djangocache.DiskCacheTests.test_memoize.fibrec"], "django.core.cache.cache.stats": [], "tests.stress_test_deque_mp": ["tests.stress_test_deque_mp.test", "tests.stress_test_deque_mp.register"], "tests.stress_test_deque_mp.register": [], "tests.stress_test_deque_mp.stress_get": ["random.randrange", "<builtin>.len", "<builtin>.max"], "tests.stress_test_deque_mp.stress_set": ["random.random", "random.randrange", "<builtin>.len", "<builtin>.max"], "tests.stress_test_deque_mp.stress_del": ["random.randrange", "<builtin>.len", "<builtin>.max"], "tests.stress_test_deque_mp.stress_iadd": ["random.random", "<builtin>.range"], "tests.stress_test_deque_mp.stress_append": ["random.random"], "tests.stress_test_deque_mp.stress_appendleft": ["random.random"], "tests.stress_test_deque_mp.stress_pop": [], "tests.stress_test_deque_mp.stress_popleft": [], "tests.stress_test_deque_mp.stress_reverse": [], "tests.stress_test_deque_mp.stress_rotate": ["random.randrange", "<builtin>.len", "<builtin>.max"], "tests.stress_test_deque_mp.stress": ["random.seed", "random.choice", "<builtin>.range", "<builtin>.len"], "tests.stress_test_deque_mp.test": ["<builtin>.all", "time.sleep", "itertools.count", "<builtin>.len", "diskcache.Deque", "random.seed", "<builtin>.range", "multiprocessing.Process", "<builtin>.print"]}