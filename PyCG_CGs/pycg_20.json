{"tests.entrypoints.test_alias": ["pytest.mark.parametrize"], "pytest.mark.parametrize": [], "tests.entrypoints.test_alias.test_get_alias": ["mock.Mock", "thefuck.entrypoints.alias._get_alias"], "mock.Mock": [], "tests.entrypoints.test_alias.test_get_alias.<lambda1>": [], "tests.entrypoints.test_alias.test_get_alias.<lambda2>": [], "thefuck.entrypoints.alias._get_alias": [], "tests.entrypoints.test_alias.test_print_alias": ["mock.Mock", "thefuck.entrypoints.alias.print_alias"], "thefuck.entrypoints.alias.print_alias": [], "tests.entrypoints": [], "tests.entrypoints.test_not_configured": ["pytest.fixture"], "pytest.fixture": [], "tests.entrypoints.test_not_configured.usage_tracker": [], "tests.entrypoints.test_not_configured.usage_tracker_io": ["six.StringIO"], "six.StringIO": [], "tests.entrypoints.test_not_configured.usage_tracker_exists": [], "tests.entrypoints.test_not_configured._assert_tracker_updated": ["json.load"], "json.load": [], "tests.entrypoints.test_not_configured._change_tracker": ["json.dump"], "json.dump": [], "tests.entrypoints.test_not_configured.shell_pid": [], "tests.entrypoints.test_not_configured.shell": ["thefuck.shells.generic.ShellConfiguration"], "thefuck.shells.generic.ShellConfiguration": [], "tests.entrypoints.test_not_configured.shell_config": [], "tests.entrypoints.test_not_configured.logs": [], "tests.entrypoints.test_not_configured.test_for_generic_shell": ["thefuck.entrypoints.not_configured.main"], "thefuck.entrypoints.not_configured.main": [], "tests.entrypoints.test_not_configured.test_on_first_run": ["tests.entrypoints.test_not_configured._assert_tracker_updated", "thefuck.entrypoints.not_configured.main"], "tests.entrypoints.test_not_configured.test_on_run_after_other_commands": ["thefuck.entrypoints.not_configured.main", "tests.entrypoints.test_not_configured._change_tracker"], "tests.entrypoints.test_not_configured.test_on_first_run_from_current_shell": ["tests.entrypoints.test_not_configured._assert_tracker_updated", "thefuck.entrypoints.not_configured.main"], "tests.entrypoints.test_not_configured.test_when_cant_configure_automatically": ["thefuck.shells.generic.ShellConfiguration", "thefuck.entrypoints.not_configured.main"], "tests.entrypoints.test_not_configured.test_when_already_configured": ["thefuck.entrypoints.not_configured.main", "tests.entrypoints.test_not_configured._change_tracker"], "tests.entrypoints.test_not_configured.test_when_successfully_configured": ["thefuck.entrypoints.not_configured.main", "tests.entrypoints.test_not_configured._change_tracker"], "tests.entrypoints.test_fix_command": [], "tests.entrypoints.test_fix_command.TestGetRawCommand.test_from_force_command_argument": ["mock.Mock", "thefuck.entrypoints.fix_command._get_raw_command"], "thefuck.entrypoints.fix_command._get_raw_command": [], "tests.entrypoints.test_fix_command.TestGetRawCommand.test_from_command_argument": ["mock.Mock", "thefuck.entrypoints.fix_command._get_raw_command"], "tests.entrypoints.test_fix_command.TestGetRawCommand": ["pytest.mark.parametrize"], "tests.entrypoints.test_fix_command.TestGetRawCommand.test_from_history": ["mock.Mock", "thefuck.entrypoints.fix_command._get_raw_command"], "tests.test_corrector": ["pytest.fixture"], "tests.test_corrector.glob": [], "tests.test_corrector.glob.<lambda1>": [], "tests.test_corrector.glob.<lambda1>.<lambda1>": [], "tests.test_corrector.glob.<lambda2>": [], "tests.test_corrector.TestGetRules": ["pytest.mark.parametrize", "pytest.fixture"], "tests.test_corrector.TestGetRules.load_source": [], "tests.test_corrector.TestGetRules.load_source.<lambda1>": ["tests.utils.Rule"], "tests.utils.Rule": [], "tests.test_corrector.TestGetRules._compare_names": ["<builtin>.set"], "<builtin>.set": [], "tests.test_corrector.TestGetRules.test_get_rules": ["thefuck.system.Path", "tests.test_corrector.TestGetRules._compare_names", "thefuck.corrector.get_rules"], "thefuck.system.Path": [], "thefuck.corrector.get_rules": [], "tests.test_corrector.test_get_rules_rule_exception": ["thefuck.system.Path", "<builtin>.ImportError", "thefuck.corrector.get_rules"], "<builtin>.ImportError": [], "tests.test_corrector.test_get_corrected_commands": ["tests.utils.Rule", "thefuck.types.Command", "thefuck.corrector.get_corrected_commands"], "thefuck.types.Command": [], "tests.test_corrector.test_get_corrected_commands.<list1>.<lambda1>": [], "tests.test_corrector.test_get_corrected_commands.<list1>.<lambda2>": [], "tests.test_corrector.test_get_corrected_commands.<list1>.<lambda3>": [], "tests.test_corrector.test_get_corrected_commands.<list1>.<lambda4>": [], "tests.test_corrector.test_get_corrected_commands.<list1>.<lambda5>": [], "thefuck.corrector.get_corrected_commands": [], "tests.test_corrector.test_organize_commands": ["tests.utils.CorrectedCommand", "<builtin>.list", "thefuck.corrector.organize_commands", "<builtin>.iter"], "tests.utils.CorrectedCommand": [], "<builtin>.iter": [], "thefuck.corrector.organize_commands": [], "<builtin>.list": [], "tests.test_utils": ["pytest.mark.parametrize", "pytest.fixture", "pytest.mark.usefixtures"], "tests.test_utils.test_default_settings": ["thefuck.utils.default_settings"], "tests.test_utils.test_default_settings.<lambda1>": [], "thefuck.utils.default_settings": [], "tests.test_utils.test_memoize": ["mock.Mock", "thefuck.utils.memoize"], "thefuck.utils.memoize": [], "pytest.mark.usefixtures": [], "tests.test_utils.test_no_memoize": ["mock.Mock", "thefuck.utils.memoize"], "tests.test_utils.TestGetClosest.test_when_can_match": ["thefuck.utils.get_closest"], "thefuck.utils.get_closest": [], "tests.test_utils.TestGetClosest.test_when_cant_match": ["thefuck.utils.get_closest"], "tests.test_utils.TestGetClosest.test_without_fallback": ["thefuck.utils.get_closest"], "mock.patch": [], "tests.test_utils.TestGetCloseMatches": ["mock.patch"], "tests.test_utils.TestGetCloseMatches.test_call_with_n": ["thefuck.utils.get_close_matches"], "thefuck.utils.get_close_matches": [], "tests.test_utils.TestGetCloseMatches.test_call_without_n": ["thefuck.utils.get_close_matches"], "tests.test_utils.get_aliases": [], "tests.test_utils.test_get_all_executables": ["thefuck.utils.get_all_executables"], "thefuck.utils.get_all_executables": [], "tests.test_utils.os_environ_pathsep": [], "tests.test_utils.test_get_all_executables_pathsep": ["thefuck.utils.get_all_executables", "mock.call", "mock.patch"], "mock.call": [], "tests.test_utils.test_get_all_executables_exclude_paths": ["thefuck.utils.get_all_executables", "<builtin>.all", "mock.call", "mock.patch"], "<builtin>.all": [], "tests.test_utils.test_replace_argument": ["thefuck.utils.replace_argument"], "thefuck.utils.replace_argument": [], "tests.test_utils.test_get_all_matched_commands": ["<builtin>.list", "thefuck.utils.get_all_matched_commands"], "thefuck.utils.get_all_matched_commands": [], "tests.test_utils.test_is_app": ["thefuck.utils.is_app", "thefuck.types.Command"], "thefuck.utils.is_app": [], "tests.test_utils.test_for_app": ["tests.test_utils.test_for_app.match", "thefuck.types.Command", "thefuck.utils.for_app"], "thefuck.utils.for_app": [], "tests.test_utils.test_for_app.match": [], "tests.test_utils.TestCache": ["pytest.fixture"], "tests.test_utils.TestCache.shelve": [], "tests.test_utils.TestCache.shelve._Shelve.__init__": [], "tests.test_utils.TestCache.shelve._Shelve.__setitem__": [], "tests.test_utils.TestCache.shelve._Shelve.__getitem__": [], "tests.test_utils.TestCache.shelve._Shelve.get": [], "tests.test_utils.TestCache.shelve._Shelve.close": [], "tests.test_utils.TestCache.shelve.<lambda1>": [], "tests.test_utils.TestCache.enable_cache": ["thefuck.utils._cache._init_db"], "thefuck.utils._cache._init_db": [], "tests.test_utils.TestCache.mtime": [], "tests.test_utils.TestCache.fn": ["thefuck.utils.cache"], "thefuck.utils.cache": [], "tests.test_utils.TestCache.fn.fn": [], "tests.test_utils.TestCache.key": [], "tests.test_utils.TestCache.key.<lambda1>": [], "tests.test_utils.TestCache.test_with_blank_cache": [], "tests.test_utils.TestCache.test_with_filled_cache": [], "tests.test_utils.TestCache.test_when_etag_changed": [], "tests.test_utils.TestGetValidHistoryWithoutCurrent": ["pytest.mark.parametrize", "pytest.fixture"], "tests.test_utils.TestGetValidHistoryWithoutCurrent.fail_on_warning": ["warnings.resetwarnings", "warnings.simplefilter"], "warnings.simplefilter": [], "warnings.resetwarnings": [], "tests.test_utils.TestGetValidHistoryWithoutCurrent.history": [], "tests.test_utils.TestGetValidHistoryWithoutCurrent.alias": [], "tests.test_utils.TestGetValidHistoryWithoutCurrent.bins": ["<builtin>.list"], "tests.test_utils.TestGetValidHistoryWithoutCurrent.bins.<lambda1>": [], "tests.test_utils.TestGetValidHistoryWithoutCurrent.test_get_valid_history_without_current": ["thefuck.types.Command", "thefuck.utils.get_valid_history_without_current"], "thefuck.utils.get_valid_history_without_current": [], "tests.specific.test_npm": ["pytest.mark.usefixtures"], "tests.specific.test_npm.test_get_scripts": ["thefuck.specific.npm.get_scripts", "io.BytesIO"], "io.BytesIO": [], "thefuck.specific.npm.get_scripts": [], "tests.specific.test_sudo": ["pytest.mark.parametrize"], "tests.specific.test_sudo.test_sudo_support": ["thefuck.specific.sudo.sudo_support", "thefuck.types.Command"], "tests.specific.test_sudo.test_sudo_support.fn": ["thefuck.types.Command"], "thefuck.specific.sudo.sudo_support": [], "tests.specific": [], "tests.specific.test_git": ["pytest.mark.parametrize"], "tests.specific.test_git.test_git_support": ["tests.specific.test_git.test_git_support.fn", "thefuck.types.Command", "thefuck.specific.git.git_support"], "thefuck.specific.git.git_support": [], "tests.specific.test_git.test_git_support.fn": [], "tests.specific.test_git.test_git_support_match": ["tests.specific.test_git.test_git_support_match.fn", "thefuck.types.Command", "thefuck.specific.git.git_support"], "tests.specific.test_git.test_git_support_match.fn": [], "tests.conftest": ["thefuck.shells.Generic", "pytest.fixture"], "thefuck.shells.Generic": [], "tests.conftest.pytest_configure": [], "tests.conftest.pytest_addoption": [], "tests.conftest.no_memoize": [], "tests.conftest.settings": ["thefuck.system.Path"], "tests.conftest.settings._reset_settings": ["thefuck.conf.settings.update", "thefuck.conf.settings.clear"], "thefuck.conf.settings.clear": [], "thefuck.conf.settings.update": [], "tests.conftest.no_colors": [], "tests.conftest.no_cache": [], "tests.conftest.functional": ["pytest.skip"], "pytest.skip": [], "tests.conftest.source_root": ["thefuck.system.Path"], "tests.conftest.set_shell": [], "tests.conftest.set_shell._set": [], "tests.conftest.os_environ": [], "tests.test_readme": [], "tests.test_readme.test_readme": [], "tests.test_types": [], "tests.test_types.TestCorrectedCommand.test_equality": ["tests.utils.CorrectedCommand"], "tests.test_types.TestCorrectedCommand.test_equality.<lambda1>": [], "tests.test_types.TestCorrectedCommand.test_hashable": ["tests.utils.CorrectedCommand"], "tests.test_types.TestCorrectedCommand.test_representable": ["tests.utils.CorrectedCommand"], "tests.test_types.TestCorrectedCommand": ["pytest.mark.parametrize"], "tests.test_types.TestCorrectedCommand.test_run": ["tests.utils.CorrectedCommand", "thefuck.types.Command"], "tests.test_types.TestRule.test_from_path_rule_exception": ["thefuck.system.Path", "tests.utils.Rule.from_path", "<builtin>.ImportError"], "tests.utils.Rule.from_path": [], "tests.test_types.TestRule.test_from_path": ["mock.Mock", "tests.utils.Rule.from_path", "thefuck.system.Path", "tests.utils.Rule", "<builtin>.object", "os.path.join"], "<builtin>.object": [], "os.path.join": [], "tests.test_types.TestRule.test_from_path_excluded_rule": ["thefuck.system.Path", "tests.utils.Rule.from_path", "os.path.join"], "tests.test_types.TestRule": ["pytest.mark.parametrize", "pytest.mark.usefixtures"], "tests.test_types.TestRule.test_is_enabled": [], "tests.test_types.TestRule.test_isnt_match": ["tests.utils.Rule", "thefuck.types.Command"], "tests.test_types.TestRule.test_isnt_match.<lambda1>": [], "tests.test_types.TestRule.test_is_match": ["tests.utils.Rule", "thefuck.types.Command"], "tests.test_types.TestRule.test_is_match.<lambda1>": [], "tests.test_types.TestRule.test_isnt_match_when_rule_failed": ["mock.Mock", "tests.utils.Rule", "<builtin>.OSError", "thefuck.types.Command"], "<builtin>.OSError": [], "tests.test_types.TestRule.test_get_corrected_commands_with_rule_returns_list": ["tests.utils.CorrectedCommand", "tests.utils.Rule", "<builtin>.list", "thefuck.types.Command"], "tests.test_types.TestRule.test_get_corrected_commands_with_rule_returns_list.<lambda1>": [], "tests.test_types.TestRule.test_get_corrected_commands_with_rule_returns_command": ["tests.utils.CorrectedCommand", "tests.utils.Rule", "<builtin>.list", "thefuck.types.Command"], "tests.test_types.TestRule.test_get_corrected_commands_with_rule_returns_command.<lambda1>": [], "tests.test_types.TestCommand": ["pytest.mark.parametrize", "pytest.fixture"], "tests.test_types.TestCommand.Popen": ["mock.Mock"], "tests.test_types.TestCommand.prepare": [], "tests.test_types.TestCommand.prepare.<lambda1>": [], "tests.test_types.TestCommand.test_from_script_calls": ["thefuck.types.Command", "thefuck.types.Command.from_raw_script"], "thefuck.types.Command.from_raw_script": [], "tests.test_types.TestCommand.test_from_script": ["pytest.raises", "thefuck.types.Command.from_raw_script"], "pytest.raises": [], "tests.test_ui": ["pytest.fixture"], "tests.test_ui.patch_get_key": [], "tests.test_ui.patch_get_key.patch": ["<builtin>.iter"], "tests.test_ui.patch_get_key.patch.<lambda1>": ["<builtin>.next"], "<builtin>.next": [], "tests.test_ui.test_read_actions": ["thefuck.ui.read_actions", "<builtin>.list", "itertools.islice"], "thefuck.ui.read_actions": [], "itertools.islice": [], "tests.test_ui.test_command_selector": ["thefuck.ui.CommandSelector", "<builtin>.iter"], "thefuck.ui.CommandSelector": [], "tests.test_ui.TestSelectCommand": ["pytest.fixture"], "tests.test_ui.TestSelectCommand.commands_with_side_effect": ["thefuck.types.CorrectedCommand"], "tests.test_ui.TestSelectCommand.commands_with_side_effect.<list1>.<lambda1>": [], "thefuck.types.CorrectedCommand": [], "tests.test_ui.TestSelectCommand.commands_with_side_effect.<list1>.<lambda2>": [], "tests.test_ui.TestSelectCommand.commands": ["thefuck.types.CorrectedCommand"], "tests.test_ui.TestSelectCommand.test_without_commands": ["thefuck.ui.select_command", "<builtin>.iter"], "thefuck.ui.select_command": [], "tests.test_ui.TestSelectCommand.test_without_confirmation": ["thefuck.ui.select_command", "<builtin>.iter"], "tests.test_ui.TestSelectCommand.test_without_confirmation_with_side_effects": ["thefuck.ui.select_command", "<builtin>.iter"], "tests.test_ui.TestSelectCommand.test_with_confirmation": ["thefuck.ui.select_command", "<builtin>.iter"], "tests.test_ui.TestSelectCommand.test_with_confirmation_abort": ["thefuck.ui.select_command", "<builtin>.iter"], "tests.test_ui.TestSelectCommand.test_with_confirmation_with_side_effct": ["thefuck.ui.select_command", "<builtin>.iter"], "tests.test_ui.TestSelectCommand.test_with_confirmation_select_second": ["thefuck.ui.select_command", "<builtin>.iter"], "tests.test_logs": ["pytest.mark.usefixtures", "pytest.mark.parametrize"], "tests.test_logs.test_color": ["thefuck.logs.color"], "thefuck.logs.color": [], "tests.test_logs.test_debug": ["thefuck.logs.debug"], "thefuck.logs.debug": [], "tests": [], "tests.shells.test_generic": [], "tests.shells.test_generic.TestGeneric": ["pytest.mark.parametrize", "pytest.fixture"], "tests.shells.test_generic.TestGeneric.shell": ["thefuck.shells.Generic"], "tests.shells.test_generic.TestGeneric.test_from_shell": [], "tests.shells.test_generic.TestGeneric.test_to_shell": [], "tests.shells.test_generic.TestGeneric.test_and_": [], "tests.shells.test_generic.TestGeneric.test_or_": [], "tests.shells.test_generic.TestGeneric.test_get_aliases": [], "tests.shells.test_generic.TestGeneric.test_app_alias": [], "tests.shells.test_generic.TestGeneric.test_get_history": ["<builtin>.list"], "tests.shells.test_generic.TestGeneric.test_split_command": [], "tests.shells.test_generic.TestGeneric.test_how_to_configure": [], "tests.shells.test_generic.TestGeneric.test_info": [], "tests.shells.test_tcsh": [], "tests.shells.test_tcsh.TestTcsh": ["pytest.mark.parametrize", "pytest.fixture"], "tests.shells.test_tcsh.TestTcsh.shell": ["thefuck.shells.tcsh.Tcsh"], "thefuck.shells.tcsh.Tcsh": [], "tests.shells.test_tcsh.TestTcsh.Popen": [], "tests.shells.test_tcsh.TestTcsh.test_from_shell": [], "tests.shells.test_tcsh.TestTcsh.test_to_shell": [], "tests.shells.test_tcsh.TestTcsh.test_and_": [], "tests.shells.test_tcsh.TestTcsh.test_or_": [], "tests.shells.test_tcsh.TestTcsh.test_get_aliases": [], "tests.shells.test_tcsh.TestTcsh.test_app_alias": [], "tests.shells.test_tcsh.TestTcsh.test_get_history": ["<builtin>.list"], "tests.shells.test_tcsh.TestTcsh.test_how_to_configure": [], "tests.shells.test_tcsh.TestTcsh.test_how_to_configure_when_config_not_found": [], "tests.shells.test_tcsh.TestTcsh.test_info": [], "tests.shells.test_tcsh.TestTcsh.test_get_version_error": ["pytest.raises"], "tests.shells.conftest": ["pytest.mark.usefixtures", "pytest.fixture"], "tests.shells.conftest.builtins_open": [], "tests.shells.conftest.isfile": [], "tests.shells.conftest.history_lines": [], "tests.shells.conftest.history_lines.aux": [], "tests.shells.conftest.config_exists": [], "tests.shells.test_fish": [], "tests.shells.test_fish.TestFish": ["pytest.mark.parametrize", "pytest.fixture"], "tests.shells.test_fish.TestFish.shell": ["thefuck.shells.Fish"], "thefuck.shells.Fish": [], "tests.shells.test_fish.TestFish.Popen": [], "tests.shells.test_fish.TestFish.test_get_overridden_aliases": ["<builtin>.set"], "tests.shells.test_fish.TestFish.test_from_shell": [], "tests.shells.test_fish.TestFish.test_to_shell": [], "tests.shells.test_fish.TestFish.test_and_": [], "tests.shells.test_fish.TestFish.test_or_": [], "tests.shells.test_fish.TestFish.test_get_aliases": [], "tests.shells.test_fish.TestFish.test_app_alias": [], "tests.shells.test_fish.TestFish.test_app_alias_alter_history": [], "tests.shells.test_fish.TestFish.test_get_history": ["<builtin>.list"], "tests.shells.test_fish.TestFish.test_put_to_history": [], "tests.shells.test_fish.TestFish.test_how_to_configure": [], "tests.shells.test_fish.TestFish.test_how_to_configure_when_config_not_found": [], "tests.shells.test_fish.TestFish.test_get_version": [], "tests.shells.test_fish.TestFish.test_get_version_error": ["pytest.raises"], "tests.shells": [], "tests.shells.test_zsh": [], "tests.shells.test_zsh.TestZsh": ["pytest.mark.parametrize", "pytest.fixture"], "tests.shells.test_zsh.TestZsh.shell": ["thefuck.shells.zsh.Zsh"], "thefuck.shells.zsh.Zsh": [], "tests.shells.test_zsh.TestZsh.Popen": [], "tests.shells.test_zsh.TestZsh.shell_aliases": [], "tests.shells.test_zsh.TestZsh.test_from_shell": [], "tests.shells.test_zsh.TestZsh.test_to_shell": [], "tests.shells.test_zsh.TestZsh.test_and_": [], "tests.shells.test_zsh.TestZsh.test_or_": [], "tests.shells.test_zsh.TestZsh.test_get_aliases": [], "tests.shells.test_zsh.TestZsh.test_app_alias": [], "tests.shells.test_zsh.TestZsh.test_app_alias_variables_correctly_set": [], "tests.shells.test_zsh.TestZsh.test_get_history": ["<builtin>.list"], "tests.shells.test_zsh.TestZsh.test_how_to_configure": [], "tests.shells.test_zsh.TestZsh.test_how_to_configure_when_config_not_found": [], "tests.shells.test_zsh.TestZsh.test_info": [], "tests.shells.test_zsh.TestZsh.test_get_version_error": ["pytest.raises"], "tests.shells.test_bash": [], "tests.shells.test_bash.TestBash": ["pytest.mark.parametrize", "pytest.fixture"], "tests.shells.test_bash.TestBash.shell": ["thefuck.shells.Bash"], "thefuck.shells.Bash": [], "tests.shells.test_bash.TestBash.Popen": [], "tests.shells.test_bash.TestBash.shell_aliases": [], "tests.shells.test_bash.TestBash.test_from_shell": [], "tests.shells.test_bash.TestBash.test_to_shell": [], "tests.shells.test_bash.TestBash.test_and_": [], "tests.shells.test_bash.TestBash.test_or_": [], "tests.shells.test_bash.TestBash.test_get_aliases": [], "tests.shells.test_bash.TestBash.test_app_alias": [], "tests.shells.test_bash.TestBash.test_app_alias_variables_correctly_set": [], "tests.shells.test_bash.TestBash.test_get_history": ["<builtin>.list"], "tests.shells.test_bash.TestBash.test_split_command": [], "tests.shells.test_bash.TestBash.test_how_to_configure": [], "tests.shells.test_bash.TestBash.test_how_to_configure_when_config_not_found": [], "tests.shells.test_bash.TestBash.test_info": [], "tests.shells.test_bash.TestBash.test_get_version_error": ["pytest.raises"], "tests.shells.test_powershell": [], "tests.shells.test_powershell.TestPowershell": ["pytest.mark.parametrize", "pytest.fixture"], "tests.shells.test_powershell.TestPowershell.shell": ["thefuck.shells.Powershell"], "thefuck.shells.Powershell": [], "tests.shells.test_powershell.TestPowershell.Popen": [], "tests.shells.test_powershell.TestPowershell.test_and_": [], "tests.shells.test_powershell.TestPowershell.test_app_alias": [], "tests.shells.test_powershell.TestPowershell.test_how_to_configure": [], "tests.shells.test_powershell.TestPowershell.test_info": ["<builtin>.all", "<builtin>.len", "<builtin>.enumerate"], "<builtin>.len": [], "<builtin>.enumerate": [], "tests.shells.test_powershell.TestPowershell.test_get_version_error": ["pytest.raises"], "tests.output_readers.test_rerun": [], "tests.output_readers.test_rerun.TestRerun.setup_method": ["mock.Mock", "mock.patch"], "tests.output_readers.test_rerun.TestRerun.teardown_method": [], "tests.output_readers.test_rerun.TestRerun": ["mock.patch"], "tests.output_readers.test_rerun.TestRerun.test_get_output": ["thefuck.output_readers.rerun.get_output"], "thefuck.output_readers.rerun.get_output": [], "tests.output_readers.test_rerun.TestRerun.test_get_output_invalid_continuation_byte": ["thefuck.output_readers.rerun.get_output"], "tests.output_readers.test_rerun.TestRerun.test_get_output_unicode_misspell": ["thefuck.output_readers.rerun.get_output"], "tests.output_readers.test_rerun.TestRerun.test_wait_output_is_slow": ["mock.Mock", "thefuck.output_readers.rerun._wait_output"], "thefuck.output_readers.rerun._wait_output": [], "tests.output_readers.test_rerun.TestRerun.test_wait_output_is_not_slow": ["mock.Mock", "thefuck.output_readers.rerun._wait_output"], "tests.output_readers.test_rerun.TestRerun.test_wait_output_timeout": ["mock.Mock", "thefuck.output_readers.rerun._wait_output", "psutil.TimeoutExpired"], "psutil.TimeoutExpired": [], "tests.output_readers.test_rerun.TestRerun.test_wait_output_timeout_children": ["mock.Mock", "thefuck.output_readers.rerun._wait_output", "psutil.TimeoutExpired"], "tests.output_readers.test_rerun.TestRerun.test_kill_process": ["mock.Mock", "thefuck.output_readers.rerun._kill_process"], "thefuck.output_readers.rerun._kill_process": [], "tests.output_readers.test_rerun.TestRerun.test_kill_process_access_denied": ["mock.Mock", "thefuck.output_readers.rerun._kill_process", "psutil.AccessDenied"], "psutil.AccessDenied": [], "tests.functional.test_tcsh": ["pytest.fixture", "pytest.mark.functional"], "tests.functional.test_tcsh.proc": [], "pytest.mark.functional": [], "tests.functional.test_tcsh.test_with_confirmation": ["tests.functional.plots.with_confirmation"], "tests.functional.plots.with_confirmation": ["tests.functional.plots._set_confirmation"], "tests.functional.test_tcsh.test_select_command_with_arrows": ["tests.functional.plots.select_command_with_arrows"], "tests.functional.plots.select_command_with_arrows": ["tests.functional.plots._set_confirmation"], "tests.functional.test_tcsh.test_refuse_with_confirmation": ["tests.functional.plots.refuse_with_confirmation"], "tests.functional.plots.refuse_with_confirmation": ["tests.functional.plots._set_confirmation"], "tests.functional.test_tcsh.test_without_confirmation": ["tests.functional.plots.without_confirmation"], "tests.functional.plots.without_confirmation": ["tests.functional.plots._set_confirmation"], "tests.functional.test_fish": ["pytest.fixture", "pytest.mark.functional"], "tests.functional.test_fish.proc": [], "tests.functional.test_fish.test_with_confirmation": ["tests.functional.plots.with_confirmation"], "tests.functional.test_fish.test_select_command_with_arrows": ["tests.functional.plots.select_command_with_arrows"], "tests.functional.test_fish.test_refuse_with_confirmation": ["tests.functional.plots.refuse_with_confirmation"], "tests.functional.test_fish.test_without_confirmation": ["tests.functional.plots.without_confirmation"], "tests.functional": [], "tests.functional.test_zsh": ["pytest.fixture", "pytest.mark.functional"], "tests.functional.test_zsh.proc": [], "tests.functional.test_zsh.test_with_confirmation": ["tests.functional.plots.history_changed", "tests.functional.plots.with_confirmation"], "tests.functional.plots.history_changed": [], "tests.functional.test_zsh.test_select_command_with_arrows": ["tests.functional.plots.history_changed", "tests.functional.plots.select_command_with_arrows"], "tests.functional.test_zsh.test_refuse_with_confirmation": ["tests.functional.plots.refuse_with_confirmation", "tests.functional.plots.history_not_changed"], "tests.functional.plots.history_not_changed": [], "tests.functional.test_zsh.test_without_confirmation": ["tests.functional.plots.history_changed", "tests.functional.plots.without_confirmation"], "tests.functional.test_zsh.test_how_to_configure_alias": ["tests.functional.plots.how_to_configure"], "tests.functional.plots.how_to_configure": [], "tests.functional.plots": [], "tests.functional.plots._set_confirmation": [], "tests.functional.test_bash": ["pytest.fixture", "pytest.mark.functional"], "tests.functional.test_bash.proc": [], "tests.functional.test_bash.test_with_confirmation": ["tests.functional.plots.history_changed", "tests.functional.plots.with_confirmation"], "tests.functional.test_bash.test_select_command_with_arrows": ["tests.functional.plots.history_changed", "tests.functional.plots.select_command_with_arrows"], "tests.functional.test_bash.test_refuse_with_confirmation": ["tests.functional.plots.refuse_with_confirmation", "tests.functional.plots.history_not_changed"], "tests.functional.test_bash.test_without_confirmation": ["tests.functional.plots.history_changed", "tests.functional.plots.without_confirmation"], "tests.functional.test_bash.test_how_to_configure_alias": ["tests.functional.plots.how_to_configure"], "tests.utils": [], "tests.utils.Rule.__init__": ["<builtin>.super"], "<builtin>.super": [], "tests.utils.CorrectedCommand.__init__": ["<builtin>.super"], "tests.test_argument_parser": ["pytest.mark.parametrize"], "tests.test_argument_parser._args": [], "tests.test_argument_parser.test_parse": ["thefuck.argument_parser.Parser", "<builtin>.vars"], "thefuck.argument_parser.Parser": [], "<builtin>.vars": [], "tests.rules.test_git_commit_reset": ["pytest.mark.parametrize"], "tests.rules.test_git_commit_reset.test_match": ["thefuck.types.Command", "thefuck.rules.git_commit_reset.match"], "thefuck.rules.git_commit_reset.match": [], "tests.rules.test_git_commit_reset.test_not_match": ["thefuck.types.Command", "thefuck.rules.git_commit_reset.match"], "tests.rules.test_git_commit_reset.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_commit_reset.get_new_command"], "thefuck.rules.git_commit_reset.get_new_command": [], "tests.rules.test_git_push_without_commits": [], "tests.rules.test_git_push_without_commits.test_match": ["thefuck.rules.git_push_without_commits.match", "thefuck.types.Command"], "thefuck.rules.git_push_without_commits.match": [], "tests.rules.test_git_push_without_commits.test_not_match": ["thefuck.rules.git_push_without_commits.match", "thefuck.types.Command"], "tests.rules.test_git_push_without_commits.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_push_without_commits.get_new_command"], "thefuck.rules.git_push_without_commits.get_new_command": [], "tests.rules.test_brew_uninstall": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_brew_uninstall.output": [], "tests.rules.test_brew_uninstall.new_command": [], "tests.rules.test_brew_uninstall.test_match": ["thefuck.types.Command", "thefuck.rules.brew_uninstall.match"], "thefuck.rules.brew_uninstall.match": [], "tests.rules.test_brew_uninstall.test_not_match": ["thefuck.types.Command", "thefuck.rules.brew_uninstall.match"], "tests.rules.test_brew_uninstall.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.brew_uninstall.get_new_command"], "thefuck.rules.brew_uninstall.get_new_command": [], "tests.rules.test_cd_mkdir": ["pytest.mark.parametrize"], "tests.rules.test_cd_mkdir.test_match": ["thefuck.rules.cd_mkdir.match"], "thefuck.rules.cd_mkdir.match": [], "tests.rules.test_cd_mkdir.test_not_match": ["thefuck.rules.cd_mkdir.match"], "tests.rules.test_cd_mkdir.test_get_new_command": ["thefuck.rules.cd_mkdir.get_new_command"], "thefuck.rules.cd_mkdir.get_new_command": [], "tests.rules.test_unsudo": ["pytest.mark.parametrize"], "tests.rules.test_unsudo.test_match": ["thefuck.rules.unsudo.match", "thefuck.types.Command"], "thefuck.rules.unsudo.match": [], "tests.rules.test_unsudo.test_not_match": ["thefuck.rules.unsudo.match", "thefuck.types.Command"], "tests.rules.test_unsudo.test_get_new_command": ["thefuck.rules.unsudo.get_new_command", "thefuck.types.Command"], "thefuck.rules.unsudo.get_new_command": [], "tests.rules.test_dirty_unzip": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_dirty_unzip.zip_error": [], "tests.rules.test_dirty_unzip.zip_error.zip_error_inner": ["os.chdir", "os.listdir", "unicodedata.normalize", "<builtin>.str", "<builtin>.set", "tests.rules.test_dirty_unzip.zip_error.zip_error_inner.reset", "os.path.join"], "<builtin>.str": [], "tests.rules.test_dirty_unzip.zip_error.zip_error_inner.reset": ["zipfile.ZipFile"], "zipfile.ZipFile": [], "os.chdir": [], "os.listdir": [], "unicodedata.normalize": [], "tests.rules.test_dirty_unzip.test_match": ["thefuck.rules.dirty_unzip.match", "thefuck.types.Command"], "thefuck.rules.dirty_unzip.match": [], "tests.rules.test_dirty_unzip.test_side_effect": ["thefuck.rules.dirty_unzip.side_effect", "os.listdir", "thefuck.types.Command", "unicodedata.normalize", "<builtin>.set"], "thefuck.rules.dirty_unzip.side_effect": [], "tests.rules.test_dirty_unzip.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.dirty_unzip.get_new_command"], "thefuck.rules.dirty_unzip.get_new_command": [], "tests.rules.test_apt_get_search": ["pytest.mark.parametrize"], "tests.rules.test_apt_get_search.test_match": ["thefuck.types.Command", "thefuck.rules.apt_get_search.match"], "thefuck.rules.apt_get_search.match": [], "tests.rules.test_apt_get_search.test_not_match": ["thefuck.rules.apt_get_search.match"], "tests.rules.test_apt_get_search.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.apt_get_search.get_new_command"], "thefuck.rules.apt_get_search.get_new_command": [], "tests.rules.test_npm_missing_script": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_npm_missing_script.run_script": ["io.BytesIO"], "tests.rules.test_npm_missing_script.test_match": ["thefuck.rules.npm_missing_script.match"], "thefuck.rules.npm_missing_script.match": [], "tests.rules.test_npm_missing_script.test_not_match": ["thefuck.rules.npm_missing_script.match"], "tests.rules.test_npm_missing_script.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.npm_missing_script.get_new_command"], "thefuck.rules.npm_missing_script.get_new_command": [], "tests.rules.test_cp_create_destination": ["pytest.mark.parametrize"], "tests.rules.test_cp_create_destination.test_match": ["thefuck.types.Command", "thefuck.rules.cp_create_destination.match"], "thefuck.rules.cp_create_destination.match": [], "tests.rules.test_cp_create_destination.test_not_match": ["thefuck.types.Command", "thefuck.rules.cp_create_destination.match"], "tests.rules.test_cp_create_destination.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.cp_create_destination.get_new_command"], "thefuck.rules.cp_create_destination.get_new_command": [], "tests.rules.test_cd_correction": ["pytest.mark.parametrize"], "tests.rules.test_cd_correction.test_match": ["thefuck.rules.cd_correction.match"], "thefuck.rules.cd_correction.match": [], "tests.rules.test_cd_correction.test_not_match": ["thefuck.rules.cd_correction.match"], "tests.rules.test_apt_upgrade": ["pytest.mark.parametrize"], "tests.rules.test_apt_upgrade.test_match": ["thefuck.types.Command", "thefuck.rules.apt_upgrade.match"], "thefuck.rules.apt_upgrade.match": [], "tests.rules.test_apt_upgrade.test_not_match": ["thefuck.rules.apt_upgrade.match"], "tests.rules.test_apt_upgrade.test_get_new_command": ["thefuck.rules.apt_upgrade.get_new_command", "thefuck.types.Command"], "thefuck.rules.apt_upgrade.get_new_command": [], "tests.rules.test_cd_parent": [], "tests.rules.test_cd_parent.test_match": ["thefuck.types.Command", "thefuck.rules.cd_parent.match"], "thefuck.rules.cd_parent.match": [], "tests.rules.test_cd_parent.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.cd_parent.get_new_command"], "thefuck.rules.cd_parent.get_new_command": [], "tests.rules.test_git_push_different_branch_names": ["pytest.mark.parametrize"], "tests.rules.test_git_push_different_branch_names.error_msg": [], "tests.rules.test_git_push_different_branch_names.test_match": ["thefuck.types.Command", "tests.rules.test_git_push_different_branch_names.error_msg", "thefuck.rules.git_push_different_branch_names.match"], "thefuck.rules.git_push_different_branch_names.match": [], "tests.rules.test_git_push_different_branch_names.test_not_match": ["thefuck.rules.git_push_different_branch_names.match"], "tests.rules.test_git_push_different_branch_names.test_get_new_command": ["thefuck.rules.git_push_different_branch_names.get_new_command", "thefuck.types.Command", "tests.rules.test_git_push_different_branch_names.error_msg"], "thefuck.rules.git_push_different_branch_names.get_new_command": [], "tests.rules.test_chmod_x": ["pytest.mark.usefixtures", "pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_chmod_x.file_exists": [], "tests.rules.test_chmod_x.file_access": [], "tests.rules.test_chmod_x.test_match": ["thefuck.types.Command", "thefuck.rules.chmod_x.match"], "thefuck.rules.chmod_x.match": [], "tests.rules.test_chmod_x.test_not_match": ["thefuck.types.Command", "thefuck.rules.chmod_x.match"], "tests.rules.test_chmod_x.test_get_new_command": ["thefuck.rules.chmod_x.get_new_command", "thefuck.types.Command"], "thefuck.rules.chmod_x.get_new_command": [], "tests.rules.test_git_commit_amend": ["pytest.mark.parametrize"], "tests.rules.test_git_commit_amend.test_match": ["thefuck.rules.git_commit_amend.match", "thefuck.types.Command"], "thefuck.rules.git_commit_amend.match": [], "tests.rules.test_git_commit_amend.test_not_match": ["thefuck.rules.git_commit_amend.match", "thefuck.types.Command"], "tests.rules.test_git_commit_amend.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_commit_amend.get_new_command"], "thefuck.rules.git_commit_amend.get_new_command": [], "tests.rules.test_yarn_help": ["pytest.mark.parametrize"], "tests.rules.test_yarn_help.test_match": ["thefuck.rules.yarn_help.match"], "thefuck.rules.yarn_help.match": [], "tests.rules.test_yarn_help.test_get_new_command": ["thefuck.rules.yarn_help.get_new_command", "thefuck.system.open_command"], "thefuck.rules.yarn_help.get_new_command": [], "thefuck.system.open_command": [], "tests.rules.test_touch": ["pytest.mark.parametrize"], "tests.rules.test_touch.output": [], "tests.rules.test_touch.test_match": ["thefuck.rules.touch.match", "thefuck.types.Command", "tests.rules.test_touch.output"], "thefuck.rules.touch.match": [], "tests.rules.test_touch.test_not_match": ["thefuck.rules.touch.match"], "tests.rules.test_touch.test_get_new_command": ["thefuck.types.Command", "tests.rules.test_touch.output", "thefuck.rules.touch.get_new_command"], "thefuck.rules.touch.get_new_command": [], "tests.rules.test_yum_invalid_operation": ["pytest.mark.parametrize", "pytest.fixture", "pytest.mark.usefixtures"], "tests.rules.test_yum_invalid_operation.test_match": ["thefuck.types.Command", "thefuck.rules.yum_invalid_operation.match"], "thefuck.rules.yum_invalid_operation.match": [], "tests.rules.test_yum_invalid_operation.test_not_match": ["thefuck.types.Command", "thefuck.rules.yum_invalid_operation.match"], "tests.rules.test_yum_invalid_operation.yum_help": ["<builtin>.bytes", "io.BytesIO"], "<builtin>.bytes": [], "tests.rules.test_yum_invalid_operation.test_get_operations": ["thefuck.rules.yum_invalid_operation._get_operations"], "thefuck.rules.yum_invalid_operation._get_operations": [], "tests.rules.test_yum_invalid_operation.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.yum_invalid_operation.get_new_command"], "thefuck.rules.yum_invalid_operation.get_new_command": [], "tests.rules.test_docker_image_being_used_by_container": [], "tests.rules.test_docker_image_being_used_by_container.test_match": ["thefuck.types.Command", "thefuck.rules.docker_image_being_used_by_container.match"], "thefuck.rules.docker_image_being_used_by_container.match": [], "tests.rules.test_docker_image_being_used_by_container.test_not_match": ["thefuck.types.Command", "thefuck.rules.docker_image_being_used_by_container.match"], "tests.rules.test_docker_image_being_used_by_container.test_not_docker_command": ["thefuck.types.Command", "thefuck.rules.docker_image_being_used_by_container.match"], "tests.rules.test_docker_image_being_used_by_container.test_get_new_command": ["thefuck.rules.docker_image_being_used_by_container.get_new_command", "thefuck.types.Command"], "thefuck.rules.docker_image_being_used_by_container.get_new_command": [], "tests.rules.test_git_fix_stash": ["pytest.mark.parametrize"], "tests.rules.test_git_fix_stash.test_match": ["thefuck.types.Command", "thefuck.rules.git_fix_stash.match"], "thefuck.rules.git_fix_stash.match": [], "tests.rules.test_git_fix_stash.test_not_match": ["thefuck.types.Command", "thefuck.rules.git_fix_stash.match"], "tests.rules.test_git_fix_stash.test_get_new_command": ["thefuck.rules.git_fix_stash.get_new_command", "thefuck.types.Command"], "thefuck.rules.git_fix_stash.get_new_command": [], "tests.rules.test_git_hook_bypass": ["pytest.mark.parametrize"], "tests.rules.test_git_hook_bypass.test_match": ["thefuck.rules.git_hook_bypass.match"], "thefuck.rules.git_hook_bypass.match": [], "tests.rules.test_git_hook_bypass.test_not_match": ["thefuck.rules.git_hook_bypass.match"], "tests.rules.test_git_hook_bypass.test_get_new_command": ["thefuck.rules.git_hook_bypass.get_new_command"], "thefuck.rules.git_hook_bypass.get_new_command": [], "tests.rules.test_docker_login": [], "tests.rules.test_docker_login.test_match": ["thefuck.types.Command", "thefuck.rules.docker_login.match"], "thefuck.rules.docker_login.match": [], "tests.rules.test_docker_login.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.docker_login.get_new_command"], "thefuck.rules.docker_login.get_new_command": [], "tests.rules.test_git_checkout": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_git_checkout.did_not_match": [], "tests.rules.test_git_checkout.git_branch": ["io.BytesIO"], "tests.rules.test_git_checkout.test_match": ["thefuck.rules.git_checkout.match"], "thefuck.rules.git_checkout.match": [], "tests.rules.test_git_checkout.test_not_match": ["thefuck.rules.git_checkout.match"], "tests.rules.test_git_checkout.test_get_branches": ["<builtin>.list", "thefuck.rules.git_checkout.get_branches"], "thefuck.rules.git_checkout.get_branches": [], "tests.rules.test_git_checkout.test_get_new_command": ["thefuck.rules.git_checkout.get_new_command"], "thefuck.rules.git_checkout.get_new_command": [], "tests.rules.test_remove_shell_prompt_literal": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_remove_shell_prompt_literal.output": [], "tests.rules.test_remove_shell_prompt_literal.test_match": ["thefuck.rules.remove_shell_prompt_literal.match", "thefuck.types.Command"], "thefuck.rules.remove_shell_prompt_literal.match": [], "tests.rules.test_remove_shell_prompt_literal.test_not_match": ["thefuck.rules.remove_shell_prompt_literal.match"], "tests.rules.test_remove_shell_prompt_literal.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.remove_shell_prompt_literal.get_new_command"], "thefuck.rules.remove_shell_prompt_literal.get_new_command": [], "tests.rules.test_git_branch_delete_checked_out": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_git_branch_delete_checked_out.output": [], "tests.rules.test_git_branch_delete_checked_out.test_match": ["thefuck.types.Command", "thefuck.rules.git_branch_delete_checked_out.match"], "thefuck.rules.git_branch_delete_checked_out.match": [], "tests.rules.test_git_branch_delete_checked_out.test_not_match": ["thefuck.types.Command", "thefuck.rules.git_branch_delete_checked_out.match"], "tests.rules.test_git_branch_delete_checked_out.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_branch_delete_checked_out.get_new_command"], "thefuck.rules.git_branch_delete_checked_out.get_new_command": [], "tests.rules.test_git_rm_staged": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_git_rm_staged.output": [], "tests.rules.test_git_rm_staged.test_match": ["thefuck.types.Command", "thefuck.rules.git_rm_staged.match"], "thefuck.rules.git_rm_staged.match": [], "tests.rules.test_git_rm_staged.test_not_match": ["thefuck.types.Command", "thefuck.rules.git_rm_staged.match"], "tests.rules.test_git_rm_staged.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_rm_staged.get_new_command"], "thefuck.rules.git_rm_staged.get_new_command": [], "tests.rules.test_pacman": ["<builtin>.getattr", "pytest.mark.parametrize", "mock.patch.multiple", "pytest.mark.skipif", "thefuck.types.Command", "mock.patch"], "<builtin>.getattr": [], "pytest.mark.skipif": [], "tests.rules.test_pacman.test_match": ["thefuck.rules.pacman.match"], "thefuck.rules.pacman.match": [], "mock.patch.multiple": [], "tests.rules.test_pacman.test_match_mocked": ["thefuck.rules.pacman.match"], "tests.rules.test_pacman.test_not_match": ["thefuck.rules.pacman.match"], "tests.rules.test_pacman.test_get_new_command": ["thefuck.rules.pacman.get_new_command"], "thefuck.rules.pacman.get_new_command": [], "tests.rules.test_pacman.test_get_new_command_mocked": ["thefuck.rules.pacman.get_new_command"], "tests.rules.test_gradle_not_task": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_gradle_not_task.tasks": ["io.BytesIO"], "tests.rules.test_gradle_not_task.test_match": ["thefuck.rules.gradle_no_task.match"], "thefuck.rules.gradle_no_task.match": [], "tests.rules.test_gradle_not_task.test_not_match": ["thefuck.rules.gradle_no_task.match"], "tests.rules.test_gradle_not_task.test_get_new_command": ["thefuck.rules.gradle_no_task.get_new_command"], "thefuck.rules.gradle_no_task.get_new_command": [], "tests.rules.test_tsuru_not_command": ["pytest.mark.parametrize"], "tests.rules.test_tsuru_not_command.test_match": ["thefuck.rules.tsuru_not_command.match"], "thefuck.rules.tsuru_not_command.match": [], "tests.rules.test_tsuru_not_command.test_not_match": ["thefuck.rules.tsuru_not_command.match"], "tests.rules.test_tsuru_not_command.test_get_new_command": ["thefuck.rules.tsuru_not_command.get_new_command"], "thefuck.rules.tsuru_not_command.get_new_command": [], "tests.rules.test_git_lfs_mistype": ["pytest.fixture"], "tests.rules.test_git_lfs_mistype.mistype_response": [], "tests.rules.test_git_lfs_mistype.test_match": ["thefuck.types.Command", "thefuck.rules.git_lfs_mistype.match"], "thefuck.rules.git_lfs_mistype.match": [], "tests.rules.test_git_lfs_mistype.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_lfs_mistype.get_new_command"], "thefuck.rules.git_lfs_mistype.get_new_command": [], "tests.rules.test_apt_list_upgradable": ["pytest.mark.parametrize"], "tests.rules.test_apt_list_upgradable.test_match": ["thefuck.types.Command", "thefuck.rules.apt_list_upgradable.match"], "thefuck.rules.apt_list_upgradable.match": [], "tests.rules.test_apt_list_upgradable.test_not_match": ["thefuck.rules.apt_list_upgradable.match"], "tests.rules.test_apt_list_upgradable.test_get_new_command": ["thefuck.rules.apt_list_upgradable.get_new_command", "thefuck.types.Command"], "thefuck.rules.apt_list_upgradable.get_new_command": [], "tests.rules.test_man": ["pytest.mark.parametrize"], "tests.rules.test_man.test_match": ["thefuck.rules.man.match"], "thefuck.rules.man.match": [], "tests.rules.test_man.test_not_match": ["thefuck.rules.man.match"], "tests.rules.test_man.test_get_new_command": ["thefuck.rules.man.get_new_command"], "thefuck.rules.man.get_new_command": [], "tests.rules.test_git_stash": ["pytest.mark.parametrize"], "tests.rules.test_git_stash.test_match": ["thefuck.rules.git_stash.match"], "thefuck.rules.git_stash.match": [], "tests.rules.test_git_stash.test_not_match": ["thefuck.rules.git_stash.match"], "tests.rules.test_git_stash.test_get_new_command": ["thefuck.rules.git_stash.get_new_command"], "thefuck.rules.git_stash.get_new_command": [], "tests.rules.test_mercurial": ["pytest.mark.parametrize"], "tests.rules.test_mercurial.test_match": ["thefuck.rules.mercurial.match"], "thefuck.rules.mercurial.match": [], "tests.rules.test_mercurial.test_not_match": ["thefuck.rules.mercurial.match"], "tests.rules.test_mercurial.test_extract_possibilities": ["thefuck.rules.mercurial.extract_possibilities"], "thefuck.rules.mercurial.extract_possibilities": [], "tests.rules.test_mercurial.test_get_new_command": ["thefuck.rules.mercurial.get_new_command"], "thefuck.rules.mercurial.get_new_command": [], "tests.rules.test_git_remote_delete": ["pytest.mark.parametrize"], "tests.rules.test_git_remote_delete.test_match": ["thefuck.rules.git_remote_delete.match", "thefuck.types.Command"], "thefuck.rules.git_remote_delete.match": [], "tests.rules.test_git_remote_delete.test_not_match": ["thefuck.rules.git_remote_delete.match"], "tests.rules.test_git_remote_delete.test_get_new_command": ["thefuck.rules.git_remote_delete.get_new_command"], "thefuck.rules.git_remote_delete.get_new_command": [], "tests.rules.test_rails_migrations_pending": ["pytest.mark.parametrize"], "tests.rules.test_rails_migrations_pending.test_match": ["thefuck.rules.rails_migrations_pending.match"], "thefuck.rules.rails_migrations_pending.match": [], "tests.rules.test_rails_migrations_pending.test_not_match": ["thefuck.rules.rails_migrations_pending.match"], "tests.rules.test_rails_migrations_pending.test_get_new_command": ["thefuck.rules.rails_migrations_pending.get_new_command"], "thefuck.rules.rails_migrations_pending.get_new_command": [], "tests.rules.test_grep_arguments_order": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_grep_arguments_order.os_path": [], "tests.rules.test_grep_arguments_order.os_path.<lambda1>": [], "tests.rules.test_grep_arguments_order.test_match": ["thefuck.rules.grep_arguments_order.match", "thefuck.types.Command"], "thefuck.rules.grep_arguments_order.match": [], "tests.rules.test_grep_arguments_order.test_not_match": ["thefuck.rules.grep_arguments_order.match", "thefuck.types.Command"], "tests.rules.test_grep_arguments_order.test_get_new_command": ["thefuck.rules.grep_arguments_order.get_new_command", "thefuck.types.Command"], "thefuck.rules.grep_arguments_order.get_new_command": [], "tests.rules.test_docker_not_command": ["pytest.mark.usefixtures", "pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_docker_not_command.docker_help": ["io.BytesIO"], "tests.rules.test_docker_not_command.docker_help_new": ["io.BytesIO"], "tests.rules.test_docker_not_command.output": [], "tests.rules.test_docker_not_command.test_match": ["tests.rules.test_docker_not_command.output", "thefuck.types.Command", "thefuck.rules.docker_not_command.match"], "thefuck.rules.docker_not_command.match": [], "tests.rules.test_docker_not_command.test_match_management_cmd": ["thefuck.types.Command", "thefuck.rules.docker_not_command.match"], "tests.rules.test_docker_not_command.test_match_management_subcmd": ["thefuck.types.Command", "thefuck.rules.docker_not_command.match"], "tests.rules.test_docker_not_command.test_not_match": ["thefuck.types.Command", "thefuck.rules.docker_not_command.match"], "tests.rules.test_docker_not_command.test_get_new_command": ["tests.rules.test_docker_not_command.output", "thefuck.types.Command", "thefuck.rules.docker_not_command.get_new_command"], "thefuck.rules.docker_not_command.get_new_command": [], "tests.rules.test_docker_not_command.test_get_new_management_command": ["tests.rules.test_docker_not_command.output", "thefuck.types.Command", "thefuck.rules.docker_not_command.get_new_command"], "tests.rules.test_docker_not_command.test_get_new_management_command_subcommand": ["thefuck.types.Command", "thefuck.rules.docker_not_command.get_new_command"], "tests.rules.test_brew_reinstall": ["pytest.mark.parametrize"], "tests.rules.test_brew_reinstall.test_match": ["thefuck.rules.brew_reinstall.match", "thefuck.types.Command"], "thefuck.rules.brew_reinstall.match": [], "tests.rules.test_brew_reinstall.test_not_match": ["thefuck.rules.brew_reinstall.match", "thefuck.types.Command"], "tests.rules.test_brew_reinstall.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.brew_reinstall.get_new_command"], "thefuck.rules.brew_reinstall.get_new_command": [], "tests.rules.test_cp_omitting_directory": ["pytest.mark.parametrize"], "tests.rules.test_cp_omitting_directory.test_match": ["thefuck.types.Command", "thefuck.rules.cp_omitting_directory.match"], "thefuck.rules.cp_omitting_directory.match": [], "tests.rules.test_cp_omitting_directory.test_not_match": ["thefuck.types.Command", "thefuck.rules.cp_omitting_directory.match"], "tests.rules.test_cp_omitting_directory.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.cp_omitting_directory.get_new_command"], "thefuck.rules.cp_omitting_directory.get_new_command": [], "tests.rules.test_ifconfig_device_not_found": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_ifconfig_device_not_found.ifconfig": ["six.BytesIO"], "six.BytesIO": [], "tests.rules.test_ifconfig_device_not_found.test_match": ["thefuck.types.Command", "thefuck.rules.ifconfig_device_not_found.match"], "thefuck.rules.ifconfig_device_not_found.match": [], "tests.rules.test_ifconfig_device_not_found.test_not_match": ["thefuck.types.Command", "thefuck.rules.ifconfig_device_not_found.match"], "tests.rules.test_ifconfig_device_not_found.test_get_new_comman": ["thefuck.types.Command", "thefuck.rules.ifconfig_device_not_found.get_new_command"], "thefuck.rules.ifconfig_device_not_found.get_new_command": [], "tests.rules.test_sudo": ["pytest.mark.parametrize"], "tests.rules.test_sudo.test_match": ["thefuck.types.Command", "thefuck.rules.sudo.match"], "thefuck.rules.sudo.match": [], "tests.rules.test_sudo.test_not_match": ["thefuck.types.Command", "thefuck.rules.sudo.match"], "tests.rules.test_sudo.test_get_new_command": ["thefuck.rules.sudo.get_new_command", "thefuck.types.Command"], "thefuck.rules.sudo.get_new_command": [], "tests.rules.test_git_rm_recursive": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_git_rm_recursive.output": [], "tests.rules.test_git_rm_recursive.test_match": ["thefuck.rules.git_rm_recursive.match", "thefuck.types.Command"], "thefuck.rules.git_rm_recursive.match": [], "tests.rules.test_git_rm_recursive.test_not_match": ["thefuck.rules.git_rm_recursive.match", "thefuck.types.Command"], "tests.rules.test_git_rm_recursive.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_rm_recursive.get_new_command"], "thefuck.rules.git_rm_recursive.get_new_command": [], "tests.rules.test_sl_ls": [], "tests.rules.test_sl_ls.test_match": ["thefuck.types.Command", "thefuck.rules.sl_ls.match"], "thefuck.rules.sl_ls.match": [], "tests.rules.test_sl_ls.test_get_new_command": ["thefuck.rules.sl_ls.get_new_command", "thefuck.types.Command"], "thefuck.rules.sl_ls.get_new_command": [], "tests.rules.test_port_already_in_use": ["pytest.mark.usefixtures", "pytest.mark.parametrize", "pytest.fixture", "thefuck.types.Command"], "tests.rules.test_port_already_in_use.lsof": ["io.BytesIO"], "tests.rules.test_port_already_in_use.test_match": ["thefuck.rules.port_already_in_use.match"], "thefuck.rules.port_already_in_use.match": [], "tests.rules.test_port_already_in_use.test_not_match": ["thefuck.rules.port_already_in_use.match", "io.BytesIO"], "tests.rules.test_port_already_in_use.test_get_new_command": ["thefuck.rules.port_already_in_use.get_new_command"], "thefuck.rules.port_already_in_use.get_new_command": [], "tests.rules.test_heroku_not_command": ["pytest.mark.parametrize"], "tests.rules.test_heroku_not_command.test_match": ["thefuck.rules.heroku_not_command.match", "thefuck.types.Command"], "thefuck.rules.heroku_not_command.match": [], "tests.rules.test_heroku_not_command.test_not_match": ["thefuck.rules.heroku_not_command.match", "thefuck.types.Command"], "tests.rules.test_heroku_not_command.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.heroku_not_command.get_new_command"], "thefuck.rules.heroku_not_command.get_new_command": [], "tests.rules.test_cd_cs": [], "tests.rules.test_cd_cs.test_match": ["thefuck.rules.cd_cs.match", "thefuck.types.Command"], "thefuck.rules.cd_cs.match": [], "tests.rules.test_cd_cs.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.cd_cs.get_new_command"], "thefuck.rules.cd_cs.get_new_command": [], "tests.rules.test_django_south_merge": ["pytest.fixture"], "tests.rules.test_django_south_merge.output": [], "tests.rules.test_django_south_merge.test_match": ["thefuck.types.Command", "thefuck.rules.django_south_merge.match"], "thefuck.rules.django_south_merge.match": [], "tests.rules.test_django_south_merge.test_get_new_command": ["thefuck.rules.django_south_merge.get_new_command", "thefuck.types.Command"], "thefuck.rules.django_south_merge.get_new_command": [], "tests.rules.test_unknown_command": ["pytest.mark.parametrize"], "tests.rules.test_unknown_command.test_match": ["thefuck.rules.unknown_command.match"], "thefuck.rules.unknown_command.match": [], "tests.rules.test_unknown_command.test_not_match": ["thefuck.rules.unknown_command.match"], "tests.rules.test_unknown_command.test_get_new_command": ["thefuck.rules.unknown_command.get_new_command"], "thefuck.rules.unknown_command.get_new_command": [], "tests.rules.test_fix_file": ["pytest.mark.parametrize", "pytest.mark.usefixtures", "collections.namedtuple"], "collections.namedtuple": [], "tests.rules.test_fix_file.test_match": ["thefuck.rules.fix_file.match", "thefuck.types.Command"], "thefuck.rules.fix_file.match": [], "tests.rules.test_fix_file.test_no_editor": ["thefuck.rules.fix_file.match", "thefuck.types.Command"], "tests.rules.test_fix_file.test_not_file": ["thefuck.rules.fix_file.match", "thefuck.types.Command"], "tests.rules.test_fix_file.test_get_new_command": [], "tests.rules.test_fix_file.test_get_new_command_with_settings": ["thefuck.rules.fix_file.get_new_command", "thefuck.types.Command"], "thefuck.rules.fix_file.get_new_command": [], "tests.rules.test_brew_cask_dependency": ["pytest.mark.parametrize"], "tests.rules.test_brew_cask_dependency.test_match": ["thefuck.types.Command", "thefuck.rules.brew_cask_dependency.match"], "thefuck.rules.brew_cask_dependency.match": [], "tests.rules.test_brew_cask_dependency.test_not_match": ["thefuck.types.Command", "thefuck.rules.brew_cask_dependency.match"], "tests.rules.test_brew_cask_dependency.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.brew_cask_dependency.get_new_command"], "thefuck.rules.brew_cask_dependency.get_new_command": [], "tests.rules.test_cargo_no_command": ["pytest.mark.parametrize"], "tests.rules.test_cargo_no_command.test_match": ["thefuck.rules.cargo_no_command.match"], "thefuck.rules.cargo_no_command.match": [], "tests.rules.test_cargo_no_command.test_get_new_command": ["thefuck.rules.cargo_no_command.get_new_command"], "thefuck.rules.cargo_no_command.get_new_command": [], "tests.rules.test_whois": ["pytest.mark.parametrize"], "tests.rules.test_whois.test_match": ["thefuck.rules.whois.match"], "thefuck.rules.whois.match": [], "tests.rules.test_whois.test_not_match": ["thefuck.types.Command", "thefuck.rules.whois.match"], "tests.rules.test_whois.test_get_new_command": ["thefuck.rules.whois.get_new_command"], "thefuck.rules.whois.get_new_command": [], "tests.rules.test_go_run": ["pytest.mark.parametrize"], "tests.rules.test_go_run.test_match": ["thefuck.rules.go_run.match"], "thefuck.rules.go_run.match": [], "tests.rules.test_go_run.test_get_new_command": ["thefuck.rules.go_run.get_new_command"], "thefuck.rules.go_run.get_new_command": [], "tests.rules.test_quotation_marks": ["pytest.mark.parametrize"], "tests.rules.test_quotation_marks.test_match": ["thefuck.rules.quotation_marks.match"], "thefuck.rules.quotation_marks.match": [], "tests.rules.test_quotation_marks.test_get_new_command": ["thefuck.rules.quotation_marks.get_new_command"], "thefuck.rules.quotation_marks.get_new_command": [], "tests.rules.test_rm_root": ["pytest.mark.parametrize"], "tests.rules.test_rm_root.test_match": ["thefuck.rules.rm_root.match", "thefuck.types.Command"], "thefuck.rules.rm_root.match": [], "tests.rules.test_rm_root.test_not_match": ["thefuck.rules.rm_root.match"], "tests.rules.test_rm_root.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.rm_root.get_new_command"], "thefuck.rules.rm_root.get_new_command": [], "tests.rules.test_python_module_error": ["pytest.mark.parametrize", "pytest.fixture", "thefuck.types.Command"], "tests.rules.test_python_module_error.module_error_output": [], "tests.rules.test_python_module_error.test_not_match": ["thefuck.rules.python_module_error.match"], "thefuck.rules.python_module_error.match": [], "tests.rules.test_python_module_error.test_match": ["thefuck.rules.python_module_error.match", "thefuck.types.Command"], "tests.rules.test_python_module_error.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.python_module_error.get_new_command"], "thefuck.rules.python_module_error.get_new_command": [], "tests.rules.test_gulp_not_task": ["pytest.mark.parametrize"], "tests.rules.test_gulp_not_task.output": [], "tests.rules.test_gulp_not_task.test_match": ["thefuck.rules.gulp_not_task.match", "thefuck.types.Command", "tests.rules.test_gulp_not_task.output"], "thefuck.rules.gulp_not_task.match": [], "tests.rules.test_gulp_not_task.test_not_march": ["thefuck.rules.gulp_not_task.match", "thefuck.types.Command"], "tests.rules.test_gulp_not_task.test_get_new_command": ["io.BytesIO", "thefuck.types.Command", "thefuck.rules.gulp_not_task.get_new_command", "tests.rules.test_gulp_not_task.output"], "thefuck.rules.gulp_not_task.get_new_command": [], "tests.rules.test_javac": ["pytest.mark.parametrize"], "tests.rules.test_javac.test_match": ["thefuck.rules.javac.match"], "thefuck.rules.javac.match": [], "tests.rules.test_javac.test_get_new_command": ["thefuck.rules.javac.get_new_command"], "thefuck.rules.javac.get_new_command": [], "tests.rules.test_git_rebase_merge_dir": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_git_rebase_merge_dir.output": [], "tests.rules.test_git_rebase_merge_dir.test_match": ["thefuck.types.Command", "thefuck.rules.git_rebase_merge_dir.match"], "thefuck.rules.git_rebase_merge_dir.match": [], "tests.rules.test_git_rebase_merge_dir.test_not_match": ["thefuck.types.Command", "thefuck.rules.git_rebase_merge_dir.match"], "tests.rules.test_git_rebase_merge_dir.test_get_new_command": ["thefuck.rules.git_rebase_merge_dir.get_new_command", "thefuck.types.Command"], "thefuck.rules.git_rebase_merge_dir.get_new_command": [], "tests.rules.test_omnienv_no_such_command": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_omnienv_no_such_command.output": [], "tests.rules.test_omnienv_no_such_command.Popen": [], "tests.rules.test_omnienv_no_such_command.test_match": ["thefuck.types.Command", "thefuck.rules.omnienv_no_such_command.match"], "thefuck.rules.omnienv_no_such_command.match": [], "tests.rules.test_omnienv_no_such_command.test_match_goenv_output_quote": ["thefuck.types.Command", "thefuck.rules.omnienv_no_such_command.match"], "tests.rules.test_omnienv_no_such_command.test_not_match": ["thefuck.types.Command", "thefuck.rules.omnienv_no_such_command.match"], "tests.rules.test_omnienv_no_such_command.test_get_new_command": ["thefuck.rules.omnienv_no_such_command.get_new_command", "thefuck.types.Command"], "thefuck.rules.omnienv_no_such_command.get_new_command": [], "tests.rules.test_open": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_open.output": [], "tests.rules.test_open.test_is_arg_url": ["thefuck.types.Command", "thefuck.rules.open.is_arg_url"], "thefuck.rules.open.is_arg_url": [], "tests.rules.test_open.test_not_is_arg_url": ["thefuck.types.Command", "thefuck.rules.open.is_arg_url"], "tests.rules.test_open.test_match": ["thefuck.types.Command", "thefuck.rules.open.match"], "thefuck.rules.open.match": [], "tests.rules.test_open.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.open.get_new_command"], "thefuck.rules.open.get_new_command": [], "tests.rules.test_brew_update_formula": ["pytest.mark.parametrize"], "tests.rules.test_brew_update_formula.test_match": ["thefuck.rules.brew_update_formula.match", "thefuck.types.Command"], "thefuck.rules.brew_update_formula.match": [], "tests.rules.test_brew_update_formula.test_not_match": ["thefuck.rules.brew_update_formula.match", "thefuck.types.Command"], "tests.rules.test_brew_update_formula.test_get_new_command": ["thefuck.rules.brew_update_formula.get_new_command", "thefuck.types.Command"], "thefuck.rules.brew_update_formula.get_new_command": [], "tests.rules.test_php_s": ["pytest.mark.parametrize"], "tests.rules.test_php_s.test_match": ["thefuck.rules.php_s.match"], "thefuck.rules.php_s.match": [], "tests.rules.test_php_s.test_not_match": ["thefuck.rules.php_s.match"], "tests.rules.test_php_s.test_get_new_command": ["thefuck.rules.php_s.get_new_command"], "thefuck.rules.php_s.get_new_command": [], "tests.rules.test_grunt_task_not_found": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_grunt_task_not_found.grunt_help": ["io.BytesIO"], "tests.rules.test_grunt_task_not_found.test_match": ["thefuck.rules.grunt_task_not_found.match"], "thefuck.rules.grunt_task_not_found.match": [], "tests.rules.test_grunt_task_not_found.test_not_match": ["thefuck.rules.grunt_task_not_found.match"], "tests.rules.test_grunt_task_not_found.test_get_new_command": ["thefuck.rules.grunt_task_not_found.get_new_command"], "thefuck.rules.grunt_task_not_found.get_new_command": [], "tests.rules.test_remove_trailing_cedilla": ["pytest.mark.parametrize"], "tests.rules.test_remove_trailing_cedilla.test_match": ["thefuck.rules.remove_trailing_cedilla.match"], "thefuck.rules.remove_trailing_cedilla.match": [], "tests.rules.test_remove_trailing_cedilla.test_get_new_command": ["thefuck.rules.remove_trailing_cedilla.get_new_command"], "thefuck.rules.remove_trailing_cedilla.get_new_command": [], "tests.rules.test_git_clone_git_clone": [], "tests.rules.test_git_clone_git_clone.test_match": ["thefuck.rules.git_clone_git_clone.match", "thefuck.types.Command"], "thefuck.rules.git_clone_git_clone.match": [], "tests.rules.test_git_clone_git_clone.test_not_match": ["thefuck.rules.git_clone_git_clone.match", "thefuck.types.Command"], "tests.rules.test_git_clone_git_clone.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_clone_git_clone.get_new_command"], "thefuck.rules.git_clone_git_clone.get_new_command": [], "tests.rules.test_git_branch_0flag": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_git_branch_0flag.output_branch_exists": [], "tests.rules.test_git_branch_0flag.test_match": ["thefuck.rules.git_branch_0flag.match", "thefuck.types.Command"], "thefuck.rules.git_branch_0flag.match": [], "tests.rules.test_git_branch_0flag.test_not_match": ["thefuck.rules.git_branch_0flag.match", "thefuck.types.Command"], "tests.rules.test_git_branch_0flag.test_get_new_command_branch_exists": ["thefuck.types.Command", "thefuck.rules.git_branch_0flag.get_new_command"], "thefuck.rules.git_branch_0flag.get_new_command": [], "tests.rules.test_git_branch_0flag.output_not_valid_object": [], "tests.rules.test_git_branch_0flag.test_get_new_command_not_valid_object": ["thefuck.types.Command", "thefuck.rules.git_branch_0flag.get_new_command"], "tests.rules.test_python_execute": ["pytest.mark.parametrize"], "tests.rules.test_python_execute.test_match": ["thefuck.rules.python_execute.match"], "thefuck.rules.python_execute.match": [], "tests.rules.test_python_execute.test_get_new_command": ["thefuck.rules.python_execute.get_new_command"], "thefuck.rules.python_execute.get_new_command": [], "tests.rules.test_python_command": [], "tests.rules.test_python_command.test_match": ["thefuck.types.Command", "thefuck.rules.python_command.match"], "thefuck.rules.python_command.match": [], "tests.rules.test_python_command.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.python_command.get_new_command"], "thefuck.rules.python_command.get_new_command": [], "tests.rules.test_systemctl": [], "tests.rules.test_systemctl.test_match": ["thefuck.rules.systemctl.match", "thefuck.types.Command"], "thefuck.rules.systemctl.match": [], "tests.rules.test_systemctl.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.systemctl.get_new_command"], "thefuck.rules.systemctl.get_new_command": [], "tests.rules.test_vagrant_up": ["pytest.mark.parametrize"], "tests.rules.test_vagrant_up.test_match": ["thefuck.rules.vagrant_up.match"], "thefuck.rules.vagrant_up.match": [], "tests.rules.test_vagrant_up.test_not_match": ["thefuck.rules.vagrant_up.match"], "tests.rules.test_vagrant_up.test_get_new_command": ["thefuck.rules.vagrant_up.get_new_command"], "thefuck.rules.vagrant_up.get_new_command": [], "tests.rules.test_adb_unknown_command": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_adb_unknown_command.output": [], "tests.rules.test_adb_unknown_command.test_match": ["thefuck.rules.adb_unknown_command.match", "thefuck.types.Command"], "thefuck.rules.adb_unknown_command.match": [], "tests.rules.test_adb_unknown_command.test_not_match": ["thefuck.rules.adb_unknown_command.match", "thefuck.types.Command"], "tests.rules.test_adb_unknown_command.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.adb_unknown_command.get_new_command"], "thefuck.rules.adb_unknown_command.get_new_command": [], "tests.rules.test_ag_literal": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_ag_literal.output": [], "tests.rules.test_ag_literal.test_match": ["thefuck.types.Command", "thefuck.rules.ag_literal.match"], "thefuck.rules.ag_literal.match": [], "tests.rules.test_ag_literal.test_not_match": ["thefuck.types.Command", "thefuck.rules.ag_literal.match"], "tests.rules.test_ag_literal.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.ag_literal.get_new_command"], "thefuck.rules.ag_literal.get_new_command": [], "tests.rules.test_lein_not_task": ["pytest.fixture"], "tests.rules.test_lein_not_task.is_not_task": [], "tests.rules.test_lein_not_task.test_match": ["thefuck.types.Command", "thefuck.rules.lein_not_task.match"], "thefuck.rules.lein_not_task.match": [], "tests.rules.test_lein_not_task.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.lein_not_task.get_new_command"], "thefuck.rules.lein_not_task.get_new_command": [], "tests.rules.test_no_command": ["pytest.mark.usefixtures", "pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_no_command.get_all_executables": [], "tests.rules.test_no_command.history_without_current": [], "tests.rules.test_no_command.test_match": ["thefuck.rules.no_command.match", "thefuck.types.Command"], "thefuck.rules.no_command.match": [], "tests.rules.test_no_command.test_not_match": ["thefuck.rules.no_command.match", "thefuck.types.Command"], "tests.rules.test_no_command.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.no_command.get_new_command"], "thefuck.rules.no_command.get_new_command": [], "tests.rules": [], "tests.rules.test_conda_mistype": ["pytest.fixture"], "tests.rules.test_conda_mistype.mistype_response": [], "tests.rules.test_conda_mistype.test_match": ["thefuck.rules.conda_mistype.match", "thefuck.types.Command"], "thefuck.rules.conda_mistype.match": [], "tests.rules.test_conda_mistype.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.conda_mistype.get_new_command"], "thefuck.rules.conda_mistype.get_new_command": [], "tests.rules.test_git_bisect_usage": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_git_bisect_usage.output": [], "tests.rules.test_git_bisect_usage.test_match": ["thefuck.rules.git_bisect_usage.match", "thefuck.types.Command"], "thefuck.rules.git_bisect_usage.match": [], "tests.rules.test_git_bisect_usage.test_not_match": ["thefuck.rules.git_bisect_usage.match", "thefuck.types.Command"], "tests.rules.test_git_bisect_usage.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_bisect_usage.get_new_command"], "thefuck.rules.git_bisect_usage.get_new_command": [], "tests.rules.test_tsuru_login": ["pytest.mark.parametrize"], "tests.rules.test_tsuru_login.test_match": ["thefuck.rules.tsuru_login.match"], "thefuck.rules.tsuru_login.match": [], "tests.rules.test_tsuru_login.test_not_match": ["thefuck.rules.tsuru_login.match"], "tests.rules.test_tsuru_login.test_get_new_command": ["thefuck.rules.tsuru_login.get_new_command"], "thefuck.rules.tsuru_login.get_new_command": [], "tests.rules.test_git_pull": ["pytest.fixture"], "tests.rules.test_git_pull.output": [], "tests.rules.test_git_pull.test_match": ["thefuck.rules.git_pull.match", "thefuck.types.Command"], "thefuck.rules.git_pull.match": [], "tests.rules.test_git_pull.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_pull.get_new_command"], "thefuck.rules.git_pull.get_new_command": [], "tests.rules.test_switch_lang": ["pytest.mark.parametrize"], "tests.rules.test_switch_lang.test_match": ["thefuck.rules.switch_lang.match"], "thefuck.rules.switch_lang.match": [], "tests.rules.test_switch_lang.test_not_match": ["thefuck.rules.switch_lang.match"], "tests.rules.test_switch_lang.test_get_new_command": ["thefuck.rules.switch_lang.get_new_command"], "thefuck.rules.switch_lang.get_new_command": [], "tests.rules.test_git_merge": ["pytest.mark.parametrize"], "tests.rules.test_git_merge.test_match": ["thefuck.types.Command", "thefuck.rules.git_merge.match"], "thefuck.rules.git_merge.match": [], "tests.rules.test_git_merge.test_get_new_command": ["thefuck.rules.git_merge.get_new_command"], "thefuck.rules.git_merge.get_new_command": [], "tests.rules.test_grep_recursive": [], "tests.rules.test_grep_recursive.test_match": ["thefuck.types.Command", "thefuck.rules.grep_recursive.match"], "thefuck.rules.grep_recursive.match": [], "tests.rules.test_grep_recursive.test_get_new_command": ["thefuck.rules.grep_recursive.get_new_command", "thefuck.types.Command"], "thefuck.rules.grep_recursive.get_new_command": [], "tests.rules.test_git_branch_exists": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_git_branch_exists.output": [], "tests.rules.test_git_branch_exists.new_command": [], "tests.rules.test_git_branch_exists.test_match": ["thefuck.rules.git_branch_exists.match", "thefuck.types.Command"], "thefuck.rules.git_branch_exists.match": [], "tests.rules.test_git_branch_exists.test_not_match": ["thefuck.rules.git_branch_exists.match", "thefuck.types.Command"], "tests.rules.test_git_branch_exists.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_branch_exists.get_new_command"], "thefuck.rules.git_branch_exists.get_new_command": [], "tests.rules.test_gradle_wrapper": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_gradle_wrapper.exists": [], "tests.rules.test_gradle_wrapper.test_match": ["thefuck.rules.gradle_wrapper.match"], "thefuck.rules.gradle_wrapper.match": [], "tests.rules.test_gradle_wrapper.test_not_match": ["thefuck.rules.gradle_wrapper.match"], "tests.rules.test_gradle_wrapper.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.gradle_wrapper.get_new_command"], "thefuck.rules.gradle_wrapper.get_new_command": [], "tests.rules.test_workon_doesnt_exists": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_workon_doesnt_exists.envs": [], "tests.rules.test_workon_doesnt_exists.test_match": ["thefuck.rules.workon_doesnt_exists.match", "thefuck.types.Command"], "thefuck.rules.workon_doesnt_exists.match": [], "tests.rules.test_workon_doesnt_exists.test_not_match": ["thefuck.rules.workon_doesnt_exists.match", "thefuck.types.Command"], "tests.rules.test_workon_doesnt_exists.test_get_new_command": ["thefuck.rules.workon_doesnt_exists.get_new_command", "thefuck.types.Command"], "thefuck.rules.workon_doesnt_exists.get_new_command": [], "tests.rules.test_git_rm_local_modifications": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_git_rm_local_modifications.output": [], "tests.rules.test_git_rm_local_modifications.test_match": ["thefuck.rules.git_rm_local_modifications.match", "thefuck.types.Command"], "thefuck.rules.git_rm_local_modifications.match": [], "tests.rules.test_git_rm_local_modifications.test_not_match": ["thefuck.rules.git_rm_local_modifications.match", "thefuck.types.Command"], "tests.rules.test_git_rm_local_modifications.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_rm_local_modifications.get_new_command"], "thefuck.rules.git_rm_local_modifications.get_new_command": [], "tests.rules.test_dirty_untar": ["tests.rules.test_dirty_untar.parametrize_filename", "pytest.fixture", "tests.rules.test_dirty_untar.parametrize_script", "pytest.mark.parametrize", "tests.rules.test_dirty_untar.parametrize_extensions"], "tests.rules.test_dirty_untar.tar_error": [], "tests.rules.test_dirty_untar.tar_error.fixture": ["os.chdir", "tests.rules.test_dirty_untar.tar_error.fixture.reset", "os.listdir", "<builtin>.str", "<builtin>.set", "os.path.join"], "tests.rules.test_dirty_untar.tar_error.fixture.reset": ["<builtin>.open", "os.remove", "tarfile.TarFile", "os.mkdir"], "os.mkdir": [], "tarfile.TarFile": [], "<builtin>.open": [], "os.remove": [], "tests.rules.test_dirty_untar.parametrize_extensions": [], "tests.rules.test_dirty_untar.parametrize_filename": [], "tests.rules.test_dirty_untar.parametrize_script": [], "tests.rules.test_dirty_untar.test_match": ["thefuck.rules.dirty_untar.match", "thefuck.types.Command"], "thefuck.rules.dirty_untar.match": [], "tests.rules.test_dirty_untar.test_side_effect": ["<builtin>.set", "thefuck.types.Command", "thefuck.rules.dirty_untar.side_effect", "os.listdir"], "thefuck.rules.dirty_untar.side_effect": [], "tests.rules.test_dirty_untar.test_get_new_command": ["thefuck.rules.dirty_untar.get_new_command", "thefuck.types.Command"], "thefuck.rules.dirty_untar.get_new_command": [], "tests.rules.test_az_cli": ["pytest.mark.parametrize"], "tests.rules.test_az_cli.test_match": ["thefuck.rules.az_cli.match"], "thefuck.rules.az_cli.match": [], "tests.rules.test_az_cli.test_not_match": ["thefuck.types.Command", "thefuck.rules.az_cli.match"], "tests.rules.test_az_cli.test_get_new_command": ["thefuck.rules.az_cli.get_new_command"], "thefuck.rules.az_cli.get_new_command": [], "tests.rules.test_terraform_no_command": ["pytest.mark.parametrize"], "tests.rules.test_terraform_no_command.test_match": ["thefuck.rules.terraform_no_command.match", "thefuck.types.Command"], "thefuck.rules.terraform_no_command.match": [], "tests.rules.test_terraform_no_command.test_not_match": ["thefuck.rules.terraform_no_command.match", "thefuck.types.Command"], "tests.rules.test_terraform_no_command.test_get_new_command": ["thefuck.rules.terraform_no_command.get_new_command", "thefuck.types.Command"], "thefuck.rules.terraform_no_command.get_new_command": [], "tests.rules.test_scm_correction": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_scm_correction.get_actual_scm_mock": [], "tests.rules.test_scm_correction.test_match": ["thefuck.types.Command", "thefuck.rules.scm_correction.match"], "thefuck.rules.scm_correction.match": [], "tests.rules.test_scm_correction.test_not_match": ["thefuck.types.Command", "thefuck.rules.scm_correction.match"], "tests.rules.test_scm_correction.test_get_new_command": ["thefuck.rules.scm_correction.get_new_command", "thefuck.types.Command"], "thefuck.rules.scm_correction.get_new_command": [], "tests.rules.test_mkdir_p": ["pytest.mark.parametrize"], "tests.rules.test_mkdir_p.test_match": ["thefuck.rules.mkdir_p.match"], "thefuck.rules.mkdir_p.match": [], "tests.rules.test_mkdir_p.test_not_match": ["thefuck.rules.mkdir_p.match"], "tests.rules.test_mkdir_p.test_get_new_command": ["thefuck.rules.mkdir_p.get_new_command"], "thefuck.rules.mkdir_p.get_new_command": [], "tests.rules.test_aws_cli": ["pytest.mark.parametrize"], "tests.rules.test_aws_cli.test_match": ["thefuck.rules.aws_cli.match"], "thefuck.rules.aws_cli.match": [], "tests.rules.test_aws_cli.test_not_match": ["thefuck.types.Command", "thefuck.rules.aws_cli.match"], "tests.rules.test_aws_cli.test_get_new_command": ["thefuck.rules.aws_cli.get_new_command"], "thefuck.rules.aws_cli.get_new_command": [], "tests.rules.test_git_main_master": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_git_main_master.output": [], "tests.rules.test_git_main_master.test_match": ["thefuck.types.Command", "thefuck.rules.git_main_master.match"], "thefuck.rules.git_main_master.match": [], "tests.rules.test_git_main_master.test_not_match": ["thefuck.types.Command", "thefuck.rules.git_main_master.match"], "tests.rules.test_git_main_master.test_get_new_command": ["thefuck.rules.git_main_master.get_new_command", "thefuck.types.Command"], "thefuck.rules.git_main_master.get_new_command": [], "tests.rules.test_git_merge_unrelated": ["pytest.mark.parametrize"], "tests.rules.test_git_merge_unrelated.test_match": ["thefuck.types.Command", "thefuck.rules.git_merge_unrelated.match"], "thefuck.rules.git_merge_unrelated.match": [], "tests.rules.test_git_merge_unrelated.test_get_new_command": ["thefuck.rules.git_merge_unrelated.get_new_command"], "thefuck.rules.git_merge_unrelated.get_new_command": [], "tests.rules.test_sudo_command_from_user_path": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_sudo_command_from_user_path.which": [], "tests.rules.test_sudo_command_from_user_path.test_match": ["thefuck.rules.sudo_command_from_user_path.match", "thefuck.types.Command"], "thefuck.rules.sudo_command_from_user_path.match": [], "tests.rules.test_sudo_command_from_user_path.test_not_match": ["thefuck.rules.sudo_command_from_user_path.match", "thefuck.types.Command"], "tests.rules.test_sudo_command_from_user_path.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.sudo_command_from_user_path.get_new_command"], "thefuck.rules.sudo_command_from_user_path.get_new_command": [], "tests.rules.test_brew_unknown_command": ["pytest.fixture"], "tests.rules.test_brew_unknown_command.brew_unknown_cmd": [], "tests.rules.test_brew_unknown_command.brew_unknown_cmd2": [], "tests.rules.test_brew_unknown_command.test_match": ["thefuck.rules.brew_unknown_command.match", "thefuck.types.Command", "thefuck.rules.brew_unknown_command._brew_commands"], "thefuck.rules.brew_unknown_command.match": [], "thefuck.rules.brew_unknown_command._brew_commands": [], "tests.rules.test_brew_unknown_command.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.brew_unknown_command.get_new_command"], "thefuck.rules.brew_unknown_command.get_new_command": [], "tests.rules.test_ln_s_order": ["pytest.mark.parametrize", "pytest.fixture", "pytest.mark.usefixtures"], "tests.rules.test_ln_s_order.file_exists": [], "tests.rules.test_ln_s_order.test_not_match": ["thefuck.types.Command", "thefuck.rules.ln_s_order.match"], "thefuck.rules.ln_s_order.match": [], "tests.rules.test_ln_s_order.test_match": ["thefuck.types.Command", "thefuck.rules.ln_s_order.match", "thefuck.rules.ln_s_order.get_new_command"], "thefuck.rules.ln_s_order.get_new_command": [], "tests.rules.test_go_unknown_command": ["pytest.mark.usefixtures", "pytest.fixture"], "tests.rules.test_go_unknown_command.build_misspelled_output": [], "tests.rules.test_go_unknown_command.go_stderr": ["io.BytesIO"], "tests.rules.test_go_unknown_command.test_match": ["thefuck.types.Command", "thefuck.rules.go_unknown_command.match"], "thefuck.rules.go_unknown_command.match": [], "tests.rules.test_go_unknown_command.test_not_match": ["thefuck.types.Command", "thefuck.rules.go_unknown_command.match"], "tests.rules.test_go_unknown_command.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.go_unknown_command.get_new_command"], "thefuck.rules.go_unknown_command.get_new_command": [], "tests.rules.test_wrong_hyphen_before_subcommand": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_wrong_hyphen_before_subcommand.get_all_executables": [], "tests.rules.test_wrong_hyphen_before_subcommand.test_match": ["thefuck.types.Command", "thefuck.rules.wrong_hyphen_before_subcommand.match"], "thefuck.rules.wrong_hyphen_before_subcommand.match": [], "tests.rules.test_wrong_hyphen_before_subcommand.test_not_match": ["thefuck.types.Command", "thefuck.rules.wrong_hyphen_before_subcommand.match"], "tests.rules.test_wrong_hyphen_before_subcommand.test_get_new_command": ["thefuck.rules.wrong_hyphen_before_subcommand.get_new_command", "thefuck.types.Command"], "thefuck.rules.wrong_hyphen_before_subcommand.get_new_command": [], "tests.rules.test_ssh_known_host": ["pytest.mark.skipif", "pytest.fixture"], "tests.rules.test_ssh_known_host.ssh_error": ["tests.rules.test_ssh_known_host.ssh_error.reset", "os.path.join", "<builtin>.str"], "tests.rules.test_ssh_known_host.ssh_error.reset": ["<builtin>.open"], "tests.rules.test_ssh_known_host.ssh_error.known_hosts": ["<builtin>.open"], "tests.rules.test_ssh_known_host.test_match": ["thefuck.types.Command", "thefuck.rules.ssh_known_hosts.match"], "thefuck.rules.ssh_known_hosts.match": [], "tests.rules.test_ssh_known_host.test_side_effect": ["thefuck.types.Command", "thefuck.rules.ssh_known_hosts.side_effect"], "thefuck.rules.ssh_known_hosts.side_effect": [], "tests.rules.test_ssh_known_host.test_get_new_command": ["thefuck.rules.ssh_known_hosts.get_new_command", "thefuck.types.Command"], "thefuck.rules.ssh_known_hosts.get_new_command": [], "tests.rules.test_yarn_alias": ["pytest.mark.parametrize"], "tests.rules.test_yarn_alias.test_match": ["thefuck.rules.yarn_alias.match"], "thefuck.rules.yarn_alias.match": [], "tests.rules.test_yarn_alias.test_get_new_command": ["thefuck.rules.yarn_alias.get_new_command"], "thefuck.rules.yarn_alias.get_new_command": [], "tests.rules.test_choco_install": ["pytest.mark.parametrize"], "tests.rules.test_choco_install.test_match": ["thefuck.rules.choco_install.match"], "thefuck.rules.choco_install.match": [], "tests.rules.test_choco_install.not_test_match": ["thefuck.rules.choco_install.match"], "tests.rules.test_choco_install.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.choco_install.get_new_command"], "thefuck.rules.choco_install.get_new_command": [], "tests.rules.test_java": ["pytest.mark.parametrize"], "tests.rules.test_java.test_match": ["thefuck.rules.java.match"], "thefuck.rules.java.match": [], "tests.rules.test_java.test_get_new_command": ["thefuck.rules.java.get_new_command"], "thefuck.rules.java.get_new_command": [], "tests.rules.test_git_add": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_git_add.path_exists": [], "tests.rules.test_git_add.output": [], "tests.rules.test_git_add.test_match": ["thefuck.rules.git_add.match", "thefuck.types.Command"], "thefuck.rules.git_add.match": [], "tests.rules.test_git_add.test_not_match": ["thefuck.rules.git_add.match", "thefuck.types.Command"], "tests.rules.test_git_add.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_add.get_new_command"], "thefuck.rules.git_add.get_new_command": [], "tests.rules.test_apt_invalid_operation": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_apt_invalid_operation.test_match": ["thefuck.types.Command", "thefuck.rules.apt_invalid_operation.match"], "thefuck.rules.apt_invalid_operation.match": [], "tests.rules.test_apt_invalid_operation.test_not_match": ["thefuck.types.Command", "thefuck.rules.apt_invalid_operation.match"], "tests.rules.test_apt_invalid_operation.set_help": [], "tests.rules.test_apt_invalid_operation.set_help._set_text": ["io.BytesIO"], "tests.rules.test_apt_invalid_operation.test_get_operations": ["thefuck.rules.apt_invalid_operation._get_operations"], "thefuck.rules.apt_invalid_operation._get_operations": [], "tests.rules.test_apt_invalid_operation.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.apt_invalid_operation.get_new_command"], "thefuck.rules.apt_invalid_operation.get_new_command": [], "tests.rules.test_pip_install": [], "tests.rules.test_pip_install.test_match": ["thefuck.types.Command", "thefuck.rules.pip_install.match"], "thefuck.rules.pip_install.match": [], "tests.rules.test_pip_install.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.pip_install.get_new_command"], "thefuck.rules.pip_install.get_new_command": [], "tests.rules.test_git_pull_unstaged_changes": ["pytest.fixture"], "tests.rules.test_git_pull_unstaged_changes.output": [], "tests.rules.test_git_pull_unstaged_changes.test_match": ["thefuck.types.Command", "thefuck.rules.git_pull_uncommitted_changes.match"], "thefuck.rules.git_pull_uncommitted_changes.match": [], "tests.rules.test_git_pull_unstaged_changes.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_pull_uncommitted_changes.get_new_command"], "thefuck.rules.git_pull_uncommitted_changes.get_new_command": [], "tests.rules.test_sed_unterminated_s": ["pytest.fixture"], "tests.rules.test_sed_unterminated_s.sed_unterminated_s": [], "tests.rules.test_sed_unterminated_s.test_match": ["thefuck.rules.sed_unterminated_s.match", "thefuck.types.Command"], "thefuck.rules.sed_unterminated_s.match": [], "tests.rules.test_sed_unterminated_s.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.sed_unterminated_s.get_new_command"], "thefuck.rules.sed_unterminated_s.get_new_command": [], "tests.rules.test_git_add_force": ["pytest.fixture"], "tests.rules.test_git_add_force.output": [], "tests.rules.test_git_add_force.test_match": ["thefuck.rules.git_add_force.match", "thefuck.types.Command"], "thefuck.rules.git_add_force.match": [], "tests.rules.test_git_add_force.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_add_force.get_new_command"], "thefuck.rules.git_add_force.get_new_command": [], "tests.rules.test_git_flag_after_filename": ["pytest.mark.parametrize", "thefuck.types.Command"], "tests.rules.test_git_flag_after_filename.test_match": ["thefuck.rules.git_flag_after_filename.match"], "thefuck.rules.git_flag_after_filename.match": [], "tests.rules.test_git_flag_after_filename.test_not_match": ["thefuck.rules.git_flag_after_filename.match"], "tests.rules.test_git_flag_after_filename.test_get_new_command": ["thefuck.rules.git_flag_after_filename.get_new_command"], "thefuck.rules.git_flag_after_filename.get_new_command": [], "tests.rules.test_rm_dir": ["pytest.mark.parametrize"], "tests.rules.test_rm_dir.test_match": ["thefuck.rules.rm_dir.match"], "thefuck.rules.rm_dir.match": [], "tests.rules.test_rm_dir.test_not_match": ["thefuck.rules.rm_dir.match"], "tests.rules.test_rm_dir.test_get_new_command": ["thefuck.rules.rm_dir.get_new_command"], "thefuck.rules.rm_dir.get_new_command": [], "tests.rules.test_composer_not_command": ["pytest.fixture"], "tests.rules.test_composer_not_command.composer_not_command": [], "tests.rules.test_composer_not_command.composer_not_command_one_of_this": [], "tests.rules.test_composer_not_command.composer_require_instead_of_install": [], "tests.rules.test_composer_not_command.test_match": ["thefuck.types.Command", "thefuck.rules.composer_not_command.match"], "thefuck.rules.composer_not_command.match": [], "tests.rules.test_composer_not_command.test_get_new_command": ["thefuck.rules.composer_not_command.get_new_command", "thefuck.types.Command"], "thefuck.rules.composer_not_command.get_new_command": [], "tests.rules.test_terraform_init": ["pytest.mark.parametrize"], "tests.rules.test_terraform_init.test_match": ["thefuck.rules.terraform_init.match", "thefuck.types.Command"], "thefuck.rules.terraform_init.match": [], "tests.rules.test_terraform_init.test_not_match": ["thefuck.rules.terraform_init.match", "thefuck.types.Command"], "tests.rules.test_terraform_init.test_get_new_command": ["thefuck.rules.terraform_init.get_new_command"], "thefuck.rules.terraform_init.get_new_command": [], "tests.rules.test_npm_run_script": ["pytest.mark.usefixtures", "pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_npm_run_script.run_script": ["io.BytesIO"], "tests.rules.test_npm_run_script.test_match": ["thefuck.rules.npm_run_script.match", "thefuck.types.Command"], "thefuck.rules.npm_run_script.match": [], "tests.rules.test_npm_run_script.test_not_match": ["io.BytesIO", "thefuck.rules.npm_run_script.match"], "tests.rules.test_npm_run_script.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.npm_run_script.get_new_command"], "thefuck.rules.npm_run_script.get_new_command": [], "tests.rules.test_ln_no_hard_link": ["pytest.mark.parametrize"], "tests.rules.test_ln_no_hard_link.test_match": ["thefuck.types.Command", "thefuck.rules.ln_no_hard_link.match"], "thefuck.rules.ln_no_hard_link.match": [], "tests.rules.test_ln_no_hard_link.test_not_match": ["thefuck.types.Command", "thefuck.rules.ln_no_hard_link.match"], "tests.rules.test_ln_no_hard_link.test_get_new_command": ["thefuck.rules.ln_no_hard_link.get_new_command", "thefuck.types.Command"], "thefuck.rules.ln_no_hard_link.get_new_command": [], "tests.rules.test_git_push_force": ["pytest.mark.parametrize"], "tests.rules.test_git_push_force.test_match": ["thefuck.rules.git_push_force.match"], "thefuck.rules.git_push_force.match": [], "tests.rules.test_git_push_force.test_not_match": ["thefuck.rules.git_push_force.match"], "tests.rules.test_git_push_force.test_get_new_command": ["thefuck.rules.git_push_force.get_new_command"], "thefuck.rules.git_push_force.get_new_command": [], "tests.rules.test_git_push_pull": ["pytest.mark.parametrize"], "tests.rules.test_git_push_pull.test_match": ["thefuck.rules.git_push_pull.match"], "thefuck.rules.git_push_pull.match": [], "tests.rules.test_git_push_pull.test_not_match": ["thefuck.rules.git_push_pull.match"], "tests.rules.test_git_push_pull.test_get_new_command": ["thefuck.rules.git_push_pull.get_new_command"], "thefuck.rules.git_push_pull.get_new_command": [], "tests.rules.test_pacman_invalid_option": ["pytest.mark.parametrize"], "tests.rules.test_pacman_invalid_option.test_not_match_good_output": ["thefuck.rules.pacman_invalid_option.match", "thefuck.types.Command"], "thefuck.rules.pacman_invalid_option.match": [], "tests.rules.test_pacman_invalid_option.test_not_match_bad_output": ["thefuck.rules.pacman_invalid_option.match", "thefuck.types.Command"], "tests.rules.test_pacman_invalid_option.test_match": ["thefuck.rules.pacman_invalid_option.match", "thefuck.types.Command"], "tests.rules.test_pacman_invalid_option.test_get_new_command": ["thefuck.rules.pacman_invalid_option.get_new_command", "thefuck.types.Command"], "thefuck.rules.pacman_invalid_option.get_new_command": [], "tests.rules.test_hostscli": ["pytest.mark.parametrize"], "tests.rules.test_hostscli.test_match": ["thefuck.rules.hostscli.match"], "thefuck.rules.hostscli.match": [], "tests.rules.test_hostscli.test_get_new_command": ["thefuck.rules.hostscli.get_new_command"], "thefuck.rules.hostscli.get_new_command": [], "tests.rules.test_npm_wrong_command": ["pytest.mark.parametrize"], "tests.rules.test_npm_wrong_command.test_match": ["thefuck.types.Command", "thefuck.rules.npm_wrong_command.match"], "thefuck.rules.npm_wrong_command.match": [], "tests.rules.test_npm_wrong_command.test_not_match": ["thefuck.types.Command", "thefuck.rules.npm_wrong_command.match"], "tests.rules.test_npm_wrong_command.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.npm_wrong_command.get_new_command"], "thefuck.rules.npm_wrong_command.get_new_command": [], "tests.rules.test_prove_recursively": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_prove_recursively.isdir": [], "tests.rules.test_prove_recursively.test_match": ["thefuck.rules.prove_recursively.match", "thefuck.types.Command"], "thefuck.rules.prove_recursively.match": [], "tests.rules.test_prove_recursively.test_not_match": ["thefuck.rules.prove_recursively.match", "thefuck.types.Command"], "tests.rules.test_prove_recursively.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.prove_recursively.get_new_command"], "thefuck.rules.prove_recursively.get_new_command": [], "tests.rules.test_git_commit_add": ["pytest.mark.parametrize"], "tests.rules.test_git_commit_add.test_match": ["thefuck.rules.git_commit_add.match", "thefuck.types.Command"], "thefuck.rules.git_commit_add.match": [], "tests.rules.test_git_commit_add.test_not_match": ["thefuck.rules.git_commit_add.match", "thefuck.types.Command"], "tests.rules.test_git_commit_add.test_get_new_command": ["thefuck.rules.git_commit_add.get_new_command", "thefuck.types.Command"], "thefuck.rules.git_commit_add.get_new_command": [], "tests.rules.test_path_from_history": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_path_from_history.history": [], "tests.rules.test_path_from_history.path_exists": [], "tests.rules.test_path_from_history.test_match": ["thefuck.types.Command", "thefuck.rules.path_from_history.match"], "thefuck.rules.path_from_history.match": [], "tests.rules.test_path_from_history.test_not_match": ["thefuck.types.Command", "thefuck.rules.path_from_history.match"], "tests.rules.test_path_from_history.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.path_from_history.get_new_command"], "thefuck.rules.path_from_history.get_new_command": [], "tests.rules.test_yarn_command_not_found": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_yarn_command_not_found.yarn_help": ["io.BytesIO"], "tests.rules.test_yarn_command_not_found.test_match": ["thefuck.rules.yarn_command_not_found.match"], "thefuck.rules.yarn_command_not_found.match": [], "tests.rules.test_yarn_command_not_found.test_not_match": ["thefuck.rules.yarn_command_not_found.match"], "tests.rules.test_yarn_command_not_found.test_get_new_command": ["<builtin>.isinstance", "thefuck.rules.yarn_command_not_found.get_new_command"], "thefuck.rules.yarn_command_not_found.get_new_command": [], "<builtin>.isinstance": [], "tests.rules.test_brew_install": ["pytest.fixture"], "tests.rules.test_brew_install.brew_no_available_formula_one": [], "tests.rules.test_brew_install.brew_no_available_formula_two": [], "tests.rules.test_brew_install.brew_no_available_formula_three": [], "tests.rules.test_brew_install.brew_install_no_argument": [], "tests.rules.test_brew_install.brew_already_installed": [], "tests.rules.test_brew_install.test_suggestions": ["thefuck.rules.brew_install._get_suggestions"], "thefuck.rules.brew_install._get_suggestions": [], "tests.rules.test_brew_install.test_match": ["thefuck.types.Command", "thefuck.rules.brew_install.match"], "thefuck.rules.brew_install.match": [], "tests.rules.test_brew_install.test_get_new_command": ["thefuck.rules.brew_install.get_new_command", "thefuck.types.Command"], "thefuck.rules.brew_install.get_new_command": [], "tests.rules.test_git_diff_no_index": ["pytest.mark.parametrize"], "tests.rules.test_git_diff_no_index.test_match": ["thefuck.rules.git_diff_no_index.match"], "thefuck.rules.git_diff_no_index.match": [], "tests.rules.test_git_diff_no_index.test_not_match": ["thefuck.rules.git_diff_no_index.match"], "tests.rules.test_git_diff_no_index.test_get_new_command": ["thefuck.rules.git_diff_no_index.get_new_command"], "thefuck.rules.git_diff_no_index.get_new_command": [], "tests.rules.test_dry": ["pytest.mark.parametrize"], "tests.rules.test_dry.test_match": ["thefuck.rules.dry.match"], "thefuck.rules.dry.match": [], "tests.rules.test_dry.test_get_new_command": ["thefuck.rules.dry.get_new_command"], "thefuck.rules.dry.get_new_command": [], "tests.rules.test_tmux": ["pytest.fixture"], "tests.rules.test_tmux.tmux_ambiguous": [], "tests.rules.test_tmux.test_match": ["thefuck.rules.tmux.match", "thefuck.types.Command"], "thefuck.rules.tmux.match": [], "tests.rules.test_tmux.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.tmux.get_new_command"], "thefuck.rules.tmux.get_new_command": [], "tests.rules.test_dnf_no_such_command": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_dnf_no_such_command.invalid_command": [], "tests.rules.test_dnf_no_such_command.test_match": ["thefuck.rules.dnf_no_such_command.match", "thefuck.types.Command"], "thefuck.rules.dnf_no_such_command.match": [], "tests.rules.test_dnf_no_such_command.test_not_match": ["thefuck.rules.dnf_no_such_command.match", "thefuck.types.Command"], "tests.rules.test_dnf_no_such_command.set_help": [], "tests.rules.test_dnf_no_such_command.set_help._set_text": ["io.BytesIO"], "tests.rules.test_dnf_no_such_command.test_get_operations": ["thefuck.rules.dnf_no_such_command._get_operations"], "thefuck.rules.dnf_no_such_command._get_operations": [], "tests.rules.test_dnf_no_such_command.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.dnf_no_such_command.get_new_command"], "thefuck.rules.dnf_no_such_command.get_new_command": [], "tests.rules.test_ls_lah": [], "tests.rules.test_ls_lah.test_match": ["thefuck.types.Command", "thefuck.rules.ls_lah.match"], "thefuck.rules.ls_lah.match": [], "tests.rules.test_ls_lah.test_get_new_command": ["thefuck.rules.ls_lah.get_new_command", "thefuck.types.Command"], "thefuck.rules.ls_lah.get_new_command": [], "tests.rules.test_mvn_unknown_lifecycle_phase": ["pytest.mark.parametrize"], "tests.rules.test_mvn_unknown_lifecycle_phase.test_match": ["thefuck.rules.mvn_unknown_lifecycle_phase.match"], "thefuck.rules.mvn_unknown_lifecycle_phase.match": [], "tests.rules.test_mvn_unknown_lifecycle_phase.test_not_match": ["thefuck.rules.mvn_unknown_lifecycle_phase.match"], "tests.rules.test_mvn_unknown_lifecycle_phase.test_get_new_command": ["thefuck.rules.mvn_unknown_lifecycle_phase.get_new_command"], "thefuck.rules.mvn_unknown_lifecycle_phase.get_new_command": [], "tests.rules.test_heroku_multiple_apps": ["pytest.mark.parametrize"], "tests.rules.test_heroku_multiple_apps.test_match": ["thefuck.types.Command", "thefuck.rules.heroku_multiple_apps.match"], "thefuck.rules.heroku_multiple_apps.match": [], "tests.rules.test_heroku_multiple_apps.test_not_match": ["thefuck.types.Command", "thefuck.rules.heroku_multiple_apps.match"], "tests.rules.test_heroku_multiple_apps.test_get_new_command": ["thefuck.rules.heroku_multiple_apps.get_new_command", "thefuck.types.Command"], "thefuck.rules.heroku_multiple_apps.get_new_command": [], "tests.rules.test_pacman_not_found": ["<builtin>.getattr", "pytest.mark.parametrize", "pytest.mark.skipif", "mock.patch"], "tests.rules.test_pacman_not_found.test_match": ["thefuck.rules.pacman_not_found.match"], "thefuck.rules.pacman_not_found.match": [], "tests.rules.test_pacman_not_found.test_match_mocked": ["thefuck.rules.pacman_not_found.match"], "tests.rules.test_pacman_not_found.test_get_new_command": ["thefuck.rules.pacman_not_found.get_new_command"], "thefuck.rules.pacman_not_found.get_new_command": [], "tests.rules.test_pacman_not_found.test_get_new_command_mocked": ["thefuck.rules.pacman_not_found.get_new_command"], "tests.rules.test_has_exists_script": [], "tests.rules.test_has_exists_script.test_match": ["thefuck.types.Command", "thefuck.rules.has_exists_script.match", "mock.patch"], "thefuck.rules.has_exists_script.match": [], "tests.rules.test_has_exists_script.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.has_exists_script.get_new_command"], "thefuck.rules.has_exists_script.get_new_command": [], "tests.rules.test_git_help_aliased": ["pytest.mark.parametrize"], "tests.rules.test_git_help_aliased.test_match": ["thefuck.types.Command", "thefuck.rules.git_help_aliased.match"], "thefuck.rules.git_help_aliased.match": [], "tests.rules.test_git_help_aliased.test_not_match": ["thefuck.types.Command", "thefuck.rules.git_help_aliased.match"], "tests.rules.test_git_help_aliased.test_get_new_command": ["thefuck.rules.git_help_aliased.get_new_command", "thefuck.types.Command"], "thefuck.rules.git_help_aliased.get_new_command": [], "tests.rules.test_ls_all": [], "tests.rules.test_ls_all.test_match": ["thefuck.types.Command", "thefuck.rules.ls_all.match"], "thefuck.rules.ls_all.match": [], "tests.rules.test_ls_all.test_get_new_command": ["thefuck.rules.ls_all.get_new_command", "thefuck.types.Command"], "thefuck.rules.ls_all.get_new_command": [], "tests.rules.test_django_south_ghost": ["pytest.fixture"], "tests.rules.test_django_south_ghost.output": [], "tests.rules.test_django_south_ghost.test_match": ["thefuck.rules.django_south_ghost.match", "thefuck.types.Command"], "thefuck.rules.django_south_ghost.match": [], "tests.rules.test_django_south_ghost.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.django_south_ghost.get_new_command"], "thefuck.rules.django_south_ghost.get_new_command": [], "tests.rules.test_git_two_dashes": ["pytest.mark.parametrize"], "tests.rules.test_git_two_dashes.test_match": ["thefuck.rules.git_two_dashes.match"], "thefuck.rules.git_two_dashes.match": [], "tests.rules.test_git_two_dashes.test_not_match": ["thefuck.rules.git_two_dashes.match"], "tests.rules.test_git_two_dashes.test_get_new_command": ["thefuck.rules.git_two_dashes.get_new_command"], "thefuck.rules.git_two_dashes.get_new_command": [], "tests.rules.test_git_stash_pop": ["pytest.fixture"], "tests.rules.test_git_stash_pop.output": [], "tests.rules.test_git_stash_pop.test_match": ["thefuck.rules.git_stash_pop.match", "thefuck.types.Command"], "thefuck.rules.git_stash_pop.match": [], "tests.rules.test_git_stash_pop.test_get_new_command": ["thefuck.rules.git_stash_pop.get_new_command", "thefuck.types.Command"], "thefuck.rules.git_stash_pop.get_new_command": [], "tests.rules.test_no_such_file": ["pytest.mark.parametrize"], "tests.rules.test_no_such_file.test_match": ["thefuck.rules.no_such_file.match"], "thefuck.rules.no_such_file.match": [], "tests.rules.test_no_such_file.test_not_match": ["thefuck.rules.no_such_file.match"], "tests.rules.test_no_such_file.test_get_new_command": ["thefuck.rules.no_such_file.get_new_command"], "thefuck.rules.no_such_file.get_new_command": [], "tests.rules.test_pip_unknown_command": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_pip_unknown_command.pip_unknown_cmd_without_recommend": [], "tests.rules.test_pip_unknown_command.broken": [], "tests.rules.test_pip_unknown_command.suggested": [], "tests.rules.test_pip_unknown_command.pip_unknown_cmd": [], "tests.rules.test_pip_unknown_command.test_match": ["thefuck.rules.pip_unknown_command.match", "thefuck.types.Command"], "thefuck.rules.pip_unknown_command.match": [], "tests.rules.test_pip_unknown_command.test_get_new_command": ["thefuck.rules.pip_unknown_command.get_new_command", "thefuck.types.Command"], "thefuck.rules.pip_unknown_command.get_new_command": [], "tests.rules.test_yarn_command_replaced": ["pytest.mark.parametrize"], "tests.rules.test_yarn_command_replaced.test_match": ["thefuck.rules.yarn_command_replaced.match"], "thefuck.rules.yarn_command_replaced.match": [], "tests.rules.test_yarn_command_replaced.test_not_match": ["thefuck.rules.yarn_command_replaced.match"], "tests.rules.test_yarn_command_replaced.test_get_new_command": ["thefuck.rules.yarn_command_replaced.get_new_command"], "thefuck.rules.yarn_command_replaced.get_new_command": [], "tests.rules.test_fix_alt_space": [], "tests.rules.test_fix_alt_space.test_match": ["thefuck.types.Command", "thefuck.rules.fix_alt_space.match"], "thefuck.rules.fix_alt_space.match": [], "tests.rules.test_fix_alt_space.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.fix_alt_space.get_new_command"], "thefuck.rules.fix_alt_space.get_new_command": [], "tests.rules.test_git_pull_uncommitted_changes": ["pytest.fixture"], "tests.rules.test_git_pull_uncommitted_changes.output": [], "tests.rules.test_git_pull_uncommitted_changes.test_match": ["thefuck.types.Command", "thefuck.rules.git_pull_uncommitted_changes.match"], "tests.rules.test_git_pull_uncommitted_changes.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_pull_uncommitted_changes.get_new_command"], "tests.rules.test_git_rebase_no_changes": ["pytest.fixture"], "tests.rules.test_git_rebase_no_changes.output": [], "tests.rules.test_git_rebase_no_changes.test_match": ["thefuck.types.Command", "thefuck.rules.git_rebase_no_changes.match"], "thefuck.rules.git_rebase_no_changes.match": [], "tests.rules.test_git_rebase_no_changes.test_get_new_command": ["thefuck.rules.git_rebase_no_changes.get_new_command", "thefuck.types.Command"], "thefuck.rules.git_rebase_no_changes.get_new_command": [], "tests.rules.test_git_push": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_git_push.output": [], "tests.rules.test_git_push.output_bitbucket": [], "tests.rules.test_git_push.test_match": ["thefuck.types.Command", "thefuck.rules.git_push.match"], "thefuck.rules.git_push.match": [], "tests.rules.test_git_push.test_match_bitbucket": ["thefuck.types.Command", "thefuck.rules.git_push.match"], "tests.rules.test_git_push.test_not_match": ["thefuck.types.Command", "thefuck.rules.git_push.match"], "tests.rules.test_git_push.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_push.get_new_command"], "thefuck.rules.git_push.get_new_command": [], "tests.rules.test_missing_space_before_subcommand": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_missing_space_before_subcommand.all_executables": [], "tests.rules.test_missing_space_before_subcommand.test_match": ["thefuck.types.Command", "thefuck.rules.missing_space_before_subcommand.match"], "thefuck.rules.missing_space_before_subcommand.match": [], "tests.rules.test_missing_space_before_subcommand.test_not_match": ["thefuck.types.Command", "thefuck.rules.missing_space_before_subcommand.match"], "tests.rules.test_missing_space_before_subcommand.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.missing_space_before_subcommand.get_new_command"], "thefuck.rules.missing_space_before_subcommand.get_new_command": [], "tests.rules.test_git_pull_clone": ["pytest.mark.parametrize"], "tests.rules.test_git_pull_clone.test_match": ["thefuck.rules.git_pull_clone.match"], "thefuck.rules.git_pull_clone.match": [], "tests.rules.test_git_pull_clone.test_get_new_command": ["thefuck.rules.git_pull_clone.get_new_command"], "thefuck.rules.git_pull_clone.get_new_command": [], "tests.rules.test_git_diff_staged": ["pytest.mark.parametrize"], "tests.rules.test_git_diff_staged.test_match": ["thefuck.rules.git_diff_staged.match"], "thefuck.rules.git_diff_staged.match": [], "tests.rules.test_git_diff_staged.test_not_match": ["thefuck.rules.git_diff_staged.match"], "tests.rules.test_git_diff_staged.test_get_new_command": ["thefuck.rules.git_diff_staged.get_new_command"], "thefuck.rules.git_diff_staged.get_new_command": [], "tests.rules.test_gem_unknown_command": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_gem_unknown_command.gem_help_commands": ["six.BytesIO"], "tests.rules.test_gem_unknown_command.test_match": ["thefuck.rules.gem_unknown_command.match", "thefuck.types.Command"], "thefuck.rules.gem_unknown_command.match": [], "tests.rules.test_gem_unknown_command.test_not_match": ["thefuck.rules.gem_unknown_command.match", "thefuck.types.Command"], "tests.rules.test_gem_unknown_command.test_get_new_command": ["thefuck.rules.gem_unknown_command.get_new_command", "thefuck.types.Command"], "thefuck.rules.gem_unknown_command.get_new_command": [], "tests.rules.test_history": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_history.history_without_current": [], "tests.rules.test_history.test_match": ["thefuck.types.Command", "thefuck.rules.history.match"], "thefuck.rules.history.match": [], "tests.rules.test_history.test_not_match": ["thefuck.types.Command", "thefuck.rules.history.match"], "tests.rules.test_history.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.history.get_new_command"], "thefuck.rules.history.get_new_command": [], "tests.rules.test_git_clone_missing": ["pytest.mark.parametrize"], "tests.rules.test_git_clone_missing.test_match": ["thefuck.rules.git_clone_missing.match", "thefuck.types.Command"], "thefuck.rules.git_clone_missing.match": [], "tests.rules.test_git_clone_missing.test_not_match": ["thefuck.rules.git_clone_missing.match", "thefuck.types.Command"], "tests.rules.test_git_clone_missing.test_get_new_command": ["thefuck.rules.git_clone_missing.get_new_command", "thefuck.types.Command"], "thefuck.rules.git_clone_missing.get_new_command": [], "tests.rules.test_git_branch_delete": ["pytest.fixture"], "tests.rules.test_git_branch_delete.output": [], "tests.rules.test_git_branch_delete.test_match": ["thefuck.types.Command", "thefuck.rules.git_branch_delete.match"], "thefuck.rules.git_branch_delete.match": [], "tests.rules.test_git_branch_delete.test_get_new_command": ["thefuck.rules.git_branch_delete.get_new_command", "thefuck.types.Command"], "thefuck.rules.git_branch_delete.get_new_command": [], "tests.rules.test_git_branch_list": [], "tests.rules.test_git_branch_list.test_match": ["thefuck.rules.git_branch_list.match", "thefuck.types.Command"], "thefuck.rules.git_branch_list.match": [], "tests.rules.test_git_branch_list.test_not_match": ["thefuck.rules.git_branch_list.match", "thefuck.types.Command"], "tests.rules.test_git_branch_list.test_get_new_command": ["thefuck.rules.git_branch_list.get_new_command", "thefuck.types.Command", "thefuck.shells.shell.and_"], "thefuck.rules.git_branch_list.get_new_command": [], "thefuck.shells.shell.and_": [], "tests.rules.test_brew_link": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_brew_link.output": [], "tests.rules.test_brew_link.new_command": [], "tests.rules.test_brew_link.test_match": ["thefuck.rules.brew_link.match", "thefuck.types.Command"], "thefuck.rules.brew_link.match": [], "tests.rules.test_brew_link.test_not_match": ["thefuck.rules.brew_link.match", "thefuck.types.Command"], "tests.rules.test_brew_link.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.brew_link.get_new_command"], "thefuck.rules.brew_link.get_new_command": [], "tests.rules.test_mvn_no_command": ["pytest.mark.parametrize"], "tests.rules.test_mvn_no_command.test_match": ["thefuck.rules.mvn_no_command.match"], "thefuck.rules.mvn_no_command.match": [], "tests.rules.test_mvn_no_command.test_not_match": ["thefuck.rules.mvn_no_command.match"], "tests.rules.test_mvn_no_command.test_get_new_command": ["thefuck.rules.mvn_no_command.get_new_command"], "thefuck.rules.mvn_no_command.get_new_command": [], "tests.rules.test_apt_get": ["pytest.mark.parametrize"], "tests.rules.test_apt_get.test_match": ["thefuck.rules.apt_get.match"], "thefuck.rules.apt_get.match": [], "tests.rules.test_apt_get.test_not_match": ["thefuck.rules.apt_get.match"], "tests.rules.test_apt_get.test_get_new_command": ["thefuck.rules.apt_get.get_new_command"], "thefuck.rules.apt_get.get_new_command": [], "tests.rules.test_git_remote_seturl_add": ["pytest.mark.parametrize"], "tests.rules.test_git_remote_seturl_add.test_match": ["thefuck.rules.git_remote_seturl_add.match"], "thefuck.rules.git_remote_seturl_add.match": [], "tests.rules.test_git_remote_seturl_add.test_not_match": ["thefuck.rules.git_remote_seturl_add.match"], "tests.rules.test_git_remote_seturl_add.test_get_new_command": ["thefuck.rules.git_remote_seturl_add.get_new_command"], "thefuck.rules.git_remote_seturl_add.get_new_command": [], "tests.rules.test_react_native_command_unrecognized": ["pytest.mark.parametrize"], "tests.rules.test_react_native_command_unrecognized.test_match": ["thefuck.rules.react_native_command_unrecognized.match"], "thefuck.rules.react_native_command_unrecognized.match": [], "tests.rules.test_react_native_command_unrecognized.test_not_match": ["thefuck.rules.react_native_command_unrecognized.match"], "tests.rules.test_react_native_command_unrecognized.test_get_new_command": ["io.BytesIO", "thefuck.rules.react_native_command_unrecognized.get_new_command"], "thefuck.rules.react_native_command_unrecognized.get_new_command": [], "tests.rules.test_fab_command_not_found": ["pytest.mark.parametrize"], "tests.rules.test_fab_command_not_found.test_match": ["thefuck.rules.fab_command_not_found.match"], "thefuck.rules.fab_command_not_found.match": [], "tests.rules.test_fab_command_not_found.test_not_match": ["thefuck.rules.fab_command_not_found.match"], "tests.rules.test_fab_command_not_found.test_get_new_command": ["thefuck.rules.fab_command_not_found.get_new_command", "thefuck.types.Command"], "thefuck.rules.fab_command_not_found.get_new_command": [], "tests.rules.test_nixos_cmd_not_found": ["pytest.mark.parametrize"], "tests.rules.test_nixos_cmd_not_found.test_match": ["thefuck.rules.nixos_cmd_not_found.match"], "thefuck.rules.nixos_cmd_not_found.match": [], "tests.rules.test_nixos_cmd_not_found.test_not_match": ["thefuck.rules.nixos_cmd_not_found.match"], "tests.rules.test_nixos_cmd_not_found.test_get_new_command": ["thefuck.rules.nixos_cmd_not_found.get_new_command"], "thefuck.rules.nixos_cmd_not_found.get_new_command": [], "tests.rules.test_long_form_help": ["pytest.mark.parametrize"], "tests.rules.test_long_form_help.test_match": ["thefuck.types.Command", "thefuck.rules.long_form_help.match"], "thefuck.rules.long_form_help.match": [], "tests.rules.test_long_form_help.test_not_match": ["thefuck.types.Command", "thefuck.rules.long_form_help.match"], "tests.rules.test_long_form_help.test_get_new_command": ["thefuck.rules.long_form_help.get_new_command", "thefuck.types.Command"], "thefuck.rules.long_form_help.get_new_command": [], "tests.rules.test_git_tag_force": ["pytest.fixture"], "tests.rules.test_git_tag_force.output": [], "tests.rules.test_git_tag_force.test_match": ["thefuck.types.Command", "thefuck.rules.git_tag_force.match"], "thefuck.rules.git_tag_force.match": [], "tests.rules.test_git_tag_force.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_tag_force.get_new_command"], "thefuck.rules.git_tag_force.get_new_command": [], "tests.rules.test_git_not_command": ["pytest.fixture"], "tests.rules.test_git_not_command.git_not_command": [], "tests.rules.test_git_not_command.git_not_command_one_of_this": [], "tests.rules.test_git_not_command.git_not_command_closest": [], "tests.rules.test_git_not_command.git_command": [], "tests.rules.test_git_not_command.test_match": ["thefuck.types.Command", "thefuck.rules.git_not_command.match"], "thefuck.rules.git_not_command.match": [], "tests.rules.test_git_not_command.test_get_new_command": ["thefuck.types.Command", "thefuck.rules.git_not_command.get_new_command"], "thefuck.rules.git_not_command.get_new_command": [], "tests.rules.test_man_no_space": [], "tests.rules.test_man_no_space.test_match": ["thefuck.types.Command", "thefuck.rules.man_no_space.match"], "thefuck.rules.man_no_space.match": [], "tests.rules.test_man_no_space.test_get_new_command": ["thefuck.rules.man_no_space.get_new_command", "thefuck.types.Command"], "thefuck.rules.man_no_space.get_new_command": [], "tests.rules.test_cat_dir": ["pytest.mark.parametrize", "pytest.fixture"], "tests.rules.test_cat_dir.isdir": [], "tests.rules.test_cat_dir.test_match": ["thefuck.rules.cat_dir.match"], "thefuck.rules.cat_dir.match": [], "tests.rules.test_cat_dir.test_not_match": ["thefuck.rules.cat_dir.match"], "tests.rules.test_cat_dir.test_get_new_command": ["thefuck.rules.cat_dir.get_new_command"], "thefuck.rules.cat_dir.get_new_command": [], "tests.test_conf": ["pytest.mark.parametrize", "pytest.fixture"], "tests.test_conf.load_source": [], "tests.test_conf.test_settings_defaults": ["<builtin>.getattr", "thefuck.const.DEFAULT_SETTINGS.items", "<builtin>.object"], "thefuck.const.DEFAULT_SETTINGS.items": [], "tests.test_conf.TestSettingsFromFile.test_from_file": ["mock.Mock"], "tests.test_conf.TestSettingsFromFile.test_from_file_with_DEFAULT": ["mock.Mock"], "tests.test_conf.TestSettingsFromEnv.test_from_env": [], "tests.test_conf.TestSettingsFromEnv.test_from_env_with_DEFAULT": [], "tests.test_conf.test_settings_from_args": ["mock.Mock"], "tests.test_conf.TestInitializeSettingsFile.test_ignore_if_exists": ["mock.Mock"], "tests.test_conf.TestInitializeSettingsFile.test_create_if_doesnt_exists": ["mock.Mock", "thefuck.const.DEFAULT_SETTINGS.items", "six.StringIO"], "tests.test_conf.TestInitializeSettingsFile.test_create_if_doesnt_exists.<lambda1>": [], "tests.test_conf.TestInitializeSettingsFile.test_create_if_doesnt_exists.<lambda2>": [], "tests.test_conf.test_get_user_dir_path": ["os.path.expanduser"], "os.path.expanduser": []}