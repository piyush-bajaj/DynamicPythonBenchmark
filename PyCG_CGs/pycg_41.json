{"t.unit.app.test_utils": [], "t.unit.app.test_utils.test_Settings.test_is_mapping": ["<builtin>.issubclass"], "<builtin>.issubclass": [], "t.unit.app.test_utils.test_Settings.test_is_mutable_mapping": ["<builtin>.issubclass"], "t.unit.app.test_utils.test_Settings.test_find": [], "t.unit.app.test_utils.test_Settings.test_get_by_parts": [], "t.unit.app.test_utils.test_Settings.test_find_value_for_key": [], "t.unit.app.test_utils.test_Settings.test_table": [], "t.unit.app.test_utils.test_filter_hidden_settings.test_handles_non_string_keys": ["celery.app.utils.filter_hidden_settings"], "celery.app.utils.filter_hidden_settings": [], "t.unit.app.test_utils.test_bugreport.test_no_conn_driver_info": ["celery.app.utils.bugreport", "unittest.mock.Mock"], "unittest.mock.Mock": [], "celery.app.utils.bugreport": [], "t.unit.app.test_defaults": [], "t.unit.app.test_defaults.test_defaults.setup_method": ["sys.modules.pop"], "sys.modules.pop": [], "t.unit.app.test_defaults.test_defaults.teardown_method": [], "t.unit.app.test_defaults.test_defaults.test_option_repr": ["<builtin>.repr"], "<builtin>.repr": [], "t.unit.app.test_defaults.test_defaults.test_any": ["<builtin>.object"], "<builtin>.object": [], "t.unit.app.test_defaults.test_defaults.test_compat_indices": ["<builtin>.any", "celery.app.defaults._TO_OLD_KEY.isupper", "celery.app.defaults._TO_NEW_KEY.islower", "celery.app.defaults._TO_NEW_KEY.values", "celery.app.defaults._TO_OLD_KEY.islower", "celery.app.defaults._TO_OLD_KEY.values", "celery.app.defaults._TO_NEW_KEY.isupper"], "celery.app.defaults._TO_NEW_KEY.isupper": [], "celery.app.defaults._TO_OLD_KEY.isupper": [], "<builtin>.any": [], "celery.app.defaults._TO_NEW_KEY.islower": [], "celery.app.defaults._TO_OLD_KEY.islower": [], "celery.app.defaults._TO_NEW_KEY.values": [], "celery.app.defaults._TO_OLD_KEY.values": [], "t.unit.app.test_defaults.test_defaults.test_find": [], "t.unit.app.test_defaults.test_defaults.defaults": ["importlib.import_module"], "importlib.import_module": [], "t.unit.app.test_routes": [], "t.unit.app.test_routes.Router": ["celery.app.routes.Router"], "celery.app.routes.Router": [], "t.unit.app.test_routes.E": [], "t.unit.app.test_routes.E.expand": ["t.unit.app.test_routes.Router"], "t.unit.app.test_routes.set_queues": [], "t.unit.app.test_routes.RouteCase.setup_method": [], "t.unit.app.test_routes.RouteCase.setup_method.mytask": [], "t.unit.app.test_routes.RouteCase.assert_routes_to_queue": [], "t.unit.app.test_routes.RouteCase.assert_routes_to_default_queue": ["t.unit.app.test_routes.RouteCase.assert_routes_to_queue"], "t.unit.app.test_routes.test_MapRoute.test_route_for_task_expanded_route": ["t.unit.app.test_routes.E", "t.unit.app.test_routes.E.expand", "t.unit.app.test_routes.set_queues", "celery.app.routes.MapRoute"], "celery.app.routes.MapRoute": [], "t.unit.app.test_routes.test_MapRoute.test_route_for_task": ["t.unit.app.test_routes.E", "t.unit.app.test_routes.E.expand", "t.unit.app.test_routes.set_queues", "celery.app.routes.MapRoute"], "t.unit.app.test_routes.test_MapRoute.test_route_for_task__glob": ["celery.app.routes.MapRoute", "re.compile"], "re.compile": [], "t.unit.app.test_routes.test_MapRoute.test_expand_route_not_found": ["t.unit.app.test_routes.E", "t.unit.app.test_routes.E.expand", "celery.app.routes.MapRoute", "pytest.raises"], "pytest.raises": [], "t.unit.app.test_routes.test_lookup_route.test_init_queues": ["t.unit.app.test_routes.Router"], "t.unit.app.test_routes.test_lookup_route.test_lookup_takes_first": ["celery.app.routes.prepare", "t.unit.app.test_routes.set_queues", "t.unit.app.test_routes.Router", "t.unit.app.test_routes.RouteCase.assert_routes_to_queue"], "celery.app.routes.prepare": [], "t.unit.app.test_routes.test_lookup_route.test_expands_queue_in_options": ["celery.app.routes.prepare", "kombu.Exchange", "t.unit.app.test_routes.set_queues", "t.unit.app.test_routes.Router"], "kombu.Exchange": [], "t.unit.app.test_routes.test_lookup_route.test_expand_destination_string": ["t.unit.app.test_routes.set_queues", "t.unit.app.test_routes.Router"], "t.unit.app.test_routes.test_lookup_route.test_expand_destination__Queue": ["kombu.Queue", "t.unit.app.test_routes.Router"], "kombu.Queue": [], "t.unit.app.test_routes.test_lookup_route.test_lookup_paths_traversed": ["celery.app.routes.prepare", "t.unit.app.test_routes.Router", "t.unit.app.test_routes.test_lookup_route.simple_queue_setup", "t.unit.app.test_routes.RouteCase.assert_routes_to_default_queue", "t.unit.app.test_routes.RouteCase.assert_routes_to_queue"], "t.unit.app.test_routes.test_lookup_route.simple_queue_setup": ["t.unit.app.test_routes.set_queues"], "t.unit.app.test_routes.test_lookup_route.test_compat_router_class": ["celery.app.routes.prepare", "t.unit.app.test_routes.Router", "t.unit.app.test_routes.test_lookup_route.simple_queue_setup", "t.unit.app.test_routes.RouteCase.assert_routes_to_default_queue", "t.unit.app.test_routes.RouteCase.assert_routes_to_queue"], "t.unit.app.test_routes.test_lookup_route.test_router_fun__called_with": ["celery.app.routes.prepare", "t.unit.app.test_routes.Router", "unittest.mock.Mock", "t.unit.app.test_routes.test_lookup_route.simple_queue_setup"], "t.unit.app.test_routes.test_lookup_route.test_compat_router_classes__called_with": ["celery.app.routes.prepare", "t.unit.app.test_routes.Router", "unittest.mock.Mock", "t.unit.app.test_routes.test_lookup_route.simple_queue_setup"], "t.unit.app.test_routes.TestRouter.route_for_task": [], "t.unit.app.test_routes.test_prepare.test_prepare": ["celery.app.routes.prepare", "kombu.utils.functional.maybe_evaluate", "celery.utils.imports.qualname", "<builtin>.isinstance", "<builtin>.object"], "celery.utils.imports.qualname": [], "<builtin>.isinstance": [], "kombu.utils.functional.maybe_evaluate": [], "t.unit.app.test_routes.test_prepare.test_prepare_item_is_dict": ["celery.app.routes.prepare", "<builtin>.isinstance"], "t.unit.app.test_log": [], "t.unit.app.test_log.test_TaskFormatter.test_no_task": ["celery.app.log.TaskFormatter"], "t.unit.app.test_log.test_TaskFormatter.test_no_task.Record.getMessage": [], "celery.app.log.TaskFormatter": [], "t.unit.app.test_log.test_logger_isa.test_isa": ["celery.utils.log.logger_isa", "celery.utils.log.get_task_logger"], "celery.utils.log.get_task_logger": [], "celery.utils.log.logger_isa": [], "t.unit.app.test_log.test_logger_isa.test_recursive": ["celery.utils.log.logger_isa", "pytest.raises", "celery.utils.log.get_task_logger"], "unittest.mock.patch": [], "t.unit.app.test_log.test_ColorFormatter": ["unittest.mock.patch"], "t.unit.app.test_log.test_ColorFormatter.test_formatException_not_string": ["<builtin>.KeyError", "celery.utils.log.ColorFormatter"], "celery.utils.log.ColorFormatter": [], "<builtin>.KeyError": [], "t.unit.app.test_log.test_ColorFormatter.test_formatException_bytes": ["sys.exc_info", "<builtin>.Exception", "celery.utils.log.ColorFormatter"], "<builtin>.Exception": [], "sys.exc_info": [], "t.unit.app.test_log.test_ColorFormatter.test_format_object": ["<builtin>.object", "unittest.mock.Mock", "celery.utils.log.ColorFormatter"], "t.unit.app.test_log.test_ColorFormatter.test_format_raises": ["celery.utils.log.ColorFormatter"], "t.unit.app.test_log.test_ColorFormatter.test_format_raises.on_safe_str": ["<builtin>.ValueError"], "<builtin>.ValueError": [], "t.unit.app.test_log.test_ColorFormatter.test_format_raises.Record.__str__": ["t.unit.app.test_log.test_ColorFormatter.test_format_raises.on_safe_str"], "t.unit.app.test_log.test_ColorFormatter.test_format_raises.Record.getMessage": [], "t.unit.app.test_log.test_default_logger.setup_logger": [], "t.unit.app.test_log.test_default_logger.setup_method": [], "t.unit.app.test_log.test_default_logger.setup_method.<lambda1>": ["t.unit.app.test_log.test_default_logger.setup_method.<lambda1>"], "t.unit.app.test_log.test_default_logger.test_get_logger_sets_parent": ["t.unit.app.test_log.test_default_logger.setup_method.<lambda1>"], "t.unit.app.test_log.test_default_logger.test_get_logger_root": ["t.unit.app.test_log.test_default_logger.setup_method.<lambda1>"], "t.unit.app.test_log.test_default_logger.test_setup_logging_subsystem_misc": [], "t.unit.app.test_log.test_default_logger.test_setup_logging_subsystem_misc2": [], "t.unit.app.test_log.test_default_logger.test_get_default_logger": [], "t.unit.app.test_log.test_default_logger.test_configure_logger": [], "t.unit.app.test_log.test_default_logger.test_setup_logging_subsystem_colorize": [], "pytest.mark.masked_modules": [], "t.unit.app.test_log.test_default_logger": ["pytest.mark.masked_modules", "unittest.mock.patch"], "t.unit.app.test_log.test_default_logger.test_setup_logging_subsystem_no_mputil": [], "t.unit.app.test_log.test_default_logger.test_setup_logger": ["t.unit.app.test_log.test_default_logger.setup_logger", "t.unit.conftest.get_logger_handlers"], "t.unit.conftest.get_logger_handlers": ["<builtin>.isinstance"], "t.unit.app.test_log.test_default_logger.test_setup_logger_no_handlers_stream": ["logging.root.info", "t.unit.app.test_log.test_default_logger.setup_method.<lambda1>", "t.unit.app.test_log.test_default_logger.setup_logger", "t.unit.conftest.stdouts"], "t.unit.conftest.stdouts": ["t.unit.conftest.WhateverIO.__init__"], "logging.root.info": [], "t.unit.app.test_log.test_default_logger.test_setup_logger_no_handlers_file": ["tempfile.mkstemp", "t.unit.app.test_log.test_default_logger.setup_method.<lambda1>", "unittest.mock.patch", "t.unit.app.test_log.test_default_logger.setup_logger", "t.unit.conftest.get_logger_handlers", "collections.defaultdict", "<builtin>.isinstance", "t.unit.conftest.restore_logging_context_manager"], "tempfile.mkstemp": [], "t.unit.conftest.restore_logging_context_manager": ["t.unit.conftest._restore_logging"], "collections.defaultdict": [], "t.unit.app.test_log.test_default_logger.test_setup_logger_no_handlers_file.open_file": ["unittest.mock.Mock"], "t.unit.app.test_log.test_default_logger.test_redirect_stdouts": ["logging.root.error", "t.unit.conftest.wrap_logger", "t.unit.app.test_log.test_default_logger.setup_logger"], "t.unit.conftest.wrap_logger": ["t.unit.conftest.WhateverIO.__init__", "logging.StreamHandler", "t.unit.conftest.get_logger_handlers"], "logging.root.error": [], "t.unit.app.test_log.test_default_logger.test_logging_proxy": ["t.unit.conftest.wrap_logger", "t.unit.app.test_log.test_default_logger.setup_logger", "t.unit.conftest.stdouts", "celery.utils.log.LoggingProxy", "celery.utils.log.in_sighandler"], "celery.utils.log.LoggingProxy": [], "celery.utils.log.in_sighandler": [], "t.unit.app.test_log.test_default_logger.test_logging_proxy_bytes": ["<builtin>.str", "t.unit.conftest.wrap_logger", "t.unit.app.test_log.test_default_logger.setup_logger", "t.unit.conftest.stdouts", "celery.utils.log.LoggingProxy", "celery.utils.log.in_sighandler"], "<builtin>.str": [], "t.unit.app.test_log.test_default_logger.test_logging_proxy_recurse_protection": ["celery.utils.log.LoggingProxy", "t.unit.app.test_log.test_default_logger.setup_logger"], "t.unit.app.test_log.test_task_logger.setup_method": ["logging.root.manager.loggerDict.pop", "celery.uuid", "celery._state._task_stack.push", "t.unit.app.test_log.test_task_logger.get_logger"], "t.unit.app.test_log.test_task_logger.get_logger": ["celery.utils.log.get_task_logger"], "logging.root.manager.loggerDict.pop": [], "celery.uuid": [], "t.unit.app.test_log.test_task_logger.setup_method.test_task": [], "celery._state._task_stack.push": [], "t.unit.app.test_log.test_task_logger.teardown_method": ["celery._state._task_stack.pop"], "celery._state._task_stack.pop": [], "t.unit.app.test_log.test_task_logger.setup_logger": [], "t.unit.app.test_log.test_task_logger.test_renaming_base_logger": ["pytest.raises", "celery.utils.log.get_task_logger"], "t.unit.app.test_log.test_task_logger.test_renaming_task_logger": ["pytest.raises", "celery.utils.log.get_task_logger"], "t.unit.app.test_log.MockLogger.__init__": ["<builtin>.super"], "<builtin>.super": [], "t.unit.app.test_log.MockLogger.handle": [], "t.unit.app.test_log.MockLogger.isEnabledFor": [], "t.unit.app.test_registry": [], "t.unit.app.test_registry.returns": [], "t.unit.app.test_registry.test_unpickle_task.test_unpickle_v1": ["celery.app.registry._unpickle_task"], "celery.app.registry._unpickle_task": [], "t.unit.app.test_registry.test_unpickle_task.test_unpickle_v2": ["celery.app.registry._unpickle_task_v2"], "celery.app.registry._unpickle_task_v2": [], "t.unit.app.test_registry.test_TaskRegistry.setup_method": [], "t.unit.app.test_registry.test_TaskRegistry.test_NotRegistered_str": ["<builtin>.repr"], "t.unit.app.test_registry.test_TaskRegistry.assert_register_unregister_cls": ["pytest.raises"], "t.unit.app.test_registry.test_TaskRegistry.test_task_registry": ["<builtin>.dict", "t.unit.app.test_registry.test_TaskRegistry.assert_register_unregister_cls", "pytest.raises", "<builtin>.isinstance"], "<builtin>.dict": [], "t.unit.app.test_registry.test_TaskRegistry.test_compat": [], "t.unit.app.test_app": [], "t.unit.app.test_app.test_module.test_default_app": [], "t.unit.app.test_app.test_module.test_bugreport": ["celery.app.bugreport"], "celery.app.bugreport": [], "t.unit.app.test_app.test_task_join_will_block.test_task_join_will_block": ["celery._state._set_task_join_will_block", "celery._state.orig_task_join_will_block"], "celery._state._set_task_join_will_block": [], "celery._state.orig_task_join_will_block": [], "t.unit.app.test_app.test_App.setup_method": ["copy.deepcopy"], "copy.deepcopy": [], "t.unit.app.test_app.test_App.test_now": ["celery.utils.time.to_utc", "datetime.datetime.utcnow", "celery.utils.time.localize", "celery.utils.time.timezone.get_timezone", "datetime.timedelta"], "celery.utils.time.timezone.get_timezone": [], "datetime.datetime.utcnow": [], "celery.utils.time.to_utc": [], "datetime.timedelta": [], "celery.utils.time.localize": [], "t.unit.app.test_app.test_App": ["pytest.mark.masked_modules", "pytest.mark.usefixtures", "unittest.mock.patch", "pytest.mark.parametrize"], "t.unit.app.test_app.test_App.test_set_default": [], "t.unit.app.test_app.test_App.test_setup_security": [], "t.unit.app.test_app.test_App.test_task_autofinalize_disabled": ["t.unit.app.test_app.test_App.test_task_autofinalize_disabled.ttafd2", "pytest.raises", "t.unit.app.test_app.test_App.test_task_autofinalize_disabled.ttafd"], "t.unit.app.test_app.test_App.test_task_autofinalize_disabled.ttafd": [], "t.unit.app.test_app.test_App.test_task_autofinalize_disabled.ttafd2": [], "t.unit.app.test_app.test_App.test_registry_autofinalize_disabled": ["pytest.raises"], "t.unit.app.test_app.test_App.test_task": [], "t.unit.app.test_app.test_App.test_task.fun": [], "t.unit.app.test_app.test_App.test_task_too_many_args": ["pytest.raises", "unittest.mock.Mock"], "t.unit.app.test_app.test_App.test_with_config_source": [], "pytest.mark.usefixtures": [], "t.unit.app.test_app.test_App.test_task_windows_execv": [], "t.unit.app.test_app.test_App.test_task_windows_execv.foo": [], "t.unit.app.test_app.test_App.test_task_takes_no_args": ["pytest.raises"], "t.unit.app.test_app.test_App.test_task_takes_no_args.foo": [], "t.unit.app.test_app.test_App.test_add_defaults": ["pickle.loads", "pytest.raises", "pickle.dumps"], "t.unit.app.test_app.test_App.test_add_defaults.conf": [], "pickle.dumps": [], "pickle.loads": [], "t.unit.app.test_app.test_App.test_connection_or_acquire": [], "t.unit.app.test_app.test_App.test_using_v1_reduce": ["pickle.loads", "pickle.dumps"], "t.unit.app.test_app.test_App.test_autodiscover_tasks_force_fixup_fallback": ["unittest.mock.Mock"], "t.unit.app.test_app.test_App.test_autodiscover_tasks_force": ["unittest.mock.Mock"], "t.unit.app.test_app.test_App.test_autodiscover_tasks_force.lazy_list": [], "t.unit.app.test_app.test_App.test_autodiscover_tasks_lazy": ["unittest.mock.patch", "<builtin>.isinstance"], "t.unit.app.test_app.test_App.test_autodiscover_tasks_lazy.lazy_list": [], "t.unit.app.test_app.test_App.test_autodiscover_tasks__no_packages": ["unittest.mock.Mock"], "t.unit.app.test_app.test_App.test_with_broker": [], "t.unit.app.test_app.test_App.test_pending_configuration_non_true__kwargs": [], "t.unit.app.test_app.test_App.test_pending_configuration__kwargs": [], "t.unit.app.test_app.test_App.test_pending_configuration__setattr": ["celery.utils.serialization.pickle.loads", "celery.utils.serialization.pickle.dumps"], "celery.utils.serialization.pickle.dumps": [], "celery.utils.serialization.pickle.loads": [], "t.unit.app.test_app.test_App.test_pending_configuration__update": [], "t.unit.app.test_app.test_App.test_pending_configuration__compat_settings": [], "t.unit.app.test_app.test_App.test_pending_configuration__compat_settings_mixing": ["pytest.raises"], "t.unit.app.test_app.test_App.test_pending_configuration__django_settings": ["celery.utils.collections.DictAttribute", "celery.utils.objects.Bunch"], "celery.utils.objects.Bunch": [], "celery.utils.collections.DictAttribute": [], "t.unit.app.test_app.test_App.test_pending_configuration__compat_settings_mixing_new": ["pytest.raises"], "t.unit.app.test_app.test_App.test_pending_configuration__compat_settings_mixing_alt": [], "t.unit.app.test_app.test_App.test_pending_configuration__setdefault": [], "t.unit.app.test_app.test_App.test_pending_configuration__iter": ["<builtin>.dict", "<builtin>.list"], "<builtin>.list": [], "t.unit.app.test_app.test_App.test_pending_configuration__raises_ImproperlyConfigured": ["pytest.raises"], "t.unit.app.test_app.test_App.test_pending_configuration__ssl_settings": [], "t.unit.app.test_app.test_App.test_repr": ["<builtin>.repr"], "t.unit.app.test_app.test_App.test_custom_task_registry": [], "t.unit.app.test_app.test_App.test_include_argument": [], "t.unit.app.test_app.test_App.test_set_as_current": [], "t.unit.app.test_app.test_App.test_current_task": ["celery._state._task_stack.push", "celery._state._task_stack.pop"], "t.unit.app.test_app.test_App.test_current_task.foo": [], "t.unit.app.test_app.test_App.test_task_not_shared": ["unittest.mock.patch"], "t.unit.app.test_app.test_App.test_task_not_shared.foo": [], "t.unit.app.test_app.test_App.test_task_compat_with_filter": ["unittest.mock.Mock"], "t.unit.app.test_app.test_App.test_task_compat_with_filter.filter": [], "t.unit.app.test_app.test_App.test_task_compat_with_filter.foo": [], "t.unit.app.test_app.test_App.test_task_with_filter": ["unittest.mock.Mock"], "t.unit.app.test_app.test_App.test_task_with_filter.filter": [], "t.unit.app.test_app.test_App.test_task_with_filter.foo": [], "t.unit.app.test_app.test_App.test_task_sets_main_name_MP_MAIN_FILE": [], "t.unit.app.test_app.test_App.test_task_sets_main_name_MP_MAIN_FILE.foo": [], "t.unit.app.test_app.test_App.test_can_get_type_hints_for_tasks": ["<builtin>.type", "typing.get_type_hints"], "t.unit.app.test_app.test_App.test_can_get_type_hints_for_tasks.foo": [], "typing.get_type_hints": [], "<builtin>.type": [], "t.unit.app.test_app.test_App.test_annotate_decorator": ["celery.app.task.Task.annotate", "celery.app.task.Task.bind", "unittest.mock.Mock", "celery.app.task.Task.__init__"], "t.unit.app.test_app.test_App.test_annotate_decorator.adX.run": [], "t.unit.app.test_app.test_App.test_annotate_decorator.deco": [], "t.unit.app.test_app.test_App.test_annotate_decorator.deco._inner": [], "celery.app.task.Task.bind": [], "celery.app.task.Task.__init__": [], "celery.app.task.Task.annotate": [], "t.unit.app.test_app.test_App.test_apply_async_adds_children": ["celery._state._task_stack.push", "celery._state._task_stack.pop"], "t.unit.app.test_app.test_App.test_apply_async_adds_children.a3cX1": [], "t.unit.app.test_app.test_App.test_apply_async_adds_children.a3cX2": [], "t.unit.app.test_app.test_App.test_pickle_app": ["celery.utils.serialization.pickle.loads", "celery.utils.serialization.pickle.dumps", "<builtin>.len"], "<builtin>.len": [], "t.unit.app.test_app.test_App.test_worker_main": [], "t.unit.app.test_app.test_App.test_config_from_envvar": [], "t.unit.app.test_app.test_App.assert_config2": [], "t.unit.app.test_app.test_App.test_config_from_object__lazy": ["t.unit.app.test_app.test_App.assert_config2"], "t.unit.app.test_app.test_App.test_config_from_object__force": ["t.unit.app.test_app.test_App.assert_config2"], "t.unit.app.test_app.test_App.test_config_from_object__compat": [], "t.unit.app.test_app.test_App.test_config_from_object__supports_old_names": [], "t.unit.app.test_app.test_App.test_config_from_object__namespace_uppercase": [], "t.unit.app.test_app.test_App.test_config_from_object__namespace_lowercase": [], "t.unit.app.test_app.test_App.test_config_from_object__mixing_new_and_old": ["pytest.raises"], "t.unit.app.test_app.test_App.test_config_from_object__mixing_old_and_new": ["pytest.raises"], "t.unit.app.test_app.test_App.test_config_from_cmdline": [], "t.unit.app.test_app.test_App.test_setting__broker_transport_options": ["celery.utils.objects.Bunch"], "t.unit.app.test_app.test_App.test_Windows_log_color_disabled": [], "t.unit.app.test_app.test_App.test_WorkController": [], "t.unit.app.test_app.test_App.test_Worker": [], "t.unit.app.test_app.test_App.test_AsyncResult": ["celery.current_app._get_current_object", "pickle.loads", "pickle.dumps"], "celery.current_app._get_current_object": [], "t.unit.app.test_app.test_App.test_get_active_apps": ["<builtin>.list", "<builtin>.id", "pytest.raises", "gc.collect", "<builtin>.next", "celery._state._get_active_apps"], "celery._state._get_active_apps": [], "<builtin>.id": [], "gc.collect": [], "<builtin>.next": [], "t.unit.app.test_app.test_App.test_config_from_envvar_more": ["pytest.raises"], "t.unit.app.test_app.test_App.test_start": [], "pytest.mark.parametrize": [], "t.unit.app.test_app.test_App.test_amqp_get_broker_info": [], "t.unit.app.test_app.test_App.test_amqp_failover_strategy_selection": [], "t.unit.app.test_app.test_App.test_amqp_failover_strategy_selection.my_failover_strategy": [], "t.unit.app.test_app.test_App.test_after_fork": ["unittest.mock.Mock"], "t.unit.app.test_app.test_App.test_global_after_fork": ["unittest.mock.Mock", "celery.app.base._after_fork_cleanup_app"], "celery.app.base._after_fork_cleanup_app": [], "t.unit.app.test_app.test_App.test_after_fork_cleanup_app__raises": ["celery.app.base._after_fork_cleanup_app", "unittest.mock.Mock", "<builtin>.KeyError"], "t.unit.app.test_app.test_App.test_ensure_after_fork__no_multiprocessing": [], "t.unit.app.test_app.test_App.test_canvas": [], "t.unit.app.test_app.test_App.test_signature": [], "t.unit.app.test_app.test_App.test_timezone__none_set": [], "t.unit.app.test_app.test_App.test_uses_utc_timezone": [], "t.unit.app.test_app.test_App.test_compat_on_configure": ["celery.Celery.__init__", "unittest.mock.Mock"], "t.unit.app.test_app.test_App.test_compat_on_configure.CompatApp.on_configure": [], "celery.Celery.__init__": [], "t.unit.app.test_app.test_App.test_add_periodic_task": [], "t.unit.app.test_app.test_App.test_add_periodic_task.add": [], "t.unit.app.test_app.test_App.test_pool_no_multiprocessing": [], "t.unit.app.test_app.test_App.test_bugreport": [], "t.unit.app.test_app.test_App.test_send_task__connection_provided": ["unittest.mock.Mock", "celery.contrib.testing.mocks.ContextMock"], "celery.contrib.testing.mocks.ContextMock": [], "t.unit.app.test_app.test_App.test_send_task_sent_event": [], "t.unit.app.test_app.test_App.test_send_task_sent_event.Dispatcher.publish": [], "t.unit.app.test_app.test_App.test_select_queues": ["unittest.mock.Mock"], "t.unit.app.test_app.test_App.test_Beat": ["<builtin>.isinstance"], "t.unit.app.test_app.test_App.test_registry_cls": ["<builtin>.isinstance"], "t.unit.app.test_app.test_App.test_oid": ["uuid.UUID"], "uuid.UUID": [], "t.unit.app.test_app.test_App.test_global_oid": ["uuid.UUID", "concurrent.futures.ThreadPoolExecutor"], "concurrent.futures.ThreadPoolExecutor": [], "t.unit.app.test_app.test_App.test_global_oid.<lambda1>": [], "t.unit.app.test_app.test_App.test_thread_oid": ["uuid.UUID"], "t.unit.app.test_app.test_App.test_backend": ["<builtin>.isinstance"], "t.unit.app.test_app.test_App.test_thread_backend": ["concurrent.futures.ThreadPoolExecutor", "<builtin>.isinstance"], "t.unit.app.test_app.test_App.test_thread_backend.<lambda1>": [], "t.unit.app.test_app.test_App.test_thread_oid_is_local": ["uuid.UUID", "concurrent.futures.ThreadPoolExecutor"], "t.unit.app.test_app.test_App.test_thread_oid_is_local.<lambda1>": [], "t.unit.app.test_app.test_defaults.test_strtobool": ["celery.app.defaults.strtobool", "pytest.raises"], "celery.app.defaults.strtobool": [], "t.unit.app.test_app.test_debugging_utils.test_enable_disable_trace": ["celery.app.enable_trace", "celery.app.disable_trace"], "celery.app.enable_trace": [], "celery.app.disable_trace": [], "t.unit.app.test_app.test_pyimplementation.test_platform_python_implementation": ["t.unit.conftest.platform_pyimp", "celery.platforms.pyimplementation"], "t.unit.app.test_app.test_pyimplementation.test_platform_python_implementation.<lambda1>": [], "t.unit.conftest.platform_pyimp": ["t.unit.conftest.replace_module_value"], "celery.platforms.pyimplementation": [], "t.unit.app.test_app.test_pyimplementation.test_platform_jython": ["t.unit.conftest.sys_platform", "t.unit.conftest.platform_pyimp", "celery.platforms.pyimplementation"], "t.unit.conftest.sys_platform": [], "t.unit.app.test_app.test_pyimplementation.test_platform_pypy": ["t.unit.conftest.pypy_version", "t.unit.conftest.sys_platform", "t.unit.conftest.platform_pyimp", "celery.platforms.pyimplementation"], "t.unit.conftest.pypy_version": ["t.unit.conftest.replace_module_value"], "t.unit.app.test_app.test_pyimplementation.test_platform_fallback": ["t.unit.conftest.pypy_version", "t.unit.conftest.sys_platform", "t.unit.conftest.platform_pyimp", "celery.platforms.pyimplementation"], "t.unit.app.test_app.test_shared_task.test_registers_to_all_apps": ["celery.shared_task"], "celery.shared_task": [], "t.unit.app.test_app.test_shared_task.test_registers_to_all_apps.foo": [], "t.unit.app.test_app.test_shared_task.test_registers_to_all_apps.bar": [], "t.unit.app.test_app.test_shared_task.test_registers_to_all_apps.baz": [], "t.unit.app.test_beat": ["t.unit.app.test_beat.mocked_schedule.__init__"], "t.unit.app.test_beat.MockShelve.close": [], "t.unit.app.test_beat.MockShelve.sync": [], "t.unit.app.test_beat.MockService.__init__": [], "t.unit.app.test_beat.MockService.start": [], "t.unit.app.test_beat.MockService.stop": [], "t.unit.app.test_beat.test_BeatLazyFunc.test_beat_lazy_func": ["t.unit.app.test_beat.test_BeatLazyFunc.test_beat_lazy_func.add", "celery.beat.BeatLazyFunc"], "t.unit.app.test_beat.test_BeatLazyFunc.test_beat_lazy_func.add": [], "celery.beat.BeatLazyFunc": [], "t.unit.app.test_beat.test_ScheduleEntry.create_entry": ["<builtin>.dict", "datetime.timedelta", "celery.beat.ScheduleEntry"], "celery.beat.ScheduleEntry": [], "t.unit.app.test_beat.test_ScheduleEntry.test_next": ["datetime.timedelta", "t.unit.app.test_beat.test_ScheduleEntry.create_entry", "<builtin>.isinstance"], "t.unit.app.test_beat.test_ScheduleEntry.test_is_due": ["t.unit.app.test_beat.test_ScheduleEntry.create_entry", "datetime.timedelta"], "t.unit.app.test_beat.test_ScheduleEntry.test_repr": ["<builtin>.repr", "t.unit.app.test_beat.test_ScheduleEntry.create_entry"], "t.unit.app.test_beat.test_ScheduleEntry.test_reduce": ["t.unit.app.test_beat.test_ScheduleEntry.create_entry", "datetime.timedelta"], "t.unit.app.test_beat.test_ScheduleEntry.test_lt": ["<builtin>.object", "t.unit.app.test_beat.test_ScheduleEntry.create_entry", "datetime.timedelta"], "t.unit.app.test_beat.test_ScheduleEntry.test_update": ["datetime.timedelta", "t.unit.app.test_beat.test_ScheduleEntry.create_entry", "celery.schedules.schedule"], "celery.schedules.schedule": [], "t.unit.app.test_beat.mScheduler.__init__": ["<builtin>.super"], "t.unit.app.test_beat.mScheduler.send_task": ["celery.uuid", "celery.beat.Scheduler.app.AsyncResult"], "celery.beat.Scheduler.app.AsyncResult": [], "t.unit.app.test_beat.mSchedulerSchedulingError.send_task": ["celery.beat.SchedulingError"], "celery.beat.SchedulingError": [], "t.unit.app.test_beat.mSchedulerRuntimeError.is_due": ["<builtin>.RuntimeError"], "<builtin>.RuntimeError": [], "t.unit.app.test_beat.mocked_schedule.__init__": ["datetime.timedelta"], "t.unit.app.test_beat.mocked_schedule.is_due": [], "t.unit.app.test_beat.test_Scheduler.test_custom_schedule_dict": ["t.unit.app.test_beat.mScheduler.__init__"], "t.unit.app.test_beat.test_Scheduler.test_apply_async_uses_registered_task_instances": ["celery.beat.Scheduler.apply_async", "unittest.mock.Mock", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler.Entry"], "t.unit.app.test_beat.test_Scheduler.test_apply_async_uses_registered_task_instances.foo": [], "celery.beat.Scheduler.Entry": [], "celery.beat.Scheduler.apply_async": [], "t.unit.app.test_beat.test_Scheduler.test_apply_async_with_null_args": ["celery.beat.Scheduler.apply_async", "unittest.mock.Mock", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler.Entry"], "t.unit.app.test_beat.test_Scheduler.test_apply_async_with_null_args.foo": [], "t.unit.app.test_beat.test_Scheduler.test_apply_async_with_null_args_set_to_none": ["celery.beat.Scheduler.apply_async", "unittest.mock.Mock", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler.Entry"], "t.unit.app.test_beat.test_Scheduler.test_apply_async_with_null_args_set_to_none.foo": [], "t.unit.app.test_beat.test_Scheduler.test_apply_async_without_null_args": ["celery.beat.Scheduler.apply_async", "unittest.mock.Mock", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler.Entry"], "t.unit.app.test_beat.test_Scheduler.test_apply_async_without_null_args.foo": [], "t.unit.app.test_beat.test_Scheduler.test_should_sync": ["celery.beat.Scheduler.apply_async", "unittest.mock.Mock", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler.Entry"], "t.unit.app.test_beat.test_Scheduler.test_should_sync.not_sync": [], "t.unit.app.test_beat.test_Scheduler.test_should_sync_increments_sync_every_counter": ["celery.beat.Scheduler.apply_async", "unittest.mock.Mock", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler.Entry"], "t.unit.app.test_beat.test_Scheduler.test_should_sync_increments_sync_every_counter.not_sync": [], "t.unit.app.test_beat.test_Scheduler.test_sync_task_counter_resets_on_do_sync": ["celery.beat.Scheduler.apply_async", "unittest.mock.Mock", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler.Entry"], "t.unit.app.test_beat.test_Scheduler.test_sync_task_counter_resets_on_do_sync.not_sync": [], "t.unit.app.test_beat.test_Scheduler": ["unittest.mock.patch"], "t.unit.app.test_beat.test_Scheduler.test_send_task": ["celery.beat.Scheduler"], "celery.beat.Scheduler": [], "t.unit.app.test_beat.test_Scheduler.test_info": ["<builtin>.isinstance", "t.unit.app.test_beat.mScheduler.__init__"], "t.unit.app.test_beat.test_Scheduler.test_maybe_entry": ["celery.beat.Scheduler._maybe_entry", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler.Entry"], "celery.beat.Scheduler._maybe_entry": [], "t.unit.app.test_beat.test_Scheduler.test_set_schedule": ["t.unit.app.test_beat.mScheduler.__init__"], "t.unit.app.test_beat.test_Scheduler.test_ensure_connection_error_handler": ["celery.beat.Scheduler._ensure_connected", "<builtin>.KeyError", "t.unit.app.test_beat.mScheduler.__init__"], "celery.beat.Scheduler._ensure_connected": [], "t.unit.app.test_beat.test_Scheduler.test_install_default_entries": ["celery.beat.Scheduler.install_default_entries", "t.unit.app.test_beat.mScheduler.__init__"], "celery.beat.Scheduler.install_default_entries": [], "t.unit.app.test_beat.test_Scheduler.test_due_tick": ["celery.beat.Scheduler.tick", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler.add"], "celery.beat.Scheduler.add": [], "celery.beat.Scheduler.tick": [], "t.unit.app.test_beat.test_Scheduler.test_due_tick_SchedulingError": ["celery.beat.Scheduler.tick", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler.add"], "t.unit.app.test_beat.test_Scheduler.test_pending_tick": ["celery.beat.Scheduler.tick", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler.add"], "t.unit.app.test_beat.test_Scheduler.test_pending_left_10_milliseconds_tick": ["celery.beat.Scheduler.tick", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler.add"], "t.unit.app.test_beat.test_Scheduler.test_honors_max_interval": ["celery.beat.Scheduler.add", "celery.beat.Scheduler.tick", "t.unit.app.test_beat.mScheduler.__init__", "t.unit.app.test_beat.mocked_schedule.__init__"], "t.unit.app.test_beat.test_Scheduler.test_ticks": ["t.unit.app.test_beat.mocked_schedule.__init__", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler.tick", "celery.beat.Scheduler.update_from_dict", "<builtin>.enumerate", "<builtin>.min"], "<builtin>.enumerate": [], "celery.beat.Scheduler.update_from_dict": [], "<builtin>.min": [], "t.unit.app.test_beat.test_Scheduler.test_ticks_microseconds": ["celery.schedules.schedule", "celery.beat.Scheduler.tick", "t.unit.app.test_beat.mScheduler.__init__", "datetime.datetime.utcfromtimestamp", "datetime.timedelta", "celery.beat.Scheduler.add"], "datetime.datetime.utcfromtimestamp": [], "t.unit.app.test_beat.test_Scheduler.test_ticks_microseconds.<lambda1>": [], "t.unit.app.test_beat.test_Scheduler.test_ticks_schedule_change": ["celery.beat.Scheduler.add", "celery.beat.Scheduler.tick", "t.unit.app.test_beat.mScheduler.__init__", "celery.schedules.schedule"], "t.unit.app.test_beat.test_Scheduler.test_schedule_no_remain": ["celery.beat.Scheduler.add", "celery.beat.Scheduler.tick", "t.unit.app.test_beat.mScheduler.__init__", "t.unit.app.test_beat.mocked_schedule.__init__"], "t.unit.app.test_beat.test_Scheduler.test_interface": ["celery.beat.Scheduler.close", "celery.beat.Scheduler.setup_schedule", "celery.beat.Scheduler.sync", "t.unit.app.test_beat.mScheduler.__init__"], "celery.beat.Scheduler.sync": [], "celery.beat.Scheduler.setup_schedule": [], "celery.beat.Scheduler.close": [], "t.unit.app.test_beat.test_Scheduler.test_merge_inplace": ["celery.beat.Scheduler.update_from_dict", "celery.beat.Scheduler.merge_inplace", "t.unit.app.test_beat.mScheduler.__init__", "t.unit.app.test_beat.mocked_schedule.__init__"], "celery.beat.Scheduler.merge_inplace": [], "t.unit.app.test_beat.test_Scheduler.test_when": ["t.unit.app.test_beat.mocked_schedule.__init__", "pytz.timezone", "datetime.datetime", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.Scheduler._when"], "datetime.datetime": [], "pytz.timezone": [], "t.unit.app.test_beat.test_Scheduler.test_when.<lambda1>": [], "celery.beat.Scheduler._when": [], "t.unit.app.test_beat.test_Scheduler.test_when.<lambda2>": [], "t.unit.app.test_beat.test_Scheduler.test_populate_heap": ["celery.beat.Scheduler.populate_heap", "t.unit.app.test_beat.mocked_schedule.__init__", "t.unit.app.test_beat.mScheduler.__init__", "celery.beat.event_t", "celery.beat.Scheduler.update_from_dict"], "celery.beat.Scheduler.populate_heap": [], "celery.beat.event_t": [], "t.unit.app.test_beat.test_Scheduler.create_schedule_entry": ["<builtin>.dict", "celery.beat.ScheduleEntry"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_schedule_vs_schedule_success": ["celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry", "celery.schedules.schedule"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_schedule_vs_schedule_fail": ["celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry", "celery.schedules.schedule"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_crontab_vs_crontab_success": ["celery.schedules.crontab", "celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry"], "celery.schedules.crontab": [], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_crontab_vs_crontab_fail": ["celery.schedules.crontab", "celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_crontab_vs_schedule_fail": ["celery.schedules.crontab", "celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry", "celery.schedules.schedule"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_different_key_fail": ["celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry", "celery.schedules.schedule"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_args_vs_args_success": ["celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_args_vs_args_fail": ["celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_kwargs_vs_kwargs_success": ["celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_kwargs_vs_kwargs_fail": ["celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_options_vs_options_success": ["celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_options_vs_options_fail": ["celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_task_vs_task_success": ["celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_task_vs_task_fail": ["celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_none_entry_vs_entry": ["celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_entry_vs_none_entry": ["celery.beat.Scheduler", "t.unit.app.test_beat.test_Scheduler.create_schedule_entry"], "t.unit.app.test_beat.test_Scheduler.test_schedule_equal_none_entry_vs_none_entry": ["celery.beat.Scheduler"], "t.unit.app.test_beat.create_persistent_scheduler": [], "t.unit.app.test_beat.create_persistent_scheduler.MockPersistentScheduler.<lambda1>": [], "t.unit.app.test_beat.create_persistent_scheduler.MockPersistentScheduler": ["celery.utils.objects.Bunch"], "t.unit.app.test_beat.create_persistent_scheduler.MockPersistentScheduler.tick": ["<builtin>.SystemExit"], "<builtin>.SystemExit": [], "t.unit.app.test_beat.create_persistent_scheduler_w_call_logging": [], "t.unit.app.test_beat.create_persistent_scheduler_w_call_logging.MockPersistentScheduler.<lambda1>": [], "t.unit.app.test_beat.create_persistent_scheduler_w_call_logging.MockPersistentScheduler": ["celery.utils.objects.Bunch"], "t.unit.app.test_beat.create_persistent_scheduler_w_call_logging.MockPersistentScheduler.__init__": ["<builtin>.super"], "t.unit.app.test_beat.create_persistent_scheduler_w_call_logging.MockPersistentScheduler.send_task": ["celery.beat.PersistentScheduler.app.AsyncResult", "celery.uuid"], "celery.beat.PersistentScheduler.app.AsyncResult": [], "t.unit.app.test_beat.test_PersistentScheduler": ["unittest.mock.patch"], "t.unit.app.test_beat.test_PersistentScheduler.test_remove_db": ["<builtin>.OSError", "pytest.raises", "t.unit.app.test_beat.create_persistent_scheduler", "unittest.mock.call"], "unittest.mock.call": [], "<builtin>.OSError": [], "t.unit.app.test_beat.test_PersistentScheduler.test_setup_schedule": ["t.unit.app.test_beat.create_persistent_scheduler", "unittest.mock.Mock"], "t.unit.app.test_beat.test_PersistentScheduler.test_setup_schedule.effect": ["<builtin>.OSError"], "t.unit.app.test_beat.test_PersistentScheduler.test_get_schedule": ["t.unit.app.test_beat.create_persistent_scheduler"], "t.unit.app.test_beat.test_PersistentScheduler.test_run_all_due_tasks_after_restart": ["t.unit.app.test_beat.test_PersistentScheduler.test_run_all_due_tasks_after_restart.now_func", "<builtin>.abs", "celery.schedules.crontab", "celery.beat.ScheduleEntry", "t.unit.app.test_beat.create_persistent_scheduler_w_call_logging", "datetime.timedelta", "<builtin>.range"], "t.unit.app.test_beat.test_PersistentScheduler.test_run_all_due_tasks_after_restart.now_func": ["datetime.datetime"], "<builtin>.range": [], "<builtin>.abs": [], "t.unit.app.test_beat.test_Service.get_service": ["celery.beat.Service", "t.unit.app.test_beat.create_persistent_scheduler"], "celery.beat.Service": [], "t.unit.app.test_beat.test_Service.test_pickleable": ["celery.beat.Service", "pickle.loads", "pickle.dumps"], "t.unit.app.test_beat.test_Service.test_start": ["t.unit.app.test_beat.test_Service.get_service", "<builtin>.list", "<builtin>.isinstance"], "t.unit.app.test_beat.test_Service.test_start_embedded_process": ["t.unit.app.test_beat.test_Service.get_service"], "t.unit.app.test_beat.test_Service.test_start_thread": ["t.unit.app.test_beat.test_Service.get_service"], "t.unit.app.test_beat.test_Service.test_start_tick_raises_exit_error": ["t.unit.app.test_beat.test_Service.get_service"], "t.unit.app.test_beat.test_Service.test_start_manages_one_tick_before_shutdown": ["t.unit.app.test_beat.test_Service.get_service"], "t.unit.app.test_beat.test_EmbeddedService.xxx_start_stop_process": ["unittest.mock.patch", "t.unit.app.test_beat.MockService.__init__", "<builtin>.isinstance", "celery.beat.EmbeddedService", "pytest.importorskip"], "pytest.importorskip": [], "celery.beat.EmbeddedService": [], "t.unit.app.test_beat.test_EmbeddedService.xxx_start_stop_process._Popen.terminate": [], "t.unit.app.test_beat.test_EmbeddedService.test_start_stop_threaded": ["t.unit.app.test_beat.MockService.__init__", "<builtin>.isinstance", "celery.beat.EmbeddedService"], "t.unit.app.test_beat.test_schedule.test_maybe_make_aware": ["datetime.datetime.utcnow", "celery.schedules.schedule"], "t.unit.app.test_beat.test_schedule.test_to_local": ["datetime.datetime.utcnow", "celery.schedules.schedule"], "t.unit.app.test_amqp": [], "t.unit.app.test_amqp.test_TaskConsumer.test_accept_content": [], "t.unit.app.test_amqp.test_ProducerPool.test_setup_nolimit": ["<builtin>.delattr"], "<builtin>.delattr": [], "t.unit.app.test_amqp.test_ProducerPool.test_setup": ["<builtin>.delattr"], "t.unit.app.test_amqp.test_Queues.test_queues_format": [], "t.unit.app.test_amqp.test_Queues.test_with_defaults": ["celery.app.amqp.Queues"], "celery.app.amqp.Queues": [], "t.unit.app.test_amqp.test_Queues.test_add": ["<builtin>.isinstance", "celery.app.amqp.Queues"], "t.unit.app.test_amqp.test_Queues.test_setitem_adds_default_exchange": ["kombu.Queue", "kombu.Exchange", "celery.app.amqp.Queues"], "t.unit.app.test_amqp.test_Queues.test_select_add": ["<builtin>.sorted", "celery.app.amqp.Queues"], "<builtin>.sorted": [], "t.unit.app.test_amqp.test_Queues.test_deselect": ["<builtin>.sorted", "celery.app.amqp.Queues"], "t.unit.app.test_amqp.test_Queues.test_add_default_exchange": ["kombu.Queue", "kombu.Exchange", "celery.app.amqp.Queues"], "t.unit.app.test_amqp.test_Queues.test_alias": ["kombu.Queue", "celery.app.amqp.Queues"], "t.unit.app.test_amqp.test_Queues": ["pytest.mark.parametrize"], "t.unit.app.test_amqp.test_Queues.test_with_max_priority": ["celery.app.amqp.Queues"], "t.unit.app.test_amqp.test_default_queues": ["pytest.mark.parametrize"], "t.unit.app.test_amqp.test_default_queues.test_setting_default_queue": ["<builtin>.len", "<builtin>.dict"], "t.unit.app.test_amqp.test_default_exchange": ["pytest.mark.parametrize"], "t.unit.app.test_amqp.test_default_exchange.test_setting_default_exchange": ["kombu.Queue", "<builtin>.dict"], "t.unit.app.test_amqp.test_default_exchange.test_setting_default_exchange_type": ["kombu.Queue", "<builtin>.dict"], "t.unit.app.test_amqp.test_AMQP_proto1.test_kwargs_must_be_mapping": ["celery.uuid", "pytest.raises"], "t.unit.app.test_amqp.test_AMQP_proto1.test_args_must_be_list": ["celery.uuid", "pytest.raises"], "t.unit.app.test_amqp.test_AMQP_proto1.test_countdown_negative": ["celery.uuid", "pytest.raises"], "t.unit.app.test_amqp.test_AMQP_proto1.test_as_task_message_without_utc": ["celery.uuid"], "t.unit.app.test_amqp.test_AMQP_Base.setup_method": ["celery.uuid"], "t.unit.app.test_amqp.test_AMQP.test_kwargs_must_be_mapping": ["celery.uuid", "pytest.raises"], "t.unit.app.test_amqp.test_AMQP.test_args_must_be_list": ["celery.uuid", "pytest.raises"], "t.unit.app.test_amqp.test_AMQP.test_countdown_negative": ["celery.uuid", "pytest.raises"], "t.unit.app.test_amqp.test_AMQP.test_Queues__with_max_priority": [], "t.unit.app.test_amqp.test_AMQP.test_send_task_message__no_kwargs": ["unittest.mock.Mock"], "t.unit.app.test_amqp.test_AMQP.test_send_task_message__properties": ["unittest.mock.Mock"], "t.unit.app.test_amqp.test_AMQP.test_send_task_message__headers": ["unittest.mock.Mock"], "t.unit.app.test_amqp.test_AMQP.test_send_task_message__queue_string": ["unittest.mock.Mock"], "t.unit.app.test_amqp.test_AMQP.test_send_task_message__broadcast_without_exchange": ["unittest.mock.Mock", "kombu.common.Broadcast"], "kombu.common.Broadcast": [], "t.unit.app.test_amqp.test_AMQP.test_send_event_exchange_direct_with_exchange": ["unittest.mock.Mock"], "t.unit.app.test_amqp.test_AMQP.test_send_event_exchange_direct_with_routing_key": ["unittest.mock.Mock"], "t.unit.app.test_amqp.test_AMQP.test_send_event_exchange_string": ["unittest.mock.Mock"], "t.unit.app.test_amqp.test_AMQP.test_send_task_message__with_delivery_mode": ["unittest.mock.Mock"], "t.unit.app.test_amqp.test_AMQP.test_send_task_message__with_receivers": ["unittest.mock.patch", "unittest.mock.Mock"], "t.unit.app.test_amqp.test_AMQP.test_routes": [], "t.unit.app.test_amqp.test_AMQP.update_conf_runtime_for_tasks_queues": [], "t.unit.app.test_amqp.test_as_task_v2.test_raises_if_args_is_not_tuple": ["celery.uuid", "pytest.raises"], "t.unit.app.test_amqp.test_as_task_v2.test_raises_if_kwargs_is_not_mapping": ["celery.uuid", "pytest.raises"], "t.unit.app.test_amqp.test_as_task_v2.test_countdown_to_eta": ["celery.utils.time.to_utc", "datetime.datetime.utcnow", "datetime.timedelta", "celery.uuid"], "t.unit.app.test_amqp.test_as_task_v2.test_expires_to_datetime": ["celery.utils.time.to_utc", "datetime.datetime.utcnow", "datetime.timedelta", "celery.uuid"], "t.unit.app.test_amqp.test_as_task_v2.test_eta_to_datetime": ["celery.uuid", "datetime.datetime.utcnow"], "t.unit.app.test_amqp.test_as_task_v2.test_compression": ["unittest.mock.Mock"], "t.unit.app.test_amqp.test_as_task_v2.test_compression_override": ["unittest.mock.Mock"], "t.unit.app.test_amqp.test_as_task_v2.test_callbacks_errbacks_chord": ["celery.uuid", "celery.app.amqp.utf8dict"], "t.unit.app.test_amqp.test_as_task_v2.test_callbacks_errbacks_chord.t": [], "celery.app.amqp.utf8dict": [], "t.unit.app.test_exceptions": [], "t.unit.app.test_exceptions.test_Retry.test_when_datetime": ["datetime.datetime.utcnow", "<builtin>.KeyError", "celery.exceptions.Retry"], "celery.exceptions.Retry": [], "t.unit.app.test_exceptions.test_Retry.test_pickleable": ["<builtin>.KeyError", "celery.exceptions.Retry", "datetime.datetime.utcnow", "pickle.loads", "pickle.dumps", "<builtin>.repr"], "t.unit.app.test_exceptions.test_Reject.test_attrs": ["celery.exceptions.Reject"], "celery.exceptions.Reject": [], "t.unit.app.test_exceptions.test_Reject.test_repr": ["<builtin>.repr", "celery.exceptions.Reject"], "t.unit.app.test_exceptions.test_Reject.test_pickleable": ["pickle.loads", "celery.exceptions.Retry", "pickle.dumps"], "t.unit.app.test_annotations": [], "t.unit.app.test_annotations.AnnotationCase.setup_method": [], "t.unit.app.test_annotations.AnnotationCase.setup_method.add": [], "t.unit.app.test_annotations.AnnotationCase.setup_method.mul": [], "t.unit.app.test_annotations.test_MapAnnotation.test_annotate": ["celery.app.annotations.MapAnnotation"], "celery.app.annotations.MapAnnotation": [], "t.unit.app.test_annotations.test_MapAnnotation.test_annotate_any": ["celery.app.annotations.MapAnnotation"], "t.unit.app.test_annotations.test_prepare.test_dict_to_MapAnnotation": ["<builtin>.isinstance", "celery.app.annotations.prepare"], "celery.app.annotations.prepare": [], "t.unit.app.test_annotations.test_prepare.test_returns_list": ["celery.app.annotations.prepare"], "t.unit.app.test_annotations.test_prepare.test_evalutes_qualnames": ["celery.utils.imports.qualname", "celery.app.annotations.prepare"], "t.unit.app.test_schedules": ["contextlib.contextmanager", "unittest.TestCase"], "unittest.TestCase": [], "contextlib.contextmanager": [], "t.unit.app.test_schedules.patch_crontab_nowfun": [], "t.unit.app.test_schedules.patch_crontab_nowfun.<lambda1>": [], "t.unit.app.test_schedules.test_solar.setup_method": ["celery.schedules.solar", "pytest.importorskip"], "celery.schedules.solar": [], "t.unit.app.test_schedules.test_solar.test_reduce": [], "t.unit.app.test_schedules.test_solar.test_eq": ["celery.schedules.solar", "celery.schedules.schedule"], "t.unit.app.test_schedules.test_solar.test_repr": ["<builtin>.repr"], "t.unit.app.test_schedules.test_solar.test_is_due": ["datetime.datetime.utcnow", "datetime.timedelta", "unittest.mock.Mock"], "t.unit.app.test_schedules.test_solar.test_is_due__not_due": ["datetime.datetime.utcnow", "datetime.timedelta", "unittest.mock.Mock"], "t.unit.app.test_schedules.test_solar.test_remaining_estimate": ["datetime.datetime.utcnow", "unittest.mock.Mock"], "t.unit.app.test_schedules.test_solar.test_coordinates": ["celery.schedules.solar", "pytest.raises"], "t.unit.app.test_schedules.test_solar.test_invalid_event": ["celery.schedules.solar", "pytest.raises"], "t.unit.app.test_schedules.test_solar.test_event_uses_center": ["celery.schedules.solar", "datetime.datetime.utcnow", "pytest.fail"], "pytest.fail": [], "t.unit.app.test_schedules.test_schedule.test_ne": ["celery.schedules.schedule"], "t.unit.app.test_schedules.test_schedule.test_pickle": ["celery.schedules.schedule"], "t.unit.app.test_schedules.utcnow": ["datetime.datetime.utcnow"], "t.unit.app.test_schedules.test_crontab_parser.crontab": ["t.unit.app.test_schedules.test_crontab_parser.crontab", "<builtin>.dict"], "t.unit.app.test_schedules.test_crontab_parser.test_crontab_reduce": ["t.unit.app.test_schedules.test_crontab_parser.crontab", "pickle.loads", "pickle.dumps"], "t.unit.app.test_schedules.test_crontab_parser.test_range_steps_not_enough": ["celery.schedules.crontab_parser", "pytest.raises"], "celery.schedules.crontab_parser": [], "t.unit.app.test_schedules.test_crontab_parser.test_parse_star": ["<builtin>.set", "celery.schedules.crontab_parser", "<builtin>.range"], "<builtin>.set": [], "t.unit.app.test_schedules.test_crontab_parser.test_parse_range": ["<builtin>.set", "celery.schedules.crontab_parser", "<builtin>.range"], "t.unit.app.test_schedules.test_crontab_parser.test_parse_range_wraps": ["<builtin>.set", "celery.schedules.crontab_parser", "<builtin>.range"], "t.unit.app.test_schedules.test_crontab_parser.test_parse_groups": ["celery.schedules.crontab_parser"], "t.unit.app.test_schedules.test_crontab_parser.test_parse_steps": ["celery.schedules.crontab_parser", "<builtin>.range"], "t.unit.app.test_schedules.test_crontab_parser.test_parse_composite": ["celery.schedules.crontab_parser"], "t.unit.app.test_schedules.test_crontab_parser.test_parse_errors_on_empty_string": ["celery.schedules.crontab_parser", "pytest.raises"], "t.unit.app.test_schedules.test_crontab_parser.test_parse_errors_on_empty_group": ["celery.schedules.crontab_parser", "pytest.raises"], "t.unit.app.test_schedules.test_crontab_parser.test_parse_errors_on_empty_steps": ["celery.schedules.crontab_parser", "pytest.raises"], "t.unit.app.test_schedules.test_crontab_parser.test_parse_errors_on_negative_number": ["celery.schedules.crontab_parser", "pytest.raises"], "t.unit.app.test_schedules.test_crontab_parser.test_parse_errors_on_lt_min": ["celery.schedules.crontab_parser", "pytest.raises"], "t.unit.app.test_schedules.test_crontab_parser.test_parse_errors_on_gt_max": ["celery.schedules.crontab_parser", "pytest.raises"], "t.unit.app.test_schedules.test_crontab_parser.test_expand_cronspec_eats_iterables": ["<builtin>.iter"], "<builtin>.iter": [], "t.unit.app.test_schedules.test_crontab_parser.test_expand_cronspec_invalid_type": ["<builtin>.object", "pytest.raises"], "t.unit.app.test_schedules.test_crontab_parser.test_repr": ["<builtin>.repr", "t.unit.app.test_schedules.test_crontab_parser.crontab"], "t.unit.app.test_schedules.test_crontab_parser.test_eq": ["<builtin>.object", "t.unit.app.test_schedules.test_crontab_parser.crontab", "celery.schedules.schedule"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "<builtin>.dict"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance": [], "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance.<lambda1>": [], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_next_minute": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_not_next_minute": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_this_hour": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_not_this_hour": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_today": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_not_today": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_weekday": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_not_weekday": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_monthday": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_not_monthday": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_weekday_monthday": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_monthday_not_weekday": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_weekday_not_monthday": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_not_weekday_not_monthday": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_leapday": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_not_leapday": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_weekmonthdayyear": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_monthdayyear_not_week": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_weekdaymonthyear_not_monthday": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_weekmonthday_not_monthyear": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_weekday_not_monthdayyear": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_monthday_not_weekdaymonthyear": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_monthyear_not_weekmonthday": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_not_weekmonthdayyear": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_invalid_specification": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance", "datetime.datetime", "pytest.raises"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_leapyear": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "datetime.datetime", "t.unit.app.test_schedules.test_crontab_remaining_estimate.next_ocurrance"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_day_after_dst_end": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "pytz.timezone", "datetime.datetime"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_day_after_dst_end.<lambda1>": [], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_day_after_dst_start": ["t.unit.app.test_schedules.test_crontab_remaining_estimate.crontab", "pytz.timezone", "datetime.datetime"], "t.unit.app.test_schedules.test_crontab_remaining_estimate.test_day_after_dst_start.<lambda1>": [], "t.unit.app.test_schedules.test_crontab_is_due.setup_method": ["t.unit.app.test_schedules.test_crontab_is_due.crontab"], "t.unit.app.test_schedules.test_crontab_is_due.crontab": ["t.unit.app.test_schedules.test_crontab_is_due.crontab"], "t.unit.app.test_schedules.test_crontab_is_due.test_default_crontab_spec": ["<builtin>.set", "t.unit.app.test_schedules.test_crontab_is_due.crontab", "<builtin>.range"], "t.unit.app.test_schedules.test_crontab_is_due.test_simple_crontab_spec": ["<builtin>.set", "t.unit.app.test_schedules.test_crontab_is_due.crontab", "<builtin>.range"], "t.unit.app.test_schedules.test_crontab_is_due": ["pytest.mark.skip", "pytest.mark.parametrize"], "t.unit.app.test_schedules.test_crontab_is_due.test_crontab_spec_minute_formats": ["t.unit.app.test_schedules.test_crontab_is_due.crontab"], "t.unit.app.test_schedules.test_crontab_is_due.test_crontab_spec_invalid_minute": ["t.unit.app.test_schedules.test_crontab_is_due.crontab", "pytest.raises"], "t.unit.app.test_schedules.test_crontab_is_due.test_crontab_spec_hour_formats": ["t.unit.app.test_schedules.test_crontab_is_due.crontab"], "t.unit.app.test_schedules.test_crontab_is_due.test_crontab_spec_invalid_hour": ["t.unit.app.test_schedules.test_crontab_is_due.crontab", "pytest.raises"], "t.unit.app.test_schedules.test_crontab_is_due.test_crontab_spec_dow_formats": ["t.unit.app.test_schedules.test_crontab_is_due.crontab"], "t.unit.app.test_schedules.test_crontab_is_due.test_crontab_spec_invalid_dow": ["t.unit.app.test_schedules.test_crontab_is_due.crontab", "pytest.raises"], "t.unit.app.test_schedules.test_crontab_is_due.test_crontab_spec_dom_formats": ["t.unit.app.test_schedules.test_crontab_is_due.crontab"], "t.unit.app.test_schedules.test_crontab_is_due.test_crontab_spec_invalid_dom": ["t.unit.app.test_schedules.test_crontab_is_due.crontab", "pytest.raises"], "t.unit.app.test_schedules.test_crontab_is_due.test_crontab_spec_moy_formats": ["t.unit.app.test_schedules.test_crontab_is_due.crontab"], "t.unit.app.test_schedules.test_crontab_is_due.test_crontab_spec_invalid_moy": ["t.unit.app.test_schedules.test_crontab_is_due.crontab", "pytest.raises"], "t.unit.app.test_schedules.test_crontab_is_due.seconds_almost_equal": ["<builtin>.enumerate", "<builtin>.str"], "t.unit.app.test_schedules.test_crontab_is_due.test_every_minute_execution_is_due": ["t.unit.app.test_schedules.test_crontab_is_due.assert_relativedelta", "datetime.timedelta", "t.unit.app.test_schedules.test_crontab_is_due.seconds_almost_equal"], "t.unit.app.test_schedules.test_crontab_is_due.assert_relativedelta": ["<builtin>.getattr", "<builtin>.isinstance"], "<builtin>.getattr": [], "t.unit.app.test_schedules.test_crontab_is_due.test_every_minute_execution_is_not_due": ["datetime.timedelta", "t.unit.app.test_schedules.test_crontab_is_due.seconds_almost_equal"], "t.unit.app.test_schedules.test_crontab_is_due.test_execution_is_due_on_saturday": ["datetime.timedelta", "datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun", "t.unit.app.test_schedules.test_crontab_is_due.seconds_almost_equal"], "t.unit.app.test_schedules.test_crontab_is_due.test_execution_is_due_on_sunday": ["datetime.timedelta", "datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun", "t.unit.app.test_schedules.test_crontab_is_due.seconds_almost_equal"], "t.unit.app.test_schedules.test_crontab_is_due.test_execution_is_due_on_monday": ["datetime.timedelta", "datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun", "t.unit.app.test_schedules.test_crontab_is_due.seconds_almost_equal"], "t.unit.app.test_schedules.test_crontab_is_due.test_every_hour_execution_is_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_every_hour_execution_is_not_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_first_quarter_execution_is_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_second_quarter_execution_is_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_first_quarter_execution_is_not_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_second_quarter_execution_is_not_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_daily_execution_is_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_daily_execution_is_not_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_weekly_execution_is_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_weekly_execution_is_not_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_monthly_execution_is_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_monthly_execution_is_not_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_monthly_moy_execution_is_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "pytest.mark.skip": [], "t.unit.app.test_schedules.test_crontab_is_due.test_monthly_moy_execution_is_not_due": ["time.mktime", "datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "time.mktime": [], "t.unit.app.test_schedules.test_crontab_is_due.test_monthly_moy_execution_is_due2": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_monthly_moy_execution_is_not_due2": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_yearly_execution_is_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_yearly_execution_is_not_due": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_execution_not_due_if_task_not_run_at_last_feasible_time_outside_deadline": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_execution_not_due_if_task_not_run_at_last_feasible_time_no_deadline_set": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_execution_due_if_task_not_run_at_last_feasible_time_within_deadline": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_execution_due_if_task_not_run_at_any_feasible_time_within_deadline": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_execution_not_due_if_task_not_run_at_any_feasible_time_outside_deadline": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_execution_not_due_if_last_run_in_future": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_execution_not_due_if_last_run_at_last_feasible_time": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app.test_schedules.test_crontab_is_due.test_execution_not_due_if_last_run_past_last_feasible_time": ["datetime.datetime", "t.unit.app.test_schedules.patch_crontab_nowfun"], "t.unit.app": [], "t.unit.app.test_celery": ["pytest.mark.parametrize"], "t.unit.app.test_celery.test_version": ["<builtin>.len", "celery.__version__.count"], "celery.__version__.count": [], "t.unit.app.test_celery.test_meta": ["<builtin>.getattr"], "t.unit.app.test_backends": ["contextlib.contextmanager"], "t.unit.app.test_backends.CachedBackendWithTreadTrucking._track_attribute_access": ["<builtin>.type", "<builtin>.getattr"], "t.unit.app.test_backends.CachedBackendWithTreadTrucking.__getattribute__": ["t.unit.app.test_backends.CachedBackendWithTreadTrucking._track_attribute_access", "<builtin>.super"], "t.unit.app.test_backends.embed_worker": ["<builtin>.RuntimeError", "celery.utils.nodenames.anon_nodename", "celery.contrib.testing.worker.TestWorkController", "threading.Thread"], "celery.utils.nodenames.anon_nodename": [], "celery.contrib.testing.worker.TestWorkController": [], "threading.Thread": [], "t.unit.app.test_backends.test_backends": ["pytest.mark.celery", "pytest.mark.parametrize"], "t.unit.app.test_backends.test_backends.test_get_backend_aliases": ["celery.app.backends.by_url", "<builtin>.isinstance"], "celery.app.backends.by_url": [], "t.unit.app.test_backends.test_backends.test_unknown_backend": ["celery.app.backends.by_name", "pytest.raises"], "celery.app.backends.by_name": [], "t.unit.app.test_backends.test_backends.test_backend_by_url": ["celery.app.backends.by_url"], "t.unit.app.test_backends.test_backends.test_sym_raises_ValuError": ["<builtin>.ValueError", "celery.app.backends.by_name", "unittest.mock.patch", "pytest.raises"], "t.unit.app.test_backends.test_backends.test_backend_can_not_be_module": ["celery.app.backends.by_name", "pytest.raises"], "pytest.mark.celery": [], "t.unit.app.test_backends.test_backends.test_backend_thread_safety": ["<builtin>.set", "<builtin>.len", "t.unit.app.test_backends.embed_worker"], "t.unit.app.test_backends.test_backends.test_backend_thread_safety.dummy_add_task": [], "t.unit.app.test_builtins": [], "t.unit.app.test_builtins.BuiltinsCase.setup_method": [], "t.unit.app.test_builtins.BuiltinsCase.setup_method.xsum": ["<builtin>.sum"], "<builtin>.sum": [], "t.unit.app.test_builtins.BuiltinsCase.setup_method.add": [], "t.unit.app.test_builtins.test_backend_cleanup.test_run": ["celery.app.builtins.add_backend_cleanup_task", "unittest.mock.Mock"], "celery.app.builtins.add_backend_cleanup_task": [], "t.unit.app.test_builtins.test_accumulate.setup_method": [], "t.unit.app.test_builtins.test_accumulate.test_with_index": [], "t.unit.app.test_builtins.test_accumulate.test_no_index": [], "t.unit.app.test_builtins.test_map.test_run": [], "t.unit.app.test_builtins.test_map.test_run.map_mul": [], "t.unit.app.test_builtins.test_starmap.test_run": [], "t.unit.app.test_builtins.test_starmap.test_run.smap_mul": [], "t.unit.app.test_builtins.test_chunks": ["unittest.mock.patch"], "t.unit.app.test_builtins.test_chunks.test_run": [], "t.unit.app.test_builtins.test_chunks.test_run.chunks_mul": [], "t.unit.app.test_builtins.test_group.setup_method": ["celery.app.builtins.add_group_task", "<builtin>.super", "unittest.mock.Mock", "celery.contrib.testing.mocks.ContextMock"], "celery.app.builtins.add_group_task": [], "t.unit.app.test_builtins.test_group.test_apply_async_eager": ["unittest.mock.Mock"], "t.unit.app.test_builtins.test_group.mock_group": ["celery.group", "unittest.mock.Mock"], "celery.group": [], "t.unit.app.test_builtins.test_group": ["unittest.mock.patch"], "t.unit.app.test_builtins.test_group.test_task": ["t.unit.app.test_builtins.test_group.mock_group"], "t.unit.app.test_builtins.test_group.test_task__disable_add_to_parent": ["t.unit.app.test_builtins.test_group.mock_group"], "t.unit.app.test_builtins.test_chain.setup_method": ["<builtin>.super", "celery.app.builtins.add_chain_task"], "celery.app.builtins.add_chain_task": [], "t.unit.app.test_builtins.test_chain.test_not_implemented": ["pytest.raises"], "t.unit.app.test_builtins.test_chord.setup_method": ["celery.app.builtins.add_chord_task", "<builtin>.super"], "celery.app.builtins.add_chord_task": [], "t.unit.app.test_builtins.test_chord.test_apply_async": ["celery.chord", "<builtin>.range"], "celery.chord": [], "t.unit.app.test_builtins.test_chord.test_run_header_not_group": ["<builtin>.range"], "t.unit.app.test_builtins.test_chord.test_forward_options": ["celery.chord", "unittest.mock.Mock", "<builtin>.range"], "t.unit.app.test_builtins.test_chord.test_apply_eager": ["celery.chord", "<builtin>.range"], "t.unit.app.test_builtins.test_chord.test_apply_eager_with_arguments": ["celery.chord", "<builtin>.range"], "t.unit.app.test_loaders": [], "t.unit.app.test_loaders.DummyLoader.read_configuration": [], "t.unit.app.test_loaders.test_loaders.test_get_loader_cls": ["celery.loaders.get_loader_cls"], "celery.loaders.get_loader_cls": [], "t.unit.app.test_loaders.test_LoaderBase.setup_method": ["celery.loaders.base.BaseLoader.__init__"], "celery.loaders.base.BaseLoader.__init__": [], "t.unit.app.test_loaders.test_LoaderBase.test_handlers_pass": ["celery.loaders.base.BaseLoader.on_worker_init", "celery.loaders.base.BaseLoader.on_task_init"], "celery.loaders.base.BaseLoader.on_task_init": [], "celery.loaders.base.BaseLoader.on_worker_init": [], "t.unit.app.test_loaders.test_LoaderBase.test_now": ["celery.loaders.base.BaseLoader.now"], "celery.loaders.base.BaseLoader.now": [], "t.unit.app.test_loaders.test_LoaderBase.test_read_configuration_no_env": ["celery.loaders.base.BaseLoader"], "celery.loaders.base.BaseLoader": [], "t.unit.app.test_loaders.test_LoaderBase.test_autodiscovery": ["celery.loaders.base.BaseLoader.task_modules.discard", "unittest.mock.patch", "unittest.mock.Mock", "celery.loaders.base.BaseLoader.autodiscover_tasks"], "celery.loaders.base.BaseLoader.autodiscover_tasks": [], "celery.loaders.base.BaseLoader.task_modules.discard": [], "t.unit.app.test_loaders.test_LoaderBase.test_import_task_module": ["celery.loaders.base.BaseLoader.import_task_module"], "celery.loaders.base.BaseLoader.import_task_module": [], "t.unit.app.test_loaders.test_LoaderBase.test_init_worker_process": ["celery.loaders.base.BaseLoader.init_worker_process", "unittest.mock.Mock"], "celery.loaders.base.BaseLoader.init_worker_process": [], "t.unit.app.test_loaders.test_LoaderBase.test_config_from_object_module": ["celery.loaders.base.BaseLoader.config_from_object", "unittest.mock.Mock"], "celery.loaders.base.BaseLoader.config_from_object": [], "t.unit.app.test_loaders.test_LoaderBase.test_conf_property": [], "t.unit.app.test_loaders.test_LoaderBase.test_import_default_modules": ["celery.loaders.base.BaseLoader.import_default_modules", "t.unit.app.test_loaders.test_LoaderBase.test_import_default_modules.modnames", "<builtin>.sorted"], "t.unit.app.test_loaders.test_LoaderBase.test_import_default_modules.modnames": [], "celery.loaders.base.BaseLoader.import_default_modules": [], "t.unit.app.test_loaders.test_LoaderBase.test_import_default_modules_with_exception": ["celery.signals.import_modules.disconnect", "celery.loaders.base.BaseLoader.import_default_modules", "pytest.raises", "celery.signals.import_modules.connect"], "t.unit.app.test_loaders.test_LoaderBase.test_import_default_modules_with_exception.trigger_exception": ["<builtin>.ImportError"], "<builtin>.ImportError": [], "celery.signals.import_modules.connect": [], "celery.signals.import_modules.disconnect": [], "t.unit.app.test_loaders.test_LoaderBase.test_import_from_cwd_custom_imp": ["unittest.mock.Mock"], "t.unit.app.test_loaders.test_LoaderBase.test_cmdline_config_ValueError": ["celery.loaders.base.BaseLoader.cmdline_config_parser", "pytest.raises"], "celery.loaders.base.BaseLoader.cmdline_config_parser": [], "t.unit.app.test_loaders.test_DefaultLoader": ["pytest.mark.patched_environ", "unittest.mock.patch"], "t.unit.app.test_loaders.test_DefaultLoader.test_read_configuration_not_a_package": ["celery.loaders.default.Loader", "pytest.raises", "celery.utils.imports.NotAPackage"], "celery.utils.imports.NotAPackage": [], "celery.loaders.default.Loader": [], "pytest.mark.patched_environ": [], "t.unit.app.test_loaders.test_DefaultLoader.test_read_configuration_py_in_name": ["celery.loaders.default.Loader", "pytest.raises", "celery.utils.imports.NotAPackage"], "t.unit.app.test_loaders.test_DefaultLoader.test_read_configuration_importerror": ["celery.loaders.default.Loader", "<builtin>.ImportError", "pytest.warns"], "pytest.warns": [], "t.unit.app.test_loaders.test_DefaultLoader.test_read_configuration": ["types.ModuleType.__init__", "sys.modules.get", "os.environ.get", "unittest.mock.Mock", "celery.loaders.default.Loader"], "os.environ.get": [], "types.ModuleType.__init__": [], "sys.modules.get": [], "t.unit.app.test_loaders.test_DefaultLoader.test_read_configuration_ImportError": ["os.environ.get", "celery.loaders.default.Loader", "os.environ.pop", "pytest.raises", "<builtin>.object"], "os.environ.pop": [], "t.unit.app.test_loaders.test_DefaultLoader.test_import_from_cwd": ["os.getcwd", "<builtin>.list", "sys.modules.pop", "sys.path.remove", "sys.path.insert", "celery.loaders.default.Loader"], "os.getcwd": [], "sys.path.remove": [], "sys.path.insert": [], "t.unit.app.test_loaders.test_DefaultLoader.test_unconfigured_settings": ["celery.loaders.default.Loader.__init__", "warnings.catch_warnings"], "t.unit.app.test_loaders.test_DefaultLoader.test_unconfigured_settings._Loader.find_module": ["<builtin>.ImportError"], "warnings.catch_warnings": [], "celery.loaders.default.Loader.__init__": [], "t.unit.app.test_loaders.test_AppLoader.setup_method": ["celery.loaders.app.AppLoader"], "celery.loaders.app.AppLoader": [], "t.unit.app.test_loaders.test_AppLoader.test_on_worker_init": ["sys.modules.pop"], "t.unit.app.test_loaders.test_autodiscovery.test_autodiscover_tasks": ["unittest.mock.patch", "celery.loaders.base.autodiscover_tasks"], "celery.loaders.base.autodiscover_tasks": [], "t.unit.app.test_loaders.test_autodiscovery.test_find_related_module": ["<builtin>.ImportError", "unittest.mock.patch", "celery.loaders.base.find_related_module", "unittest.mock.Mock", "pytest.raises"], "celery.loaders.base.find_related_module": [], "t.unit.app.test_control": [], "t.unit.app.test_control._info_for_commandclass": ["celery.worker.control.Panel.meta.items"], "celery.worker.control.Panel.meta.items": [], "t.unit.app.test_control.test_client_implements_all_commands": ["t.unit.app.test_control._info_for_commandclass", "<builtin>.getattr"], "t.unit.app.test_control.test_inspect_implements_all_commands": ["t.unit.app.test_control._info_for_commandclass", "<builtin>.getattr"], "t.unit.app.test_control.test_flatten_reply.test_flatten_reply": ["celery.app.control.flatten_reply", "<builtin>.str", "pytest.warns", "<builtin>.next", "<builtin>.iter"], "celery.app.control.flatten_reply": [], "t.unit.app.test_control.test_inspect.setup_method": ["unittest.mock.Mock"], "t.unit.app.test_control.test_inspect.test_prepare_reply": [], "t.unit.app.test_control.test_inspect.assert_broadcast_called": [], "t.unit.app.test_control.test_inspect.test_active": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_active_safe": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_clock": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_conf": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_conf__with_defaults": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_hello": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_hello__with_revoked": ["celery.utils.collections.LimitedSet", "t.unit.app.test_control.test_inspect.assert_broadcast_called", "<builtin>.range"], "celery.utils.collections.LimitedSet": [], "t.unit.app.test_control.test_inspect.test_memsample": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_memdump": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_memdump__samples_specified": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_objgraph": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_scheduled": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_reserved": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_stats": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_revoked": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_registered": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_registered__taskinfoitems": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_ping": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_ping_matcher_pattern": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_active_queues": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_query_task": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_query_task__compat_single_list_argument": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_query_task__scalar": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_inspect.test_report": ["t.unit.app.test_control.test_inspect.assert_broadcast_called"], "t.unit.app.test_control.test_Control_broadcast.setup_method": ["unittest.mock.Mock"], "t.unit.app.test_control.test_Control_broadcast.test_broadcast": [], "t.unit.app.test_control.test_Control_broadcast.test_broadcast_limit": [], "t.unit.app.test_control.test_Control.setup_method": ["unittest.mock.Mock"], "t.unit.app.test_control.test_Control.setup_method.mytask": [], "t.unit.app.test_control.test_Control.assert_control_called_with_args": [], "t.unit.app.test_control.test_Control.test_serializer": ["celery.app.control.Control"], "celery.app.control.Control": [], "t.unit.app.test_control.test_Control.test_purge": ["unittest.mock.Mock"], "t.unit.app.test_control.test_Control.test_rate_limit": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_rate_limit__with_destination": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_time_limit": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_time_limit__with_destination": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_add_consumer": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_add_consumer__with_options_and_dest": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_cancel_consumer": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_cancel_consumer__with_destination": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_shutdown": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_shutdown__with_destination": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_heartbeat": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_heartbeat__with_destination": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_pool_restart": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_terminate": ["unittest.mock.Mock"], "t.unit.app.test_control.test_Control.test_enable_events": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_enable_events_with_destination": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_disable_events": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_disable_events_with_destination": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_ping": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_ping_with_destination": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_revoke": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_revoke_by_stamped_headers": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_revoke__with_options": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_revoke_by_stamped_headers__with_options": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_election": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_autoscale": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_autoscale__with_options": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_pool_grow": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_pool_grow__with_options": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_pool_shrink": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_pool_shrink__with_options": ["t.unit.app.test_control.test_Control.assert_control_called_with_args"], "t.unit.app.test_control.test_Control.test_revoke_from_result": ["unittest.mock.Mock"], "t.unit.app.test_control.test_Control.test_revoke_by_stamped_headers_from_result": ["unittest.mock.Mock"], "t.unit.app.test_control.test_Control.test_revoke_from_resultset": ["celery.uuid", "unittest.mock.Mock", "<builtin>.range"], "t.unit.app.test_control.test_Control.test_after_fork_clears_mailbox_pool": ["unittest.mock.Mock"], "t.unit.app.test_control.test_Control.test_control_exchange__default": ["celery.app.control.Control"], "t.unit.app.test_control.test_Control.test_control_exchange__setting": ["celery.app.control.Control"], "t.unit.backends.test_cache": [], "t.unit.backends.test_cache.SomeClass.__init__": [], "t.unit.backends.test_cache.test_CacheBackend.setup_method": ["celery.uuid", "celery.backends.cache.CacheBackend"], "celery.backends.cache.CacheBackend": [], "t.unit.backends.test_cache.test_CacheBackend.setup_method.<lambda1>": [], "t.unit.backends.test_cache.test_CacheBackend.teardown_method": [], "t.unit.backends.test_cache.test_CacheBackend.test_no_backend": ["pytest.raises", "celery.backends.cache.CacheBackend"], "t.unit.backends.test_cache.test_CacheBackend.test_memory_client_is_shared": ["threading.Thread"], "t.unit.backends.test_cache.test_CacheBackend.test_memory_client_is_shared.<lambda1>": ["celery.backends.cache.CacheBackend"], "t.unit.backends.test_cache.test_CacheBackend.test_mark_as_done": [], "t.unit.backends.test_cache.test_CacheBackend.test_is_pickled": ["t.unit.backends.test_cache.SomeClass.__init__"], "t.unit.backends.test_cache.test_CacheBackend.test_mark_as_failure": ["<builtin>.KeyError", "<builtin>.isinstance"], "t.unit.backends.test_cache.test_CacheBackend.test_apply_chord": ["celery.uuid", "<builtin>.range", "celery.backends.cache.CacheBackend"], "t.unit.backends.test_cache.test_CacheBackend": ["unittest.mock.patch"], "t.unit.backends.test_cache.test_CacheBackend.test_on_chord_part_return": ["celery.signature", "unittest.mock.Mock", "celery.backends.cache.CacheBackend", "celery.uuid", "<builtin>.range"], "celery.signature": [], "t.unit.backends.test_cache.test_CacheBackend.test_mget": [], "t.unit.backends.test_cache.test_CacheBackend.test_forget": [], "t.unit.backends.test_cache.test_CacheBackend.test_process_cleanup": [], "t.unit.backends.test_cache.test_CacheBackend.test_expires_as_int": ["celery.backends.cache.CacheBackend"], "t.unit.backends.test_cache.test_CacheBackend.test_unknown_backend_raises_ImproperlyConfigured": ["pytest.raises", "celery.backends.cache.CacheBackend"], "t.unit.backends.test_cache.test_CacheBackend.test_as_uri_no_servers": [], "t.unit.backends.test_cache.test_CacheBackend.test_as_uri_one_server": ["celery.backends.cache.CacheBackend"], "t.unit.backends.test_cache.test_CacheBackend.test_as_uri_multiple_servers": ["celery.backends.cache.CacheBackend"], "t.unit.backends.test_cache.test_CacheBackend.test_regression_worker_startup_info": ["pytest.importorskip", "t.unit.conftest.stdouts"], "t.unit.backends.test_cache.MemcachedClient.set": ["<builtin>.super", "<builtin>.isinstance"], "t.unit.backends.test_cache.MockCacheMixin": ["contextlib.contextmanager"], "t.unit.backends.test_cache.MockCacheMixin.mock_memcache": ["sys.modules.get", "types.ModuleType"], "types.ModuleType": [], "t.unit.backends.test_cache.MockCacheMixin.mock_pylibmc": ["sys.modules.get", "types.ModuleType"], "t.unit.backends.test_cache.test_get_best_memcache.test_pylibmc": ["t.unit.backends.test_cache.MockCacheMixin.mock_pylibmc", "t.unit.conftest.reset_modules", "celery.backends.cache.get_best_memcache"], "t.unit.conftest.reset_modules": ["sys.modules.pop", "importlib.import_module", "importlib.reload", "sys.modules.update"], "celery.backends.cache.get_best_memcache": [], "t.unit.backends.test_cache.test_get_best_memcache": ["pytest.mark.masked_modules"], "t.unit.backends.test_cache.test_get_best_memcache.test_memcache": ["t.unit.backends.test_cache.MockCacheMixin.mock_memcache", "t.unit.conftest.reset_modules", "celery.backends.cache.get_best_memcache"], "t.unit.backends.test_cache.test_get_best_memcache.test_no_implementations": ["t.unit.conftest.reset_modules", "celery.backends.cache.get_best_memcache", "pytest.raises"], "t.unit.backends.test_cache.test_get_best_memcache.test_cached": ["t.unit.backends.test_cache.MockCacheMixin.mock_pylibmc", "t.unit.conftest.reset_modules", "celery.backends.cache.get_best_memcache"], "t.unit.backends.test_cache.test_get_best_memcache.test_backends": ["t.unit.backends.test_cache.MockCacheMixin.mock_memcache", "celery.backends.cache.backends.items"], "celery.backends.cache.backends.items": [], "t.unit.backends.test_cache.test_memcache_key": ["pytest.mark.masked_modules"], "t.unit.backends.test_cache.test_memcache_key.test_memcache_unicode_key": ["<builtin>.str", "t.unit.backends.test_cache.MockCacheMixin.mock_memcache", "celery.backends.cache.CacheBackend", "celery.uuid", "t.unit.conftest.reset_modules"], "t.unit.backends.test_cache.test_memcache_key.test_memcache_bytes_key": ["kombu.utils.encoding.str_to_bytes", "t.unit.backends.test_cache.MockCacheMixin.mock_memcache", "celery.backends.cache.CacheBackend", "celery.uuid", "t.unit.conftest.reset_modules"], "kombu.utils.encoding.str_to_bytes": [], "t.unit.backends.test_cache.test_memcache_key.test_pylibmc_unicode_key": ["t.unit.backends.test_cache.MockCacheMixin.mock_pylibmc", "<builtin>.str", "celery.backends.cache.CacheBackend", "celery.uuid", "t.unit.conftest.reset_modules"], "t.unit.backends.test_cache.test_memcache_key.test_pylibmc_bytes_key": ["kombu.utils.encoding.str_to_bytes", "t.unit.backends.test_cache.MockCacheMixin.mock_pylibmc", "celery.backends.cache.CacheBackend", "celery.uuid", "t.unit.conftest.reset_modules"], "t.unit.backends.test_arangodb": ["pytest.importorskip"], "t.unit.backends.test_arangodb.test_ArangoDbBackend.setup_method": ["celery.backends.arangodb.ArangoDbBackend"], "celery.backends.arangodb.ArangoDbBackend": [], "t.unit.backends.test_arangodb.test_ArangoDbBackend.test_init_no_arangodb": ["pytest.raises", "celery.backends.arangodb.ArangoDbBackend"], "t.unit.backends.test_arangodb.test_ArangoDbBackend.test_init_no_settings": ["pytest.raises", "celery.backends.arangodb.ArangoDbBackend"], "t.unit.backends.test_arangodb.test_ArangoDbBackend.test_init_settings_is_None": ["celery.backends.arangodb.ArangoDbBackend"], "t.unit.backends.test_arangodb.test_ArangoDbBackend.test_get_connection_connection_exists": ["unittest.mock.patch"], "t.unit.backends.test_arangodb.test_ArangoDbBackend.test_get": ["unittest.mock.Mock", "celery.backends.arangodb.ArangoDbBackend"], "t.unit.backends.test_arangodb.test_ArangoDbBackend.test_delete": ["unittest.mock.Mock", "celery.backends.arangodb.ArangoDbBackend"], "t.unit.backends.test_arangodb.test_ArangoDbBackend.test_config_params": ["celery.backends.arangodb.ArangoDbBackend"], "t.unit.backends.test_arangodb.test_ArangoDbBackend.test_backend_by_url": ["celery.app.backends.by_url"], "t.unit.backends.test_arangodb.test_ArangoDbBackend.test_backend_params_by_url": [], "t.unit.backends.test_arangodb.test_ArangoDbBackend.test_backend_cleanup": ["datetime.datetime.utcnow", "unittest.mock.Mock"], "t.unit.backends.test_cassandra": [], "t.unit.backends.test_cassandra.test_CassandraBackend.setup_method": [], "pytest.mark.patched_module": [], "t.unit.backends.test_cassandra.test_CassandraBackend": ["pytest.mark.usefixtures", "pytest.mark.patched_module"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_init_no_cassandra": ["pytest.raises", "celery.backends.cassandra.CassandraBackend"], "celery.backends.cassandra.CassandraBackend": [], "t.unit.backends.test_cassandra.test_CassandraBackend.test_init_with_and_without_LOCAL_QUROM": ["celery.backends.cassandra.CassandraBackend", "pytest.raises", "unittest.mock.Mock", "celery.utils.objects.Bunch"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_init_with_cloud": ["unittest.mock.Mock", "<builtin>.isinstance", "celery.backends.cassandra.CassandraBackend"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_init_with_cloud.DummyClusterWithBundle.__init__": ["<builtin>.ValueError"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_init_with_cloud.DummyClusterWithBundle.connect": ["unittest.mock.Mock"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_reduce": ["pickle.loads", "pickle.dumps", "celery.backends.cassandra.CassandraBackend"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_get_task_meta_for": ["unittest.mock.Mock", "datetime.datetime.now", "celery.backends.cassandra.CassandraBackend"], "datetime.datetime.now": [], "t.unit.backends.test_cassandra.test_CassandraBackend.test_as_uri": ["unittest.mock.Mock", "celery.backends.cassandra.CassandraBackend"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_store_result": ["unittest.mock.Mock", "celery.backends.cassandra.CassandraBackend"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_timeouting_cluster": ["pytest.raises", "unittest.mock.Mock", "celery.backends.cassandra.CassandraBackend"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_timeouting_cluster.VeryFaultyCluster.__init__": [], "t.unit.backends.test_cassandra.test_CassandraBackend.test_timeouting_cluster.VeryFaultyCluster.connect": [], "t.unit.backends.test_cassandra.test_CassandraBackend.test_timeouting_cluster.VeryFaultyCluster.shutdown": [], "t.unit.backends.test_cassandra.test_CassandraBackend.test_create_result_table": ["unittest.mock.Mock", "celery.backends.cassandra.CassandraBackend"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_create_result_table.FaultySession.__init__": [], "t.unit.backends.test_cassandra.test_CassandraBackend.test_create_result_table.FaultySession.execute": [], "t.unit.backends.test_cassandra.test_CassandraBackend.test_create_result_table.DummyCluster.__init__": [], "t.unit.backends.test_cassandra.test_CassandraBackend.test_create_result_table.DummyCluster.connect": ["t.unit.backends.test_cassandra.test_CassandraBackend.test_create_result_table.FaultySession.__init__"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_init_session": ["unittest.mock.Mock", "celery.backends.cassandra.CassandraBackend"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_init_session.DummyCluster.__init__": [], "t.unit.backends.test_cassandra.test_CassandraBackend.test_init_session.DummyCluster.connect": ["unittest.mock.Mock"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_auth_provider": ["pytest.raises", "unittest.mock.Mock", "celery.backends.cassandra.CassandraBackend"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_auth_provider.DummyAuth": ["unittest.mock.Mock"], "t.unit.backends.test_cassandra.test_CassandraBackend.test_options": ["unittest.mock.Mock", "celery.backends.cassandra.CassandraBackend"], "t.unit.backends.test_database": ["pytest.importorskip"], "t.unit.backends.test_database.SomeClass.__init__": [], "t.unit.backends.test_database.SomeClass.__eq__": [], "t.unit.backends.test_database.test_session_cleanup.test_context": ["celery.backends.database.session_cleanup", "unittest.mock.Mock"], "celery.backends.database.session_cleanup": [], "t.unit.backends.test_database.test_session_cleanup.test_context_raises": ["celery.backends.database.session_cleanup", "pytest.raises", "unittest.mock.Mock", "<builtin>.KeyError"], "t.unit.backends.test_database.test_DatabaseBackend.setup_method": [], "t.unit.backends.test_database.test_DatabaseBackend.test_retry_helper": ["celery.backends.database.retry", "pytest.raises", "t.unit.backends.test_database.test_DatabaseBackend.test_retry_helper.raises"], "celery.backends.database.retry": [], "t.unit.backends.test_database.test_DatabaseBackend.test_retry_helper.raises": ["celery.backends.database.DatabaseError"], "celery.backends.database.DatabaseError": [], "t.unit.backends.test_database.test_DatabaseBackend.test_missing_dburi_raises_ImproperlyConfigured": ["celery.backends.database.DatabaseBackend", "pytest.raises"], "celery.backends.database.DatabaseBackend": [], "t.unit.backends.test_database.test_DatabaseBackend.test_table_schema_config": ["celery.backends.database.DatabaseBackend"], "t.unit.backends.test_database.test_DatabaseBackend.test_table_name_config": ["celery.backends.database.DatabaseBackend"], "t.unit.backends.test_database.test_DatabaseBackend.test_missing_task_id_is_PENDING": ["celery.backends.database.DatabaseBackend"], "t.unit.backends.test_database.test_DatabaseBackend.test_missing_task_meta_is_dict_with_pending": ["celery.backends.database.DatabaseBackend"], "t.unit.backends.test_database.test_DatabaseBackend.test_mark_as_done": ["celery.backends.database.DatabaseBackend", "celery.uuid"], "t.unit.backends.test_database.test_DatabaseBackend.test_is_pickled": ["celery.backends.database.DatabaseBackend", "celery.uuid", "t.unit.backends.test_database.SomeClass.__init__"], "t.unit.backends.test_database.test_DatabaseBackend.test_mark_as_started": ["celery.backends.database.DatabaseBackend", "celery.uuid"], "t.unit.backends.test_database.test_DatabaseBackend.test_mark_as_revoked": ["celery.backends.database.DatabaseBackend", "celery.uuid"], "t.unit.backends.test_database.test_DatabaseBackend.test_mark_as_retry": ["<builtin>.KeyError", "celery.backends.database.DatabaseBackend", "celery.uuid", "<builtin>.isinstance", "traceback.format_stack"], "traceback.format_stack": [], "t.unit.backends.test_database.test_DatabaseBackend.test_mark_as_failure": ["<builtin>.KeyError", "celery.backends.database.DatabaseBackend", "celery.uuid", "<builtin>.isinstance", "traceback.format_stack"], "t.unit.backends.test_database.test_DatabaseBackend.test_forget": ["celery.backends.database.DatabaseBackend", "celery.uuid"], "t.unit.backends.test_database.test_DatabaseBackend.test_process_cleanup": ["celery.backends.database.DatabaseBackend"], "t.unit.backends.test_database.test_DatabaseBackend": ["pytest.mark.usefixtures"], "t.unit.backends.test_database.test_DatabaseBackend.test_reduce": ["celery.backends.database.DatabaseBackend", "pickle.loads", "pickle.dumps"], "t.unit.backends.test_database.test_DatabaseBackend.test_save__restore__delete_group": ["celery.backends.database.DatabaseBackend", "celery.uuid"], "t.unit.backends.test_database.test_DatabaseBackend.test_cleanup": ["celery.backends.database.DatabaseBackend", "celery.uuid", "datetime.datetime.now", "<builtin>.range"], "t.unit.backends.test_database.test_DatabaseBackend.test_Task__repr__": ["<builtin>.repr", "celery.backends.database.models.Task"], "celery.backends.database.models.Task": [], "t.unit.backends.test_database.test_DatabaseBackend.test_TaskSet__repr__": ["<builtin>.repr", "celery.backends.database.models.TaskSet"], "celery.backends.database.models.TaskSet": [], "t.unit.backends.test_database.test_DatabaseBackend_result_extended.setup_method": [], "t.unit.backends.test_database.test_DatabaseBackend_result_extended": ["pytest.mark.parametrize"], "t.unit.backends.test_database.test_DatabaseBackend_result_extended.test_store_result": ["celery.backends.database.DatabaseBackend", "celery.uuid", "celery.app.task.Context"], "celery.app.task.Context": [], "t.unit.backends.test_database.test_DatabaseBackend_result_extended.test_store_none_result": ["celery.backends.database.DatabaseBackend", "celery.uuid", "celery.app.task.Context"], "t.unit.backends.test_database.test_DatabaseBackend_result_extended.test_get_result_meta": ["celery.backends.database.DatabaseBackend", "celery.app.task.Context"], "t.unit.backends.test_database.test_DatabaseBackend_result_extended.test_get_result_meta_with_none": ["celery.backends.database.DatabaseBackend", "celery.app.task.Context"], "t.unit.backends.test_database.test_SessionManager.test_after_fork": ["celery.backends.database.session.SessionManager"], "celery.backends.database.session.SessionManager": [], "t.unit.backends.test_database.test_SessionManager": ["unittest.mock.patch"], "t.unit.backends.test_database.test_SessionManager.test_get_engine_forked": ["celery.backends.database.session.SessionManager"], "t.unit.backends.test_database.test_SessionManager.test_get_engine_kwargs": ["celery.backends.database.session.SessionManager"], "t.unit.backends.test_database.test_SessionManager.test_create_session_forked": ["unittest.mock.Mock", "celery.backends.database.session.SessionManager"], "t.unit.backends.test_database.test_SessionManager.test_coverage_madness": ["celery.backends.database.session.SessionManager"], "t.unit.backends.test_database.test_SessionManager.test_prepare_models_terminates": ["pytest.raises", "unittest.mock.patch.object", "sqlalchemy.dialects.sqlite.dialect.dbapi", "celery.backends.database.session.SessionManager"], "sqlalchemy.dialects.sqlite.dialect.dbapi": [], "t.unit.backends.test_database.test_SessionManager.test_prepare_models_terminates.raise_err": ["sqlalchemy.exc.DatabaseError"], "sqlalchemy.exc.DatabaseError": [], "unittest.mock.patch.object": [], "t.unit.backends.test_s3": [], "t.unit.backends.test_s3.test_S3Backend": ["unittest.mock.patch", "moto.mock_s3", "pytest.mark.parametrize"], "t.unit.backends.test_s3.test_S3Backend.test_with_missing_aws_credentials": ["celery.backends.s3.S3Backend", "pytest.raises"], "celery.backends.s3.S3Backend": [], "t.unit.backends.test_s3.test_S3Backend.test_with_no_credentials_in_config_attempts_to_load_credentials": ["celery.backends.s3.S3Backend"], "t.unit.backends.test_s3.test_S3Backend.test_with_credentials_in_config_does_not_search_for_credentials": ["celery.backends.s3.S3Backend"], "t.unit.backends.test_s3.test_S3Backend.test_with_no_given_bucket": ["celery.backends.s3.S3Backend", "pytest.raises"], "t.unit.backends.test_s3.test_S3Backend.test_it_creates_an_aws_s3_connection": ["celery.backends.s3.S3Backend"], "t.unit.backends.test_s3.test_S3Backend.test_it_creates_an_aws_s3_resource": ["celery.backends.s3.S3Backend"], "moto.mock_s3": [], "t.unit.backends.test_s3.test_S3Backend.test_set_and_get_a_key": ["celery.backends.s3.S3Backend", "t.unit.backends.test_s3.test_S3Backend._mock_s3_resource"], "t.unit.backends.test_s3.test_S3Backend._mock_s3_resource": ["boto3.Session"], "t.unit.backends.test_s3.test_S3Backend.test_set_and_get_a_result": ["celery.backends.s3.S3Backend", "t.unit.backends.test_s3.test_S3Backend._mock_s3_resource"], "t.unit.backends.test_s3.test_S3Backend.test_get_a_missing_key": ["celery.backends.s3.S3Backend", "t.unit.backends.test_s3.test_S3Backend._mock_s3_resource"], "t.unit.backends.test_s3.test_S3Backend.test_with_error_while_getting_key": ["celery.backends.s3.S3Backend", "pytest.raises", "botocore.exceptions.ClientError"], "botocore.exceptions.ClientError": [], "t.unit.backends.test_s3.test_S3Backend.test_delete_a_key": ["celery.backends.s3.S3Backend", "t.unit.backends.test_s3.test_S3Backend._mock_s3_resource"], "t.unit.backends.test_s3.test_S3Backend.test_with_a_non_existing_bucket": ["celery.backends.s3.S3Backend", "pytest.raises", "t.unit.backends.test_s3.test_S3Backend._mock_s3_resource"], "boto3.Session": [], "t.unit.backends.test_azureblockblob": ["pytest.importorskip"], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend.setup_method": ["celery.backends.azureblockblob.AzureBlockBlobBackend"], "celery.backends.azureblockblob.AzureBlockBlobBackend": [], "pytest.fixture": [], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend": ["unittest.mock.patch", "pytest.fixture"], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend.base_path": [], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend.test_missing_third_party_sdk": ["celery.backends.azureblockblob.AzureBlockBlobBackend", "pytest.raises"], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend.test_bad_connection_url": ["celery.backends.azureblockblob.AzureBlockBlobBackend._parse_url", "pytest.raises"], "celery.backends.azureblockblob.AzureBlockBlobBackend._parse_url": [], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend.test_create_client": ["celery.backends.azureblockblob.AzureBlockBlobBackend", "unittest.mock.Mock"], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend.test_configure_client": ["celery.backends.azureblockblob.AzureBlockBlobBackend", "unittest.mock.Mock"], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend.test_get": [], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend.test_get_missing": [], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend.test_set": [], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend.test_mget": ["unittest.mock.call"], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend.test_delete": [], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend.test_base_path_conf": ["celery.backends.azureblockblob.AzureBlockBlobBackend"], "t.unit.backends.test_azureblockblob.test_AzureBlockBlobBackend.test_base_path_conf_default": ["celery.backends.azureblockblob.AzureBlockBlobBackend"], "t.unit.backends.test_azureblockblob.test_as_uri.setup_method": ["celery.backends.azureblockblob.AzureBlockBlobBackend"], "t.unit.backends.test_azureblockblob.test_as_uri.test_as_uri_include_password": [], "t.unit.backends.test_azureblockblob.test_as_uri.test_as_uri_exclude_password": [], "t.unit.backends.test_filesystem": [], "t.unit.backends.test_filesystem.test_FilesystemBackend.setup_method": ["tempfile.mkdtemp"], "tempfile.mkdtemp": [], "t.unit.backends.test_filesystem.test_FilesystemBackend.test_a_path_is_required": ["celery.backends.filesystem.FilesystemBackend", "pytest.raises"], "celery.backends.filesystem.FilesystemBackend": [], "t.unit.backends.test_filesystem.test_FilesystemBackend.test_a_path_in_url": ["celery.backends.filesystem.FilesystemBackend"], "t.unit.backends.test_filesystem.test_FilesystemBackend": ["pytest.mark.skipif", "pytest.mark.usefixtures", "pytest.mark.parametrize"], "t.unit.backends.test_filesystem.test_FilesystemBackend.test_raises_meaningful_errors_for_invalid_urls": ["celery.backends.filesystem.FilesystemBackend", "pytest.raises"], "t.unit.backends.test_filesystem.test_FilesystemBackend.test_localhost_is_removed_from_url": ["celery.backends.filesystem.FilesystemBackend"], "t.unit.backends.test_filesystem.test_FilesystemBackend.test_missing_task_is_PENDING": ["celery.backends.filesystem.FilesystemBackend"], "t.unit.backends.test_filesystem.test_FilesystemBackend.test_mark_as_done_writes_file": ["celery.uuid", "<builtin>.len", "celery.backends.filesystem.FilesystemBackend", "os.listdir"], "os.listdir": [], "t.unit.backends.test_filesystem.test_FilesystemBackend.test_done_task_is_SUCCESS": ["celery.uuid", "celery.backends.filesystem.FilesystemBackend"], "t.unit.backends.test_filesystem.test_FilesystemBackend.test_correct_result": ["celery.uuid", "celery.backends.filesystem.FilesystemBackend"], "t.unit.backends.test_filesystem.test_FilesystemBackend.test_get_many": ["celery.uuid", "celery.backends.filesystem.FilesystemBackend"], "t.unit.backends.test_filesystem.test_FilesystemBackend.test_forget_deletes_file": ["celery.uuid", "<builtin>.len", "celery.backends.filesystem.FilesystemBackend", "os.listdir"], "t.unit.backends.test_filesystem.test_FilesystemBackend.test_pickleable": ["pickle.loads", "celery.backends.filesystem.FilesystemBackend", "pickle.dumps"], "pytest.mark.skipif": [], "t.unit.backends.test_filesystem.test_FilesystemBackend.test_cleanup": ["time.sleep", "<builtin>.set", "celery.backends.filesystem.FilesystemBackend", "os.listdir", "celery.uuid", "<builtin>.all", "<builtin>.any", "unittest.mock.patch.object", "<builtin>.range"], "time.sleep": [], "<builtin>.all": [], "t.unit.backends.test_dynamodb": ["pytest.importorskip"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.setup_method": ["decimal.Decimal"], "decimal.Decimal": [], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.backend": [], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_init_no_boto3": ["celery.backends.dynamodb.DynamoDBBackend", "pytest.raises"], "celery.backends.dynamodb.DynamoDBBackend": [], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_init_aws_credentials": ["celery.backends.dynamodb.DynamoDBBackend", "pytest.raises"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_init_invalid_ttl_seconds_raises": ["celery.backends.dynamodb.DynamoDBBackend", "pytest.raises"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_get_client_explicit_endpoint": ["unittest.mock.patch", "celery.backends.dynamodb.DynamoDBBackend"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_get_client_local": ["unittest.mock.patch", "celery.backends.dynamodb.DynamoDBBackend"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_get_client_credentials": ["unittest.mock.patch", "celery.backends.dynamodb.DynamoDBBackend"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend": ["unittest.mock.patch"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_get_client_time_to_live_called": ["celery.backends.dynamodb.DynamoDBBackend"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_get_or_create_table_not_exists": ["botocore.exceptions.ClientError", "unittest.mock.MagicMock"], "unittest.mock.MagicMock": [], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_get_or_create_table_already_exists": ["unittest.mock.MagicMock"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_wait_for_table_status": ["unittest.mock.MagicMock"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_has_ttl_none_returns_none": [], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_has_ttl_lt_zero_returns_false": [], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_has_ttl_gte_zero_returns_true": [], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_validate_ttl_methods_present_returns_none": ["unittest.mock.MagicMock"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_validate_ttl_methods_missing_raise": ["pytest.raises", "unittest.mock.MagicMock", "<builtin>.delattr"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_set_table_ttl_describe_time_to_live_fails_raises": ["botocore.exceptions.ClientError", "pytest.raises", "unittest.mock.MagicMock"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_set_table_ttl_enable_when_disabled_succeeds": ["unittest.mock.MagicMock"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_set_table_ttl_enable_when_enabled_with_correct_attr_succeeds": ["unittest.mock.MagicMock"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_set_table_ttl_enable_when_currently_disabling_raises": ["botocore.exceptions.ClientError", "pytest.raises", "unittest.mock.MagicMock"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_set_table_ttl_enable_when_enabled_with_wrong_attr_raises": ["botocore.exceptions.ClientError", "pytest.raises", "unittest.mock.MagicMock"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_set_table_ttl_disable_when_disabled_succeeds": ["unittest.mock.MagicMock"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_set_table_ttl_disable_when_currently_enabling_raises": ["botocore.exceptions.ClientError", "pytest.raises", "unittest.mock.MagicMock"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_prepare_get_request": [], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_prepare_put_request": ["unittest.mock.patch", "<builtin>.str", "decimal.Decimal"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_prepare_put_request_with_ttl": ["<builtin>.int", "unittest.mock.patch", "<builtin>.str", "decimal.Decimal"], "<builtin>.int": [], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_item_to_dict": ["decimal.Decimal"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_get": ["unittest.mock.Mock", "unittest.mock.MagicMock"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend._mock_time": [], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_set": ["unittest.mock.patch", "unittest.mock.MagicMock", "<builtin>.str"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_set_with_ttl": ["<builtin>.int", "unittest.mock.patch", "unittest.mock.MagicMock", "<builtin>.str"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_delete": ["unittest.mock.Mock"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_backend_by_url": ["celery.app.backends.by_url"], "t.unit.backends.test_dynamodb.test_DynamoDBBackend.test_backend_params_by_url": [], "t.unit.backends.test_consul": ["pytest.importorskip"], "t.unit.backends.test_consul.test_ConsulBackend.setup_method": ["celery.backends.consul.ConsulBackend"], "celery.backends.consul.ConsulBackend": [], "t.unit.backends.test_consul.test_ConsulBackend.test_supports_autoexpire": [], "t.unit.backends.test_consul.test_ConsulBackend.test_consul_consistency": [], "t.unit.backends.test_consul.test_ConsulBackend.test_get": ["unittest.mock.Mock"], "t.unit.backends.test_consul.test_ConsulBackend.test_set": ["unittest.mock.Mock"], "t.unit.backends.test_consul.test_ConsulBackend.test_delete": ["unittest.mock.Mock"], "t.unit.backends.test_consul.test_ConsulBackend.test_index_bytes_key": [], "t.unit.backends.test_couchbase": ["pytest.importorskip"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.setup_method": ["celery.backends.couchbase.CouchbaseBackend"], "celery.backends.couchbase.CouchbaseBackend": [], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_init_no_couchbase": ["celery.backends.couchbase.CouchbaseBackend", "pytest.raises"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_init_no_settings": ["celery.backends.couchbase.CouchbaseBackend", "pytest.raises"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_init_settings_is_None": ["celery.backends.couchbase.CouchbaseBackend"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_get_connection_connection_exists": ["unittest.mock.patch"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_get": ["celery.backends.couchbase.CouchbaseBackend", "unittest.mock.Mock"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_set_no_expires": ["celery.backends.couchbase.CouchbaseBackend", "unittest.mock.MagicMock"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_set_expires": ["celery.backends.couchbase.CouchbaseBackend", "unittest.mock.MagicMock"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_delete": ["celery.backends.couchbase.CouchbaseBackend", "unittest.mock.Mock"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_config_params": ["celery.backends.couchbase.CouchbaseBackend"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_backend_by_url": ["celery.app.backends.by_url"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_backend_params_by_url": [], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_expires_defaults_to_config": ["celery.backends.couchbase.CouchbaseBackend"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_expires_is_int": ["celery.backends.couchbase.CouchbaseBackend"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_expires_is_None": ["celery.backends.couchbase.CouchbaseBackend"], "t.unit.backends.test_couchbase.test_CouchbaseBackend.test_expires_is_timedelta": ["celery.backends.couchbase.CouchbaseBackend", "datetime.timedelta"], "t.unit.backends.test_elasticsearch": ["pytest.importorskip"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.setup_method": ["celery.backends.elasticsearch.ElasticsearchBackend"], "celery.backends.elasticsearch.ElasticsearchBackend": [], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_init_no_elasticsearch": ["celery.backends.elasticsearch.ElasticsearchBackend", "pytest.raises"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_get": ["celery.backends.elasticsearch.ElasticsearchBackend", "unittest.mock.Mock"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_get_none": ["celery.backends.elasticsearch.ElasticsearchBackend", "unittest.mock.Mock"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_get_task_not_found": ["elasticsearch.exceptions.NotFoundError", "celery.backends.elasticsearch.ElasticsearchBackend", "unittest.mock.Mock"], "elasticsearch.exceptions.NotFoundError": [], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_get_task_not_found_without_throw": ["celery.backends.elasticsearch.ElasticsearchBackend", "unittest.mock.Mock"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_delete": ["celery.backends.elasticsearch.ElasticsearchBackend", "unittest.mock.Mock"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_backend_by_url": ["celery.app.backends.by_url"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend": ["unittest.mock.patch"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_index_conflict": ["celery.backends.elasticsearch.ElasticsearchBackend", "datetime.datetime", "unittest.mock.Mock", "elasticsearch.exceptions.ConflictError"], "elasticsearch.exceptions.ConflictError": [], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_index_conflict_without_state": ["celery.backends.elasticsearch.ElasticsearchBackend", "datetime.datetime", "unittest.mock.Mock", "elasticsearch.exceptions.ConflictError"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_index_conflict_with_ready_state_on_backend_without_state": ["celery.backends.elasticsearch.ElasticsearchBackend", "datetime.datetime", "unittest.mock.Mock", "elasticsearch.exceptions.ConflictError"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_index_conflict_with_existing_success": ["celery.backends.elasticsearch.ElasticsearchBackend", "datetime.datetime", "unittest.mock.Mock", "elasticsearch.exceptions.ConflictError"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_index_conflict_with_existing_ready_state": ["celery.backends.elasticsearch.ElasticsearchBackend", "datetime.datetime", "unittest.mock.Mock", "elasticsearch.exceptions.ConflictError"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_backend_concurrent_update": ["unittest.mock.Mock", "<builtin>.str", "kombu.utils.encoding.bytes_to_str", "celery.backends.elasticsearch.ElasticsearchBackend", "elasticsearch.exceptions.ConflictError", "datetime.datetime"], "kombu.utils.encoding.bytes_to_str": [], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_backend_index_conflicting_document_removed": ["unittest.mock.Mock", "<builtin>.str", "kombu.utils.encoding.bytes_to_str", "celery.backends.elasticsearch.ElasticsearchBackend", "elasticsearch.exceptions.ConflictError", "datetime.datetime", "elasticsearch.exceptions.NotFoundError"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_backend_index_conflicting_document_removed_not_throwing": ["unittest.mock.Mock", "<builtin>.str", "kombu.utils.encoding.bytes_to_str", "celery.backends.elasticsearch.ElasticsearchBackend", "elasticsearch.exceptions.ConflictError", "datetime.datetime"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_backend_index_corrupted_conflicting_document": ["unittest.mock.Mock", "<builtin>.str", "kombu.utils.encoding.bytes_to_str", "celery.backends.elasticsearch.ElasticsearchBackend", "elasticsearch.exceptions.ConflictError", "datetime.datetime"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_backend_params_by_url": [], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_backend_url_no_params": [], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_get_server_with_auth": [], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_get_server_without_auth": [], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_index": ["celery.backends.elasticsearch.ElasticsearchBackend", "unittest.mock.Mock", "<builtin>.str"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_index_bytes_key": ["celery.backends.elasticsearch.ElasticsearchBackend", "unittest.mock.Mock", "<builtin>.str"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_encode_as_json": ["celery.backends.elasticsearch.ElasticsearchBackend"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_encode_none_as_json": ["celery.backends.elasticsearch.ElasticsearchBackend"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_encode_exception_as_json": ["celery.backends.elasticsearch.ElasticsearchBackend", "<builtin>.Exception", "billiard.einfo.ExceptionInfo"], "billiard.einfo.ExceptionInfo": [], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_decode_from_json": ["celery.backends.elasticsearch.ElasticsearchBackend"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_decode_none_from_json": ["celery.backends.elasticsearch.ElasticsearchBackend"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_decode_encoded_from_json": ["celery.backends.elasticsearch.ElasticsearchBackend"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_decode_encoded_exception_as_json": ["celery.backends.elasticsearch.ElasticsearchBackend", "<builtin>.Exception", "billiard.einfo.ExceptionInfo"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_decode_not_dict": ["celery.backends.elasticsearch.ElasticsearchBackend"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_config_params": ["celery.backends.elasticsearch.ElasticsearchBackend"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_lazy_server_init": ["celery.backends.elasticsearch.ElasticsearchBackend", "unittest.mock.Mock"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_mget": ["celery.backends.elasticsearch.ElasticsearchBackend", "unittest.mock.Mock"], "t.unit.backends.test_elasticsearch.test_ElasticsearchBackend.test_exception_safe_to_retry": ["celery.backends.elasticsearch.ElasticsearchBackend", "<builtin>.BaseException", "elasticsearch.exceptions.TransportError", "elasticsearch.exceptions.ConnectionError", "elasticsearch.exceptions.ConflictError", "<builtin>.Exception", "elasticsearch.exceptions.NotFoundError"], "<builtin>.BaseException": [], "elasticsearch.exceptions.ConnectionError": [], "elasticsearch.exceptions.TransportError": [], "t.unit.backends": [], "t.unit.backends.test_mongodb": ["pytest.fixture", "t.unit.backends.test_mongodb._MyTestClass.__init__", "celery.uuid", "datetime.datetime", "pytest.importorskip"], "t.unit.backends.test_mongodb.fake_resolver_dnspython": ["pytest.importorskip"], "t.unit.backends.test_mongodb.fake_resolver_dnspython.mock_resolver": [], "t.unit.backends.test_mongodb.test_MongoBackend.setup_method": ["celery.backends.mongodb.MongoBackend"], "celery.backends.mongodb.MongoBackend": [], "t.unit.backends.test_mongodb.test_MongoBackend.test_init_no_mongodb": ["pytest.raises", "celery.backends.mongodb.MongoBackend"], "t.unit.backends.test_mongodb.test_MongoBackend.test_init_no_settings": ["pytest.raises", "celery.backends.mongodb.MongoBackend"], "t.unit.backends.test_mongodb.test_MongoBackend.test_init_settings_is_None": ["celery.backends.mongodb.MongoBackend"], "t.unit.backends.test_mongodb.test_MongoBackend.test_init_with_settings": ["<builtin>.dict", "celery.backends.mongodb.MongoBackend"], "t.unit.backends.test_mongodb.test_MongoBackend": ["pytest.mark.skipif", "pytest.mark.usefixtures", "unittest.mock.patch", "pytest.mark.skip"], "t.unit.backends.test_mongodb.test_MongoBackend.test_init_mongodb_dnspython1_pymongo3_seedlist": ["t.unit.backends.test_mongodb.test_MongoBackend.perform_seedlist_assertions", "t.unit.backends.test_mongodb.fake_resolver_dnspython", "<builtin>.dict", "unittest.mock.patch"], "t.unit.backends.test_mongodb.test_MongoBackend.perform_seedlist_assertions": ["celery.backends.mongodb.MongoBackend"], "t.unit.backends.test_mongodb.test_MongoBackend.test_init_mongodb_dnspython2_pymongo3_seedlist": ["t.unit.backends.test_mongodb.test_MongoBackend.perform_seedlist_assertions", "t.unit.backends.test_mongodb.fake_resolver_dnspython", "<builtin>.dict", "unittest.mock.patch"], "t.unit.backends.test_mongodb.test_MongoBackend.test_init_mongodb_dnspython1_pymongo4_seedlist": ["t.unit.backends.test_mongodb.test_MongoBackend.perform_seedlist_assertions", "t.unit.backends.test_mongodb.fake_resolver_dnspython", "<builtin>.dict", "unittest.mock.patch"], "t.unit.backends.test_mongodb.test_MongoBackend.test_init_mongodb_dnspython2_pymongo4_seedlist": ["t.unit.backends.test_mongodb.test_MongoBackend.perform_seedlist_assertions", "t.unit.backends.test_mongodb.fake_resolver_dnspython", "<builtin>.dict", "unittest.mock.patch"], "t.unit.backends.test_mongodb.test_MongoBackend.test_ensure_mongodb_uri_compliance": ["celery.backends.mongodb.MongoBackend"], "t.unit.backends.test_mongodb.test_MongoBackend.test_reduce": ["pickle.loads", "pickle.dumps", "celery.backends.mongodb.MongoBackend"], "t.unit.backends.test_mongodb.test_MongoBackend.test_get_connection_connection_exists": ["unittest.mock.patch"], "t.unit.backends.test_mongodb.test_MongoBackend.test_get_connection_no_connection_host": ["unittest.mock.patch"], "t.unit.backends.test_mongodb.test_MongoBackend.test_get_connection_no_connection_mongodb_uri": ["unittest.mock.patch"], "t.unit.backends.test_mongodb.test_MongoBackend.test_get_connection_with_authmechanism": ["unittest.mock.patch", "celery.backends.mongodb.MongoBackend"], "t.unit.backends.test_mongodb.test_MongoBackend.test_get_connection_with_authmechanism_no_username": ["unittest.mock.patch", "pytest.raises", "pymongo.errors.ConfigurationError", "celery.backends.mongodb.MongoBackend"], "pymongo.errors.ConfigurationError": [], "t.unit.backends.test_mongodb.test_MongoBackend.test_get_database_no_existing": ["unittest.mock.Mock", "unittest.mock.MagicMock"], "t.unit.backends.test_mongodb.test_MongoBackend.test_get_database_no_existing_no_auth": ["unittest.mock.Mock", "unittest.mock.MagicMock"], "t.unit.backends.test_mongodb.test_MongoBackend.test_store_result": ["celery.backends.mongodb.InvalidDocument", "pytest.raises", "unittest.mock.MagicMock", "unittest.mock.Mock"], "celery.backends.mongodb.InvalidDocument": [], "t.unit.backends.test_mongodb.test_MongoBackend.test_store_result_with_request": ["celery.backends.mongodb.InvalidDocument", "pytest.raises", "unittest.mock.MagicMock", "unittest.mock.Mock"], "t.unit.backends.test_mongodb.test_MongoBackend.test_get_task_meta_for": ["<builtin>.sorted", "unittest.mock.MagicMock", "<builtin>.list", "unittest.mock.Mock"], "t.unit.backends.test_mongodb.test_MongoBackend.test_get_task_meta_for_no_result": ["unittest.mock.MagicMock", "unittest.mock.Mock"], "t.unit.backends.test_mongodb.test_MongoBackend.test_save_group": ["<builtin>.range", "unittest.mock.MagicMock", "unittest.mock.Mock"], "t.unit.backends.test_mongodb.test_MongoBackend.test_restore_group": ["<builtin>.sorted", "unittest.mock.Mock", "<builtin>.list", "celery.uuid", "unittest.mock.MagicMock"], "t.unit.backends.test_mongodb.test_MongoBackend.test_restore_group.<lambda1>": [], "t.unit.backends.test_mongodb.test_MongoBackend.test_delete_group": ["unittest.mock.MagicMock", "unittest.mock.Mock"], "t.unit.backends.test_mongodb.test_MongoBackend.test__forget": ["unittest.mock.MagicMock", "unittest.mock.Mock"], "t.unit.backends.test_mongodb.test_MongoBackend.test_cleanup": ["unittest.mock.Mock"], "t.unit.backends.test_mongodb.test_MongoBackend.test_prepare_client_options": ["unittest.mock.patch"], "t.unit.backends.test_mongodb.test_MongoBackend.test_as_uri_include_password": [], "t.unit.backends.test_mongodb.test_MongoBackend.test_as_uri_exclude_password": [], "t.unit.backends.test_mongodb.test_MongoBackend.test_as_uri_include_password_replica_set": ["celery.backends.mongodb.MongoBackend"], "t.unit.backends.test_mongodb.test_MongoBackend.test_as_uri_exclude_password_replica_set": ["celery.backends.mongodb.MongoBackend"], "t.unit.backends.test_mongodb.test_MongoBackend.test_regression_worker_startup_info": ["t.unit.conftest.stdouts"], "t.unit.backends.test_mongodb.mongo_backend_factory": [], "t.unit.backends.test_mongodb.mongo_backend_factory.create_mongo_backend": ["celery.backends.mongodb.MongoBackend"], "t.unit.backends.test_mongodb.test_MongoBackend_no_mock.test_encode": ["<builtin>.isinstance"], "t.unit.backends.test_mongodb.test_MongoBackend_no_mock.test_encode_decode": [], "t.unit.backends.test_mongodb._MyTestClass.__init__": [], "t.unit.backends.test_mongodb._MyTestClass.__eq__": ["<builtin>.type"], "t.unit.backends.test_mongodb.test_MongoBackend_store_get_result": ["<builtin>.type", "pytest.fixture", "pytest.mark.parametrize"], "t.unit.backends.test_mongodb.test_MongoBackend_store_get_result.fake_mongo_collection_patch": ["t.unit.backends.test_mongodb.test_MongoBackend_store_get_result.fake_mongo_collection_patch.FakeMongoCollection.__init__", "pytest.importorskip"], "t.unit.backends.test_mongodb.test_MongoBackend_store_get_result.fake_mongo_collection_patch.FakeMongoCollection.__init__": [], "t.unit.backends.test_mongodb.test_MongoBackend_store_get_result.fake_mongo_collection_patch.FakeMongoCollection.replace_one": [], "t.unit.backends.test_mongodb.test_MongoBackend_store_get_result.fake_mongo_collection_patch.FakeMongoCollection.find_one": [], "t.unit.backends.test_mongodb.test_MongoBackend_store_get_result.test_encode_success_results": ["<builtin>.type"], "t.unit.backends.test_mongodb.test_MongoBackend_store_get_result.test_encode_chain_results": ["celery.uuid", "t.unit.backends.test_mongodb.test_MongoBackend_store_get_result.test_encode_chain_results.tuple_to_list", "unittest.mock.MagicMock", "<builtin>.range"], "t.unit.backends.test_mongodb.test_MongoBackend_store_get_result.test_encode_chain_results.tuple_to_list": ["<builtin>.list"], "t.unit.backends.test_mongodb.test_MongoBackend_store_get_result.test_encode_exception_error_results": ["<builtin>.type", "<builtin>.Exception"], "t.unit.backends.test_base": ["celery.utils.serialization.subclass_exception"], "t.unit.backends.test_base.wrapobject.__init__": [], "t.unit.backends.test_base.paramexception.__init__": [], "celery.utils.serialization.subclass_exception": [], "t.unit.backends.test_base.test_nulldict.test_nulldict": ["celery.backends.base._nulldict"], "celery.backends.base._nulldict": [], "t.unit.backends.test_base.test_serialization.test_create_exception_cls": ["celery.utils.serialization.create_exception_cls"], "celery.utils.serialization.create_exception_cls": [], "t.unit.backends.test_base.test_Backend_interface.setup_method": [], "t.unit.backends.test_base.test_Backend_interface.test_accept_precedence": ["kombu.serialization.prepare_accept_content", "<builtin>.len", "<builtin>.list", "celery.backends.base.BaseBackend"], "celery.backends.base.BaseBackend": [], "kombu.serialization.prepare_accept_content": [], "t.unit.backends.test_base.test_Backend_interface.test_get_result_meta": ["celery.app.task.Context", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_Backend_interface.test_get_result_meta_encoded": ["kombu.utils.encoding.ensure_bytes", "celery.app.task.Context", "celery.backends.base.BaseBackend"], "kombu.utils.encoding.ensure_bytes": [], "t.unit.backends.test_base.test_Backend_interface.test_get_result_meta_with_none": ["celery.app.task.Context", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_interface.setup_method": ["celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_interface.setup_method.callback": [], "t.unit.backends.test_base.test_BaseBackend_interface.test__forget": ["pytest.raises"], "t.unit.backends.test_base.test_BaseBackend_interface.test_forget": ["pytest.raises"], "t.unit.backends.test_base.test_BaseBackend_interface.test_on_chord_part_return": [], "t.unit.backends.test_base.test_BaseBackend_interface.test_apply_chord": ["celery.uuid", "unittest.mock.Mock", "<builtin>.range"], "t.unit.backends.test_base.test_BaseBackend_interface.test_chord_unlock_queue": ["celery.uuid", "unittest.mock.Mock", "<builtin>.range"], "t.unit.backends.test_base.test_BaseBackend_interface.test_chord_unlock_queue.callback_queue": [], "t.unit.backends.test_base.test_BaseBackend_interface.test_chord_unlock_queue.callback_different_app": [], "t.unit.backends.test_base.test_exception_pickle.test_BaseException": ["<builtin>.Exception", "celery.utils.serialization.find_pickleable_exception"], "celery.utils.serialization.find_pickleable_exception": [], "t.unit.backends.test_base.test_exception_pickle.test_get_pickleable_exception": ["celery.utils.serialization.get_pickleable_exception", "<builtin>.Exception"], "celery.utils.serialization.get_pickleable_exception": [], "t.unit.backends.test_base.test_exception_pickle.test_unpickleable": ["<builtin>.isinstance", "celery.utils.serialization.find_pickleable_exception"], "t.unit.backends.test_base.test_prepare_exception.setup_method": ["celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_prepare_exception.test_unpickleable": ["<builtin>.isinstance"], "t.unit.backends.test_base.test_prepare_exception.test_json_exception_arguments": ["celery.utils.serialization.ensure_serializable", "<builtin>.Exception", "<builtin>.isinstance"], "celery.utils.serialization.ensure_serializable": [], "t.unit.backends.test_base.test_prepare_exception.test_json_exception_nested": ["<builtin>.isinstance"], "t.unit.backends.test_base.test_prepare_exception.test_impossible": ["<builtin>.str", "<builtin>.isinstance"], "t.unit.backends.test_base.test_prepare_exception.test_regular": ["<builtin>.KeyError", "<builtin>.isinstance"], "t.unit.backends.test_base.test_prepare_exception.test_unicode_message": ["<builtin>.Exception"], "t.unit.backends.test_base.KVBackend.__init__": ["<builtin>.super"], "t.unit.backends.test_base.KVBackend.get": [], "t.unit.backends.test_base.KVBackend._set_with_state": [], "t.unit.backends.test_base.KVBackend.mget": ["t.unit.backends.test_base.KVBackend.get"], "t.unit.backends.test_base.KVBackend.delete": [], "t.unit.backends.test_base.DictBackend.__init__": ["<builtin>.super"], "t.unit.backends.test_base.DictBackend._restore_group": [], "t.unit.backends.test_base.DictBackend._get_task_meta_for": [], "t.unit.backends.test_base.DictBackend._delete_group": [], "t.unit.backends.test_base.test_BaseBackend_dict.setup_method": ["t.unit.backends.test_base.DictBackend.__init__"], "t.unit.backends.test_base.test_BaseBackend_dict.setup_method.bound_errback": [], "t.unit.backends.test_base.test_BaseBackend_dict.setup_method.errback": [], "t.unit.backends.test_base.test_BaseBackend_dict.test_delete_group": ["celery.backends.base.BaseBackend.delete_group"], "celery.backends.base.BaseBackend.delete_group": [], "t.unit.backends.test_base.test_BaseBackend_dict.test_prepare_exception_json": ["<builtin>.KeyError", "<builtin>.str", "celery.backends.base.BaseBackend.exception_to_python", "t.unit.backends.test_base.DictBackend.__init__", "celery.backends.base.BaseBackend.prepare_exception"], "celery.backends.base.BaseBackend.prepare_exception": [], "celery.backends.base.BaseBackend.exception_to_python": [], "t.unit.backends.test_base.test_BaseBackend_dict.test_save_group": ["unittest.mock.Mock", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_add_to_chord_interface": ["pytest.raises", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_forget_interface": ["pytest.raises", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_restore_group": ["celery.backends.base.BaseBackend.restore_group"], "celery.backends.base.BaseBackend.restore_group": [], "t.unit.backends.test_base.test_BaseBackend_dict.test_reload_group_result": ["celery.backends.base.BaseBackend.reload_group_result"], "celery.backends.base.BaseBackend.reload_group_result": [], "t.unit.backends.test_base.test_BaseBackend_dict.test_reload_task_result": ["celery.backends.base.BaseBackend.reload_task_result"], "celery.backends.base.BaseBackend.reload_task_result": [], "t.unit.backends.test_base.test_BaseBackend_dict.test_fail_from_current_stack": ["unittest.mock.Mock", "<builtin>.str", "t.unit.backends.test_base.test_BaseBackend_dict.test_fail_from_current_stack.raise_dummy", "<builtin>.len", "celery.backends.base.BaseBackend.fail_from_current_stack"], "t.unit.backends.test_base.test_BaseBackend_dict.test_fail_from_current_stack.raise_dummy": ["inspect.currentframe", "<builtin>.KeyError", "<builtin>.str"], "inspect.currentframe": [], "celery.backends.base.BaseBackend.fail_from_current_stack": [], "t.unit.backends.test_base.test_BaseBackend_dict.test_prepare_value_serializes_group_result": ["celery.backends.base.BaseBackend.prepare_value", "celery.result.result_from_tuple", "<builtin>.isinstance"], "celery.backends.base.BaseBackend.prepare_value": [], "celery.result.result_from_tuple": [], "t.unit.backends.test_base.test_BaseBackend_dict.test_is_cached": ["celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_mark_as_done__chord": ["unittest.mock.Mock", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_mark_as_failure__bound_errback_eager": ["unittest.mock.Mock", "<builtin>.KeyError", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_mark_as_failure__bound_errback": ["unittest.mock.Mock", "<builtin>.KeyError", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_mark_as_failure__errback": ["unittest.mock.Mock", "<builtin>.KeyError", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict": ["unittest.mock.patch"], "t.unit.backends.test_base.test_BaseBackend_dict.test_class_based_task_can_be_used_as_error_callback": ["celery.app.task.Task.subtask", "<builtin>.KeyError", "unittest.mock.Mock", "celery.app.task.Task.__init__", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_class_based_task_can_be_used_as_error_callback.TaskBasedClass.run": [], "celery.app.task.Task.subtask": [], "t.unit.backends.test_base.test_BaseBackend_dict.test_unregistered_task_can_be_used_as_error_callback": ["celery.signature", "unittest.mock.Mock", "<builtin>.KeyError", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_mark_as_failure__chord": ["unittest.mock.Mock", "<builtin>.KeyError", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_mark_as_revoked__chord": ["unittest.mock.Mock", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_chord_error_from_stack_raises": ["unittest.mock.Mock", "unittest.mock.MagicMock", "celery.backends.base.BaseBackend", "<builtin>.ValueError", "unittest.mock.patch.object"], "t.unit.backends.test_base.test_BaseBackend_dict.test_exception_to_python_when_None": ["celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_not_an_actual_exc_info": [], "t.unit.backends.test_base.test_BaseBackend_dict.test_not_an_exception_but_a_callable": ["celery.backends.base.BaseBackend.exception_to_python", "re.escape", "pytest.raises"], "re.escape": [], "t.unit.backends.test_base.test_BaseBackend_dict.test_not_an_exception_but_another_object": ["celery.backends.base.BaseBackend.exception_to_python", "re.escape", "pytest.raises"], "t.unit.backends.test_base.test_BaseBackend_dict.test_exception_to_python_when_attribute_exception": ["<builtin>.str", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_exception_to_python_when_type_error": ["<builtin>.str", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_wait_for__on_interval": ["pytest.raises", "unittest.mock.Mock", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_BaseBackend_dict.test_get_children": ["unittest.mock.Mock", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_KeyValueStoreBackend.setup_method": ["t.unit.backends.test_base.KVBackend.__init__"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_on_chord_part_return": ["celery.backends.base.KeyValueStoreBackend.on_chord_part_return"], "celery.backends.base.KeyValueStoreBackend.on_chord_part_return": [], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_get_store_delete_result": ["celery.backends.base.KeyValueStoreBackend.get_result", "celery.backends.base.KeyValueStoreBackend.forget", "celery.backends.base.KeyValueStoreBackend.mark_as_done", "celery.uuid", "celery.backends.base.KeyValueStoreBackend.get_state"], "celery.backends.base.KeyValueStoreBackend.mark_as_done": [], "celery.backends.base.KeyValueStoreBackend.get_result": [], "celery.backends.base.KeyValueStoreBackend.get_state": [], "celery.backends.base.KeyValueStoreBackend.forget": [], "t.unit.backends.test_base.test_KeyValueStoreBackend": ["contextlib.contextmanager", "unittest.mock.patch", "pytest.mark.parametrize"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_store_result_parent_id": ["celery.backends.base.KeyValueStoreBackend.get_key_for_task", "t.unit.backends.test_base.KVBackend.get", "celery.backends.base.KeyValueStoreBackend.decode", "t.unit.backends.test_base.KVBackend.__init__", "celery.uuid", "celery.app.task.Context", "celery.backends.base.KeyValueStoreBackend.store_result"], "celery.backends.base.KeyValueStoreBackend.store_result": [], "celery.backends.base.KeyValueStoreBackend.get_key_for_task": [], "celery.backends.base.KeyValueStoreBackend.decode": [], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_store_result_group_id": ["celery.backends.base.KeyValueStoreBackend.get_key_for_task", "t.unit.backends.test_base.KVBackend.get", "celery.backends.base.KeyValueStoreBackend.decode", "celery.uuid", "celery.app.task.Context", "celery.backends.base.KeyValueStoreBackend.store_result"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_store_result_race_second_write_should_ignore_if_previous_success": ["celery.backends.base.KeyValueStoreBackend.get_key_for_task", "t.unit.backends.test_base.KVBackend.get", "celery.backends.base.KeyValueStoreBackend.decode", "celery.uuid", "celery.app.task.Context", "celery.backends.base.KeyValueStoreBackend.store_result"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_get_key_for_task_none_task_id": ["celery.backends.base.KeyValueStoreBackend.get_key_for_task", "pytest.raises"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_get_key_for_group_none_group_id": ["celery.backends.base.KeyValueStoreBackend.get_key_for_task", "pytest.raises"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_get_key_for_chord_none_group_id": ["celery.backends.base.KeyValueStoreBackend.get_key_for_group", "pytest.raises"], "celery.backends.base.KeyValueStoreBackend.get_key_for_group": [], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_strip_prefix": ["celery.backends.base.KeyValueStoreBackend.get_key_for_task", "celery.backends.base.KeyValueStoreBackend._strip_prefix"], "celery.backends.base.KeyValueStoreBackend._strip_prefix": [], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_global_keyprefix": ["celery.backends.base.KeyValueStoreBackend.get_key_for_task", "copy.deepcopy", "kombu.utils.encoding.bytes_to_str", "celery.backends.base.KeyValueStoreBackend.get_key_for_group", "t.unit.backends.test_base.KVBackend.__init__", "celery.uuid"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_global_keyprefix_missing": ["celery.backends.base.KeyValueStoreBackend.get_key_for_task", "celery.backends.base.KeyValueStoreBackend.get_key_for_group", "celery.uuid", "kombu.utils.encoding.bytes_to_str"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_get_many": ["unittest.mock.Mock", "<builtin>.list", "celery.backends.base.KeyValueStoreBackend.get_many", "celery.backends.base.KeyValueStoreBackend.mark_as_done", "celery.backends.base.KeyValueStoreBackend._cache.clear", "celery.uuid", "unittest.mock.call", "<builtin>.enumerate", "<builtin>.range"], "celery.backends.base.KeyValueStoreBackend.get_many": [], "celery.backends.base.KeyValueStoreBackend._cache.clear": [], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_get_many_times_out": ["<builtin>.list", "celery.backends.base.KeyValueStoreBackend.get_many", "celery.uuid", "pytest.raises", "<builtin>.range"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_get_many_passes_ready_states": ["celery.backends.base.KeyValueStoreBackend.mark_as_failure", "<builtin>.list", "celery.backends.base.KeyValueStoreBackend.get_many", "celery.backends.base.KeyValueStoreBackend.mark_as_done", "<builtin>.len", "celery.backends.base.KeyValueStoreBackend._cache.clear", "<builtin>.frozenset", "celery.uuid", "<builtin>.all", "<builtin>.Exception", "<builtin>.range"], "<builtin>.frozenset": [], "celery.backends.base.KeyValueStoreBackend.mark_as_failure": [], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_chord_part_return_no_gid": ["<builtin>.AssertionError", "unittest.mock.Mock", "celery.backends.base.KeyValueStoreBackend.on_chord_part_return"], "<builtin>.AssertionError": [], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_chord_part_return_restore_raises": ["<builtin>.KeyError", "celery.backends.base.KeyValueStoreBackend.on_chord_part_return", "unittest.mock.Mock"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_chord_part_return_restore_empty": ["unittest.mock.Mock", "celery.backends.base.KeyValueStoreBackend.on_chord_part_return"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_filter_ready": ["celery.backends.base.KeyValueStoreBackend._filter_ready", "<builtin>.len", "unittest.mock.Mock", "<builtin>.list"], "celery.backends.base.KeyValueStoreBackend._filter_ready": [], "t.unit.backends.test_base.test_KeyValueStoreBackend._chord_part_context": ["unittest.mock.patch", "unittest.mock.Mock"], "t.unit.backends.test_base.test_KeyValueStoreBackend._chord_part_context.callback": [], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_chord_part_return_timeout": ["t.unit.backends.test_base.test_KeyValueStoreBackend._chord_part_context", "celery.backends.base.KeyValueStoreBackend.on_chord_part_return"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_chord_part_return_propagate_set": ["t.unit.backends.test_base.test_KeyValueStoreBackend._chord_part_context", "celery.backends.base.KeyValueStoreBackend.on_chord_part_return"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_chord_part_return_propagate_default": ["t.unit.backends.test_base.test_KeyValueStoreBackend._chord_part_context", "celery.backends.base.KeyValueStoreBackend.on_chord_part_return"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_chord_part_return_join_raises_internal": ["t.unit.backends.test_base.test_KeyValueStoreBackend._chord_part_context", "<builtin>.KeyError", "<builtin>.str", "celery.backends.base.KeyValueStoreBackend.fail_from_current_stack.assert_called", "<builtin>.isinstance", "celery.backends.base.KeyValueStoreBackend.on_chord_part_return"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_chord_part_return_join_raises_internal.<lambda1>": ["<builtin>.iter"], "celery.backends.base.KeyValueStoreBackend.fail_from_current_stack.assert_called": [], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_chord_part_return_join_raises_task": ["t.unit.backends.test_base.test_KeyValueStoreBackend._chord_part_context", "<builtin>.KeyError", "<builtin>.str", "t.unit.backends.test_base.KVBackend.__init__", "celery.backends.base.KeyValueStoreBackend.fail_from_current_stack.assert_called", "celery.backends.base.KeyValueStoreBackend.on_chord_part_return", "<builtin>.isinstance"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_chord_part_return_join_raises_task.<lambda1>": ["<builtin>.iter"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_restore_group_from_json": ["t.unit.backends.test_base.KVBackend.__init__", "celery.backends.base.KeyValueStoreBackend._restore_group", "celery.backends.base.KeyValueStoreBackend._save_group"], "celery.backends.base.KeyValueStoreBackend._save_group": [], "celery.backends.base.KeyValueStoreBackend._restore_group": [], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_restore_group_from_pickle": ["t.unit.backends.test_base.KVBackend.__init__", "celery.backends.base.KeyValueStoreBackend._restore_group", "celery.backends.base.KeyValueStoreBackend._save_group"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_chord_apply_fallback": ["celery.backends.base.KeyValueStoreBackend.apply_chord", "unittest.mock.Mock", "<builtin>.range"], "celery.backends.base.KeyValueStoreBackend.apply_chord": [], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_get_missing_meta": ["celery.backends.base.KeyValueStoreBackend.get_result", "celery.backends.base.KeyValueStoreBackend.get_state"], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_save_restore_delete_group": ["celery.backends.base.KeyValueStoreBackend.restore_group", "celery.uuid", "celery.backends.base.KeyValueStoreBackend.delete_group", "celery.backends.base.KeyValueStoreBackend.save_group", "<builtin>.range"], "celery.backends.base.KeyValueStoreBackend.save_group": [], "celery.backends.base.KeyValueStoreBackend.restore_group": [], "celery.backends.base.KeyValueStoreBackend.delete_group": [], "t.unit.backends.test_base.test_KeyValueStoreBackend.test_restore_missing_group": ["celery.backends.base.KeyValueStoreBackend.restore_group"], "t.unit.backends.test_base.test_KeyValueStoreBackend_interface.test_get": ["celery.backends.base.KeyValueStoreBackend", "pytest.raises"], "celery.backends.base.KeyValueStoreBackend": [], "t.unit.backends.test_base.test_KeyValueStoreBackend_interface.test_set": ["celery.backends.base.KeyValueStoreBackend", "pytest.raises"], "t.unit.backends.test_base.test_KeyValueStoreBackend_interface.test_incr": ["celery.backends.base.KeyValueStoreBackend", "pytest.raises"], "t.unit.backends.test_base.test_KeyValueStoreBackend_interface.test_cleanup": ["celery.backends.base.KeyValueStoreBackend"], "t.unit.backends.test_base.test_KeyValueStoreBackend_interface.test_delete": ["celery.backends.base.KeyValueStoreBackend", "pytest.raises"], "t.unit.backends.test_base.test_KeyValueStoreBackend_interface.test_mget": ["celery.backends.base.KeyValueStoreBackend", "pytest.raises"], "t.unit.backends.test_base.test_KeyValueStoreBackend_interface.test_forget": ["celery.backends.base.KeyValueStoreBackend", "pytest.raises"], "t.unit.backends.test_base.test_DisabledBackend.test_store_result": ["celery.backends.base.DisabledBackend"], "celery.backends.base.DisabledBackend": [], "t.unit.backends.test_base.test_DisabledBackend.test_is_disabled": ["celery.backends.base.DisabledBackend", "pytest.raises"], "t.unit.backends.test_base.test_DisabledBackend.test_as_uri": ["celery.backends.base.DisabledBackend"], "t.unit.backends.test_base.test_DisabledBackend": ["pytest.mark.celery"], "t.unit.backends.test_base.test_DisabledBackend.test_chord_raises_error": ["celery.chord", "pytest.raises", "<builtin>.range"], "t.unit.backends.test_base.test_DisabledBackend.test_chain_with_chord_raises_error": ["celery.group", "pytest.raises"], "t.unit.backends.test_base.test_as_uri.setup_method": ["celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_as_uri.test_as_uri_include_password": [], "t.unit.backends.test_base.test_as_uri.test_as_uri_exclude_password": [], "t.unit.backends.test_base.test_backend_retries.test_should_retry_exception": ["<builtin>.Exception", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_backend_retries.test_get_failed_never_retries": ["<builtin>.Exception", "unittest.mock.Mock", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_backend_retries.test_get_failed_never_retries.<lambda1>": [], "t.unit.backends.test_base.test_backend_retries.test_get_with_retries": ["<builtin>.Exception", "unittest.mock.Mock", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_backend_retries.test_get_with_retries.<lambda1>": [], "t.unit.backends.test_base.test_backend_retries.test_get_reaching_max_retries": ["<builtin>.Exception", "unittest.mock.Mock", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_backend_retries.test_get_reaching_max_retries.<lambda1>": [], "t.unit.backends.test_base.test_backend_retries.test_get_unsafe_exception": ["<builtin>.Exception", "unittest.mock.Mock", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_backend_retries.test_store_result_never_retries": ["<builtin>.Exception", "unittest.mock.Mock", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_backend_retries.test_store_result_never_retries.<lambda1>": [], "t.unit.backends.test_base.test_backend_retries.test_store_result_with_retries": ["<builtin>.Exception", "unittest.mock.Mock", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_backend_retries.test_store_result_with_retries.<lambda1>": [], "t.unit.backends.test_base.test_backend_retries.test_store_result_reaching_max_retries": ["<builtin>.Exception", "unittest.mock.Mock", "celery.backends.base.BaseBackend"], "t.unit.backends.test_base.test_backend_retries.test_store_result_reaching_max_retries.<lambda1>": [], "t.unit.backends.test_couchdb": ["pytest.importorskip"], "t.unit.backends.test_couchdb.test_CouchBackend.setup_method": ["celery.backends.couchdb.CouchBackend"], "celery.backends.couchdb.CouchBackend": [], "t.unit.backends.test_couchdb.test_CouchBackend.test_init_no_pycouchdb": ["celery.backends.couchdb.CouchBackend", "pytest.raises"], "t.unit.backends.test_couchdb.test_CouchBackend.test_get_container_exists": [], "t.unit.backends.test_couchdb.test_CouchBackend.test_get": ["celery.backends.couchdb.CouchBackend", "unittest.mock.Mock", "unittest.mock.MagicMock"], "t.unit.backends.test_couchdb.test_CouchBackend.test_get_non_existent_key": ["celery.backends.couchdb.CouchBackend", "unittest.mock.Mock", "unittest.mock.MagicMock"], "t.unit.backends.test_couchdb.test_CouchBackend": ["pytest.mark.parametrize"], "t.unit.backends.test_couchdb.test_CouchBackend.test_set": ["celery.backends.couchdb.CouchBackend", "unittest.mock.Mock"], "t.unit.backends.test_couchdb.test_CouchBackend.test_set_with_conflict": ["celery.backends.couchdb.CouchBackend", "unittest.mock.Mock", "unittest.mock.MagicMock"], "t.unit.backends.test_couchdb.test_CouchBackend.test_delete": ["celery.backends.couchdb.CouchBackend", "unittest.mock.Mock"], "t.unit.backends.test_couchdb.test_CouchBackend.test_backend_by_url": ["celery.app.backends.by_url"], "t.unit.backends.test_couchdb.test_CouchBackend.test_backend_params_by_url": [], "t.unit.backends.test_rpc": [], "t.unit.backends.test_rpc.test_RPCResultConsumer.get_backend": ["celery.backends.rpc.RPCBackend"], "celery.backends.rpc.RPCBackend": [], "t.unit.backends.test_rpc.test_RPCResultConsumer.get_consumer": ["t.unit.backends.test_rpc.test_RPCResultConsumer.get_backend"], "t.unit.backends.test_rpc.test_RPCResultConsumer.test_drain_events_before_start": ["t.unit.backends.test_rpc.test_RPCResultConsumer.get_consumer"], "t.unit.backends.test_rpc.test_RPCBackend.setup_method": ["celery.backends.rpc.RPCBackend"], "t.unit.backends.test_rpc.test_RPCBackend.test_oid": ["uuid.UUID"], "t.unit.backends.test_rpc.test_RPCBackend.test_oid_threads": ["uuid.UUID", "concurrent.futures.ThreadPoolExecutor"], "t.unit.backends.test_rpc.test_RPCBackend.test_oid_threads.<lambda1>": ["celery.backends.rpc.RPCBackend"], "t.unit.backends.test_rpc.test_RPCBackend.test_interface": [], "t.unit.backends.test_rpc.test_RPCBackend.test_ensure_chords_allowed": ["pytest.raises"], "t.unit.backends.test_rpc.test_RPCBackend.test_apply_chord": ["pytest.raises"], "t.unit.backends.test_rpc.test_RPCBackend": ["pytest.mark.celery"], "t.unit.backends.test_rpc.test_RPCBackend.test_chord_raises_error": ["celery.chord", "pytest.raises", "<builtin>.range"], "t.unit.backends.test_rpc.test_RPCBackend.test_chain_with_chord_raises_error": ["celery.group", "pytest.raises"], "t.unit.backends.test_rpc.test_RPCBackend.test_destination_for": ["celery._state._task_stack.push", "pytest.raises", "unittest.mock.Mock", "celery._state._task_stack.pop"], "t.unit.backends.test_rpc.test_RPCBackend.test_binding": [], "t.unit.backends.test_rpc.test_RPCBackend.test_create_binding": [], "t.unit.backends.test_rpc.test_RPCBackend.test_on_task_call": ["unittest.mock.patch"], "t.unit.backends.test_rpc.test_RPCBackend.test_create_exchange": ["<builtin>.isinstance"], "t.unit.backends.test_asynchronous": ["pytest.fixture", "pytest.importorskip"], "t.unit.backends.test_asynchronous.setup_eventlet": ["os.environ.update"], "os.environ.update": [], "t.unit.backends.test_asynchronous.DrainerTests.get_drainer": ["unittest.mock.patch", "celery.backends.asynchronous.BaseResultConsumer", "unittest.mock.Mock", "celery.backends.base.Backend"], "celery.backends.base.Backend": [], "celery.backends.asynchronous.BaseResultConsumer": [], "t.unit.backends.test_asynchronous.DrainerTests": ["celery.utils.cached_property", "pytest.fixture"], "t.unit.backends.test_asynchronous.DrainerTests.setup_drainer": [], "celery.utils.cached_property": [], "t.unit.backends.test_asynchronous.DrainerTests.sleep": [], "t.unit.backends.test_asynchronous.DrainerTests.schedule_thread": [], "t.unit.backends.test_asynchronous.DrainerTests.teardown_thread": [], "t.unit.backends.test_asynchronous.DrainerTests.result_consumer_drain_events": [], "t.unit.backends.test_asynchronous.DrainerTests.test_drain_checks_on_interval": ["t.unit.backends.test_asynchronous.DrainerTests.teardown_thread", "t.unit.backends.test_asynchronous.DrainerTests.schedule_thread", "unittest.mock.Mock", "vine.promise"], "vine.promise": [], "t.unit.backends.test_asynchronous.DrainerTests.test_drain_checks_on_interval.fulfill_promise_thread": ["t.unit.backends.test_asynchronous.DrainerTests.sleep"], "t.unit.backends.test_asynchronous.DrainerTests.test_drain_does_not_block_event_loop": ["t.unit.backends.test_asynchronous.DrainerTests.teardown_thread", "t.unit.backends.test_asynchronous.DrainerTests.schedule_thread", "unittest.mock.Mock", "vine.promise"], "t.unit.backends.test_asynchronous.DrainerTests.test_drain_does_not_block_event_loop.fulfill_promise_thread": ["t.unit.backends.test_asynchronous.DrainerTests.sleep"], "t.unit.backends.test_asynchronous.DrainerTests.test_drain_does_not_block_event_loop.liveness_thread": ["t.unit.backends.test_asynchronous.DrainerTests.sleep"], "t.unit.backends.test_asynchronous.DrainerTests.test_drain_timeout": ["pytest.raises", "unittest.mock.Mock", "vine.promise"], "t.unit.backends.test_asynchronous.test_EventletDrainer": ["celery.utils.cached_property", "pytest.fixture"], "t.unit.backends.test_asynchronous.test_EventletDrainer.setup_drainer": ["t.unit.backends.test_asynchronous.DrainerTests.get_drainer"], "t.unit.backends.test_asynchronous.test_EventletDrainer.sleep": [], "t.unit.backends.test_asynchronous.test_EventletDrainer.result_consumer_drain_events": ["eventlet.sleep"], "eventlet.sleep": [], "t.unit.backends.test_asynchronous.test_EventletDrainer.schedule_thread": ["eventlet.spawn", "eventlet.sleep"], "eventlet.spawn": [], "t.unit.backends.test_asynchronous.test_EventletDrainer.teardown_thread": [], "t.unit.backends.test_asynchronous.test_Drainer": ["celery.utils.cached_property", "pytest.fixture"], "t.unit.backends.test_asynchronous.test_Drainer.setup_drainer": ["t.unit.backends.test_asynchronous.DrainerTests.get_drainer"], "t.unit.backends.test_asynchronous.test_Drainer.sleep": [], "t.unit.backends.test_asynchronous.test_Drainer.result_consumer_drain_events": ["time.sleep"], "t.unit.backends.test_asynchronous.test_Drainer.schedule_thread": ["threading.Thread"], "t.unit.backends.test_asynchronous.test_Drainer.teardown_thread": [], "t.unit.backends.test_asynchronous.test_GeventDrainer": ["celery.utils.cached_property", "pytest.fixture"], "t.unit.backends.test_asynchronous.test_GeventDrainer.setup_drainer": ["t.unit.backends.test_asynchronous.DrainerTests.get_drainer"], "t.unit.backends.test_asynchronous.test_GeventDrainer.sleep": [], "t.unit.backends.test_asynchronous.test_GeventDrainer.result_consumer_drain_events": ["gevent.sleep"], "gevent.sleep": [], "t.unit.backends.test_asynchronous.test_GeventDrainer.schedule_thread": ["gevent.sleep", "gevent.spawn"], "gevent.spawn": [], "t.unit.backends.test_asynchronous.test_GeventDrainer.teardown_thread": ["gevent.wait"], "gevent.wait": [], "t.unit.backends.test_cosmosdbsql": ["pytest.importorskip"], "t.unit.backends.test_cosmosdbsql.test_DocumentDBBackend.setup_method": ["celery.backends.cosmosdbsql.CosmosDBSQLBackend"], "celery.backends.cosmosdbsql.CosmosDBSQLBackend": [], "t.unit.backends.test_cosmosdbsql.test_DocumentDBBackend.test_missing_third_party_sdk": ["celery.backends.cosmosdbsql.CosmosDBSQLBackend", "pytest.raises"], "t.unit.backends.test_cosmosdbsql.test_DocumentDBBackend.test_bad_connection_url": ["celery.backends.cosmosdbsql.CosmosDBSQLBackend._parse_url", "pytest.raises"], "celery.backends.cosmosdbsql.CosmosDBSQLBackend._parse_url": [], "t.unit.backends.test_cosmosdbsql.test_DocumentDBBackend.test_default_connection_url": ["celery.backends.cosmosdbsql.CosmosDBSQLBackend._parse_url"], "t.unit.backends.test_cosmosdbsql.test_DocumentDBBackend.test_bad_partition_key": ["celery.backends.cosmosdbsql.CosmosDBSQLBackend._get_partition_key", "pytest.raises"], "celery.backends.cosmosdbsql.CosmosDBSQLBackend._get_partition_key": [], "t.unit.backends.test_cosmosdbsql.test_DocumentDBBackend.test_bad_consistency_level": ["celery.backends.cosmosdbsql.CosmosDBSQLBackend", "pytest.raises"], "t.unit.backends.test_cosmosdbsql.test_DocumentDBBackend": ["unittest.mock.patch"], "t.unit.backends.test_cosmosdbsql.test_DocumentDBBackend.test_create_client": ["celery.backends.cosmosdbsql.CosmosDBSQLBackend", "unittest.mock.Mock"], "t.unit.backends.test_cosmosdbsql.test_DocumentDBBackend.test_get": [], "t.unit.backends.test_cosmosdbsql.test_DocumentDBBackend.test_get_missing": ["celery.backends.cosmosdbsql.HTTPFailure"], "celery.backends.cosmosdbsql.HTTPFailure": [], "t.unit.backends.test_cosmosdbsql.test_DocumentDBBackend.test_set": [], "t.unit.backends.test_cosmosdbsql.test_DocumentDBBackend.test_mget": [], "t.unit.backends.test_cosmosdbsql.test_DocumentDBBackend.test_delete": [], "t.unit.backends.test_redis": [], "t.unit.backends.test_redis.raise_on_second_call": [], "t.unit.backends.test_redis.raise_on_second_call.on_first_call": [], "t.unit.backends.test_redis.Connection.disconnect": [], "t.unit.backends.test_redis.Pipeline.__init__": [], "t.unit.backends.test_redis.Pipeline.__getattr__": [], "t.unit.backends.test_redis.Pipeline.__getattr__.add_step": ["<builtin>.getattr"], "t.unit.backends.test_redis.Pipeline.__enter__": [], "t.unit.backends.test_redis.Pipeline.__exit__": [], "t.unit.backends.test_redis.Pipeline.execute": [], "t.unit.backends.test_redis.PubSub.__init__": ["<builtin>.set"], "t.unit.backends.test_redis.PubSub.close": ["<builtin>.set"], "t.unit.backends.test_redis.PubSub.subscribe": [], "t.unit.backends.test_redis.PubSub.unsubscribe": [], "t.unit.backends.test_redis.PubSub.get_message": [], "t.unit.backends.test_redis.Redis.__init__": [], "t.unit.backends.test_redis.Redis.get": [], "t.unit.backends.test_redis.Redis.mget": ["t.unit.backends.test_redis.Redis.get"], "t.unit.backends.test_redis.Redis.setex": ["t.unit.backends.test_redis.Redis.expire", "t.unit.backends.test_redis.Redis.set"], "t.unit.backends.test_redis.Redis.set": [], "t.unit.backends.test_redis.Redis.expire": [], "t.unit.backends.test_redis.Redis.delete": ["<builtin>.bool"], "<builtin>.bool": [], "t.unit.backends.test_redis.Redis.pipeline": ["t.unit.backends.test_redis.Pipeline.__init__"], "t.unit.backends.test_redis.Redis._get_unsorted_list": ["<builtin>.list"], "t.unit.backends.test_redis.Redis.rpush": ["t.unit.backends.test_redis.Redis._get_unsorted_list"], "t.unit.backends.test_redis.Redis.lrange": ["t.unit.backends.test_redis.Redis._get_unsorted_list"], "t.unit.backends.test_redis.Redis.llen": ["t.unit.backends.test_redis.Redis._get_unsorted_list", "<builtin>.len"], "t.unit.backends.test_redis.Redis._get_sorted_set": ["<builtin>.list"], "t.unit.backends.test_redis.Redis.zadd": ["t.unit.backends.test_redis.Redis._get_sorted_set"], "t.unit.backends.test_redis.Redis.zrange": ["t.unit.backends.test_redis.Redis._get_sorted_set"], "t.unit.backends.test_redis.Redis.zrangebyscore": ["t.unit.backends.test_redis.Redis._get_sorted_set"], "t.unit.backends.test_redis.Redis.zcount": ["t.unit.backends.test_redis.Redis.zrangebyscore", "<builtin>.len"], "t.unit.backends.test_redis.Sentinel.__init__": ["t.unit.backends.test_redis.Redis.__init__"], "t.unit.backends.test_redis.Sentinel.master_for": ["random.choice"], "random.choice": [], "t.unit.backends.test_redis.redis.ConnectionPool.__init__": [], "t.unit.backends.test_redis.redis.UnixDomainSocketConnection.__init__": [], "t.unit.backends.test_redis.test_RedisResultConsumer.get_backend": ["celery.backends.redis.RedisBackend.__init__"], "celery.backends.redis.RedisBackend.__init__": [], "t.unit.backends.test_redis.test_RedisResultConsumer.get_consumer": ["t.unit.backends.test_redis.test_RedisResultConsumer.get_backend"], "t.unit.backends.test_redis.test_RedisResultConsumer": ["unittest.mock.patch"], "t.unit.backends.test_redis.test_RedisResultConsumer.test_on_after_fork": ["celery.backends.redis.RedisBackend.result_consumer.backend.client.connection_pool.reset.assert_called_once", "celery.backends.redis.RedisBackend.result_consumer._pubsub.close.assert_called_once", "unittest.mock.Mock", "celery.backends.redis.RedisBackend.result_consumer.start", "t.unit.backends.test_redis.test_RedisResultConsumer.get_consumer", "celery.backends.redis.RedisBackend.result_consumer.backend.client.connection_pool.reset.reset_mock", "celery.backends.redis.RedisBackend.result_consumer.on_after_fork"], "celery.backends.redis.RedisBackend.result_consumer.start": [], "celery.backends.redis.RedisBackend.result_consumer.on_after_fork": [], "celery.backends.redis.RedisBackend.result_consumer.backend.client.connection_pool.reset.assert_called_once": [], "celery.backends.redis.RedisBackend.result_consumer._pubsub.close.assert_called_once": [], "celery.backends.redis.RedisBackend.result_consumer.backend.client.connection_pool.reset.reset_mock": [], "t.unit.backends.test_redis.test_RedisResultConsumer.test_on_state_change": ["celery.backends.redis.RedisBackend.result_consumer.on_state_change", "t.unit.backends.test_redis.test_RedisResultConsumer.get_consumer"], "celery.backends.redis.RedisBackend.result_consumer.on_state_change": [], "t.unit.backends.test_redis.test_RedisResultConsumer.test_drain_events_before_start": ["celery.backends.redis.RedisBackend.result_consumer.drain_events", "t.unit.backends.test_redis.test_RedisResultConsumer.get_consumer"], "celery.backends.redis.RedisBackend.result_consumer.drain_events": [], "t.unit.backends.test_redis.test_RedisResultConsumer.test_consume_from_connection_error": ["celery.backends.redis.RedisBackend.result_consumer.consume_from", "t.unit.backends.test_redis.test_RedisResultConsumer.get_consumer", "celery.backends.redis.RedisBackend.result_consumer.start"], "celery.backends.redis.RedisBackend.result_consumer.consume_from": [], "t.unit.backends.test_redis.test_RedisResultConsumer.test_cancel_for_connection_error": ["celery.backends.redis.RedisBackend.result_consumer.consume_from", "celery.backends.redis.RedisBackend.result_consumer.cancel_for", "t.unit.backends.test_redis.test_RedisResultConsumer.get_consumer", "celery.backends.redis.RedisBackend.result_consumer.start"], "celery.backends.redis.RedisBackend.result_consumer.cancel_for": [], "t.unit.backends.test_redis.test_RedisResultConsumer.test_drain_events_connection_error": ["celery.backends.redis.RedisBackend.result_consumer.start", "celery.backends.redis.RedisBackend.result_consumer.drain_events", "t.unit.backends.test_redis.test_RedisResultConsumer.get_consumer", "celery.backends.redis.RedisBackend.result_consumer.backend._set_with_state", "json.dumps"], "json.dumps": [], "celery.backends.redis.RedisBackend.result_consumer.backend._set_with_state": [], "t.unit.backends.test_redis.test_RedisResultConsumer.test_drain_events_connection_error_no_patch": ["celery.backends.redis.RedisBackend.result_consumer._pubsub.subscribe.assert_not_called", "celery.backends.redis.RedisBackend.result_consumer.start", "celery.backends.redis.RedisBackend.result_consumer.drain_events", "t.unit.backends.test_redis.test_RedisResultConsumer.get_consumer", "celery.backends.redis.RedisBackend.result_consumer.backend._set_with_state", "json.dumps"], "celery.backends.redis.RedisBackend.result_consumer._pubsub.subscribe.assert_not_called": [], "t.unit.backends.test_redis.test_RedisResultConsumer.test__reconnect_pubsub_no_subscribed": ["celery.backends.redis.RedisBackend.result_consumer._reconnect_pubsub", "<builtin>.set", "celery.backends.redis.RedisBackend.result_consumer._pubsub.subscribe.assert_not_called", "celery.backends.redis.RedisBackend.result_consumer.start", "t.unit.backends.test_redis.test_RedisResultConsumer.get_consumer", "celery.backends.redis.RedisBackend.result_consumer.backend.client.mget.assert_not_called", "celery.backends.redis.RedisBackend.result_consumer._pubsub.connection.register_connect_callback.assert_called_once"], "celery.backends.redis.RedisBackend.result_consumer._reconnect_pubsub": [], "celery.backends.redis.RedisBackend.result_consumer.backend.client.mget.assert_not_called": [], "celery.backends.redis.RedisBackend.result_consumer._pubsub.connection.register_connect_callback.assert_called_once": [], "t.unit.backends.test_redis.test_RedisResultConsumer.test__reconnect_pubsub_with_state_change": ["celery.backends.redis.RedisBackend.result_consumer._reconnect_pubsub", "celery.backends.redis.RedisBackend.result_consumer._pubsub.subscribe.assert_not_called", "celery.backends.redis.RedisBackend.result_consumer.start", "t.unit.backends.test_redis.test_RedisResultConsumer.get_consumer", "celery.backends.redis.RedisBackend.result_consumer.backend._set_with_state", "celery.backends.redis.RedisBackend.result_consumer.backend.client.mget.assert_called_once", "celery.backends.redis.RedisBackend.result_consumer._pubsub.connection.register_connect_callback.assert_called_once", "json.dumps"], "celery.backends.redis.RedisBackend.result_consumer.backend.client.mget.assert_called_once": [], "t.unit.backends.test_redis.test_RedisResultConsumer.test__reconnect_pubsub_without_state_change": ["celery.backends.redis.RedisBackend.result_consumer._reconnect_pubsub", "celery.backends.redis.RedisBackend.result_consumer._pubsub.connection.register_connect_callback.assert_not_called", "celery.backends.redis.RedisBackend.result_consumer.start", "celery.backends.redis.RedisBackend.result_consumer._pubsub.subscribe.assert_called_once", "t.unit.backends.test_redis.test_RedisResultConsumer.get_consumer", "celery.backends.redis.RedisBackend.result_consumer.backend._set_with_state", "celery.backends.redis.RedisBackend.result_consumer.backend.client.mget.assert_called_once", "json.dumps"], "celery.backends.redis.RedisBackend.result_consumer._pubsub.subscribe.assert_called_once": [], "celery.backends.redis.RedisBackend.result_consumer._pubsub.connection.register_connect_callback.assert_not_called": [], "t.unit.backends.test_redis.basetest_RedisBackend.get_backend": [], "t.unit.backends.test_redis.basetest_RedisBackend.get_E_LOST": [], "t.unit.backends.test_redis.basetest_RedisBackend.create_task": ["celery.signature", "celery.backends.redis.RedisBackend.set_chord_size", "celery.uuid", "unittest.mock.Mock"], "celery.backends.redis.RedisBackend.set_chord_size": [], "t.unit.backends.test_redis.basetest_RedisBackend": ["contextlib.contextmanager"], "t.unit.backends.test_redis.basetest_RedisBackend.chord_context": ["t.unit.backends.test_redis.basetest_RedisBackend.create_task", "unittest.mock.patch", "unittest.mock.Mock", "celery.backends.redis.RedisBackend.set_chord_size", "celery.canvas.Signature", "<builtin>.range"], "celery.canvas.Signature": [], "t.unit.backends.test_redis.basetest_RedisBackend.setup_method": ["t.unit.backends.test_redis.basetest_RedisBackend.get_backend", "celery.backends.redis.RedisBackend.__init__", "t.unit.backends.test_redis.basetest_RedisBackend.get_E_LOST"], "t.unit.backends.test_redis.test_RedisBackend": ["pytest.mark.usefixtures", "unittest.mock.patch", "pytest.mark.parametrize"], "t.unit.backends.test_redis.test_RedisBackend.test_reduce": ["celery.backends.redis.RedisBackend", "pickle.loads", "pytest.importorskip", "pickle.dumps"], "celery.backends.redis.RedisBackend": [], "t.unit.backends.test_redis.test_RedisBackend.test_no_redis": ["celery.backends.redis.RedisBackend.__init__", "pytest.raises"], "t.unit.backends.test_redis.test_RedisBackend.test_username_password_from_redis_conf": ["celery.backends.redis.RedisBackend.__init__"], "t.unit.backends.test_redis.test_RedisBackend.test_url": ["celery.backends.redis.RedisBackend.__init__"], "t.unit.backends.test_redis.test_RedisBackend.test_timeouts_in_url_coerced": ["celery.backends.redis.RedisBackend.__init__", "pytest.importorskip"], "t.unit.backends.test_redis.test_RedisBackend.test_socket_url": ["celery.backends.redis.RedisBackend.__init__", "pytest.importorskip"], "t.unit.backends.test_redis.test_RedisBackend.test_backend_ssl": ["celery.backends.redis.RedisBackend.__init__", "pytest.importorskip"], "t.unit.backends.test_redis.test_RedisBackend.test_backend_health_check_interval_ssl": ["celery.backends.redis.RedisBackend.__init__", "pytest.importorskip"], "t.unit.backends.test_redis.test_RedisBackend.test_backend_health_check_interval": ["celery.backends.redis.RedisBackend.__init__", "pytest.importorskip"], "t.unit.backends.test_redis.test_RedisBackend.test_backend_health_check_interval_not_set": ["celery.backends.redis.RedisBackend.__init__", "pytest.importorskip"], "t.unit.backends.test_redis.test_RedisBackend.test_backend_ssl_certreq_str": ["celery.backends.redis.RedisBackend.__init__", "pytest.importorskip"], "t.unit.backends.test_redis.test_RedisBackend.test_backend_ssl_url": ["celery.backends.redis.RedisBackend.__init__", "pytest.importorskip"], "t.unit.backends.test_redis.test_RedisBackend.test_backend_ssl_url_options": ["celery.backends.redis.RedisBackend.__init__", "pytest.importorskip"], "t.unit.backends.test_redis.test_RedisBackend.test_backend_ssl_url_cert_none": ["celery.backends.redis.RedisBackend.__init__", "pytest.importorskip"], "t.unit.backends.test_redis.test_RedisBackend.test_backend_ssl_url_invalid": ["pytest.raises", "pytest.importorskip", "celery.backends.redis.RedisBackend.__init__"], "t.unit.backends.test_redis.test_RedisBackend.test_conf_raises_KeyError": ["celery.utils.collections.AttributeDict", "celery.backends.redis.RedisBackend.__init__"], "celery.utils.collections.AttributeDict": [], "t.unit.backends.test_redis.test_RedisBackend.test_on_connection_error": ["<builtin>.iter", "<builtin>.KeyError", "celery.backends.redis.RedisBackend.on_connection_error"], "celery.backends.redis.RedisBackend.on_connection_error": [], "t.unit.backends.test_redis.test_RedisBackend.test_retry_policy_conf": ["celery.backends.redis.RedisBackend.ensure", "<builtin>.dict", "celery.backends.redis.RedisBackend.__init__"], "t.unit.backends.test_redis.test_RedisBackend.test_retry_policy_conf.fn": [], "celery.backends.redis.RedisBackend.ensure": [], "t.unit.backends.test_redis.test_RedisBackend.test_incr": ["unittest.mock.Mock", "celery.backends.redis.RedisBackend.incr"], "celery.backends.redis.RedisBackend.incr": [], "t.unit.backends.test_redis.test_RedisBackend.test_expire": ["celery.backends.redis.RedisBackend.expire", "unittest.mock.Mock"], "celery.backends.redis.RedisBackend.expire": [], "t.unit.backends.test_redis.test_RedisBackend.test_apply_chord": ["celery.uuid", "unittest.mock.Mock", "celery.backends.redis.RedisBackend.apply_chord", "<builtin>.range"], "celery.backends.redis.RedisBackend.apply_chord": [], "t.unit.backends.test_redis.test_RedisBackend.test_unpack_chord_result": ["celery.backends.redis.RedisBackend._unpack_chord_result", "unittest.mock.Mock", "<builtin>.KeyError", "pytest.raises", "<builtin>.ValueError"], "celery.backends.redis.RedisBackend._unpack_chord_result": [], "t.unit.backends.test_redis.test_RedisBackend.test_on_chord_part_return_no_gid_or_tid": ["celery.backends.redis.RedisBackend.on_chord_part_return", "unittest.mock.Mock"], "celery.backends.redis.RedisBackend.on_chord_part_return": [], "t.unit.backends.test_redis.test_RedisBackend.test_ConnectionPool": ["unittest.mock.Mock"], "t.unit.backends.test_redis.test_RedisBackend.test_expires_defaults_to_config": ["celery.backends.redis.RedisBackend.__init__"], "t.unit.backends.test_redis.test_RedisBackend.test_expires_is_int": ["celery.backends.redis.RedisBackend.__init__"], "t.unit.backends.test_redis.test_RedisBackend.test_add_to_chord": ["celery.backends.redis.RedisBackend.add_to_chord", "celery.uuid", "celery.backends.redis.RedisBackend.__init__", "celery.backends.redis.RedisBackend.get_key_for_group"], "celery.backends.redis.RedisBackend.add_to_chord": [], "celery.backends.redis.RedisBackend.get_key_for_group": [], "t.unit.backends.test_redis.test_RedisBackend.test_set_chord_size": ["celery.backends.redis.RedisBackend.set_chord_size", "celery.uuid", "celery.backends.redis.RedisBackend.__init__", "celery.backends.redis.RedisBackend.get_key_for_group"], "t.unit.backends.test_redis.test_RedisBackend.test_expires_is_None": ["celery.backends.redis.RedisBackend.__init__"], "t.unit.backends.test_redis.test_RedisBackend.test_expires_is_timedelta": ["datetime.timedelta", "celery.backends.redis.RedisBackend.__init__"], "t.unit.backends.test_redis.test_RedisBackend.test_mget": ["celery.backends.redis.RedisBackend.mget"], "celery.backends.redis.RedisBackend.mget": [], "t.unit.backends.test_redis.test_RedisBackend.test_set_no_expire": ["celery.backends.redis.RedisBackend._set_with_state"], "celery.backends.redis.RedisBackend._set_with_state": [], "t.unit.backends.test_redis.test_RedisBackend.test_process_cleanup": ["celery.backends.redis.RedisBackend.process_cleanup"], "celery.backends.redis.RedisBackend.process_cleanup": [], "t.unit.backends.test_redis.test_RedisBackend.test_get_set_forget": ["celery.backends.redis.RedisBackend.get_state", "celery.backends.redis.RedisBackend.get_result", "celery.backends.redis.RedisBackend.forget", "celery.uuid", "celery.backends.redis.RedisBackend.store_result"], "celery.backends.redis.RedisBackend.store_result": [], "celery.backends.redis.RedisBackend.get_state": [], "celery.backends.redis.RedisBackend.get_result": [], "celery.backends.redis.RedisBackend.forget": [], "t.unit.backends.test_redis.test_RedisBackend.test_set_expires": ["celery.uuid", "celery.backends.redis.RedisBackend.__init__", "celery.backends.redis.RedisBackend.store_result", "celery.backends.redis.RedisBackend.get_key_for_task"], "celery.backends.redis.RedisBackend.get_key_for_task": [], "t.unit.backends.test_redis.test_RedisBackend.test_set_raises_error_on_large_value": ["celery.backends.redis.RedisBackend.set", "pytest.raises"], "celery.backends.redis.RedisBackend.set": [], "t.unit.backends.test_redis.test_RedisBackend_chords_simple": ["pytest.fixture"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.simple_header_result": ["unittest.mock.patch"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return": ["t.unit.backends.test_redis.basetest_RedisBackend.create_task", "celery.backends.redis.RedisBackend.on_chord_part_return", "<builtin>.range", "celery.backends.redis.RedisBackend.get_key_for_group", "random.shuffle"], "random.shuffle": [], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__unordered": ["t.unit.backends.test_redis.basetest_RedisBackend.create_task", "celery.backends.redis.RedisBackend.on_chord_part_return", "<builtin>.dict", "<builtin>.range", "celery.backends.redis.RedisBackend.get_key_for_group", "random.shuffle"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__ordered": ["t.unit.backends.test_redis.basetest_RedisBackend.create_task", "celery.backends.redis.RedisBackend.on_chord_part_return", "<builtin>.dict", "<builtin>.range", "celery.backends.redis.RedisBackend.get_key_for_group", "random.shuffle"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return_no_expiry": ["t.unit.backends.test_redis.basetest_RedisBackend.create_task", "celery.backends.redis.RedisBackend.on_chord_part_return", "celery.backends.redis.RedisBackend.set_chord_size", "celery.backends.redis.RedisBackend.get_key_for_group", "<builtin>.range"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return_expire_set_to_zero": ["t.unit.backends.test_redis.basetest_RedisBackend.create_task", "celery.backends.redis.RedisBackend.on_chord_part_return", "celery.backends.redis.RedisBackend.get_key_for_group", "<builtin>.range"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return_no_expiry__unordered": ["t.unit.backends.test_redis.basetest_RedisBackend.create_task", "celery.backends.redis.RedisBackend.on_chord_part_return", "<builtin>.dict", "celery.backends.redis.RedisBackend.get_key_for_group", "<builtin>.range"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return_no_expiry__ordered": ["t.unit.backends.test_redis.basetest_RedisBackend.create_task", "celery.backends.redis.RedisBackend.on_chord_part_return", "<builtin>.dict", "celery.backends.redis.RedisBackend.get_key_for_group", "<builtin>.range"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__success": ["t.unit.backends.test_redis.basetest_RedisBackend.chord_context", "celery.backends.redis.RedisBackend.on_chord_part_return"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__success__unordered": ["t.unit.backends.test_redis.basetest_RedisBackend.chord_context", "<builtin>.dict", "celery.backends.redis.RedisBackend.on_chord_part_return"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__success__ordered": ["t.unit.backends.test_redis.basetest_RedisBackend.chord_context", "<builtin>.dict", "celery.backends.redis.RedisBackend.on_chord_part_return"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__callback_raises": ["t.unit.backends.test_redis.basetest_RedisBackend.chord_context", "celery.backends.redis.RedisBackend.on_chord_part_return", "<builtin>.KeyError", "unittest.mock.Mock"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__callback_raises__unordered": ["celery.backends.redis.RedisBackend.on_chord_part_return", "<builtin>.KeyError", "unittest.mock.Mock", "t.unit.backends.test_redis.basetest_RedisBackend.chord_context", "<builtin>.dict"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__callback_raises__ordered": ["celery.backends.redis.RedisBackend.on_chord_part_return", "<builtin>.KeyError", "unittest.mock.Mock", "t.unit.backends.test_redis.basetest_RedisBackend.chord_context", "<builtin>.dict"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__ChordError": ["celery.exceptions.ChordError", "unittest.mock.Mock", "celery.backends.redis.RedisBackend.on_chord_part_return", "celery.contrib.testing.mocks.ContextMock", "t.unit.backends.test_redis.basetest_RedisBackend.chord_context", "t.unit.backends.test_redis.raise_on_second_call"], "celery.exceptions.ChordError": [], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__ChordError__unordered": ["celery.exceptions.ChordError", "unittest.mock.Mock", "celery.backends.redis.RedisBackend.on_chord_part_return", "celery.contrib.testing.mocks.ContextMock", "t.unit.backends.test_redis.basetest_RedisBackend.chord_context", "<builtin>.dict", "t.unit.backends.test_redis.raise_on_second_call"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__ChordError__ordered": ["celery.exceptions.ChordError", "unittest.mock.Mock", "celery.backends.redis.RedisBackend.on_chord_part_return", "celery.contrib.testing.mocks.ContextMock", "t.unit.backends.test_redis.basetest_RedisBackend.chord_context", "<builtin>.dict", "t.unit.backends.test_redis.raise_on_second_call"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__other_error": ["<builtin>.RuntimeError", "unittest.mock.Mock", "celery.backends.redis.RedisBackend.on_chord_part_return", "celery.contrib.testing.mocks.ContextMock", "t.unit.backends.test_redis.basetest_RedisBackend.chord_context", "t.unit.backends.test_redis.raise_on_second_call"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__other_error__unordered": ["<builtin>.RuntimeError", "unittest.mock.Mock", "celery.backends.redis.RedisBackend.on_chord_part_return", "celery.contrib.testing.mocks.ContextMock", "t.unit.backends.test_redis.basetest_RedisBackend.chord_context", "<builtin>.dict", "t.unit.backends.test_redis.raise_on_second_call"], "t.unit.backends.test_redis.test_RedisBackend_chords_simple.test_on_chord_part_return__other_error__ordered": ["<builtin>.RuntimeError", "unittest.mock.Mock", "celery.backends.redis.RedisBackend.on_chord_part_return", "celery.contrib.testing.mocks.ContextMock", "t.unit.backends.test_redis.basetest_RedisBackend.chord_context", "<builtin>.dict", "t.unit.backends.test_redis.raise_on_second_call"], "t.unit.backends.test_redis.test_RedisBackend_chords_complex": ["pytest.fixture", "pytest.mark.parametrize"], "t.unit.backends.test_redis.test_RedisBackend_chords_complex.complex_header_result": ["unittest.mock.patch"], "t.unit.backends.test_redis.test_RedisBackend_chords_complex.test_apply_chord_complex_header": ["unittest.mock.Mock", "celery.backends.redis.RedisBackend.apply_chord"], "t.unit.backends.test_redis.test_RedisBackend_chords_complex.test_on_chord_part_return_timeout": ["t.unit.backends.test_redis.basetest_RedisBackend.create_task", "celery.backends.redis.RedisBackend.on_chord_part_return", "<builtin>.zip", "itertools.cycle", "<builtin>.range", "random.shuffle"], "itertools.cycle": [], "<builtin>.zip": [], "t.unit.backends.test_redis.test_RedisBackend_chords_complex.test_on_chord_part_return": ["t.unit.backends.test_redis.basetest_RedisBackend.create_task", "celery.backends.redis.RedisBackend.on_chord_part_return", "<builtin>.zip", "itertools.cycle", "t.unit.backends.test_redis.basetest_RedisBackend.chord_context", "<builtin>.range", "random.shuffle"], "t.unit.backends.test_redis.test_SentinelBackend.get_backend": [], "t.unit.backends.test_redis.test_SentinelBackend.get_E_LOST": [], "t.unit.backends.test_redis.test_SentinelBackend.setup_method": ["t.unit.backends.test_redis.test_SentinelBackend.get_E_LOST", "t.unit.backends.test_redis.test_SentinelBackend.get_backend", "celery.backends.redis.SentinelBackend.__init__"], "celery.backends.redis.SentinelBackend.__init__": [], "t.unit.backends.test_redis.test_SentinelBackend": ["pytest.mark.usefixtures"], "t.unit.backends.test_redis.test_SentinelBackend.test_reduce": ["celery.backends.redis.SentinelBackend", "pickle.loads", "pytest.importorskip", "pickle.dumps"], "celery.backends.redis.SentinelBackend": [], "t.unit.backends.test_redis.test_SentinelBackend.test_no_redis": ["pytest.raises", "celery.backends.redis.SentinelBackend.__init__"], "t.unit.backends.test_redis.test_SentinelBackend.test_url": ["celery.backends.redis.SentinelBackend.as_uri", "<builtin>.len", "celery.backends.redis.SentinelBackend.__init__"], "celery.backends.redis.SentinelBackend.as_uri": [], "t.unit.backends.test_redis.test_SentinelBackend.test_get_sentinel_instance": ["<builtin>.len", "celery.backends.redis.SentinelBackend._get_sentinel_instance", "celery.backends.redis.SentinelBackend.__init__"], "celery.backends.redis.SentinelBackend._get_sentinel_instance": [], "t.unit.backends.test_redis.test_SentinelBackend.test_get_pool": ["celery.backends.redis.SentinelBackend._get_pool", "celery.backends.redis.SentinelBackend.__init__"], "celery.backends.redis.SentinelBackend._get_pool": [], "t.unit.backends.test_redis.test_SentinelBackend.test_backend_ssl": ["celery.backends.redis.SentinelBackend", "<builtin>.len", "pytest.importorskip"], "t.unit.test_canvas": [], "t.unit.test_canvas.test_Canvas.test_freeze_reply_to": ["uuid.UUID", "concurrent.futures.ThreadPoolExecutor"], "t.unit.test_canvas.test_Canvas.test_freeze_reply_to.test_task": [], "t.unit.test_canvas.test_Canvas.test_freeze_reply_to.foo": [], "t.unit.bin.test_beat": ["pytest.fixture"], "t.unit.bin.test_beat.use_celery_app_trap": [], "t.unit.bin.test_beat.test_cli": [], "t.unit.bin.test_beat.test_cli_quiet": [], "t.unit.bin.proj": ["celery.Celery"], "celery.Celery": [], "t.unit.bin.proj.app2": [], "t.unit.bin.proj.scheduler": [], "t.unit.bin.proj.scheduler.mScheduler.tick": [], "t.unit.bin.proj.app": ["celery.Celery"], "t.unit.bin.test_multi": [], "t.unit.bin": [], "t.unit.bin.test_worker": ["pytest.fixture"], "t.unit.bin.test_worker.use_celery_app_trap": [], "t.unit.bin.test_worker.test_cli": [], "t.unit.bin.celery": [], "t.unit.contrib.test_rdb": [], "t.unit.contrib.test_rdb.test_Rdb": ["unittest.mock.patch"], "t.unit.contrib.test_rdb.test_Rdb.test_debugger": ["celery.contrib.rdb.debugger"], "celery.contrib.rdb.debugger": [], "t.unit.contrib.test_rdb.test_Rdb.test_set_trace": ["celery.contrib.rdb.set_trace", "unittest.mock.Mock"], "celery.contrib.rdb.set_trace": [], "t.unit.contrib.test_rdb.test_Rdb.test_rdb": ["unittest.mock.patch", "unittest.mock.Mock", "celery.utils.text.WhateverIO", "pytest.raises", "celery.contrib.rdb.Rdb"], "celery.utils.text.WhateverIO": [], "celery.contrib.rdb.Rdb": [], "t.unit.contrib.test_rdb.test_Rdb.test_get_avail_port": ["unittest.mock.patch", "unittest.mock.Mock", "socket.error.__init__", "celery.utils.text.WhateverIO", "pytest.raises", "celery.contrib.rdb.Rdb"], "socket.error.__init__": [], "t.unit.contrib.test_rdb.test_Rdb.test_get_avail_port.effect": ["socket.error.__init__"], "t.unit.contrib.test_migrate": [], "t.unit.contrib.test_migrate.Message": ["unittest.mock.Mock", "<builtin>.isinstance"], "t.unit.contrib.test_migrate.test_State.test_strtotal": ["celery.contrib.migrate.State"], "celery.contrib.migrate.State": [], "t.unit.contrib.test_migrate.test_State.test_repr": ["<builtin>.repr", "celery.contrib.migrate.State"], "t.unit.contrib.test_migrate.test_move": ["contextlib.contextmanager"], "t.unit.contrib.test_migrate.test_move.move_context": ["celery.contrib.migrate.move", "unittest.mock.patch", "unittest.mock.Mock"], "celery.contrib.migrate.move": [], "t.unit.contrib.test_migrate.test_move.msgpair": ["t.unit.contrib.test_migrate.Message", "<builtin>.dict"], "t.unit.contrib.test_migrate.test_move.test_move": ["t.unit.contrib.test_migrate.test_move.msgpair", "t.unit.contrib.test_migrate.test_move.move_context"], "t.unit.contrib.test_migrate.test_move.test_move_transform": ["unittest.mock.patch", "unittest.mock.Mock", "kombu.Queue", "t.unit.contrib.test_migrate.test_move.msgpair", "t.unit.contrib.test_migrate.test_move.move_context"], "t.unit.contrib.test_migrate.test_move.test_limit": ["t.unit.contrib.test_migrate.test_move.msgpair", "pytest.raises", "t.unit.contrib.test_migrate.test_move.move_context"], "t.unit.contrib.test_migrate.test_move.test_callback": ["t.unit.contrib.test_migrate.test_move.move_context", "t.unit.contrib.test_migrate.test_move.msgpair", "unittest.mock.Mock"], "t.unit.contrib.test_migrate.test_start_filter.test_start": ["unittest.mock.patch", "unittest.mock.Mock", "<builtin>.list", "celery.contrib.migrate.StopFiltering", "kombu.Connection", "kombu.Queue", "celery.contrib.migrate.start_filter", "t.unit.contrib.test_migrate.Message", "celery.contrib.migrate.State"], "kombu.Connection": [], "celery.contrib.migrate.StopFiltering": [], "t.unit.contrib.test_migrate.test_start_filter.test_start.register_callback": [], "celery.contrib.migrate.start_filter": [], "t.unit.contrib.test_migrate.test_filter_callback.test_filter": ["celery.contrib.migrate.filter_callback", "unittest.mock.Mock"], "celery.contrib.migrate.filter_callback": [], "t.unit.contrib.test_migrate.test_task_id_in": ["celery.contrib.migrate.task_id_in", "unittest.mock.Mock"], "celery.contrib.migrate.task_id_in": [], "t.unit.contrib.test_migrate.test_task_id_eq": ["celery.contrib.migrate.task_id_eq", "unittest.mock.Mock"], "celery.contrib.migrate.task_id_eq": [], "t.unit.contrib.test_migrate.test_expand_dest": ["celery.contrib.migrate.expand_dest"], "celery.contrib.migrate.expand_dest": [], "t.unit.contrib.test_migrate.test_maybe_queue": ["kombu.Queue", "unittest.mock.Mock", "celery.contrib.migrate._maybe_queue"], "celery.contrib.migrate._maybe_queue": [], "t.unit.contrib.test_migrate.test_filter_status": ["celery.contrib.migrate.filter_status", "celery.contrib.migrate.State", "t.unit.conftest.stdouts", "unittest.mock.Mock"], "celery.contrib.migrate.filter_status": [], "t.unit.contrib.test_migrate.test_move_by_taskmap": ["unittest.mock.patch", "unittest.mock.Mock", "celery.contrib.migrate.move_by_taskmap", "kombu.Queue", "celery.contrib.migrate.move.assert_called"], "celery.contrib.migrate.move_by_taskmap": [], "celery.contrib.migrate.move.assert_called": [], "t.unit.contrib.test_migrate.test_move_by_idmap": ["unittest.mock.patch", "kombu.Queue", "celery.contrib.migrate.move.assert_called", "t.unit.contrib.test_migrate.Message", "celery.contrib.migrate.move_by_idmap"], "celery.contrib.migrate.move_by_idmap": [], "t.unit.contrib.test_migrate.test_move_task_by_id": ["unittest.mock.patch", "celery.contrib.migrate.move_task_by_id", "kombu.Queue", "celery.contrib.migrate.move.assert_called", "t.unit.contrib.test_migrate.Message"], "celery.contrib.migrate.move_task_by_id": [], "t.unit.contrib.test_migrate.test_migrate_task.test_removes_compression_header": ["t.unit.contrib.test_migrate.Message", "celery.contrib.migrate.migrate_task", "unittest.mock.Mock", "<builtin>.isinstance"], "celery.contrib.migrate.migrate_task": [], "t.unit.contrib.test_migrate.test_migrate_tasks.test_migrate": ["kombu.utils.encoding.ensure_bytes", "unittest.mock.patch", "kombu.Exchange", "unittest.mock.Mock", "kombu.Producer", "kombu.Connection", "kombu.Queue", "celery.contrib.migrate.migrate_tasks"], "kombu.Producer": [], "celery.contrib.migrate.migrate_tasks": [], "t.unit.contrib.test_migrate.test_migrate_tasks.test_migrate.effect": ["amqp.ChannelError"], "amqp.ChannelError": [], "t.unit.contrib.test_sphinx": ["pytest.mark.skipif", "os.path.join", "os.path.dirname"], "os.path.dirname": [], "os.path.join": [], "t.unit.contrib.test_sphinx.test_sphinx": ["os.path.join", "sphinx_testing.TestApp", "<builtin>.open"], "sphinx_testing.TestApp": [], "<builtin>.open": [], "t.unit.contrib.proj.conf": ["os.path.abspath", "os.path.dirname", "sys.path.insert"], "os.path.abspath": [], "t.unit.contrib.proj.foo": ["celery.Celery", "celery.shared_task"], "t.unit.contrib.proj.foo.bar": [], "t.unit.contrib.proj.foo.baz": [], "t.unit.contrib.proj": [], "t.unit.contrib.proj.xyzzy": ["celery.Celery"], "t.unit.contrib.proj.xyzzy.plugh": [], "t.unit.contrib": [], "t.unit.contrib.test_worker": [], "t.unit.contrib.test_worker.test_worker.setup_method": ["celery.Celery"], "t.unit.contrib.test_worker.test_worker.setup_method.add": [], "t.unit.contrib.test_worker.test_worker.setup_method.error_task": ["<builtin>.NotImplementedError"], "<builtin>.NotImplementedError": [], "t.unit.contrib.test_worker.test_worker.test_start_worker": ["celery.contrib.testing.worker.start_worker"], "celery.contrib.testing.worker.start_worker": [], "t.unit.contrib.test_worker.test_worker.test_start_worker_with_exception": ["celery.contrib.testing.worker.start_worker", "pytest.raises"], "t.unit.contrib.test_abortable": [], "t.unit.contrib.test_abortable.test_AbortableTask.setup_method": [], "t.unit.contrib.test_abortable.test_AbortableTask.setup_method.abortable": [], "t.unit.contrib.test_abortable.test_AbortableTask.test_async_result_is_abortable": ["<builtin>.isinstance"], "t.unit.contrib.test_abortable.test_AbortableTask.test_is_not_aborted": [], "t.unit.contrib.test_abortable.test_AbortableTask.test_is_aborted_not_abort_result": [], "t.unit.contrib.test_abortable.test_AbortableTask.test_abort_yields_aborted": [], "t.unit.contrib.test_pytest": ["pytest.mark.skipif", "<builtin>.type", "<builtin>.hasattr", "pytest.fail"], "<builtin>.hasattr": [], "t.unit.contrib.test_pytest.test_pytest_celery_marker_registration": ["pytest.raises"], "t.unit.security.test_serialization": [], "t.unit.security.test_serialization.test_secureserializer._get_s": ["celery.security.serialization.SecureSerializer", "celery.security.certificate.Certificate", "celery.security.certificate.CertStore", "celery.security.key.PrivateKey"], "celery.security.certificate.CertStore": [], "celery.security.certificate.Certificate": [], "celery.security.key.PrivateKey": [], "celery.security.serialization.SecureSerializer": [], "t.unit.security.test_serialization.test_secureserializer.test_serialize": ["t.unit.security.test_serialization.test_secureserializer._get_s"], "t.unit.security.test_serialization.test_secureserializer.test_deserialize": ["t.unit.security.test_serialization.test_secureserializer._get_s", "pytest.raises"], "t.unit.security.test_serialization.test_secureserializer.test_unmatched_key_cert": ["t.unit.security.test_serialization.test_secureserializer._get_s", "pytest.raises"], "t.unit.security.test_serialization.test_secureserializer.test_unknown_source": ["t.unit.security.test_serialization.test_secureserializer._get_s", "pytest.raises"], "t.unit.security.test_serialization.test_secureserializer.test_self_send": ["t.unit.security.test_serialization.test_secureserializer._get_s"], "t.unit.security.test_serialization.test_secureserializer.test_separate_ends": ["t.unit.security.test_serialization.test_secureserializer._get_s"], "t.unit.security.test_serialization.test_secureserializer.test_register_auth": ["celery.security.serialization.register_auth"], "celery.security.serialization.register_auth": [], "t.unit.security.test_serialization.test_secureserializer.test_lots_of_sign": ["kombu.utils.encoding.bytes_to_str", "t.unit.security.test_serialization.test_secureserializer._get_s", "os.urandom", "base64.urlsafe_b64encode", "<builtin>.range"], "os.urandom": [], "base64.urlsafe_b64encode": [], "t.unit.security.test_key": [], "t.unit.security.test_key.test_PrivateKey.test_valid_private_key": ["celery.security.key.PrivateKey"], "t.unit.security.test_key.test_PrivateKey.test_invalid_private_key": ["pytest.raises", "celery.security.key.PrivateKey"], "t.unit.security.test_key.test_PrivateKey.test_sign": ["kombu.utils.encoding.ensure_bytes", "pytest.raises", "celery.security.utils.get_digest_algorithm", "celery.security.key.PrivateKey"], "celery.security.utils.get_digest_algorithm": [], "t.unit.security.test_security": [], "t.unit.security.test_security.test_security.teardown_method": ["kombu.serialization.registry._set_default_serializer", "kombu.serialization.registry._disabled_content_types.clear", "kombu.serialization.registry.unregister"], "kombu.serialization.registry._disabled_content_types.clear": [], "kombu.serialization.registry._set_default_serializer": [], "kombu.serialization.registry.unregister": [], "t.unit.security.test_security.test_security.test_disable_insecure_serializers": ["kombu.serialization.disable_insecure_serializers", "kombu.serialization.registry._disabled_content_types.clear"], "kombu.serialization.disable_insecure_serializers": [], "t.unit.security.test_security.test_security": ["unittest.mock.patch"], "t.unit.security.test_security.test_security.test_disable_untrusted_serializers": ["celery.security.disable_untrusted_serializers"], "celery.security.disable_untrusted_serializers": [], "t.unit.security.test_security.test_security.test_setup_security": ["os.remove", "case.SecurityCase.app.conf.update", "tempfile.NamedTemporaryFile", "case.SecurityCase.app.setup_security"], "tempfile.NamedTemporaryFile": [], "case.SecurityCase.app.conf.update": [], "case.SecurityCase.app.setup_security": [], "os.remove": [], "t.unit.security.test_security.test_security.test_setup_security_encrypted_key_file": ["os.remove", "case.SecurityCase.app.conf.update", "tempfile.NamedTemporaryFile", "case.SecurityCase.app.setup_security"], "t.unit.security.test_security.test_security.test_setup_security_disabled_serializers": ["<builtin>.len", "pytest.raises", "kombu.serialization.registry._disabled_content_types.clear", "case.SecurityCase.app.setup_security"], "t.unit.security.test_security.test_security.test_setup_security__default_app": ["celery.security.setup_security", "pytest.raises"], "celery.security.setup_security": [], "t.unit.security.test_security.test_security.test_setup_registry_complete": ["unittest.mock.patch", "unittest.mock.Mock", "t.unit.conftest.open", "kombu.serialization.registry._set_default_serializer.assert_called_with", "case.SecurityCase.app.setup_security"], "t.unit.security.test_security.test_security.test_setup_registry_complete.effect": ["unittest.mock.Mock"], "t.unit.conftest.open": ["t.unit.conftest.WhateverIO.__init__", "unittest.mock.patch", "t.unit.conftest._mock_context", "unittest.mock.Mock"], "kombu.serialization.registry._set_default_serializer.assert_called_with": [], "t.unit.security.test_security.test_security.test_security_conf": ["pytest.raises", "case.SecurityCase.app.setup_security"], "t.unit.security.test_security.test_security.test_security_conf.import_hook": ["builtins.__import__"], "builtins.__import__": [], "t.unit.security.test_security.test_security.test_reraise_errors": ["celery.security.utils.reraise_errors", "pytest.raises", "<builtin>.KeyError"], "celery.security.utils.reraise_errors": [], "t.unit.security.test_certificate": [], "t.unit.security.test_certificate.test_Certificate.test_valid_certificate": ["celery.security.certificate.Certificate"], "t.unit.security.test_certificate.test_Certificate.test_invalid_certificate": ["celery.security.certificate.Certificate", "pytest.raises"], "t.unit.security.test_certificate.test_Certificate": ["pytest.mark.skip"], "t.unit.security.test_certificate.test_Certificate.test_has_expired": ["celery.security.certificate.Certificate"], "t.unit.security.test_certificate.test_Certificate.test_has_expired_mock": ["datetime.datetime.utcnow", "celery.security.certificate.Certificate", "datetime.timedelta", "unittest.mock.Mock"], "t.unit.security.test_certificate.test_Certificate.test_has_not_expired_mock": ["datetime.datetime.utcnow", "celery.security.certificate.Certificate", "datetime.timedelta", "unittest.mock.Mock"], "t.unit.security.test_certificate.test_CertStore.test_itercerts": ["celery.security.certificate.Certificate", "celery.security.certificate.CertStore"], "t.unit.security.test_certificate.test_CertStore.test_duplicate": ["celery.security.certificate.Certificate", "pytest.raises", "celery.security.certificate.CertStore"], "t.unit.security.test_certificate.test_FSCertStore": ["unittest.mock.patch"], "t.unit.security.test_certificate.test_FSCertStore.test_init": ["unittest.mock.Mock", "t.unit.conftest.open", "celery.security.certificate.FSCertStore", "pytest.raises", "os.path.join"], "celery.security.certificate.FSCertStore": [], "t.unit.security": [], "t.unit.security.case": [], "t.unit.security.case.SecurityCase.setup_method": ["pytest.importorskip"], "t.unit.apps.test_multi": [], "t.unit.apps.test_multi.test_functions.test_parse_ns_range": ["celery.apps.multi.MultiParser"], "celery.apps.multi.MultiParser": [], "t.unit.apps.test_multi.test_functions.test_format_opt": ["celery.apps.multi.format_opt"], "celery.apps.multi.format_opt": [], "t.unit.apps.test_multi.test_NamespacedOptionParser.test_parse": ["celery.apps.multi.NamespacedOptionParser"], "celery.apps.multi.NamespacedOptionParser": [], "t.unit.apps.test_multi.multi_args": ["celery.apps.multi.MultiParser"], "t.unit.apps.test_multi.test_multi_args": ["unittest.mock.patch"], "t.unit.apps.test_multi.test_multi_args.test_parse": ["t.unit.apps.test_multi.test_multi_args.test_parse._args", "<builtin>.list", "celery.apps.multi.NamespacedOptionParser", "<builtin>.len", "pytest.raises", "t.unit.apps.test_multi.test_multi_args.test_parse.assert_line_in", "<builtin>.enumerate", "t.unit.apps.test_multi.multi_args"], "t.unit.apps.test_multi.test_multi_args.test_parse.assert_line_in": [], "t.unit.apps.test_multi.test_multi_args.test_parse._args": ["os.path.join", "os.path.normpath"], "os.path.normpath": [], "t.unit.apps.test_multi.test_multi_args.test_optmerge": ["celery.apps.multi.NamespacedOptionParser"], "t.unit.apps.test_multi.test_Node.setup_method": ["unittest.mock.patch", "celery.apps.multi.Node", "unittest.mock.Mock"], "celery.apps.multi.Node": [], "t.unit.apps.test_multi.test_Node.test_from_kwargs": ["unittest.mock.patch", "<builtin>.sorted", "celery.apps.multi.Node.from_kwargs"], "celery.apps.multi.Node.from_kwargs": [], "t.unit.apps.test_multi.test_Node": ["unittest.mock.patch"], "t.unit.apps.test_multi.test_Node.test_send": [], "t.unit.apps.test_multi.test_Node.test_send__ESRCH": ["<builtin>.OSError"], "t.unit.apps.test_multi.test_Node.test_send__error": ["<builtin>.OSError", "pytest.raises"], "t.unit.apps.test_multi.test_Node.test_alive": ["unittest.mock.Mock"], "t.unit.apps.test_multi.test_Node.test_start": ["unittest.mock.Mock"], "t.unit.apps.test_multi.test_Node.test_waitexec": ["unittest.mock.Mock"], "t.unit.apps.test_multi.test_Node.test_handle_process_exit": [], "t.unit.apps.test_multi.test_Node.test_handle_process_exit__failure": ["unittest.mock.Mock"], "t.unit.apps.test_multi.test_Node.test_handle_process_exit__signalled": ["unittest.mock.Mock"], "t.unit.apps.test_multi.test_Node.test_logfile": ["os.path.normpath"], "t.unit.apps.test_multi.test_Node.test_pidfile_default": ["os.path.normpath", "celery.apps.multi.Node.from_kwargs"], "t.unit.apps.test_multi.test_Node.test_pidfile_custom": ["<builtin>.AssertionError", "celery.apps.multi.Node.from_kwargs"], "t.unit.apps.test_multi.test_Cluster.setup_method": ["unittest.mock.patch", "celery.apps.multi.Node", "unittest.mock.Mock", "celery.apps.multi.Cluster"], "celery.apps.multi.Cluster": [], "t.unit.apps.test_multi.test_Cluster.test_len": ["<builtin>.len"], "t.unit.apps.test_multi.test_Cluster.test_getitem": [], "t.unit.apps.test_multi.test_Cluster.test_start": ["unittest.mock.Mock", "unittest.mock.call"], "t.unit.apps.test_multi.test_Cluster.test_start_node": ["unittest.mock.Mock"], "t.unit.apps.test_multi.test_Cluster.test__start_node": ["unittest.mock.Mock"], "t.unit.apps.test_multi.test_Cluster.test_send_all": ["unittest.mock.Mock", "unittest.mock.call"], "t.unit.apps.test_multi.test_Cluster.test_kill": ["unittest.mock.Mock"], "t.unit.apps.test_multi.test_Cluster.test_getpids": ["unittest.mock.patch", "<builtin>.sorted", "unittest.mock.Mock", "t.unit.apps.test_multi.test_Cluster.prepare_pidfile_for_getpids", "celery.apps.multi.Cluster", "celery.apps.multi.Node"], "t.unit.apps.test_multi.test_Cluster.prepare_pidfile_for_getpids": [], "t.unit.apps.test_multi.test_Cluster.prepare_pidfile_for_getpids.pids.__init__": [], "t.unit.apps.test_multi.test_Cluster.prepare_pidfile_for_getpids.pids.read_pid": ["<builtin>.ValueError", "os.path.normpath"], "t.unit.apps": [], "t.unit.conftest": ["<builtin>.object", "contextlib.contextmanager", "pytest.fixture", "<builtin>.getattr"], "t.unit.conftest.noop": [], "t.unit.conftest.WhateverIO.__init__": ["io.StringIO.__init__", "<builtin>.isinstance"], "io.StringIO.__init__": [], "t.unit.conftest.WhateverIO.write": ["io.StringIO.write", "<builtin>.isinstance"], "io.StringIO.write": [], "t.unit.conftest.celery_config": ["kombu.Queue", "os.environ.get"], "t.unit.conftest.use_celery_app_trap": [], "t.unit.conftest.reset_cache_backend_state": ["<builtin>.isinstance"], "t.unit.conftest.assert_signal_called": ["unittest.mock.Mock"], "t.unit.conftest.assert_signal_called.on_call": [], "t.unit.conftest.app": [], "t.unit.conftest.AAA_disable_multiprocessing": ["unittest.mock.patch", "sys.exc_info"], "t.unit.conftest.alive_threads": ["threading.enumerate"], "threading.enumerate": [], "t.unit.conftest.task_join_will_not_block": ["celery._state._set_task_join_will_block"], "t.unit.conftest.task_join_will_not_block.<lambda1>": [], "t.unit.conftest.record_threads_at_startup": ["t.unit.conftest.alive_threads"], "t.unit.conftest.threads_not_lingering": ["t.unit.conftest.alive_threads"], "t.unit.conftest.AAA_reset_CELERY_LOADER_env": ["os.environ.get"], "t.unit.conftest.test_cases_shortcuts": [], "t.unit.conftest.test_cases_shortcuts.add": [], "t.unit.conftest.sanity_no_shutdown_flags_set": [], "t.unit.conftest.sanity_stdouts": ["<builtin>.RuntimeError", "<builtin>.isinstance"], "t.unit.conftest.sanity_logging_side_effects": ["<builtin>.RuntimeError", "logging.getLogger", "<builtin>.isinstance"], "logging.getLogger": [], "t.unit.conftest.setup_session": ["os.environ.get", "warnings.catch_warnings", "warnings.resetwarnings", "t.unit.conftest.import_all_modules", "celery.contrib.testing.app.Trap", "os.environ.update", "celery._state.set_default_app"], "t.unit.conftest.import_all_modules": ["importlib.import_module", "<builtin>.UserWarning", "t.unit.conftest.find_distribution_modules", "warnings.warn"], "warnings.resetwarnings": [], "celery.contrib.testing.app.Trap": [], "celery._state.set_default_app": [], "t.unit.conftest.teardown": ["os.path.exists", "os.remove", "threading.enumerate", "sys.stderr.write", "multiprocessing.util.get_logger"], "multiprocessing.util.get_logger": [], "os.path.exists": [], "sys.stderr.write": [], "t.unit.conftest.find_distribution_modules": ["os.path.abspath", "<builtin>.len", "os.walk", "os.path.basename", "os.path.dirname", "os.path.join"], "os.path.basename": [], "os.walk": [], "<builtin>.UserWarning": [], "warnings.warn": [], "t.unit.conftest.sleepdeprived": [], "t.unit.conftest.mask_modules": [], "t.unit.conftest.mask_modules.myimp": ["builtins.__import__", "<builtin>.ImportError"], "t.unit.conftest.environ": ["os.environ.pop", "os.environ.get"], "t.unit.conftest.replace_module_value": ["<builtin>.setattr", "<builtin>.hasattr", "<builtin>.getattr", "<builtin>.delattr"], "<builtin>.setattr": [], "t.unit.conftest._restore_logging": ["logging.getLogger"], "t.unit.conftest.restore_logging": ["t.unit.conftest._restore_logging"], "t.unit.conftest.module": ["t.unit.conftest._module"], "t.unit.conftest._module": ["types.ModuleType.__init__"], "t.unit.conftest.module_context_manager": ["t.unit.conftest._module"], "t.unit.conftest._module.MockModule.__getattr__": ["<builtin>.setattr", "unittest.mock.Mock", "types.ModuleType.__getattribute__"], "types.ModuleType.__getattribute__": [], "t.unit.conftest._patching.__init__": [], "t.unit.conftest._patching.__getattr__": ["<builtin>.getattr"], "t.unit.conftest._patching.__call__": ["t.unit.conftest._patching._value_or_mock"], "t.unit.conftest._patching._value_or_mock": ["t.unit.conftest._patching.setattr", "unittest.mock.MagicMock"], "t.unit.conftest._patching.object": ["t.unit.conftest._wrap_context", "unittest.mock.patch.object"], "t.unit.conftest._wrap_context": [], "t.unit.conftest._patching.setattr": ["t.unit.conftest._patching.__init__"], "t.unit.conftest._patching.setitem": ["t.unit.conftest._patching._value_or_mock"], "t.unit.conftest._patching.modules": ["<builtin>.sorted", "<builtin>.set", "t.unit.conftest._wrap_context", "<builtin>.len", "<builtin>.range", "t.unit.conftest.module_context_manager", "<builtin>.reversed"], "<builtin>.reversed": [], "t.unit.conftest._wrap_context.fin": ["sys.exc_info"], "t.unit.conftest.patching": ["t.unit.conftest._patching.__init__"], "importlib.reload": [], "sys.modules.update": [], "logging.StreamHandler": [], "t.unit.conftest._mock_context": ["unittest.mock.Mock"], "t.unit.conftest._mock_context.on_exit": [], "t.unit.conftest.module_exists": ["sys.modules.pop", "types.ModuleType", "<builtin>.setattr", "<builtin>.isinstance"], "t.unit.conftest._bind": ["functools.wraps"], "functools.wraps": [], "t.unit.conftest._bind.bound_meth": [], "t.unit.conftest.MockCallbacks.__new__": ["unittest.mock.Mock", "<builtin>.vars", "t.unit.conftest._bind", "inspect.isfunction", "inspect.ismethod"], "<builtin>.vars": [], "inspect.ismethod": [], "inspect.isfunction": [], "t.unit.events.test_cursesmon": ["pytest.importorskip"], "t.unit.events.test_cursesmon.MockWindow.getmaxyx": [], "t.unit.events.test_cursesmon.test_CursesDisplay.setup_method": ["<builtin>.object", "celery.events.cursesmon.CursesMonitor"], "celery.events.cursesmon.CursesMonitor": [], "t.unit.events.test_cursesmon.test_CursesDisplay.test_format_row_with_default_widths": [], "t.unit.events.test_cursesmon.test_CursesDisplay.test_format_row_with_truncated_uuid": [], "t.unit.events.test_cursesmon.test_CursesDisplay.test_format_title_row": [], "t.unit.events.test_cursesmon.test_CursesDisplay.test_format_row_for_wide_screen_with_short_uuid": ["<builtin>.len"], "t.unit.events.test_state": [], "t.unit.events.test_state.replay.__init__": ["t.unit.events.test_state.ev_logical_clock_ordering.setup", "t.unit.events.test_state.ev_snapshot.setup", "t.unit.events.test_state.ev_worker_heartbeats.setup", "t.unit.events.test_state.replay.rewind", "t.unit.events.test_state.ev_worker_online_offline.setup", "t.unit.events.test_state.replay.setup", "t.unit.events.test_state.ev_task_states.setup"], "t.unit.events.test_state.replay.rewind": ["itertools.count"], "t.unit.events.test_state.ev_logical_clock_ordering.setup": ["t.unit.events.test_state.QTEV"], "t.unit.events.test_state.ev_worker_online_offline.setup": ["celery.events.Event"], "t.unit.events.test_state.replay.setup": [], "t.unit.events.test_state.ev_task_states.setup": ["celery.uuid", "celery.events.Event"], "t.unit.events.test_state.ev_snapshot.setup": ["celery.uuid", "celery.events.Event", "<builtin>.range"], "t.unit.events.test_state.ev_worker_heartbeats.setup": ["celery.events.Event", "time.time"], "t.unit.events.test_state.replay.next_event": ["t.unit.events.test_state.replay.__next__"], "t.unit.events.test_state.replay.__next__": ["t.unit.events.test_state.replay.next_event", "<builtin>.StopIteration"], "t.unit.events.test_state.replay.__iter__": [], "<builtin>.StopIteration": [], "itertools.count": [], "t.unit.events.test_state.replay.play": ["t.unit.events.test_state.replay.__next__", "t.unit.events.test_state.replay.__iter__"], "celery.events.Event": [], "time.time": [], "t.unit.events.test_state.QTEV": ["celery.events.Event", "time.time"], "t.unit.events.test_state.ev_logical_clock_ordering.__init__": ["t.unit.events.test_state.ev_logical_clock_ordering.setuids", "<builtin>.super"], "t.unit.events.test_state.ev_logical_clock_ordering.setuids": ["celery.uuid"], "t.unit.events.test_state.ev_logical_clock_ordering.rewind_with_offset": ["t.unit.events.test_state.ev_logical_clock_ordering.setuids", "t.unit.events.test_state.ev_logical_clock_ordering.setup", "t.unit.events.test_state.replay.rewind"], "t.unit.events.test_state.test_Worker.test_equality": ["<builtin>.hash", "celery.events.state.Worker"], "celery.events.state.Worker": [], "<builtin>.hash": [], "t.unit.events.test_state.test_Worker.test_heartbeat_expires__Decimal": ["celery.events.state.heartbeat_expires", "decimal.Decimal"], "celery.events.state.heartbeat_expires": [], "t.unit.events.test_state.test_Worker.test_compatible_with_Decimal": ["decimal.Decimal", "time.time", "celery.events.state.Worker"], "t.unit.events.test_state.test_Worker.test_eq_ne_other": ["<builtin>.object", "celery.events.state.Worker"], "t.unit.events.test_state.test_Worker.test_reduce_direct": ["celery.events.state.Worker"], "t.unit.events.test_state.test_Worker.test_update": ["celery.events.state.Worker"], "t.unit.events.test_state.test_Worker.test_survives_missing_timestamp": ["celery.events.state.Worker"], "t.unit.events.test_state.test_Worker.test_repr": ["<builtin>.repr", "celery.events.state.Worker"], "t.unit.events.test_state.test_Worker.test_drift_warning": ["unittest.mock.patch", "time.time", "celery.events.state.Worker"], "t.unit.events.test_state.test_Worker.test_updates_heartbeat": ["<builtin>.len", "time.time", "celery.events.state.Worker"], "t.unit.events.test_state.test_Task.test_equality": ["celery.events.state.Task", "<builtin>.hash"], "celery.events.state.Task": [], "t.unit.events.test_state.test_Task.test_info": ["<builtin>.sorted", "celery.events.state.Task", "time.time", "<builtin>.list"], "t.unit.events.test_state.test_Task.test_reduce_direct": ["celery.events.state.Task"], "t.unit.events.test_state.test_Task.test_ready": ["celery.events.state.Task", "time.time"], "t.unit.events.test_state.test_Task.test_sent": ["celery.events.state.Task", "time.time"], "t.unit.events.test_state.test_Task.test_merge": ["celery.events.state.Task", "time.time"], "t.unit.events.test_state.test_Task.test_repr": ["<builtin>.repr", "celery.events.state.Task"], "t.unit.events.test_state.test_State.test_repr": ["<builtin>.repr", "celery.events.state.State"], "celery.events.state.State": [], "t.unit.events.test_state.test_State.test_pickleable": ["celery.events.state.State", "t.unit.events.test_state.ev_logical_clock_ordering.__init__", "pickle.loads", "pickle.dumps", "t.unit.events.test_state.replay.play"], "t.unit.events.test_state.test_State.test_task_logical_clock_ordering": ["random.shuffle", "<builtin>.list", "celery.events.state.State", "t.unit.events.test_state.ev_logical_clock_ordering.__init__", "t.unit.events.test_state.ev_logical_clock_ordering.rewind_with_offset", "t.unit.events.test_state.replay.play", "<builtin>.range"], "t.unit.events.test_state.test_State": ["pytest.mark.skip"], "t.unit.events.test_state.test_State.test_task_descending_clock_ordering": ["random.shuffle", "<builtin>.list", "celery.events.state.State", "t.unit.events.test_state.ev_logical_clock_ordering.__init__", "t.unit.events.test_state.ev_logical_clock_ordering.rewind_with_offset", "t.unit.events.test_state.replay.play", "<builtin>.range"], "t.unit.events.test_state.test_State.test_get_or_create_task": ["celery.events.state.State"], "t.unit.events.test_state.test_State.test_get_or_create_worker": ["celery.events.state.State"], "t.unit.events.test_state.test_State.test_get_or_create_worker__with_defaults": ["celery.events.state.State"], "t.unit.events.test_state.test_State.test_worker_online_offline": ["<builtin>.list", "celery.events.state.State", "t.unit.events.test_state.replay.play", "<builtin>.next", "t.unit.events.test_state.replay.__init__"], "t.unit.events.test_state.test_State.test_itertasks": ["<builtin>.len", "<builtin>.list", "celery.events.state.State"], "t.unit.events.test_state.test_State.test_worker_heartbeat_expire": ["<builtin>.list", "celery.events.state.State", "t.unit.events.test_state.replay.play", "<builtin>.next", "t.unit.events.test_state.replay.__init__"], "t.unit.events.test_state.test_State.test_task_states": ["t.unit.events.test_state.replay.play", "<builtin>.next", "t.unit.events.test_state.replay.__init__", "celery.events.state.State"], "t.unit.events.test_state.test_State.test_task_children_set_if_received_in_wrong_order": ["t.unit.events.test_state.replay.play", "t.unit.events.test_state.replay.__init__", "celery.events.state.State"], "t.unit.events.test_state.test_State.assertStateEmpty": [], "t.unit.events.test_state.test_State.assertState": [], "t.unit.events.test_state.test_State.test_freeze_while": ["t.unit.events.test_state.replay.play", "t.unit.events.test_state.replay.__init__", "celery.events.state.State"], "t.unit.events.test_state.test_State.test_freeze_while.work": [], "t.unit.events.test_state.test_State.test_clear_tasks": ["t.unit.events.test_state.replay.play", "t.unit.events.test_state.replay.__init__", "celery.events.state.State"], "t.unit.events.test_state.test_State.test_clear": ["t.unit.events.test_state.replay.play", "t.unit.events.test_state.replay.__init__", "celery.events.state.State"], "t.unit.events.test_state.test_State.test_task_types": ["t.unit.events.test_state.replay.play", "<builtin>.sorted", "t.unit.events.test_state.replay.__init__", "celery.events.state.State"], "t.unit.events.test_state.test_State.test_tasks_by_time": ["<builtin>.list", "celery.events.state.State", "<builtin>.len", "t.unit.events.test_state.replay.play", "t.unit.events.test_state.replay.__init__"], "t.unit.events.test_state.test_State.test_tasks_by_type": ["<builtin>.list", "celery.events.state.State", "<builtin>.len", "t.unit.events.test_state.replay.play", "t.unit.events.test_state.replay.__init__"], "t.unit.events.test_state.test_State.test_alive_workers": ["<builtin>.list", "celery.events.state.State", "<builtin>.len", "t.unit.events.test_state.replay.play", "t.unit.events.test_state.replay.__init__"], "t.unit.events.test_state.test_State.test_tasks_by_worker": ["<builtin>.list", "celery.events.state.State", "<builtin>.len", "t.unit.events.test_state.replay.play", "t.unit.events.test_state.replay.__init__"], "t.unit.events.test_state.test_State.test_survives_unknown_worker_event": ["celery.events.state.State"], "t.unit.events.test_state.test_State.test_survives_unknown_worker_leaving": ["celery.events.state.Worker", "unittest.mock.Mock", "celery.events.state.State"], "t.unit.events.test_state.test_State.test_on_node_join_callback": ["unittest.mock.Mock", "celery.events.state.State"], "t.unit.events.test_state.test_State.test_survives_unknown_task_event": ["celery.events.state.State"], "t.unit.events.test_state.test_State.test_limits_maxtasks": ["<builtin>.len", "<builtin>.list", "celery.events.state.State"], "t.unit.events.test_state.test_State.test_callback": ["celery.events.state.State"], "t.unit.events.test_state.test_State.test_callback.callback": [], "t.unit.events.test_state.test_State.test_deepcopy": ["copy.deepcopy", "celery.events.state.State"], "t.unit.events": [], "t.unit.events.test_events": [], "t.unit.events.test_events.MockProducer.__init__": [], "t.unit.events.test_events.MockProducer.publish": ["<builtin>.KeyError"], "t.unit.events.test_events.MockProducer.close": [], "t.unit.events.test_events.MockProducer.has_event": [], "t.unit.events.test_events.test_Event": ["celery.events.Event"], "t.unit.events.test_events.test_EventDispatcher.test_redis_uses_fanout_exchange": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventDispatcher.test_others_use_topic_exchange": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventDispatcher.test_takes_channel_connection": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventDispatcher.test_sql_transports_disabled": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventDispatcher.test_send": ["t.unit.events.test_events.MockProducer.has_event", "pytest.raises", "t.unit.events.test_events.MockProducer.__init__", "unittest.mock.Mock"], "t.unit.events.test_events.test_EventDispatcher.test_send_buffer_group": ["<builtin>.len", "t.unit.events.test_events.MockProducer.__init__", "unittest.mock.Mock"], "t.unit.events.test_events.test_EventDispatcher.test_send_buffer_group.on_eventer_publish": ["<builtin>.list"], "t.unit.events.test_events.test_EventDispatcher.test_flush_no_groups_no_errors": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventDispatcher.test_enter_exit": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventDispatcher.test_enable_disable_callbacks": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventDispatcher.test_enabled_disable": [], "t.unit.events.test_events.test_EventReceiver.test_process": ["<builtin>.object", "unittest.mock.Mock"], "t.unit.events.test_events.test_EventReceiver.test_process.my_handler": [], "t.unit.events.test_events.test_EventReceiver.test_accept_argument": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventReceiver.test_event_queue_prefix__default": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventReceiver.test_event_queue_prefix__setting": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventReceiver.test_event_queue_prefix__argument": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventReceiver.test_event_exchange__default": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventReceiver.test_event_exchange__setting": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventReceiver.test_catch_all_event": ["<builtin>.object", "unittest.mock.Mock"], "t.unit.events.test_events.test_EventReceiver.test_catch_all_event.my_handler": [], "t.unit.events.test_events.test_EventReceiver.test_itercapture": ["<builtin>.next", "pytest.raises"], "t.unit.events.test_events.test_EventReceiver.test_event_from_message_localize_disabled": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventReceiver.test_event_from_message_clock_from_client": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventReceiver.test_receive_multi": ["unittest.mock.Mock"], "t.unit.events.test_events.test_EventReceiver.test_receive_multi.on_efm": [], "t.unit.events.test_events.test_EventReceiver.test_itercapture_limit": ["<builtin>.next", "<builtin>.list"], "t.unit.events.test_events.test_EventReceiver.test_itercapture_limit.handler": [], "t.unit.events.test_events.test_State": ["<builtin>.dict"], "t.unit.events.test_events.test_default_dispatcher": [], "t.unit.events.test_snapshot": [], "t.unit.events.test_snapshot.MockTimer.call_repeatedly": ["unittest.mock.Mock"], "t.unit.events.test_snapshot.test_Polaroid.setup_method": [], "t.unit.events.test_snapshot.test_Polaroid.test_constructor": ["celery.events.snapshot.Polaroid"], "celery.events.snapshot.Polaroid": [], "t.unit.events.test_snapshot.test_Polaroid.test_install_timers": ["celery.events.snapshot.Polaroid"], "t.unit.events.test_snapshot.test_Polaroid.test_cleanup": ["celery.events.snapshot.Polaroid"], "t.unit.events.test_snapshot.test_Polaroid.test_cleanup.handler": [], "t.unit.events.test_snapshot.test_Polaroid.test_shutter__capture": ["celery.events.snapshot.Polaroid"], "t.unit.events.test_snapshot.test_Polaroid.test_shutter__capture.handler": [], "t.unit.events.test_snapshot.test_Polaroid.test_shutter_maxrate": ["celery.events.snapshot.Polaroid", "<builtin>.range"], "t.unit.events.test_snapshot.test_Polaroid.test_shutter_maxrate.handler": [], "t.unit.events.test_snapshot.test_evcam.MockReceiver.capture": ["<builtin>.KeyboardInterrupt"], "<builtin>.KeyboardInterrupt": [], "t.unit.events.test_snapshot.test_evcam.MockEvents.Receiver": [], "t.unit.events.test_snapshot.test_evcam.setup_method": ["celery.app.events.Events.__init__"], "celery.app.events.Events.__init__": [], "t.unit.events.test_snapshot.test_evcam.test_evcam": ["celery.events.snapshot.evcam", "pytest.raises"], "celery.events.snapshot.evcam": [], "t.unit.events.test_snapshot.test_evcam": ["unittest.mock.patch"], "t.unit.events.test_snapshot.test_evcam.test_evcam_pidfile": ["celery.events.snapshot.evcam"], "t.unit.concurrency.test_thread": [], "t.unit.concurrency.test_thread.test_thread_TaskPool.test_on_apply": ["celery.concurrency.thread.TaskPool"], "celery.concurrency.thread.TaskPool": [], "t.unit.concurrency.test_thread.test_thread_TaskPool.test_info": ["celery.concurrency.thread.TaskPool"], "t.unit.concurrency.test_thread.test_thread_TaskPool.test_on_stop": ["pytest.raises", "celery.concurrency.thread.TaskPool"], "t.unit.concurrency": [], "t.unit.concurrency.test_solo": [], "t.unit.concurrency.test_solo.test_solo_TaskPool.test_on_start": ["celery.concurrency.solo.TaskPool"], "celery.concurrency.solo.TaskPool": [], "t.unit.concurrency.test_solo.test_solo_TaskPool.test_on_apply": ["celery.concurrency.solo.TaskPool"], "t.unit.concurrency.test_solo.test_solo_TaskPool.test_info": ["celery.concurrency.solo.TaskPool"], "t.unit.concurrency.test_solo.test_solo_TaskPool.test_on_worker_process_init_called": ["celery.concurrency.solo.TaskPool", "celery.signals.worker_process_init.connect", "unittest.mock.Mock"], "celery.signals.worker_process_init.connect": [], "t.unit.concurrency.test_pool": ["pytest.importorskip"], "t.unit.concurrency.test_pool.do_something": [], "t.unit.concurrency.test_pool.long_something": ["time.sleep"], "t.unit.concurrency.test_pool.raise_something": ["<builtin>.KeyError", "billiard.einfo.ExceptionInfo"], "t.unit.concurrency.test_pool.test_TaskPool.setup_method": [], "t.unit.concurrency.test_pool.test_TaskPool.test_attrs": ["celery.concurrency.prefork.TaskPool"], "celery.concurrency.prefork.TaskPool": [], "t.unit.concurrency.test_pool.test_TaskPool.x_apply": ["celery.concurrency.prefork.TaskPool", "<builtin>.isinstance", "time.sleep", "itertools.count"], "t.unit.concurrency.test_pool.test_TaskPool.x_apply.mycallback": ["<builtin>.next"], "t.unit.concurrency.test_concurrency": [], "t.unit.concurrency.test_concurrency.test_BasePool.test_apply_target": ["os.getpid", "celery.concurrency.base.apply_target", "t.unit.concurrency.test_concurrency.test_BasePool.test_apply_target.gen_callback", "itertools.count"], "t.unit.concurrency.test_concurrency.test_BasePool.test_apply_target.gen_callback": [], "t.unit.concurrency.test_concurrency.test_BasePool.test_apply_target.gen_callback.callback": ["<builtin>.next"], "celery.concurrency.base.apply_target": [], "os.getpid": [], "t.unit.concurrency.test_concurrency.test_BasePool.test_apply_target__propagate": ["celery.concurrency.base.apply_target", "pytest.raises", "unittest.mock.Mock", "<builtin>.KeyError"], "t.unit.concurrency.test_concurrency.test_BasePool.test_apply_target__raises": ["celery.concurrency.base.apply_target", "pytest.raises", "unittest.mock.Mock", "<builtin>.KeyError"], "t.unit.concurrency.test_concurrency.test_BasePool.test_apply_target__raises_WorkerShutdown": ["celery.exceptions.WorkerShutdown", "celery.concurrency.base.apply_target", "pytest.raises", "unittest.mock.Mock"], "celery.exceptions.WorkerShutdown": [], "t.unit.concurrency.test_concurrency.test_BasePool.test_apply_target__raises_WorkerTerminate": ["celery.exceptions.WorkerTerminate", "celery.concurrency.base.apply_target", "pytest.raises", "unittest.mock.Mock"], "celery.exceptions.WorkerTerminate": [], "t.unit.concurrency.test_concurrency.test_BasePool.test_apply_target__raises_BaseException": ["celery.concurrency.base.apply_target", "unittest.mock.Mock", "<builtin>.BaseException"], "t.unit.concurrency.test_concurrency.test_BasePool": ["unittest.mock.patch"], "t.unit.concurrency.test_concurrency.test_BasePool.test_apply_target__raises_BaseException_raises_else": ["celery.concurrency.base.apply_target", "unittest.mock.Mock", "<builtin>.KeyError", "<builtin>.BaseException", "pytest.raises"], "t.unit.concurrency.test_concurrency.test_BasePool.test_does_not_debug": ["celery.concurrency.base.BasePool"], "celery.concurrency.base.BasePool": [], "t.unit.concurrency.test_concurrency.test_BasePool.test_num_processes": ["celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_interface_on_start": ["celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_interface_on_stop": ["celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_interface_on_apply": ["celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_interface_info": ["celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_interface_flush": ["celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_active": ["celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_restart": ["pytest.raises", "celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_interface_on_terminate": ["celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_interface_terminate_job": ["pytest.raises", "celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_interface_did_start_ok": ["celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_interface_register_with_event_loop": ["unittest.mock.Mock", "celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_interface_on_soft_timeout": ["unittest.mock.Mock", "celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_interface_on_hard_timeout": ["unittest.mock.Mock", "celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_interface_close": ["unittest.mock.Mock", "celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_BasePool.test_interface_no_close": ["celery.concurrency.base.BasePool"], "t.unit.concurrency.test_concurrency.test_get_available_pool_names.test_no_concurrent_futures__returns_no_threads_pool_name": ["importlib.reload", "unittest.mock.patch.dict", "celery.concurrency.get_available_pool_names"], "unittest.mock.patch.dict": [], "celery.concurrency.get_available_pool_names": [], "t.unit.concurrency.test_concurrency.test_get_available_pool_names.test_concurrent_futures__returns_threads_pool_name": ["importlib.reload", "unittest.mock.patch.dict", "unittest.mock.Mock", "celery.concurrency.get_available_pool_names"], "t.unit.concurrency.test_gevent": [], "t.unit.concurrency.test_gevent.test_gevent_patch.test_is_patched": ["celery.maybe_patch_concurrency"], "celery.maybe_patch_concurrency": [], "t.unit.concurrency.test_gevent.test_Timer.setup_method": [], "t.unit.concurrency.test_gevent.test_Timer.test_sched": ["celery.concurrency.gevent.Timer", "<builtin>.KeyError", "unittest.mock.Mock"], "celery.concurrency.gevent.Timer": [], "t.unit.concurrency.test_gevent.test_TaskPool.setup_method": [], "t.unit.concurrency.test_gevent.test_TaskPool.test_pool": ["celery.concurrency.gevent.TaskPool", "unittest.mock.Mock"], "celery.concurrency.gevent.TaskPool": [], "t.unit.concurrency.test_gevent.test_apply_timeout.test_apply_timeout": ["t.unit.concurrency.test_gevent.test_apply_timeout.test_apply_timeout.Timeout.__init__", "celery.concurrency.gevent.apply_timeout", "unittest.mock.Mock"], "t.unit.concurrency.test_gevent.test_apply_timeout.test_apply_timeout.Timeout.__init__": [], "t.unit.concurrency.test_gevent.test_apply_timeout.test_apply_timeout.Timeout.__enter__": [], "t.unit.concurrency.test_gevent.test_apply_timeout.test_apply_timeout.Timeout.__exit__": [], "celery.concurrency.gevent.apply_timeout": [], "t.unit.concurrency.test_eventlet": ["pytest.importorskip"], "t.unit.concurrency.test_eventlet.EventletCase.setup_method": [], "t.unit.concurrency.test_eventlet.EventletCase.teardown_method": [], "t.unit.concurrency.test_eventlet.test_aaa_eventlet_patch.test_aaa_is_patched": ["unittest.mock.patch", "celery.maybe_patch_concurrency"], "t.unit.concurrency.test_eventlet.test_aaa_eventlet_patch": ["unittest.mock.patch"], "t.unit.concurrency.test_eventlet.test_aaa_eventlet_patch.test_aaa_blockdetecet": ["celery.maybe_patch_concurrency"], "t.unit.concurrency.test_eventlet.test_Timer": ["pytest.fixture"], "t.unit.concurrency.test_eventlet.test_Timer.setup_patches": [], "t.unit.concurrency.test_eventlet.test_Timer.test_sched": ["<builtin>.KeyError", "unittest.mock.Mock", "celery.concurrency.eventlet.Timer"], "celery.concurrency.eventlet.Timer": [], "t.unit.concurrency.test_eventlet.test_Timer.test_cancel": ["<builtin>.KeyError", "unittest.mock.Mock", "celery.concurrency.eventlet.Timer"], "t.unit.concurrency.test_eventlet.test_TaskPool": ["unittest.mock.patch", "pytest.fixture"], "t.unit.concurrency.test_eventlet.test_TaskPool.setup_patches": [], "t.unit.concurrency.test_eventlet.test_TaskPool.test_pool": ["<builtin>.len", "unittest.mock.Mock", "celery.concurrency.eventlet.TaskPool"], "celery.concurrency.eventlet.TaskPool": [], "t.unit.concurrency.test_eventlet.test_TaskPool.test_apply_target": ["unittest.mock.Mock", "celery.concurrency.eventlet.apply_target"], "celery.concurrency.eventlet.apply_target": [], "t.unit.concurrency.test_eventlet.test_TaskPool.test_grow": ["unittest.mock.Mock", "celery.concurrency.eventlet.TaskPool"], "t.unit.concurrency.test_eventlet.test_TaskPool.test_shrink": ["unittest.mock.Mock", "celery.concurrency.eventlet.TaskPool"], "t.unit.concurrency.test_eventlet.test_TaskPool.test_get_info": ["unittest.mock.Mock", "celery.concurrency.eventlet.TaskPool"], "t.unit.concurrency.test_eventlet.test_TaskPool.test_terminate_job": ["<builtin>.len", "unittest.mock.Mock", "<builtin>.list", "celery.concurrency.eventlet.TaskPool"], "t.unit.concurrency.test_eventlet.test_TaskPool.test_make_killable_target": ["celery.concurrency.eventlet.TaskPool._make_killable_target"], "t.unit.concurrency.test_eventlet.test_TaskPool.test_make_killable_target.valid_target": [], "t.unit.concurrency.test_eventlet.test_TaskPool.test_make_killable_target.terminating_target": ["greenlet.GreenletExit"], "greenlet.GreenletExit": [], "celery.concurrency.eventlet.TaskPool._make_killable_target": [], "t.unit.concurrency.test_eventlet.test_TaskPool.test_cleanup_after_job_finish": ["celery.concurrency.eventlet.TaskPool._cleanup_after_job_finish", "<builtin>.len"], "celery.concurrency.eventlet.TaskPool._cleanup_after_job_finish": [], "t.unit.concurrency.test_prefork": [], "t.unit.concurrency.test_prefork._mp.TaskPool": ["unittest.mock.Mock"], "t.unit.concurrency.test_prefork._mp.TaskPool.__init__": [], "t.unit.concurrency.test_prefork._mp.TaskPool.start": [], "t.unit.concurrency.test_prefork._mp.TaskPool.stop": [], "t.unit.concurrency.test_prefork._mp.TaskPool.apply_async": [], "t.unit.concurrency.test_prefork.MockResult.__init__": [], "t.unit.concurrency.test_prefork.MockResult.worker_pids": [], "t.unit.concurrency.test_prefork.MockResult.get": [], "t.unit.concurrency.test_prefork.test_process_initializer.Loader": ["unittest.mock.Mock"], "t.unit.concurrency.test_prefork.test_process_initializer": ["unittest.mock.patch"], "t.unit.concurrency.test_prefork.test_process_initializer.test_process_initializer": ["celery.utils.collections.AttributeDict", "unittest.mock.patch", "unittest.mock.Mock", "os.environ.pop", "celery.signals.worker_process_init.connect", "celery.concurrency.prefork.process_initializer"], "celery.concurrency.prefork.process_initializer": [], "t.unit.concurrency.test_prefork.test_process_initializer.test_pdeath_sig": ["celery.utils.collections.AttributeDict", "celery.signals.worker_process_init.connect", "unittest.mock.Mock", "celery.concurrency.prefork.process_initializer"], "t.unit.concurrency.test_prefork.test_process_destructor": ["unittest.mock.patch"], "t.unit.concurrency.test_prefork.test_process_destructor.test_process_destructor": ["celery.concurrency.prefork.process_destructor"], "celery.concurrency.prefork.process_destructor": [], "t.unit.concurrency.test_prefork.MockPool.__init__": ["itertools.cycle", "<builtin>.range", "unittest.mock.Mock", "celery.utils.objects.Bunch"], "t.unit.concurrency.test_prefork.MockPool.close": [], "t.unit.concurrency.test_prefork.MockPool.join": [], "t.unit.concurrency.test_prefork.MockPool.terminate": [], "t.unit.concurrency.test_prefork.MockPool.terminate_job": [], "t.unit.concurrency.test_prefork.MockPool.restart": [], "t.unit.concurrency.test_prefork.MockPool.handle_result_event": [], "t.unit.concurrency.test_prefork.MockPool.flush": [], "t.unit.concurrency.test_prefork.MockPool.grow": [], "t.unit.concurrency.test_prefork.MockPool.shrink": [], "t.unit.concurrency.test_prefork.MockPool.apply_async": [], "t.unit.concurrency.test_prefork.MockPool.register_with_event_loop": [], "t.unit.concurrency.test_prefork.ExeMockPool.apply_async": ["<builtin>.next", "threading.Timer", "t.unit.concurrency.test_prefork.MockResult.__init__"], "threading.Timer": [], "t.unit.concurrency.test_prefork.test_AsynPool.setup_method": ["pytest.importorskip"], "t.unit.concurrency.test_prefork.test_AsynPool.test_gen_not_started": ["t.unit.concurrency.test_prefork.test_AsynPool.test_gen_not_started.gen2", "<builtin>.list", "t.unit.concurrency.test_prefork.test_AsynPool.test_gen_not_started.gen", "pytest.raises", "celery.concurrency.asynpool.gen_not_started", "<builtin>.next"], "t.unit.concurrency.test_prefork.test_AsynPool.test_gen_not_started.gen": ["celery.concurrency.asynpool.gen_not_started"], "celery.concurrency.asynpool.gen_not_started": [], "t.unit.concurrency.test_prefork.test_AsynPool.test_gen_not_started.gen2": ["<builtin>.RuntimeError"], "t.unit.concurrency.test_prefork.test_AsynPool": ["unittest.mock.patch"], "t.unit.concurrency.test_prefork.test_AsynPool.test_select": ["unittest.mock.patch", "unittest.mock.Mock", "<builtin>.set", "socket.error", "celery.concurrency.asynpool._select", "pytest.raises", "<builtin>.MemoryError"], "socket.error": [], "celery.concurrency.asynpool._select": [], "<builtin>.MemoryError": [], "t.unit.concurrency.test_prefork.test_AsynPool.test_select.se": ["<builtin>.MemoryError"], "t.unit.concurrency.test_prefork.test_AsynPool.test_select.se2": ["socket.error"], "t.unit.concurrency.test_prefork.test_AsynPool.test_promise": ["celery.concurrency.asynpool.promise", "unittest.mock.Mock"], "celery.concurrency.asynpool.promise": [], "t.unit.concurrency.test_prefork.test_AsynPool.test_Worker": ["celery.concurrency.asynpool.Worker", "unittest.mock.Mock"], "celery.concurrency.asynpool.Worker": [], "t.unit.concurrency.test_prefork.test_AsynPool.test_iterate_file_descriptors_safely_source_data_list": ["celery.concurrency.asynpool.iterate_file_descriptors_safely"], "t.unit.concurrency.test_prefork.test_AsynPool.test_iterate_file_descriptors_safely_source_data_list._fake_hub": [], "celery.concurrency.asynpool.iterate_file_descriptors_safely": [], "t.unit.concurrency.test_prefork.test_AsynPool.test_iterate_file_descriptors_safely_source_data_set": ["celery.concurrency.asynpool.iterate_file_descriptors_safely", "<builtin>.set"], "t.unit.concurrency.test_prefork.test_AsynPool.test_iterate_file_descriptors_safely_source_data_set._fake_hub": [], "t.unit.concurrency.test_prefork.test_AsynPool.test_iterate_file_descriptors_safely_source_data_dict": ["celery.concurrency.asynpool.iterate_file_descriptors_safely"], "t.unit.concurrency.test_prefork.test_AsynPool.test_iterate_file_descriptors_safely_source_data_dict._fake_hub": [], "t.unit.concurrency.test_prefork.test_AsynPool.test_register_with_event_loop__no_on_tick_dupes": ["celery.concurrency.asynpool.AsynPool", "unittest.mock.Mock"], "celery.concurrency.asynpool.AsynPool": [], "t.unit.concurrency.test_prefork.test_ResultHandler.setup_method": ["pytest.importorskip"], "t.unit.concurrency.test_prefork.test_ResultHandler.test_process_result": ["celery.concurrency.asynpool.ResultHandler", "<builtin>.iter", "unittest.mock.Mock"], "celery.concurrency.asynpool.ResultHandler": [], "t.unit.concurrency.test_prefork.test_TaskPool.test_start": ["t.unit.concurrency.test_prefork._mp.TaskPool.stop", "t.unit.concurrency.test_prefork._mp.TaskPool.__init__", "celery.concurrency.prefork.TaskPool.terminate", "t.unit.concurrency.test_prefork._mp.TaskPool.start"], "celery.concurrency.prefork.TaskPool.terminate": [], "t.unit.concurrency.test_prefork.test_TaskPool.test_restart": ["celery.concurrency.prefork.TaskPool.restart", "t.unit.concurrency.test_prefork._mp.TaskPool.__init__", "unittest.mock.Mock"], "celery.concurrency.prefork.TaskPool.restart": [], "t.unit.concurrency.test_prefork.test_TaskPool.test_did_start_ok": ["t.unit.concurrency.test_prefork._mp.TaskPool.__init__", "unittest.mock.Mock", "celery.concurrency.prefork.TaskPool.did_start_ok"], "celery.concurrency.prefork.TaskPool.did_start_ok": [], "t.unit.concurrency.test_prefork.test_TaskPool.test_register_with_event_loop": ["t.unit.concurrency.test_prefork._mp.TaskPool.__init__", "celery.concurrency.prefork.TaskPool.register_with_event_loop", "unittest.mock.Mock"], "celery.concurrency.prefork.TaskPool.register_with_event_loop": [], "t.unit.concurrency.test_prefork.test_TaskPool.test_on_close": ["t.unit.concurrency.test_prefork._mp.TaskPool.__init__", "celery.concurrency.prefork.TaskPool.on_close", "unittest.mock.Mock"], "celery.concurrency.prefork.TaskPool.on_close": [], "t.unit.concurrency.test_prefork.test_TaskPool.test_on_close__pool_not_running": ["t.unit.concurrency.test_prefork._mp.TaskPool.__init__", "celery.concurrency.prefork.TaskPool.on_close", "unittest.mock.Mock"], "t.unit.concurrency.test_prefork.test_TaskPool.test_apply_async": ["t.unit.concurrency.test_prefork._mp.TaskPool.apply_async", "t.unit.concurrency.test_prefork._mp.TaskPool.__init__", "t.unit.concurrency.test_prefork._mp.TaskPool.start"], "t.unit.concurrency.test_prefork.test_TaskPool.test_apply_async.<lambda1>": [], "t.unit.concurrency.test_prefork.test_TaskPool.test_grow_shrink": ["t.unit.concurrency.test_prefork._mp.TaskPool.__init__", "celery.concurrency.prefork.TaskPool.grow", "t.unit.concurrency.test_prefork._mp.TaskPool.start", "celery.concurrency.prefork.TaskPool.shrink"], "celery.concurrency.prefork.TaskPool.grow": [], "celery.concurrency.prefork.TaskPool.shrink": [], "t.unit.concurrency.test_prefork.test_TaskPool.test_info": ["t.unit.concurrency.test_prefork._mp.TaskPool.__init__", "<builtin>.range", "celery.utils.objects.Bunch"], "t.unit.concurrency.test_prefork.test_TaskPool.test_info._Pool.human_write_stats": [], "t.unit.concurrency.test_prefork.test_TaskPool.test_num_processes": ["t.unit.concurrency.test_prefork._mp.TaskPool.__init__", "t.unit.concurrency.test_prefork._mp.TaskPool.start"], "t.unit.concurrency.test_prefork.test_TaskPool": ["unittest.mock.patch"], "t.unit.concurrency.test_prefork.test_TaskPool.test_on_start_proc_alive_timeout_default": ["celery.utils.collections.AttributeDict", "unittest.mock.Mock", "celery.concurrency.prefork.TaskPool.on_start", "t.unit.concurrency.test_prefork._mp.TaskPool.__init__"], "celery.concurrency.prefork.TaskPool.on_start": [], "t.unit.concurrency.test_prefork.test_TaskPool.test_on_start_proc_alive_timeout_custom": ["celery.utils.collections.AttributeDict", "unittest.mock.Mock", "celery.concurrency.prefork.TaskPool.on_start", "t.unit.concurrency.test_prefork._mp.TaskPool.__init__"], "t.unit.worker.test_consumer": [], "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer": ["t.unit.worker.test_consumer._amqp_connection", "unittest.mock.Mock", "celery.worker.consumer.consumer.Consumer"], "celery.worker.consumer.consumer.Consumer": [], "t.unit.worker.test_consumer._amqp_connection": ["celery.contrib.testing.mocks.ContextMock"], "t.unit.worker.test_consumer.test_Consumer.setup_method": [], "t.unit.worker.test_consumer.test_Consumer.setup_method.add": [], "t.unit.worker.test_consumer.test_Consumer.test_repr": ["<builtin>.repr", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer"], "t.unit.worker.test_consumer.test_Consumer.test_taskbuckets_defaultdict": ["t.unit.worker.test_consumer.ConsumerTestCase.get_consumer"], "t.unit.worker.test_consumer.test_Consumer.test_sets_heartbeat": ["t.unit.worker.test_consumer.ConsumerTestCase.get_consumer"], "t.unit.worker.test_consumer.test_Consumer.test_gevent_bug_disables_connection_timeout": ["unittest.mock.patch", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer"], "t.unit.worker.test_consumer.test_Consumer.test_limit_moved_to_pool": ["unittest.mock.patch", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "unittest.mock.Mock"], "t.unit.worker.test_consumer.test_Consumer.test_update_prefetch_count": ["t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "unittest.mock.Mock"], "t.unit.worker.test_consumer.test_Consumer": ["unittest.mock.patch", "pytest.mark.parametrize"], "t.unit.worker.test_consumer.test_Consumer.test_restore_prefetch_count_on_restart": ["t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "unittest.mock.Mock", "<builtin>.range"], "t.unit.worker.test_consumer.test_Consumer.test_restore_prefetch_count_on_restart.bp_start": [], "t.unit.worker.test_consumer.test_Consumer.test_create_task_handler": ["t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "unittest.mock.MagicMock"], "t.unit.worker.test_consumer.test_Consumer.test_create_task_handler.raise_exception": ["<builtin>.KeyError"], "t.unit.worker.test_consumer.test_Consumer.test_create_task_handler.strategy": [], "t.unit.worker.test_consumer.test_Consumer.test_flush_events": ["t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "unittest.mock.Mock"], "t.unit.worker.test_consumer.test_Consumer.test_on_send_event_buffered": ["t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "unittest.mock.Mock"], "t.unit.worker.test_consumer.test_Consumer.test_schedule_bucket_request": ["unittest.mock.patch", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "unittest.mock.Mock", "collections.deque"], "t.unit.worker.test_consumer.test_Consumer.test_schedule_bucket_request.<lambda1>": [], "collections.deque": [], "t.unit.worker.test_consumer.test_Consumer.test_limit_task": ["unittest.mock.patch", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "unittest.mock.Mock"], "t.unit.worker.test_consumer.test_Consumer.test_post_eta": ["unittest.mock.patch", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "unittest.mock.Mock"], "t.unit.worker.test_consumer.test_Consumer.test_max_restarts_exceeded": ["unittest.mock.patch", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "socket.error"], "t.unit.worker.test_consumer.test_Consumer.test_max_restarts_exceeded.se": ["billiard.exceptions.RestartFreqExceeded"], "billiard.exceptions.RestartFreqExceeded": [], "t.unit.worker.test_consumer.test_Consumer.test_do_not_restart_when_closed": ["unittest.mock.patch", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer"], "t.unit.worker.test_consumer.test_Consumer.test_do_not_restart_when_closed.bp_start": [], "t.unit.worker.test_consumer.test_Consumer.test_do_not_restart_when_terminated": ["unittest.mock.patch", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer"], "t.unit.worker.test_consumer.test_Consumer.test_do_not_restart_when_terminated.bp_start": [], "t.unit.worker.test_consumer.test_Consumer.test_too_many_open_files_raises_error": ["<builtin>.OSError", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "pytest.raises"], "t.unit.worker.test_consumer.test_Consumer._closer": [], "t.unit.worker.test_consumer.test_Consumer._closer.se": [], "t.unit.worker.test_consumer.test_Consumer.test_blueprint_restart_when_state_not_in_stop_conditions": ["t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "t.unit.worker.test_consumer.test_Consumer._closer", "<builtin>.ConnectionError"], "<builtin>.ConnectionError": [], "t.unit.worker.test_consumer.test_Consumer.test_blueprint_restart_for_channel_errors": ["t.unit.worker.test_consumer.test_Consumer._closer", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "pytest.raises", "amqp.ChannelError"], "t.unit.worker.test_consumer.test_Consumer.test_collects_at_restart": ["t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "<builtin>.MemoryError", "t.unit.worker.test_consumer.test_Consumer._closer", "socket.error"], "t.unit.worker.test_consumer.test_Consumer.test_register_with_event_loop": ["t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "unittest.mock.Mock"], "t.unit.worker.test_consumer.test_Consumer.test_on_close_clears_semaphore_timer_and_reqs": ["unittest.mock.patch", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer"], "t.unit.worker.test_consumer.test_Consumer.test_connect_error_handler": ["t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "unittest.mock.Mock", "t.unit.worker.test_consumer._amqp_connection"], "t.unit.worker.test_consumer.test_Consumer.test_connect_error_handler_progress": ["t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "unittest.mock.Mock", "t.unit.worker.test_consumer._amqp_connection"], "t.unit.worker.test_consumer.test_Consumer.test_cancel_long_running_tasks_on_connection_loss": ["celery.worker.state.active_requests.clear", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "celery.worker.state.active_requests.add", "unittest.mock.Mock"], "celery.worker.state.active_requests.add": [], "celery.worker.state.active_requests.clear": [], "t.unit.worker.test_consumer.test_Consumer.test_cancel_long_running_tasks_on_connection_loss__warning": ["pytest.deprecated_call", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "unittest.mock.Mock"], "pytest.deprecated_call": [], "t.unit.worker.test_consumer.test_Consumer.test_ensure_connected": ["pytest.deprecated_call", "unittest.mock.Mock", "<builtin>.ConnectionError", "t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "pytest.raises"], "t.unit.worker.test_consumer.test_Consumer_WorkerShutdown.test_start_raises_connection_error": ["t.unit.worker.test_consumer.ConsumerTestCase.get_consumer", "pytest.raises", "<builtin>.ConnectionError"], "t.unit.worker.test_consumer.test_Heart.test_start": ["celery.worker.consumer.heart.Heart", "unittest.mock.patch", "unittest.mock.Mock"], "celery.worker.consumer.heart.Heart": [], "t.unit.worker.test_consumer.test_Heart.test_start_heartbeat_interval": ["celery.worker.consumer.heart.Heart", "unittest.mock.patch", "unittest.mock.Mock"], "t.unit.worker.test_consumer.test_Tasks.test_stop": ["celery.worker.consumer.tasks.Tasks", "unittest.mock.Mock"], "celery.worker.consumer.tasks.Tasks": [], "t.unit.worker.test_consumer.test_Tasks.test_stop_already_stopped": ["celery.worker.consumer.tasks.Tasks", "unittest.mock.Mock"], "t.unit.worker.test_consumer.test_Agent.test_start": ["celery.worker.consumer.agent.Agent", "unittest.mock.Mock"], "celery.worker.consumer.agent.Agent": [], "t.unit.worker.test_consumer.test_Mingle.test_start_no_replies": ["unittest.mock.Mock", "t.unit.worker.test_consumer._amqp_connection", "celery.worker.consumer.mingle.Mingle"], "celery.worker.consumer.mingle.Mingle": [], "t.unit.worker.test_consumer.test_Mingle.test_start": ["celery.utils.collections.LimitedSet", "unittest.mock.Mock", "t.unit.worker.test_consumer._amqp_connection", "celery.worker.consumer.mingle.Mingle"], "t.unit.worker.test_consumer.test_Gossip.test_init": ["celery.worker.consumer.gossip.Gossip", "t.unit.worker.test_consumer._amqp_connection", "t.unit.worker.test_consumer.test_Gossip.Consumer"], "t.unit.worker.test_consumer.test_Gossip.Consumer": ["unittest.mock.Mock", "t.unit.worker.test_consumer._amqp_connection"], "celery.worker.consumer.gossip.Gossip": [], "t.unit.worker.test_consumer.test_Gossip.test_callbacks": ["celery.worker.consumer.gossip.Gossip", "unittest.mock.Mock", "t.unit.worker.test_consumer._amqp_connection", "t.unit.worker.test_consumer.test_Gossip.Consumer"], "t.unit.worker.test_consumer.test_Gossip.test_election": ["celery.worker.consumer.gossip.Gossip", "t.unit.worker.test_consumer._amqp_connection", "t.unit.worker.test_consumer.test_Gossip.Consumer"], "t.unit.worker.test_consumer.test_Gossip.test_call_task": ["unittest.mock.patch", "unittest.mock.Mock", "t.unit.worker.test_consumer.test_Gossip.Consumer", "celery.worker.consumer.gossip.Gossip", "<builtin>.MemoryError", "t.unit.worker.test_consumer._amqp_connection"], "t.unit.worker.test_consumer.test_Gossip.Event": [], "t.unit.worker.test_consumer.test_Gossip.test_on_elect": ["unittest.mock.patch", "t.unit.worker.test_consumer.test_Gossip.Consumer", "celery.worker.consumer.gossip.Gossip", "t.unit.worker.test_consumer.test_Gossip.Event", "t.unit.worker.test_consumer._amqp_connection"], "t.unit.worker.test_consumer.test_Gossip.setup_election": ["unittest.mock.patch", "<builtin>.len", "pytest.raises", "t.unit.worker.test_consumer.test_Gossip.Event"], "t.unit.worker.test_consumer.test_Gossip.test_on_elect_ack_win": ["unittest.mock.Mock", "t.unit.worker.test_consumer.test_Gossip.setup_election", "t.unit.worker.test_consumer.test_Gossip.Consumer", "celery.worker.consumer.gossip.Gossip", "t.unit.worker.test_consumer._amqp_connection"], "t.unit.worker.test_consumer.test_Gossip.test_on_elect_ack_lose": ["unittest.mock.Mock", "t.unit.worker.test_consumer.test_Gossip.setup_election", "t.unit.worker.test_consumer.test_Gossip.Consumer", "celery.worker.consumer.gossip.Gossip", "t.unit.worker.test_consumer._amqp_connection"], "t.unit.worker.test_consumer.test_Gossip.test_on_elect_ack_win_but_no_action": ["unittest.mock.patch", "t.unit.worker.test_consumer.test_Gossip.setup_election", "t.unit.worker.test_consumer.test_Gossip.Consumer", "celery.worker.consumer.gossip.Gossip", "t.unit.worker.test_consumer._amqp_connection"], "t.unit.worker.test_consumer.test_Gossip.test_on_node_join": ["celery.worker.consumer.gossip.Gossip", "unittest.mock.patch", "t.unit.worker.test_consumer._amqp_connection", "t.unit.worker.test_consumer.test_Gossip.Consumer"], "t.unit.worker.test_consumer.test_Gossip.test_on_node_leave": ["celery.worker.consumer.gossip.Gossip", "unittest.mock.patch", "t.unit.worker.test_consumer._amqp_connection", "t.unit.worker.test_consumer.test_Gossip.Consumer"], "t.unit.worker.test_consumer.test_Gossip.test_on_node_lost": ["celery.worker.consumer.gossip.Gossip", "unittest.mock.patch", "t.unit.worker.test_consumer._amqp_connection", "t.unit.worker.test_consumer.test_Gossip.Consumer"], "t.unit.worker.test_consumer.test_Gossip.test_register_timer": ["celery.worker.consumer.gossip.Gossip", "t.unit.worker.test_consumer._amqp_connection", "t.unit.worker.test_consumer.test_Gossip.Consumer"], "t.unit.worker.test_consumer.test_Gossip.test_periodic": ["unittest.mock.Mock", "pytest.raises", "t.unit.worker.test_consumer.test_Gossip.Consumer", "celery.worker.consumer.gossip.Gossip", "t.unit.worker.test_consumer._amqp_connection"], "t.unit.worker.test_consumer.test_Gossip.test_on_message__task": ["celery.worker.consumer.gossip.Gossip", "unittest.mock.Mock", "t.unit.worker.test_consumer._amqp_connection", "t.unit.worker.test_consumer.test_Gossip.Consumer"], "t.unit.worker.test_consumer.test_Gossip.test_on_message": ["celery.worker.consumer.gossip.Gossip", "unittest.mock.Mock", "t.unit.worker.test_consumer._amqp_connection", "t.unit.worker.test_consumer.test_Gossip.Consumer"], "t.unit.worker.test_revoke": [], "t.unit.worker.test_revoke.test_revoked.test_is_working": ["celery.worker.state.revoked.add", "celery.worker.state.revoked.pop_value"], "celery.worker.state.revoked.add": [], "celery.worker.state.revoked.pop_value": [], "t.unit.worker.test_bootsteps": [], "t.unit.worker.test_bootsteps.test_StepFormatter.test_get_prefix": ["celery.bootsteps.StepFormatter", "unittest.mock.Mock"], "celery.bootsteps.StepFormatter": [], "t.unit.worker.test_bootsteps.test_StepFormatter.test_node": ["celery.bootsteps.StepFormatter", "unittest.mock.Mock"], "t.unit.worker.test_bootsteps.test_StepFormatter.test_edge": ["celery.bootsteps.StepFormatter", "unittest.mock.Mock"], "t.unit.worker.test_bootsteps.test_Step.setup_method": [], "t.unit.worker.test_bootsteps.test_Step.test_blueprint_name": [], "t.unit.worker.test_bootsteps.test_Step.test_init": ["celery.bootsteps.StartStopStep.__init__"], "celery.bootsteps.StartStopStep.__init__": [], "t.unit.worker.test_bootsteps.test_Step.test_create": ["celery.bootsteps.StartStopStep.__init__"], "t.unit.worker.test_bootsteps.test_Step.test_include_if": ["celery.bootsteps.StartStopStep.include_if", "celery.bootsteps.StartStopStep.__init__"], "celery.bootsteps.StartStopStep.include_if": [], "t.unit.worker.test_bootsteps.test_Step.test_instantiate": ["celery.bootsteps.StartStopStep.instantiate", "<builtin>.isinstance", "celery.bootsteps.StartStopStep.__init__"], "celery.bootsteps.StartStopStep.instantiate": [], "t.unit.worker.test_bootsteps.test_Step.test_include_when_enabled": ["celery.bootsteps.StartStopStep.include", "unittest.mock.Mock", "celery.bootsteps.StartStopStep.__init__"], "celery.bootsteps.StartStopStep.include": [], "t.unit.worker.test_bootsteps.test_Step.test_include_when_disabled": ["celery.bootsteps.StartStopStep.include", "unittest.mock.Mock", "celery.bootsteps.StartStopStep.__init__"], "t.unit.worker.test_bootsteps.test_Step.test_repr": ["<builtin>.repr", "celery.bootsteps.StartStopStep.__init__"], "t.unit.worker.test_bootsteps.test_ConsumerStep.test_interface": ["celery.bootsteps.ConsumerStep", "pytest.raises"], "celery.bootsteps.ConsumerStep": [], "t.unit.worker.test_bootsteps.test_ConsumerStep.test_start_stop_shutdown": ["celery.bootsteps.ConsumerStep.__init__", "celery.bootsteps.ConsumerStep.start", "celery.bootsteps.ConsumerStep.stop", "unittest.mock.Mock", "t.unit.worker.test_bootsteps.test_ConsumerStep.test_start_stop_shutdown.Step.get_consumers", "celery.bootsteps.ConsumerStep.shutdown"], "t.unit.worker.test_bootsteps.test_ConsumerStep.test_start_stop_shutdown.Step.get_consumers": [], "celery.bootsteps.ConsumerStep.__init__": [], "celery.bootsteps.ConsumerStep.start": [], "celery.bootsteps.ConsumerStep.stop": [], "celery.bootsteps.ConsumerStep.shutdown": [], "t.unit.worker.test_bootsteps.test_ConsumerStep.test_start_no_consumers": ["celery.bootsteps.ConsumerStep.__init__", "celery.bootsteps.ConsumerStep.start", "unittest.mock.Mock"], "t.unit.worker.test_bootsteps.test_ConsumerStep.test_start_no_consumers.Step.get_consumers": [], "t.unit.worker.test_bootsteps.test_ConsumerStep.test_close_no_consumer_channel": ["celery.bootsteps.ConsumerStep", "unittest.mock.Mock"], "t.unit.worker.test_bootsteps.test_StartStopStep.setup_method": [], "t.unit.worker.test_bootsteps.test_StartStopStep.test_start__stop": ["celery.bootsteps.StartStopStep.stop", "celery.bootsteps.StartStopStep.include", "unittest.mock.Mock", "celery.bootsteps.StartStopStep.start", "celery.bootsteps.StartStopStep.__init__"], "celery.bootsteps.StartStopStep.start": [], "celery.bootsteps.StartStopStep.stop": [], "t.unit.worker.test_bootsteps.test_StartStopStep.test_terminate__no_obj": ["celery.bootsteps.StartStopStep.terminate", "unittest.mock.Mock", "celery.bootsteps.StartStopStep.__init__"], "celery.bootsteps.StartStopStep.terminate": [], "t.unit.worker.test_bootsteps.test_StartStopStep.test_include_when_disabled": ["celery.bootsteps.StartStopStep.include", "celery.bootsteps.StartStopStep.__init__"], "t.unit.worker.test_bootsteps.test_StartStopStep.test_terminate": ["celery.bootsteps.StartStopStep.terminate", "celery.bootsteps.StartStopStep.include", "unittest.mock.Mock", "<builtin>.delattr", "celery.bootsteps.StartStopStep.__init__"], "t.unit.worker.test_bootsteps.test_Blueprint.test_steps_added_to_unclaimed": ["celery.bootsteps.Blueprint.__init__"], "celery.bootsteps.Blueprint.__init__": [], "t.unit.worker.test_bootsteps.test_Blueprint.test_init": ["celery.bootsteps.Blueprint.__init__"], "t.unit.worker.test_bootsteps.test_Blueprint.test_close__on_close_is_None": ["celery.bootsteps.Blueprint.close", "celery.bootsteps.Blueprint.__init__", "unittest.mock.Mock"], "celery.bootsteps.Blueprint.close": [], "t.unit.worker.test_bootsteps.test_Blueprint.test_send_all_with_None_steps": ["unittest.mock.Mock", "celery.bootsteps.Blueprint.__init__"], "t.unit.worker.test_bootsteps.test_Blueprint.test_send_all_raises": ["pytest.raises", "unittest.mock.Mock", "<builtin>.KeyError", "celery.bootsteps.Blueprint.__init__"], "t.unit.worker.test_bootsteps.test_Blueprint.test_stop_state_in_TERMINATE": ["celery.bootsteps.Blueprint.__init__", "celery.bootsteps.Blueprint.stop", "unittest.mock.Mock"], "celery.bootsteps.Blueprint.stop": [], "t.unit.worker.test_bootsteps.test_Blueprint.test_join_raises_IGNORE_ERRORS": ["celery.bootsteps.Blueprint.join", "celery.bootsteps.Blueprint.__init__", "<builtin>.KeyError", "unittest.mock.Mock"], "celery.bootsteps.Blueprint.join": [], "t.unit.worker.test_bootsteps.test_Blueprint.test_connect_with": ["celery.bootsteps.Blueprint.connect_with", "unittest.mock.Mock", "<builtin>.str", "<builtin>.repr", "celery.bootsteps.Blueprint.apply", "celery.bootsteps.Blueprint.__init__"], "celery.bootsteps.Blueprint.apply": [], "celery.bootsteps.Blueprint.connect_with": [], "t.unit.worker.test_bootsteps.test_Blueprint.test_topsort_raises_KeyError": ["unittest.mock.patch", "unittest.mock.Mock", "<builtin>.KeyError", "celery.bootsteps.Blueprint.claim_steps", "pytest.raises", "celery.bootsteps.Blueprint._finalize_steps", "celery.bootsteps.Blueprint.__init__"], "celery.bootsteps.Blueprint.claim_steps": [], "celery.bootsteps.Blueprint._finalize_steps": [], "t.unit.worker.test_bootsteps.test_Blueprint.test_apply": ["celery.bootsteps.Blueprint.apply", "celery.bootsteps.Blueprint.__init__", "<builtin>.isinstance"], "t.unit.worker.test_bootsteps.test_Blueprint.test_apply.MyBlueprint.modules": [], "t.unit.worker.test_bootsteps.test_Blueprint.test_find_last_but_no_steps": ["celery.bootsteps.Blueprint._find_last", "celery.bootsteps.Blueprint.apply", "celery.bootsteps.Blueprint.__init__"], "celery.bootsteps.Blueprint._find_last": [], "t.unit.worker.test_request": [], "t.unit.worker.test_request.RequestCase.setup_method": [], "t.unit.worker.test_request.RequestCase.setup_method.add": [], "t.unit.worker.test_request.RequestCase.setup_method.mytask": [], "t.unit.worker.test_request.RequestCase.setup_method.mytask_raising": ["<builtin>.KeyError"], "t.unit.worker.test_request.RequestCase.xRequest": ["unittest.mock.Mock", "celery.worker.request.Request"], "celery.worker.request.Request": [], "t.unit.worker.test_request.test_mro_lookup.test_order": ["celery.app.trace.mro_lookup"], "t.unit.worker.test_request.test_mro_lookup.test_order.D.mro": [], "celery.app.trace.mro_lookup": [], "t.unit.worker.test_request.jail": ["celery.app.trace.trace_task"], "celery.app.trace.trace_task": [], "t.unit.worker.test_request.test_Retry.test_retry_semipredicate": ["<builtin>.Exception", "celery.exceptions.Retry"], "t.unit.worker.test_request.test_trace_task.test_process_cleanup_fails": ["t.unit.worker.test_request.jail", "kombu.utils.uuid.uuid", "unittest.mock.Mock", "<builtin>.KeyError"], "kombu.utils.uuid.uuid": [], "t.unit.worker.test_request.test_trace_task.test_process_cleanup_BaseException": ["t.unit.worker.test_request.jail", "unittest.mock.Mock", "pytest.raises", "kombu.utils.uuid.uuid", "<builtin>.SystemExit"], "t.unit.worker.test_request.test_trace_task.test_execute_jail_success": ["t.unit.worker.test_request.jail", "kombu.utils.uuid.uuid"], "t.unit.worker.test_request.test_trace_task.test_marked_as_started": ["t.unit.worker.test_request.jail", "kombu.utils.uuid.uuid", "unittest.mock.Mock"], "t.unit.worker.test_request.test_trace_task.test_marked_as_started.store_result": [], "t.unit.worker.test_request.test_trace_task.test_execute_jail_failure": ["t.unit.worker.test_request.jail", "kombu.utils.uuid.uuid", "<builtin>.isinstance"], "t.unit.worker.test_request.test_trace_task.test_execute_task_ignore_result": ["t.unit.worker.test_request.jail", "kombu.utils.uuid.uuid"], "t.unit.worker.test_request.test_trace_task.test_execute_task_ignore_result.ignores_result": [], "t.unit.worker.test_request.test_trace_task.test_execute_request_ignore_result": ["t.unit.worker.test_request.jail", "kombu.utils.uuid.uuid"], "t.unit.worker.test_request.test_trace_task.test_execute_request_ignore_result.ignores_result": [], "t.unit.worker.test_request.test_Request.get_request": ["unittest.mock.Mock", "celery.worker.request.Request"], "t.unit.worker.test_request.test_Request.test_shadow": ["t.unit.worker.test_request.test_Request.get_request"], "t.unit.worker.test_request.test_Request.test_args": ["t.unit.worker.test_request.test_Request.get_request"], "t.unit.worker.test_request.test_Request.test_kwargs": ["t.unit.worker.test_request.test_Request.get_request"], "t.unit.worker.test_request.test_Request.test_info_function": ["<builtin>.list", "<builtin>.str", "random.choice", "t.unit.worker.test_request.test_Request.get_request", "<builtin>.range"], "t.unit.worker.test_request.test_Request.test_no_shadow_header": ["t.unit.worker.test_request.test_Request.get_request"], "t.unit.worker.test_request.test_Request.test_invalid_eta_raises_InvalidTaskError": ["t.unit.worker.test_request.test_Request.get_request", "pytest.raises"], "t.unit.worker.test_request.test_Request.test_invalid_expires_raises_InvalidTaskError": ["t.unit.worker.test_request.test_Request.get_request", "pytest.raises"], "t.unit.worker.test_request.test_Request.test_valid_expires_with_utc_makes_aware": ["unittest.mock.patch", "t.unit.worker.test_request.test_Request.get_request"], "t.unit.worker.test_request.test_Request.test_maybe_expire_when_expires_is_None": ["t.unit.worker.test_request.test_Request.get_request"], "t.unit.worker.test_request.test_Request.test_on_retry_acks_if_late": ["t.unit.worker.test_request.test_Request.get_request", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_on_failure_Terminated": ["t.unit.worker.test_request.test_Request.get_request", "celery.exceptions.Terminated", "billiard.einfo.ExceptionInfo"], "celery.exceptions.Terminated": [], "t.unit.worker.test_request.test_Request.test_on_failure_propagates_MemoryError": ["t.unit.worker.test_request.test_Request.get_request", "<builtin>.MemoryError", "pytest.raises", "billiard.einfo.ExceptionInfo"], "t.unit.worker.test_request.test_Request.test_on_failure_Ignore_acknowledges": ["celery.exceptions.Ignore", "t.unit.worker.test_request.test_Request.get_request", "billiard.einfo.ExceptionInfo"], "celery.exceptions.Ignore": [], "t.unit.worker.test_request.test_Request.test_on_failure_Reject_rejects": ["billiard.einfo.ExceptionInfo", "t.unit.worker.test_request.test_Request.get_request", "celery.exceptions.Reject"], "t.unit.worker.test_request.test_Request.test_on_failure_Reject_rejects_with_requeue": ["billiard.einfo.ExceptionInfo", "t.unit.worker.test_request.test_Request.get_request", "celery.exceptions.Reject"], "t.unit.worker.test_request.test_Request.test_on_failure_WorkerLostError_rejects_with_requeue": ["celery.exceptions.WorkerLostError", "t.unit.worker.test_request.test_Request.get_request", "unittest.mock.Mock", "billiard.einfo.ExceptionInfo"], "celery.exceptions.WorkerLostError": [], "t.unit.worker.test_request.test_Request.test_on_failure_WorkerLostError_redelivered_None": ["celery.exceptions.WorkerLostError", "t.unit.worker.test_request.test_Request.get_request", "unittest.mock.Mock", "billiard.einfo.ExceptionInfo"], "t.unit.worker.test_request.test_Request.test_on_failure_WorkerLostError_redelivered_True": ["celery.exceptions.WorkerLostError", "t.unit.worker.test_request.test_Request.get_request", "unittest.mock.Mock", "billiard.einfo.ExceptionInfo"], "t.unit.worker.test_request.test_Request.test_tzlocal_is_cached": ["t.unit.worker.test_request.test_Request.get_request"], "t.unit.worker.test_request.test_Request.test_task_wrapper_repr": ["<builtin>.repr", "t.unit.worker.test_request.RequestCase.xRequest"], "t.unit.worker.test_request.test_Request.test_sets_store_errors": ["t.unit.worker.test_request.RequestCase.xRequest"], "t.unit.worker.test_request.test_Request.test_send_event": ["t.unit.worker.test_request.RequestCase.xRequest", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_send_events__disabled_at_task_level": ["t.unit.worker.test_request.RequestCase.xRequest", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_on_retry": ["celery.exceptions.Retry", "unittest.mock.Mock", "<builtin>.KeyError", "kombu.utils.encoding.safe_repr", "t.unit.worker.test_request.test_Request.get_request", "billiard.einfo.ExceptionInfo", "kombu.utils.encoding.safe_str"], "kombu.utils.encoding.safe_repr": [], "kombu.utils.encoding.safe_str": [], "t.unit.worker.test_request.test_Request.test_compat_properties": ["t.unit.worker.test_request.RequestCase.xRequest"], "t.unit.worker.test_request.test_Request.test_terminate__pool_ref": ["time.monotonic", "t.unit.worker.test_request.test_Request.get_request", "unittest.mock.Mock"], "time.monotonic": [], "t.unit.worker.test_request.test_Request.test_terminate__task_started": ["time.monotonic", "t.unit.worker.test_request.test_Request.get_request", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_cancel__pool_ref": ["time.monotonic", "t.unit.worker.test_request.test_Request.get_request", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_terminate__task_reserved": ["t.unit.worker.test_request.test_Request.get_request", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_cancel__task_started": ["time.monotonic", "t.unit.worker.test_request.test_Request.get_request", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_cancel__task_reserved": ["t.unit.worker.test_request.test_Request.get_request", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_revoked_expires_expired": ["t.unit.worker.test_request.test_Request.get_request", "datetime.datetime.utcnow", "datetime.timedelta"], "t.unit.worker.test_request.test_Request.test_revoked_expires_not_expired": ["datetime.datetime.utcnow", "t.unit.worker.test_request.RequestCase.xRequest", "datetime.timedelta"], "t.unit.worker.test_request.test_Request.test_revoked_expires_ignore_result": ["datetime.datetime.utcnow", "t.unit.worker.test_request.RequestCase.xRequest", "datetime.timedelta"], "t.unit.worker.test_request.test_Request.test_already_revoked": ["t.unit.worker.test_request.RequestCase.xRequest"], "t.unit.worker.test_request.test_Request.test_revoked": ["celery.worker.state.revoked.add", "t.unit.worker.test_request.RequestCase.xRequest"], "t.unit.worker.test_request.test_Request.test_execute_does_not_execute_revoked": ["celery.worker.state.revoked.add", "t.unit.worker.test_request.RequestCase.xRequest"], "t.unit.worker.test_request.test_Request.test_execute_acks_late": ["t.unit.worker.test_request.RequestCase.xRequest"], "t.unit.worker.test_request.test_Request.test_execute_using_pool_does_not_execute_revoked": ["celery.worker.state.revoked.add", "t.unit.worker.test_request.RequestCase.xRequest", "pytest.raises"], "t.unit.worker.test_request.test_Request.test_on_accepted_acks_early": ["time.monotonic", "t.unit.worker.test_request.RequestCase.xRequest", "os.getpid"], "t.unit.worker.test_request.test_Request.test_on_accepted_acks_late": ["time.monotonic", "t.unit.worker.test_request.RequestCase.xRequest", "os.getpid"], "t.unit.worker.test_request.test_Request.test_on_accepted_terminates": ["t.unit.worker.test_request.RequestCase.xRequest", "time.monotonic", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_on_accepted_time_start": ["time.monotonic", "t.unit.worker.test_request.RequestCase.xRequest", "os.getpid", "time.time"], "t.unit.worker.test_request.test_Request.test_on_success_acks_early": ["t.unit.worker.test_request.RequestCase.xRequest"], "t.unit.worker.test_request.test_Request.test_on_success_BaseException": ["t.unit.worker.test_request.RequestCase.xRequest", "pytest.raises", "billiard.einfo.ExceptionInfo", "<builtin>.SystemExit"], "t.unit.worker.test_request.test_Request.test_on_success_eventer": ["t.unit.worker.test_request.RequestCase.xRequest", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_on_success_when_failure": ["billiard.einfo.ExceptionInfo", "t.unit.worker.test_request.RequestCase.xRequest", "unittest.mock.Mock", "<builtin>.KeyError"], "t.unit.worker.test_request.test_Request.test_on_success_acks_late": ["t.unit.worker.test_request.RequestCase.xRequest"], "t.unit.worker.test_request.test_Request.test_on_failure_WorkerLostError": ["t.unit.worker.test_request.RequestCase.xRequest", "t.unit.worker.test_request.test_Request.test_on_failure_WorkerLostError.get_ei"], "t.unit.worker.test_request.test_Request.test_on_failure_WorkerLostError.get_ei": ["celery.exceptions.WorkerLostError", "billiard.einfo.ExceptionInfo"], "t.unit.worker.test_request.test_Request.test_on_failure_acks_late_reject_on_worker_lost_enabled": ["celery.exceptions.WorkerLostError", "t.unit.worker.test_request.RequestCase.xRequest", "billiard.einfo.ExceptionInfo"], "t.unit.worker.test_request.test_Request.test_on_failure_acks_late": ["t.unit.worker.test_request.RequestCase.xRequest", "<builtin>.KeyError", "billiard.einfo.ExceptionInfo"], "t.unit.worker.test_request.test_Request.test_on_failure_acks_on_failure_or_timeout_disabled_for_task": ["billiard.einfo.ExceptionInfo", "t.unit.worker.test_request.RequestCase.xRequest", "unittest.mock.Mock", "<builtin>.KeyError"], "t.unit.worker.test_request.test_Request.test_on_failure_acks_on_failure_or_timeout_enabled_for_task": ["t.unit.worker.test_request.RequestCase.xRequest", "<builtin>.KeyError", "billiard.einfo.ExceptionInfo"], "t.unit.worker.test_request.test_Request.test_on_failure_acks_on_failure_or_timeout_disabled": ["t.unit.worker.test_request.RequestCase.xRequest", "<builtin>.KeyError", "billiard.einfo.ExceptionInfo"], "t.unit.worker.test_request.test_Request.test_on_failure_acks_on_failure_or_timeout_enabled": ["t.unit.worker.test_request.RequestCase.xRequest", "<builtin>.KeyError", "billiard.einfo.ExceptionInfo"], "t.unit.worker.test_request.test_Request.test_on_failure_task_cancelled": ["t.unit.worker.test_request.RequestCase.xRequest", "celery.exceptions.Terminated", "unittest.mock.Mock", "billiard.einfo.ExceptionInfo"], "t.unit.worker.test_request.test_Request.test_from_message_invalid_kwargs": ["pytest.raises", "celery.worker.request.Request"], "t.unit.worker.test_request.test_Request.test_on_hard_timeout_acks_late": ["t.unit.worker.test_request.RequestCase.xRequest", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_on_hard_timeout_acks_on_failure_or_timeout": ["t.unit.worker.test_request.RequestCase.xRequest", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_on_soft_timeout": ["t.unit.worker.test_request.RequestCase.xRequest", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_fast_trace_task": ["celery.app.trace.setup_worker_optimizations", "celery.app.trace.build_tracer", "celery.app.trace.reset_worker_optimizations", "<builtin>.len", "<builtin>.delattr", "<builtin>.isinstance", "celery.app.trace.fast_trace_task", "<builtin>.repr", "kombu.utils.uuid.uuid", "celery.app.trace.trace_task_ret"], "celery.app.trace.setup_worker_optimizations": [], "celery.app.trace.build_tracer": [], "celery.app.trace.fast_trace_task": [], "celery.app.trace.reset_worker_optimizations": [], "celery.app.trace.trace_task_ret": [], "t.unit.worker.test_request.test_Request.test_trace_task_ret": ["kombu.utils.uuid.uuid", "celery.app.trace.build_tracer", "celery.app.trace.trace_task_ret", "<builtin>.repr"], "t.unit.worker.test_request.test_Request.test_trace_task_ret__no_trace": ["<builtin>.repr", "kombu.utils.uuid.uuid", "<builtin>.delattr", "celery.app.trace.trace_task_ret"], "t.unit.worker.test_request.test_Request.test_trace_catches_exception": ["<builtin>.isinstance", "kombu.utils.uuid.uuid", "celery.app.trace.trace_task", "pytest.warns"], "t.unit.worker.test_request.test_Request.test_trace_catches_exception.raising": ["<builtin>.KeyError"], "t.unit.worker.test_request.test_Request.test_worker_task_trace_handle_retry": ["celery.exceptions.Retry", "<builtin>.str", "celery.app.trace.TraceInfo", "<builtin>.ValueError", "kombu.utils.uuid.uuid"], "celery.app.trace.TraceInfo": [], "t.unit.worker.test_request.test_Request.test_worker_task_trace_handle_failure": ["<builtin>.ValueError", "celery.app.trace.TraceInfo", "kombu.utils.uuid.uuid"], "t.unit.worker.test_request.test_Request.test_from_message": ["kombu.utils.uuid.uuid", "celery.worker.request.Request", "<builtin>.isinstance"], "t.unit.worker.test_request.test_Request.test_from_message_empty_args": ["kombu.utils.uuid.uuid", "celery.worker.request.Request", "<builtin>.isinstance"], "t.unit.worker.test_request.test_Request.test_from_message_missing_required_fields": ["pytest.raises", "celery.worker.request.Request"], "t.unit.worker.test_request.test_Request.test_from_message_nonexistant_task": ["pytest.raises", "celery.worker.request.Request"], "t.unit.worker.test_request.test_Request.test_execute": ["t.unit.worker.test_request.RequestCase.xRequest", "kombu.utils.uuid.uuid"], "t.unit.worker.test_request.test_Request.test_execute_backend_error_acks_late": ["celery.backends.base.BaseDictBackend", "unittest.mock.Mock", "t.unit.worker.test_request.RequestCase.xRequest", "<builtin>.Exception", "kombu.utils.uuid.uuid"], "celery.backends.base.BaseDictBackend": [], "t.unit.worker.test_request.test_Request.test_execute_success_no_kwargs": ["t.unit.worker.test_request.RequestCase.xRequest", "kombu.utils.uuid.uuid"], "t.unit.worker.test_request.test_Request.test_execute_success_no_kwargs.mytask_no_kwargs": [], "t.unit.worker.test_request.test_Request.test_execute_ack": ["t.unit.worker.test_request.RequestCase.xRequest", "kombu.utils.uuid.uuid"], "t.unit.worker.test_request.test_Request.test_execute_ack.on_ack": [], "t.unit.worker.test_request.test_Request.test_execute_fail": ["t.unit.worker.test_request.RequestCase.xRequest", "kombu.utils.uuid.uuid", "<builtin>.isinstance"], "t.unit.worker.test_request.test_Request.test_execute_using_pool": ["t.unit.worker.test_request.RequestCase.xRequest", "kombu.utils.uuid.uuid", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_execute_using_pool_fast_trace_task": ["t.unit.worker.test_request.RequestCase.xRequest", "kombu.utils.uuid.uuid", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request._test_on_failure": ["unittest.mock.Mock", "t.unit.worker.test_request.RequestCase.xRequest", "billiard.einfo.ExceptionInfo", "<builtin>.type", "kombu.utils.uuid.uuid"], "t.unit.worker.test_request.test_Request.test_on_failure": ["<builtin>.Exception", "t.unit.worker.test_request.test_Request._test_on_failure"], "t.unit.worker.test_request.test_Request.test_on_failure__unicode_exception": ["<builtin>.Exception", "t.unit.worker.test_request.test_Request._test_on_failure"], "t.unit.worker.test_request.test_Request.test_on_failure__utf8_exception": ["kombu.utils.encoding.from_utf8", "<builtin>.Exception", "t.unit.worker.test_request.test_Request._test_on_failure"], "kombu.utils.encoding.from_utf8": [], "t.unit.worker.test_request.test_Request.test_on_failure__WorkerLostError": ["celery.exceptions.WorkerLostError", "t.unit.worker.test_request.test_Request._test_on_failure"], "t.unit.worker.test_request.test_Request.test_on_failure__return_ok": ["t.unit.worker.test_request.test_Request._test_on_failure", "<builtin>.KeyError"], "t.unit.worker.test_request.test_Request.test_reject": ["t.unit.worker.test_request.RequestCase.xRequest", "kombu.utils.uuid.uuid", "unittest.mock.Mock"], "t.unit.worker.test_request.test_Request.test_group": ["t.unit.worker.test_request.RequestCase.xRequest", "kombu.utils.uuid.uuid"], "t.unit.worker.test_request.test_Request.test_group_index": ["t.unit.worker.test_request.RequestCase.xRequest", "kombu.utils.uuid.uuid"], "t.unit.worker.test_request.test_create_request_class.setup_method": ["<builtin>.super", "unittest.mock.Mock"], "t.unit.worker.test_request.test_create_request_class.create_request_cls": ["t.unit.worker.test_request.test_create_request_class.create_request_cls"], "t.unit.worker.test_request.test_create_request_class.zRequest": ["t.unit.worker.test_request.RequestCase.xRequest", "t.unit.worker.test_request.test_create_request_class.create_request_cls"], "t.unit.worker.test_request.test_create_request_class.test_on_success": ["t.unit.worker.test_request.test_create_request_class.zRequest", "kombu.utils.uuid.uuid"], "t.unit.worker.test_request.test_create_request_class.test_on_success__SystemExit": ["t.unit.worker.test_request.test_create_request_class.zRequest", "kombu.utils.uuid.uuid", "pytest.raises", "billiard.einfo.ExceptionInfo"], "t.unit.worker.test_request.test_create_request_class.test_on_success__calls_failure": ["t.unit.worker.test_request.test_create_request_class.zRequest", "kombu.utils.uuid.uuid", "unittest.mock.Mock"], "t.unit.worker.test_request.test_create_request_class.test_on_success__acks_late_enabled": ["t.unit.worker.test_request.test_create_request_class.zRequest", "kombu.utils.uuid.uuid", "unittest.mock.Mock"], "t.unit.worker.test_request.test_create_request_class.test_on_success__acks_late_disabled": ["t.unit.worker.test_request.test_create_request_class.zRequest", "kombu.utils.uuid.uuid", "unittest.mock.Mock"], "t.unit.worker.test_request.test_create_request_class.test_on_success__no_events": ["t.unit.worker.test_request.test_create_request_class.zRequest", "kombu.utils.uuid.uuid", "unittest.mock.Mock"], "t.unit.worker.test_request.test_create_request_class.test_on_success__with_events": ["t.unit.worker.test_request.test_create_request_class.zRequest", "kombu.utils.uuid.uuid", "unittest.mock.Mock"], "t.unit.worker.test_request.test_create_request_class.test_execute_using_pool__revoked": ["pytest.raises", "t.unit.worker.test_request.test_create_request_class.zRequest", "kombu.utils.uuid.uuid", "unittest.mock.Mock"], "t.unit.worker.test_request.test_create_request_class.test_execute_using_pool__expired": ["unittest.mock.Mock", "<builtin>.set", "pytest.raises", "t.unit.worker.test_request.test_create_request_class.zRequest", "kombu.utils.uuid.uuid"], "t.unit.worker.test_request.test_create_request_class.test_execute_using_pool": ["t.unit.worker.test_request.test_create_request_class.zRequest", "kombu.utils.uuid.uuid", "unittest.mock.Mock", "<builtin>.set"], "t.unit.worker.test_request.test_create_request_class.test_execute_using_pool_with_use_fast_trace_task": ["t.unit.worker.test_request.test_create_request_class.zRequest", "kombu.utils.uuid.uuid", "unittest.mock.Mock", "<builtin>.set"], "t.unit.worker.test_request.test_create_request_class.test_execute_using_pool_with_none_timelimit_header": ["t.unit.worker.test_request.test_create_request_class.zRequest", "kombu.utils.uuid.uuid", "unittest.mock.Mock", "<builtin>.set"], "t.unit.worker.test_request.test_create_request_class.test_execute_using_pool__defaults_of_hybrid_to_proto2": ["unittest.mock.Mock", "<builtin>.set", "celery.worker.strategy.hybrid_to_proto2", "t.unit.worker.test_request.test_create_request_class.zRequest", "kombu.utils.uuid.uuid"], "celery.worker.strategy.hybrid_to_proto2": [], "t.unit.worker.test_loops": [], "t.unit.worker.test_loops.PromiseEqual.__init__": [], "t.unit.worker.test_loops.PromiseEqual.__eq__": [], "t.unit.worker.test_loops.PromiseEqual.__repr__": [], "t.unit.worker.test_loops.X.__init__": ["celery.worker.consumer.Consumer", "unittest.mock.Mock"], "t.unit.worker.test_loops.X.__init__.<lambda1>": [], "celery.worker.consumer.Consumer": [], "t.unit.worker.test_loops.X.timeout_then_error": [], "t.unit.worker.test_loops.X.timeout_then_error.first": ["socket.timeout", "socket.error"], "socket.timeout": [], "t.unit.worker.test_loops.X.close_then_error": ["unittest.mock.Mock"], "t.unit.worker.test_loops.X.close_then_error.first": ["socket.error", "t.unit.worker.test_loops.X.close"], "t.unit.worker.test_loops.X.close": [], "t.unit.worker.test_loops.X.closer": ["unittest.mock.Mock"], "t.unit.worker.test_loops.X.closer.closing": ["t.unit.worker.test_loops.X.close"], "t.unit.worker.test_loops.get_task_callback": ["celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.__init__"], "celery.worker.loops.asynloop": [], "t.unit.worker.test_loops.test_asynloop.setup_method": [], "t.unit.worker.test_loops.test_asynloop.setup_method.add": [], "t.unit.worker.test_loops.test_asynloop.test_drain_after_consume": ["t.unit.worker.test_loops.get_task_callback"], "t.unit.worker.test_loops.test_asynloop.test_pool_did_not_start_at_startup": ["celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_setup_heartbeat": ["celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.__init__", "unittest.mock.Mock"], "t.unit.worker.test_loops.test_asynloop.task_context": ["unittest.mock.Mock", "t.unit.worker.test_loops.get_task_callback"], "t.unit.worker.test_loops.test_asynloop.test_on_task_received": ["t.unit.worker.test_loops.PromiseEqual.__init__", "t.unit.worker.test_loops.test_asynloop.task_context"], "t.unit.worker.test_loops.test_asynloop.test_on_task_received_executes_on_task_message": ["t.unit.worker.test_loops.PromiseEqual.__init__", "t.unit.worker.test_loops.test_asynloop.task_context", "unittest.mock.Mock"], "t.unit.worker.test_loops.test_asynloop.test_on_task_message_missing_name": ["t.unit.worker.test_loops.test_asynloop.task_context"], "t.unit.worker.test_loops.test_asynloop.test_on_task_pool_raises": ["<builtin>.ValueError", "t.unit.worker.test_loops.test_asynloop.task_context", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_on_task_InvalidTaskError": ["t.unit.worker.test_loops.test_asynloop.task_context", "celery.exceptions.InvalidTaskError"], "celery.exceptions.InvalidTaskError": [], "t.unit.worker.test_loops.test_asynloop.test_on_task_DecodeError": ["t.unit.worker.test_loops.test_asynloop.task_context", "kombu.exceptions.DecodeError"], "kombu.exceptions.DecodeError": [], "t.unit.worker.test_loops.test_asynloop": ["pytest.mark.parametrize"], "t.unit.worker.test_loops.test_asynloop.test_should_terminate": ["celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_should_terminate_hub_close_raises": ["celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.__init__", "<builtin>.MemoryError", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_should_stop": ["celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_updates_qos": ["celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.__init__", "t.unit.worker.test_loops.X.closer"], "t.unit.worker.test_loops.test_asynloop.test_poll_empty": ["unittest.mock.Mock", "celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.close_then_error", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_poll_readable": ["unittest.mock.Mock", "celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.close_then_error", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_poll_readable_raises_Empty": ["queue.Empty", "unittest.mock.Mock", "celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.close_then_error", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "queue.Empty": [], "t.unit.worker.test_loops.test_asynloop.test_poll_writable": ["unittest.mock.Mock", "celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.close_then_error", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_poll_writable_none_registered": ["unittest.mock.Mock", "celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.close_then_error", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_poll_unknown_event": ["unittest.mock.Mock", "celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.close_then_error", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_poll_keep_draining_disabled": ["celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.__init__", "pytest.raises", "unittest.mock.Mock"], "t.unit.worker.test_loops.test_asynloop.test_poll_keep_draining_disabled.se": ["socket.error"], "t.unit.worker.test_loops.test_asynloop.test_poll_err_writable": ["unittest.mock.Mock", "celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.close_then_error", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_poll_write_generator": ["unittest.mock.Mock", "celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.close_then_error", "t.unit.worker.test_loops.test_asynloop.test_poll_write_generator.Gen", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_poll_write_generator.Gen": [], "t.unit.worker.test_loops.test_asynloop.test_poll_write_generator_stopped": ["unittest.mock.Mock", "celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.close_then_error", "t.unit.worker.test_loops.test_asynloop.test_poll_write_generator_stopped.Gen", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_poll_write_generator_stopped.Gen": [], "t.unit.worker.test_loops.test_asynloop.test_poll_write_generator_raises": ["unittest.mock.Mock", "celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.close_then_error", "t.unit.worker.test_loops.test_asynloop.test_poll_write_generator_raises.Gen", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_poll_write_generator_raises.Gen": ["<builtin>.ValueError"], "t.unit.worker.test_loops.test_asynloop.test_poll_err_readable": ["unittest.mock.Mock", "celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.close_then_error", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_poll_raises_ValueError": ["celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.__init__", "t.unit.worker.test_loops.X.close_then_error", "unittest.mock.Mock"], "t.unit.worker.test_loops.test_asynloop.test_heartbeat_error": ["<builtin>.RuntimeError", "unittest.mock.Mock", "celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.__init__", "pytest.raises"], "t.unit.worker.test_loops.test_asynloop.test_heartbeat_error.call_repeatedly": [], "t.unit.worker.test_loops.test_asynloop.test_no_heartbeat_support": ["celery.worker.loops.asynloop", "t.unit.worker.test_loops.X.__init__", "unittest.mock.Mock", "t.unit.worker.test_loops.X.closer"], "t.unit.worker.test_loops.test_synloop.test_timeout_ignored": ["celery.worker.loops.synloop", "t.unit.worker.test_loops.X.__init__", "pytest.raises", "t.unit.worker.test_loops.X.timeout_then_error"], "celery.worker.loops.synloop": [], "t.unit.worker.test_loops.test_synloop.test_updates_qos_when_changed": ["celery.worker.loops.synloop", "t.unit.worker.test_loops.X.__init__", "pytest.raises", "t.unit.worker.test_loops.X.timeout_then_error"], "t.unit.worker.test_loops.test_synloop.test_ignores_socket_errors_when_closed": ["celery.worker.loops.synloop", "t.unit.worker.test_loops.X.__init__", "t.unit.worker.test_loops.X.close_then_error"], "t.unit.worker.test_loops.test_synloop.test_no_connection": ["celery.worker.loops.synloop", "t.unit.worker.test_loops.X.__init__", "unittest.mock.Mock"], "t.unit.worker.test_loops.test_synloop.test_heartbeat_error": ["celery.worker.loops.synloop", "t.unit.worker.test_loops.X.__init__", "pytest.raises", "unittest.mock.Mock"], "t.unit.worker.test_loops.test_synloop.test_heartbeat_error.heartbeat_check": ["<builtin>.RuntimeError"], "t.unit.worker.test_loops.test_synloop.test_heartbeat_error.call_repeatedly": [], "t.unit.worker.test_loops.test_synloop.test_no_heartbeat_support": ["celery.worker.loops.synloop", "t.unit.worker.test_loops.X.__init__", "unittest.mock.Mock"], "t.unit.worker.test_loops.test_synloop.test_no_heartbeat_support.drain_events": [], "t.unit.worker.test_loops.test_quick_drain.setup_method": ["unittest.mock.Mock"], "t.unit.worker.test_loops.test_quick_drain.test_drain": ["celery.worker.loops._quick_drain"], "celery.worker.loops._quick_drain": [], "t.unit.worker.test_loops.test_quick_drain.test_drain_error": ["celery.worker.loops._quick_drain", "pytest.raises", "<builtin>.KeyError"], "t.unit.worker.test_loops.test_quick_drain.test_drain_error_EAGAIN": ["celery.worker.loops._quick_drain", "<builtin>.KeyError"], "t.unit.worker.test_components": [], "t.unit.worker.test_components.test_Timer.test_create__eventloop": ["unittest.mock.Mock", "celery.worker.components.Timer"], "celery.worker.components.Timer": [], "t.unit.worker.test_components.test_Hub.setup_method": ["celery.worker.components.Hub", "unittest.mock.Mock"], "celery.worker.components.Hub": [], "t.unit.worker.test_components.test_Hub": ["unittest.mock.patch"], "t.unit.worker.test_components.test_Hub.test_create": ["unittest.mock.Mock"], "t.unit.worker.test_components.test_Hub.test_start": [], "t.unit.worker.test_components.test_Hub.test_stop": [], "t.unit.worker.test_components.test_Hub.test_terminate": [], "t.unit.worker.test_components.test_Pool.test_close_terminate": ["celery.worker.components.Pool", "unittest.mock.Mock"], "celery.worker.components.Pool": [], "t.unit.worker.test_components.test_Pool.test_create_when_eventloop": ["celery.worker.components.Pool", "unittest.mock.Mock"], "t.unit.worker.test_components.test_Pool.test_create_calls_instantiate_with_max_memory": ["celery.worker.components.Pool", "unittest.mock.Mock"], "t.unit.worker.test_components.test_Beat.test_create__green": ["celery.worker.components.Beat", "pytest.raises", "unittest.mock.Mock"], "celery.worker.components.Beat": [], "t.unit.worker.test_state": ["pytest.fixture"], "t.unit.worker.test_state.reset_state": ["celery.worker.state.active_requests.clear", "celery.worker.state.revoked_headers.clear", "celery.worker.state.revoked.clear", "celery.worker.state.total_count.clear"], "celery.worker.state.revoked.clear": [], "celery.worker.state.revoked_headers.clear": [], "celery.worker.state.total_count.clear": [], "t.unit.worker.test_state.MockShelve.open": [], "t.unit.worker.test_state.MockShelve.sync": [], "t.unit.worker.test_state.MockShelve.close": [], "t.unit.worker.test_state.test_maybe_shutdown.teardown_method": [], "t.unit.worker.test_state.test_maybe_shutdown.test_should_stop": ["celery.worker.state.maybe_shutdown", "<builtin>.RuntimeError", "pytest.raises"], "celery.worker.state.maybe_shutdown": [], "t.unit.worker.test_state.test_maybe_shutdown": ["pytest.mark.parametrize"], "t.unit.worker.test_state.test_maybe_shutdown.test_should_terminate": ["celery.worker.state.maybe_shutdown", "pytest.raises"], "t.unit.worker.test_state.test_Persistent": ["pytest.fixture"], "t.unit.worker.test_state.test_Persistent.p": ["celery.worker.state.Persistent.__init__"], "celery.worker.state.Persistent.__init__": [], "t.unit.worker.test_state.test_Persistent.test_close_twice": [], "t.unit.worker.test_state.test_Persistent.test_constructor": [], "t.unit.worker.test_state.test_Persistent.test_save": [], "t.unit.worker.test_state.test_Persistent.add_revoked": ["celery.utils.collections.LimitedSet"], "t.unit.worker.test_state.test_Persistent.test_merge": ["celery.worker.state.revoked.update"], "celery.worker.state.revoked.update": [], "t.unit.worker.test_state.test_Persistent.test_merge_dict": ["time.time", "unittest.mock.Mock"], "t.unit.worker.test_state.test_Persistent.test_sync_clock_and_purge": ["unittest.mock.patch", "unittest.mock.Mock"], "t.unit.worker.test_state.test_Persistent.test_sync_clock_and_purge.<lambda1>": [], "t.unit.worker.test_state.test_Persistent.test_sync": ["celery.worker.state.revoked.add", "pickle.loads", "t.unit.worker.test_state.test_Persistent.add_revoked"], "t.unit.worker.test_state.SimpleReq.__init__": ["celery.uuid"], "t.unit.worker.test_state.test_state.test_accepted": ["celery.worker.state.task_accepted"], "celery.worker.state.task_accepted": [], "t.unit.worker.test_state.test_state.test_ready": ["celery.worker.state.task_ready", "<builtin>.len", "celery.worker.state.task_accepted"], "celery.worker.state.task_ready": [], "t.unit.worker.test_state.test_state_configuration.import_state": ["importlib.import_module", "unittest.mock.patch.dict"], "t.unit.worker.test_state.test_state_configuration": ["unittest.mock.patch.dict"], "t.unit.worker.test_state.test_state_configuration.test_custom_configuration": ["t.unit.worker.test_state.test_state_configuration.import_state"], "t.unit.worker.test_state.test_state_configuration.test_default_configuration": ["t.unit.worker.test_state.test_state_configuration.import_state"], "t.unit.worker": [], "t.unit.worker.test_heartbeat": [], "t.unit.worker.test_heartbeat.MockDispatcher.__init__": ["<builtin>.set"], "t.unit.worker.test_heartbeat.MockDispatcher.send": [], "t.unit.worker.test_heartbeat.MockTimer.call_repeatedly": [], "t.unit.worker.test_heartbeat.MockTimer.call_repeatedly.entry.cancel": [], "t.unit.worker.test_heartbeat.MockTimer.cancel": [], "t.unit.worker.test_heartbeat.test_Heart.test_start_stop": ["t.unit.worker.test_heartbeat.MockDispatcher.__init__", "celery.worker.heartbeat.Heart"], "celery.worker.heartbeat.Heart": [], "t.unit.worker.test_heartbeat.test_Heart.test_send_sends_signal": ["t.unit.worker.test_heartbeat.MockDispatcher.__init__", "unittest.mock.Mock", "celery.worker.heartbeat.Heart"], "t.unit.worker.test_heartbeat.test_Heart.test_start_when_disabled": ["t.unit.worker.test_heartbeat.MockDispatcher.__init__", "celery.worker.heartbeat.Heart"], "t.unit.worker.test_heartbeat.test_Heart.test_stop_when_disabled": ["t.unit.worker.test_heartbeat.MockDispatcher.__init__", "celery.worker.heartbeat.Heart"], "t.unit.worker.test_heartbeat.test_Heart.test_message_retries": ["t.unit.worker.test_heartbeat.MockDispatcher.__init__", "celery.worker.heartbeat.Heart"], "t.unit.worker.test_worker": [], "t.unit.worker.test_worker.MockStep": ["unittest.mock.Mock", "<builtin>.id"], "t.unit.worker.test_worker.mock_event_dispatcher": ["unittest.mock.Mock", "collections.deque"], "t.unit.worker.test_worker.find_step": [], "t.unit.worker.test_worker.create_message": ["<builtin>.dict", "kombu.utils.uuid.uuid", "kombu.transport.base.Message", "celery.utils.serialization.pickle.dumps"], "kombu.transport.base.Message": [], "t.unit.worker.test_worker.ConsumerCase.create_task_message": [], "t.unit.worker.test_worker.test_Consumer.setup_method": ["queue.Queue", "celery.utils.timer2.Timer"], "queue.Queue": [], "celery.utils.timer2.Timer": [], "t.unit.worker.test_worker.test_Consumer.setup_method.foo_task": [], "t.unit.worker.test_worker.test_Consumer.teardown_method": [], "t.unit.worker.test_worker.test_Consumer.LoopConsumer": ["celery.worker.consumer.Consumer", "kombu.common.QoS", "unittest.mock.Mock", "t.unit.worker.test_worker.mock_event_dispatcher"], "kombu.common.QoS": [], "t.unit.worker.test_worker.test_Consumer.NoopConsumer": ["t.unit.worker.test_worker.test_Consumer.LoopConsumer", "unittest.mock.Mock"], "t.unit.worker.test_worker.test_Consumer.test_info": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer", "unittest.mock.Mock"], "t.unit.worker.test_worker.test_Consumer.test_start_when_closed": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer"], "t.unit.worker.test_worker.test_Consumer.test_connection": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer", "<builtin>.isinstance"], "t.unit.worker.test_worker.test_Consumer.test_close_connection": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer", "t.unit.worker.test_worker.find_step"], "t.unit.worker.test_worker.test_Consumer.test_close_connection__heart_shutdown": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer", "t.unit.worker.test_worker.find_step"], "t.unit.worker.test_worker.test_Consumer": ["unittest.mock.patch"], "t.unit.worker.test_worker.test_Consumer.test_receive_message_unknown": ["t.unit.worker.test_worker.test_Consumer.LoopConsumer", "t.unit.worker.test_worker.test_Consumer._get_on_message", "unittest.mock.Mock", "t.unit.worker.test_worker.create_message"], "t.unit.worker.test_worker.test_Consumer._get_on_message": ["celery.exceptions.WorkerShutdown", "pytest.raises", "unittest.mock.Mock", "t.unit.worker.test_worker.mock_event_dispatcher"], "t.unit.worker.test_worker.test_Consumer.test_receive_message_eta_OverflowError": ["t.unit.worker.test_worker.ConsumerCase.create_task_message", "unittest.mock.Mock", "datetime.datetime.now", "<builtin>.OverflowError", "t.unit.worker.test_worker.test_Consumer._get_on_message", "t.unit.worker.test_worker.test_Consumer.LoopConsumer"], "<builtin>.OverflowError": [], "t.unit.worker.test_worker.test_Consumer.test_receive_message_InvalidTaskError": ["celery.exceptions.InvalidTaskError", "unittest.mock.Mock", "t.unit.worker.test_worker.ConsumerCase.create_task_message", "t.unit.worker.test_worker.test_Consumer._get_on_message", "t.unit.worker.test_worker.test_Consumer.LoopConsumer"], "t.unit.worker.test_worker.test_Consumer.test_on_decode_error": ["t.unit.worker.test_worker.test_Consumer.LoopConsumer", "<builtin>.KeyError", "unittest.mock.Mock.__init__"], "unittest.mock.Mock.__init__": [], "t.unit.worker.test_worker.test_Consumer.test_receieve_message": ["unittest.mock.Mock", "t.unit.worker.test_worker.ConsumerCase.create_task_message", "t.unit.worker.test_worker.test_Consumer._get_on_message", "t.unit.worker.test_worker.test_Consumer.LoopConsumer", "<builtin>.isinstance"], "t.unit.worker.test_worker.test_Consumer.test_start_channel_error": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer", "t.unit.worker.test_worker.test_Consumer.test_start_channel_error.loop_side_effect", "pytest.raises", "celery.concurrency.base.BasePool"], "t.unit.worker.test_worker.test_Consumer.test_start_channel_error.loop_side_effect": ["<builtin>.KeyError", "<builtin>.SyntaxError"], "<builtin>.SyntaxError": [], "t.unit.worker.test_worker.test_Consumer.test_start_connection_error": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer", "t.unit.worker.test_worker.test_Consumer.test_start_connection_error.loop_side_effect", "pytest.raises", "celery.concurrency.base.BasePool"], "t.unit.worker.test_worker.test_Consumer.test_start_connection_error.loop_side_effect": ["<builtin>.KeyError", "<builtin>.SyntaxError"], "t.unit.worker.test_worker.test_Consumer.test_loop_ignores_socket_timeout": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer", "kombu.common.QoS"], "t.unit.worker.test_worker.test_Consumer.test_loop_ignores_socket_timeout.Connection.drain_events": ["socket.timeout"], "t.unit.worker.test_worker.test_Consumer.test_loop_when_socket_error": ["kombu.common.QoS", "t.unit.worker.test_worker.test_Consumer.LoopConsumer", "pytest.raises"], "t.unit.worker.test_worker.test_Consumer.test_loop_when_socket_error.Connection.drain_events": ["<builtin>.OSError"], "t.unit.worker.test_worker.test_Consumer.test_loop": ["kombu.common.QoS", "t.unit.worker.test_worker.test_Consumer.LoopConsumer", "unittest.mock.Mock"], "t.unit.worker.test_worker.test_Consumer.test_loop.Connection.drain_events": [], "t.unit.worker.test_worker.test_Consumer.test_loop.Connection.supports_heartbeats": [], "t.unit.worker.test_worker.test_Consumer.test_ignore_errors": ["<builtin>.IndexError", "<builtin>.KeyError", "unittest.mock.Mock", "t.unit.worker.test_worker.test_Consumer.NoopConsumer", "<builtin>.AttributeError", "pytest.raises", "kombu.common.ignore_errors", "<builtin>.SyntaxError"], "<builtin>.AttributeError": [], "kombu.common.ignore_errors": [], "<builtin>.IndexError": [], "t.unit.worker.test_worker.test_Consumer.test_apply_eta_task": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer", "kombu.common.QoS", "unittest.mock.Mock"], "t.unit.worker.test_worker.test_Consumer.test_receieve_message_eta_isoformat": ["t.unit.worker.test_worker.ConsumerCase.create_task_message", "unittest.mock.Mock", "datetime.datetime.now", "t.unit.worker.test_worker.test_Consumer._get_on_message", "t.unit.worker.test_worker.test_Consumer.LoopConsumer", "kombu.common.QoS", "datetime.timedelta"], "t.unit.worker.test_worker.test_Consumer.test_pidbox_callback": ["<builtin>.KeyError", "unittest.mock.Mock", "t.unit.worker.test_worker.find_step", "t.unit.worker.test_worker.test_Consumer.NoopConsumer", "<builtin>.ValueError"], "t.unit.worker.test_worker.test_Consumer.test_revoke": ["unittest.mock.Mock", "t.unit.worker.test_worker.ConsumerCase.create_task_message", "t.unit.worker.test_worker.test_Consumer._get_on_message", "celery.worker.state.revoked.add", "t.unit.worker.test_worker.test_Consumer.LoopConsumer", "kombu.utils.uuid.uuid"], "t.unit.worker.test_worker.test_Consumer.test_receieve_message_not_registered": ["unittest.mock.Mock", "t.unit.worker.test_worker.ConsumerCase.create_task_message", "t.unit.worker.test_worker.test_Consumer._get_on_message", "t.unit.worker.test_worker.test_Consumer.LoopConsumer", "pytest.raises"], "t.unit.worker.test_worker.test_Consumer.test_receieve_message_ack_raises": ["unittest.mock.Mock", "t.unit.worker.test_worker.ConsumerCase.create_task_message", "t.unit.worker.test_worker.test_Consumer._get_on_message", "socket.error", "t.unit.worker.test_worker.test_Consumer.LoopConsumer", "pytest.raises"], "t.unit.worker.test_worker.test_Consumer.test_receive_message_eta": ["os.environ.get", "unittest.mock.Mock", "datetime.datetime.now", "t.unit.worker.test_worker.ConsumerCase.create_task_message", "t.unit.worker.test_worker.test_Consumer._get_on_message", "t.unit.worker.test_worker.test_Consumer.LoopConsumer", "<builtin>.len", "t.unit.worker.test_worker.test_Consumer.test_receive_message_eta.pp", "functools.partial", "pytest.raises", "<builtin>.isinstance", "datetime.timedelta"], "functools.partial": [], "t.unit.worker.test_worker.test_Consumer.test_receive_message_eta.pp": [], "t.unit.worker.test_worker.test_Consumer.test_reset_pidbox_node": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer", "unittest.mock.Mock", "t.unit.worker.test_worker.find_step", "socket.error"], "t.unit.worker.test_worker.test_Consumer.test_reset_pidbox_node_green": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer", "<builtin>.isinstance", "unittest.mock.Mock", "t.unit.worker.test_worker.find_step"], "t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer", "unittest.mock.Mock.__init__", "unittest.mock.Mock", "t.unit.worker.test_worker.find_step"], "t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node.BConsumer.__enter__": ["unittest.mock.Mock.consume"], "unittest.mock.Mock.consume": [], "t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node.BConsumer.__exit__": ["unittest.mock.Mock.cancel"], "unittest.mock.Mock.cancel": [], "t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node.Connection.__init__": ["t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node.Connection.channel"], "t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node.Connection.channel": ["unittest.mock.Mock"], "t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node.Connection.__enter__": [], "t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node.Connection.__exit__": ["t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node.Connection.close"], "t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node.Connection.close": [], "t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node.Connection.as_uri": [], "t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node.Connection.drain_events": ["socket.timeout"], "t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node.<lambda1>": ["t.unit.worker.test_worker.test_Consumer.test_green_pidbox_node.Connection.__init__"], "t.unit.worker.test_worker.test_Consumer.test_connect_errback": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer", "t.unit.worker.test_worker.test_Consumer.test_connect_errback.connect_side_effect"], "t.unit.worker.test_worker.test_Consumer.test_connect_errback.connect_side_effect": ["unittest.mock.Mock", "amqp.ChannelError"], "t.unit.worker.test_worker.test_Consumer.test_stop_pidbox_node": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer", "threading.Event", "t.unit.worker.test_worker.find_step"], "threading.Event": [], "t.unit.worker.test_worker.test_Consumer.test_start__loop": ["unittest.mock.Mock", "socket.error", "kombu.Connection", "t.unit.worker.test_worker.test_Consumer.NoopConsumer", "pytest.raises"], "t.unit.worker.test_worker.test_Consumer.test_start__loop._QoS.update": [], "t.unit.worker.test_worker.test_Consumer.test_start__loop.raises_KeyError": ["<builtin>.KeyError"], "t.unit.worker.test_worker.test_Consumer.test_reset_connection_with_no_node": ["t.unit.worker.test_worker.test_Consumer.NoopConsumer"], "t.unit.worker.test_worker.test_WorkController.setup_method": ["t.unit.worker.test_worker.test_WorkController.create_worker", "unittest.mock.Mock"], "t.unit.worker.test_worker.test_WorkController.create_worker": [], "t.unit.worker.test_worker.test_WorkController.setup_method.foo_task": [], "t.unit.worker.test_worker.test_WorkController.teardown_method": [], "t.unit.worker.test_worker.test_WorkController.test_on_consumer_ready": ["unittest.mock.Mock"], "t.unit.worker.test_worker.test_WorkController.test_setup_queues_worker_direct": ["celery.utils.nodenames.worker_direct", "unittest.mock.Mock"], "celery.utils.nodenames.worker_direct": [], "t.unit.worker.test_worker.test_WorkController.test_setup_queues__missing_queue": ["pytest.raises", "unittest.mock.Mock", "<builtin>.KeyError"], "t.unit.worker.test_worker.test_WorkController.test_send_worker_shutdown": ["unittest.mock.patch"], "t.unit.worker.test_worker.test_WorkController": ["unittest.mock.patch", "pytest.mark.skip", "pytest.mark.sleepdeprived_patched_module"], "t.unit.worker.test_worker.test_WorkController.test_process_shutdown_on_worker_shutdown": ["unittest.mock.patch", "celery.concurrency.asynpool.Worker"], "t.unit.worker.test_worker.test_WorkController.test_process_task_revoked_release_semaphore": ["unittest.mock.Mock", "<builtin>.delattr"], "t.unit.worker.test_worker.test_WorkController.test_shutdown_no_blueprint": [], "t.unit.worker.test_worker.test_WorkController.test_use_pidfile": ["t.unit.worker.test_worker.test_WorkController.create_worker", "unittest.mock.Mock"], "t.unit.worker.test_worker.test_WorkController.test_attrs": ["<builtin>.isinstance"], "t.unit.worker.test_worker.test_WorkController.test_with_embedded_beat": [], "t.unit.worker.test_worker.test_WorkController.test_with_autoscaler": ["t.unit.worker.test_worker.test_WorkController.create_worker"], "pytest.mark.sleepdeprived_patched_module": [], "t.unit.worker.test_worker.test_WorkController.test_with_autoscaler_file_descriptor_safety": ["celery.worker.state.task_reserved", "kombu.asynchronous.get_event_loop", "unittest.mock.Mock", "<builtin>.str", "<builtin>.open", "kombu.common.QoS", "t.unit.worker.test_worker.test_WorkController.create_worker", "<builtin>.range"], "t.unit.worker.test_worker.test_WorkController.test_with_autoscaler_file_descriptor_safety.<lambda1>": [], "kombu.asynchronous.get_event_loop": [], "celery.worker.state.task_reserved": [], "t.unit.worker.test_worker.test_WorkController.test_with_file_descriptor_safety": ["t.unit.worker.test_worker.test_WorkController.create_worker", "kombu.common.QoS", "kombu.asynchronous.get_event_loop", "unittest.mock.Mock"], "t.unit.worker.test_worker.test_WorkController.test_with_file_descriptor_safety.<lambda1>": [], "t.unit.worker.test_worker.test_WorkController.test_with_file_descriptor_safety.throw_file_not_found_error": ["<builtin>.OSError"], "t.unit.worker.test_worker.test_WorkController.test_dont_stop_or_terminate": [], "t.unit.worker.test_worker.test_WorkController.test_on_timer_error": ["<builtin>.KeyError", "celery.worker.components.Timer"], "t.unit.worker.test_worker.test_WorkController.test_on_timer_tick": ["celery.worker.components.Timer"], "t.unit.worker.test_worker.test_WorkController.test_process_task": ["celery.worker.request.Request", "unittest.mock.Mock", "t.unit.worker.test_worker.ConsumerCase.create_task_message"], "t.unit.worker.test_worker.test_WorkController.test_process_task_raise_base": ["t.unit.worker.test_worker.ConsumerCase.create_task_message", "celery.worker.request.Request", "unittest.mock.Mock", "<builtin>.KeyboardInterrupt", "pytest.raises"], "t.unit.worker.test_worker.test_WorkController.test_process_task_raise_WorkerTerminate": ["celery.worker.request.Request", "unittest.mock.Mock", "t.unit.worker.test_worker.ConsumerCase.create_task_message", "pytest.raises", "celery.exceptions.WorkerTerminate"], "t.unit.worker.test_worker.test_WorkController.test_process_task_raise_regular": ["t.unit.worker.test_worker.ConsumerCase.create_task_message", "celery.worker.request.Request", "unittest.mock.Mock", "<builtin>.KeyError", "pytest.raises"], "t.unit.worker.test_worker.test_WorkController.test_start_catches_base_exceptions": ["t.unit.worker.test_worker.MockStep", "t.unit.worker.test_worker.test_WorkController.create_worker", "celery.exceptions.WorkerTerminate", "celery.exceptions.WorkerShutdown"], "t.unit.worker.test_worker.test_WorkController.test_statedb": ["t.unit.worker.test_worker.test_WorkController.create_worker", "unittest.mock.Mock"], "t.unit.worker.test_worker.test_WorkController.test_process_task_sem": ["unittest.mock.Mock"], "t.unit.worker.test_worker.test_WorkController.test_signal_consumer_close": ["<builtin>.AttributeError", "unittest.mock.Mock"], "t.unit.worker.test_worker.test_WorkController.test_rusage__no_resource": ["pytest.raises", "unittest.mock.Mock"], "t.unit.worker.test_worker.test_WorkController.test_repr": ["<builtin>.repr"], "t.unit.worker.test_worker.test_WorkController.test_str": ["<builtin>.str"], "t.unit.worker.test_worker.test_WorkController.test_start__stop": ["t.unit.worker.test_worker.MockStep", "unittest.mock.Mock", "celery.bootsteps.StartStopStep", "<builtin>.range"], "celery.bootsteps.StartStopStep": [], "t.unit.worker.test_worker.test_WorkController.test_start__KeyboardInterrupt": ["unittest.mock.Mock", "<builtin>.KeyboardInterrupt"], "t.unit.worker.test_worker.test_WorkController.test_register_with_event_loop": ["unittest.mock.Mock"], "t.unit.worker.test_worker.test_WorkController.test_step_raises": ["<builtin>.TypeError", "unittest.mock.Mock"], "<builtin>.TypeError": [], "t.unit.worker.test_worker.test_WorkController.test_state": [], "t.unit.worker.test_worker.test_WorkController.test_start__terminate": ["t.unit.worker.test_worker.MockStep", "<builtin>.len", "<builtin>.range"], "t.unit.worker.test_worker.test_WorkController.test_Hub_create": ["celery.worker.components.Hub", "unittest.mock.Mock"], "t.unit.worker.test_worker.test_WorkController.test_Pool_create_threaded": ["celery.worker.components.Pool", "unittest.mock.Mock"], "t.unit.worker.test_worker.test_WorkController.test_Pool_pool_no_sem": ["celery.worker.components.Pool", "unittest.mock.Mock"], "t.unit.worker.test_worker.test_WorkController.test_Pool_create": ["celery.worker.components.Pool", "unittest.mock.Mock", "<builtin>.isinstance"], "t.unit.worker.test_worker.test_WorkController.test_Pool_create.MockTaskPool.timers": ["unittest.mock.Mock"], "t.unit.worker.test_strategy": [], "t.unit.worker.test_strategy.test_proto1_to_proto2.setup_method": ["unittest.mock.Mock"], "t.unit.worker.test_strategy.test_proto1_to_proto2.test_message_without_args": ["celery.worker.strategy.proto1_to_proto2"], "celery.worker.strategy.proto1_to_proto2": [], "t.unit.worker.test_strategy.test_proto1_to_proto2.test_message_without_kwargs": ["celery.worker.strategy.proto1_to_proto2"], "t.unit.worker.test_strategy.test_proto1_to_proto2.test_message_kwargs_not_mapping": ["celery.worker.strategy.proto1_to_proto2", "pytest.raises"], "t.unit.worker.test_strategy.test_proto1_to_proto2.test_message_no_taskset_id": ["celery.worker.strategy.proto1_to_proto2"], "t.unit.worker.test_strategy.test_proto1_to_proto2.test_message": ["celery.worker.strategy.proto1_to_proto2", "<builtin>.dict"], "t.unit.worker.test_strategy.test_default_strategy_proto2.setup_method": [], "t.unit.worker.test_strategy.test_default_strategy_proto2.setup_method.add": [], "t.unit.worker.test_strategy.test_default_strategy_proto2.get_message_class": [], "t.unit.worker.test_strategy.test_default_strategy_proto2.prepare_message": [], "t.unit.worker.test_strategy.test_default_strategy_proto2.Context.__init__": [], "t.unit.worker.test_strategy.test_default_strategy_proto2.Context.__call__": [], "t.unit.worker.test_strategy.test_default_strategy_proto2.Context.was_reserved": [], "t.unit.worker.test_strategy.test_default_strategy_proto2.Context.was_rate_limited": ["t.unit.worker.test_strategy.test_default_strategy_proto2.Context.was_reserved"], "t.unit.worker.test_strategy.test_default_strategy_proto2.Context.was_limited_with_eta": ["t.unit.worker.test_strategy.test_default_strategy_proto2.Context.was_reserved"], "t.unit.worker.test_strategy.test_default_strategy_proto2.Context.was_scheduled": ["t.unit.worker.test_strategy.test_default_strategy_proto2.Context.was_rate_limited", "t.unit.worker.test_strategy.test_default_strategy_proto2.Context.was_reserved"], "t.unit.worker.test_strategy.test_default_strategy_proto2.Context.event_sent": [], "t.unit.worker.test_strategy.test_default_strategy_proto2.Context.get_request": ["<builtin>.ValueError", "t.unit.worker.test_strategy.test_default_strategy_proto2.Context.was_rate_limited", "t.unit.worker.test_strategy.test_default_strategy_proto2.Context.was_scheduled", "t.unit.worker.test_strategy.test_default_strategy_proto2.Context.was_reserved"], "t.unit.worker.test_strategy.test_default_strategy_proto2": ["contextlib.contextmanager"], "t.unit.worker.test_strategy.test_default_strategy_proto2._context": ["unittest.mock.Mock", "<builtin>.set", "celery.utils.time.rate", "t.unit.worker.test_strategy.test_default_strategy_proto2.prepare_message", "t.unit.worker.test_strategy.test_default_strategy_proto2.Context.__init__", "collections.defaultdict", "t.unit.worker.test_strategy.test_default_strategy_proto2.get_message_class", "kombu.utils.limits.TokenBucket"], "t.unit.worker.test_strategy.test_default_strategy_proto2._context.<lambda1>": [], "celery.utils.time.rate": [], "kombu.utils.limits.TokenBucket": [], "t.unit.worker.test_strategy.test_default_strategy_proto2.test_when_logging_disabled": ["unittest.mock.patch", "t.unit.worker.test_strategy.test_default_strategy_proto2._context"], "t.unit.worker.test_strategy.test_default_strategy_proto2.test_task_strategy": ["t.unit.worker.test_strategy.test_default_strategy_proto2._context"], "t.unit.worker.test_strategy.test_default_strategy_proto2.test_callbacks": ["t.unit.worker.test_strategy.test_default_strategy_proto2._context", "unittest.mock.Mock"], "t.unit.worker.test_strategy.test_default_strategy_proto2.test_log_task_received": ["t.unit.worker.test_strategy.test_default_strategy_proto2._context"], "t.unit.worker.test_strategy.test_default_strategy_proto2.test_log_task_received_custom": ["unittest.mock.patch", "t.unit.worker.test_strategy.test_default_strategy_proto2._context", "<builtin>.set"], "t.unit.worker.test_strategy.test_default_strategy_proto2.test_signal_task_received": ["celery.signals.task_received.connect", "t.unit.worker.test_strategy.test_default_strategy_proto2._context", "unittest.mock.Mock"], "celery.signals.task_received.connect": [], "t.unit.worker.test_strategy.test_default_strategy_proto2.test_when_events_disabled": ["t.unit.worker.test_strategy.test_default_strategy_proto2._context"], "t.unit.worker.test_strategy.test_default_strategy_proto2.test_eta_task": ["t.unit.worker.test_strategy.test_default_strategy_proto2._context"], "t.unit.worker.test_strategy.test_default_strategy_proto2.test_eta_task_utc_disabled": ["t.unit.worker.test_strategy.test_default_strategy_proto2._context"], "t.unit.worker.test_strategy.test_default_strategy_proto2.test_when_rate_limited": ["t.unit.worker.test_strategy.test_default_strategy_proto2._context"], "t.unit.worker.test_strategy.test_default_strategy_proto2.test_when_rate_limited_with_eta": ["t.unit.worker.test_strategy.test_default_strategy_proto2._context"], "t.unit.worker.test_strategy.test_default_strategy_proto2.test_when_rate_limited__limits_disabled": ["t.unit.worker.test_strategy.test_default_strategy_proto2._context"], "t.unit.worker.test_strategy.test_default_strategy_proto2.test_when_revoked": ["celery.worker.state.revoked.add", "celery.worker.state.revoked.discard", "t.unit.worker.test_strategy.test_default_strategy_proto2._context", "pytest.raises"], "celery.worker.state.revoked.discard": [], "t.unit.worker.test_strategy.test_default_strategy_proto1.get_message_class": [], "t.unit.worker.test_strategy.test_default_strategy_proto1__no_utc.get_message_class": [], "t.unit.worker.test_strategy.test_default_strategy_proto1__no_utc.prepare_message": [], "t.unit.worker.test_strategy.test_custom_request_for_default_strategy.test_custom_request_gets_instantiated": ["celery.worker.strategy.default", "t.unit.worker.test_strategy.test_default_strategy_proto2._context", "unittest.mock.Mock"], "t.unit.worker.test_strategy.test_custom_request_for_default_strategy.test_custom_request_gets_instantiated.MyRequest.__init__": ["<builtin>.super"], "t.unit.worker.test_strategy.test_custom_request_for_default_strategy.test_custom_request_gets_instantiated.failed": [], "celery.worker.strategy.default": [], "t.unit.worker.test_strategy.test_hybrid_to_proto2.setup_method": ["unittest.mock.Mock"], "t.unit.worker.test_strategy.test_hybrid_to_proto2.test_retries_default_value": ["celery.worker.strategy.hybrid_to_proto2"], "t.unit.worker.test_strategy.test_hybrid_to_proto2.test_retries_custom_value": ["celery.worker.strategy.hybrid_to_proto2"], "t.unit.worker.test_strategy.test_hybrid_to_proto2.test_custom_headers": ["celery.worker.strategy.hybrid_to_proto2"], "t.unit.worker.test_autoscale": [], "t.unit.worker.test_autoscale.MockPool.__init__": ["<builtin>.super", "celery.utils.objects.Bunch"], "t.unit.worker.test_autoscale.MockPool.grow": [], "t.unit.worker.test_autoscale.MockPool.shrink": ["<builtin>.ValueError", "<builtin>.KeyError"], "t.unit.worker.test_autoscale.MockPool.num_processes": [], "t.unit.worker.test_autoscale.test_WorkerComponent.test_register_with_event_loop": ["celery.worker.autoscale.WorkerComponent", "unittest.mock.Mock", "<builtin>.set"], "celery.worker.autoscale.WorkerComponent": [], "t.unit.worker.test_autoscale.test_WorkerComponent.test_info_without_event_loop": ["celery.worker.autoscale.WorkerComponent", "unittest.mock.Mock"], "t.unit.worker.test_autoscale.test_Autoscaler.setup_method": ["t.unit.worker.test_autoscale.MockPool.__init__"], "t.unit.worker.test_autoscale.test_Autoscaler.test_stop": ["celery.worker.autoscale.Autoscaler.__init__", "unittest.mock.patch", "unittest.mock.Mock", "celery.worker.autoscale.Autoscaler.stop"], "t.unit.worker.test_autoscale.test_Autoscaler.test_stop.Scaler.is_alive": [], "t.unit.worker.test_autoscale.test_Autoscaler.test_stop.Scaler.join": [], "celery.worker.autoscale.Autoscaler.__init__": [], "celery.worker.autoscale.Autoscaler.stop": [], "t.unit.worker.test_autoscale.test_Autoscaler": ["unittest.mock.patch", "pytest.mark.sleepdeprived_patched_module"], "t.unit.worker.test_autoscale.test_Autoscaler.test_body": ["celery.worker.state.task_reserved", "celery.worker.state.reserved_requests.clear", "time.monotonic", "unittest.mock.Mock", "celery.worker.autoscale.Autoscaler", "<builtin>.range"], "celery.worker.autoscale.Autoscaler": [], "celery.worker.state.reserved_requests.clear": [], "t.unit.worker.test_autoscale.test_Autoscaler.test_run": ["celery.worker.autoscale.Autoscaler.__init__", "<builtin>.getattr", "unittest.mock.Mock", "celery.worker.autoscale.Autoscaler.run"], "t.unit.worker.test_autoscale.test_Autoscaler.test_run.Scaler.body": ["<builtin>.getattr"], "celery.worker.autoscale.Autoscaler.run": [], "t.unit.worker.test_autoscale.test_Autoscaler.test_shrink_raises_exception": ["celery.worker.autoscale.Autoscaler", "unittest.mock.Mock"], "t.unit.worker.test_autoscale.test_Autoscaler.test_shrink_raises_ValueError": ["celery.worker.autoscale.Autoscaler", "time.monotonic", "unittest.mock.Mock"], "t.unit.worker.test_autoscale.test_Autoscaler.test_update": ["celery.worker.autoscale.Autoscaler", "unittest.mock.Mock"], "t.unit.worker.test_autoscale.test_Autoscaler.test_prefetch_count_on_updates": ["celery.worker.autoscale.Autoscaler", "unittest.mock.Mock"], "t.unit.worker.test_autoscale.test_Autoscaler.test_prefetch_count_on_updates_prefetch_multiplier_gt_one": ["celery.worker.autoscale.Autoscaler", "unittest.mock.Mock"], "t.unit.worker.test_autoscale.test_Autoscaler.test_info": ["celery.worker.autoscale.Autoscaler", "unittest.mock.Mock"], "t.unit.worker.test_autoscale.test_Autoscaler.test_thread_crash": ["celery.worker.autoscale.Autoscaler.__init__", "unittest.mock.Mock", "celery.worker.autoscale.Autoscaler.run"], "t.unit.worker.test_autoscale.test_Autoscaler.test_thread_crash._Autoscaler.body": ["<builtin>.OSError", "<builtin>.getattr"], "t.unit.worker.test_autoscale.test_Autoscaler.test_no_negative_scale": ["celery.worker.state.task_reserved", "unittest.mock.Mock", "celery.worker.state.task_ready", "celery.worker.autoscale.Autoscaler", "<builtin>.all", "<builtin>.range"], "t.unit.worker.test_control": ["socket.gethostname"], "socket.gethostname": [], "t.unit.worker.test_control.WorkController.stats": [], "t.unit.worker.test_control.Consumer.__init__": ["unittest.mock.Mock", "celery.concurrency.base.BasePool", "collections.defaultdict", "celery.utils.timer2.Timer", "queue.Queue"], "t.unit.worker.test_control.Consumer.__init__.<lambda1>": [], "t.unit.worker.test_control.Consumer.call_soon": [], "t.unit.worker.test_control.test_Pidbox.test_shutdown": ["unittest.mock.patch", "unittest.mock.Mock", "celery.worker.pidbox.Pidbox"], "celery.worker.pidbox.Pidbox": [], "t.unit.worker.test_control.test_Pidbox_green.test_stop": ["celery.worker.pidbox.gPidbox", "unittest.mock.Mock"], "celery.worker.pidbox.gPidbox": [], "t.unit.worker.test_control.test_Pidbox_green.test_resets": ["celery.worker.pidbox.gPidbox", "unittest.mock.Mock"], "t.unit.worker.test_control.test_Pidbox_green.test_loop": ["celery.worker.pidbox.gPidbox", "unittest.mock.Mock"], "t.unit.worker.test_control.test_Pidbox_green.test_loop.se": [], "t.unit.worker.test_control.test_ControlPanel.setup_method": ["t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.create_panel": ["t.unit.worker.test_control.test_ControlPanel.create_state"], "t.unit.worker.test_control.test_ControlPanel.setup_method.mytask": [], "t.unit.worker.test_control.test_ControlPanel.create_state": ["celery.utils.collections.AttributeDict"], "t.unit.worker.test_control.test_ControlPanel.test_enable_events": ["<builtin>.set", "t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_disable_events": ["t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_clock": ["t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_hello": ["celery.worker.state.revoked.add", "celery.worker.state.revoked.discard", "t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_hello_does_not_send_expired_revoked_items": ["celery.worker.state.revoked.add", "time.monotonic", "t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_conf": ["t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_election": ["unittest.mock.Mock", "t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_election__no_gossip": ["unittest.mock.Mock", "t.unit.worker.test_control.test_ControlPanel.create_panel"], "t.unit.worker.test_control.test_ControlPanel.test_heartbeat": ["t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_time_limit": ["unittest.mock.Mock", "t.unit.worker.test_control.test_ControlPanel.create_panel"], "t.unit.worker.test_control.test_ControlPanel.test_active_queues": ["kombu.Exchange", "<builtin>.sorted", "unittest.mock.Mock", "<builtin>.list", "t.unit.worker.test_control.test_ControlPanel.create_panel", "kombu.Consumer", "kombu.Queue"], "kombu.Consumer": [], "t.unit.worker.test_control.test_ControlPanel.test_active_queues__empty": ["unittest.mock.Mock", "t.unit.worker.test_control.test_ControlPanel.create_panel"], "t.unit.worker.test_control.test_ControlPanel.test_dump_tasks": [], "t.unit.worker.test_control.test_ControlPanel.test_dump_tasks2": [], "t.unit.worker.test_control.test_ControlPanel.test_stats": [], "t.unit.worker.test_control.test_ControlPanel.test_report": [], "t.unit.worker.test_control.test_ControlPanel.test_active": ["celery.worker.state.active_requests.discard", "celery.worker.state.active_requests.add", "celery.worker.request.Request"], "celery.worker.state.active_requests.discard": [], "t.unit.worker.test_control.test_ControlPanel.test_active_safe": ["celery.worker.state.active_requests.discard", "celery.worker.state.active_requests.add", "celery.worker.request.Request"], "t.unit.worker.test_control.test_ControlPanel.test_pool_grow": ["t.unit.worker.test_control.test_ControlPanel.test_pool_grow.MockPool.__init__", "unittest.mock.Mock", "t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_pool_grow.MockPool.__init__": [], "t.unit.worker.test_control.test_ControlPanel.test_pool_grow.MockPool.grow": [], "t.unit.worker.test_control.test_ControlPanel.test_pool_grow.MockPool.shrink": [], "t.unit.worker.test_control.test_ControlPanel.test_pool_grow.MockPool.num_processes": [], "t.unit.worker.test_control.test_ControlPanel.test_add__cancel_consumer": ["t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_add__cancel_consumer.MockConsumer": ["unittest.mock.Mock"], "t.unit.worker.test_control.test_ControlPanel.test_add__cancel_consumer.MockConsumer.add_queue": [], "t.unit.worker.test_control.test_ControlPanel.test_add__cancel_consumer.MockConsumer.consume": [], "t.unit.worker.test_control.test_ControlPanel.test_add__cancel_consumer.MockConsumer.cancel_by_queue": [], "t.unit.worker.test_control.test_ControlPanel.test_add__cancel_consumer.MockConsumer.consuming_from": [], "t.unit.worker.test_control.test_ControlPanel.test_revoked": ["celery.worker.state.revoked.add", "<builtin>.sorted", "celery.worker.state.revoked.clear"], "t.unit.worker.test_control.test_ControlPanel.test_dump_schedule": ["celery.worker.request.Request", "datetime.datetime.now", "t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__", "<builtin>.object", "datetime.timedelta"], "t.unit.worker.test_control.test_ControlPanel.test_dump_schedule.<lambda1>": [], "t.unit.worker.test_control.test_ControlPanel.test_dump_schedule.<lambda2>": [], "t.unit.worker.test_control.test_ControlPanel.test_dump_reserved": ["celery.worker.state.task_reserved", "socket.gethostname", "celery.worker.state.reserved_requests.clear", "celery.worker.request.Request", "t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_rate_limit_invalid_rate_limit_string": [], "t.unit.worker.test_control.test_ControlPanel.test_rate_limit": ["t.unit.worker.test_control.test_ControlPanel.create_panel"], "t.unit.worker.test_control.test_ControlPanel.test_rate_limit.xConsumer.reset_rate_limits": [], "t.unit.worker.test_control.test_ControlPanel.test_rate_limit_nonexistant_task": [], "t.unit.worker.test_control.test_ControlPanel.test_unexposed_command": ["pytest.raises"], "t.unit.worker.test_control.test_ControlPanel.test_revoke_with_name": ["kombu.utils.uuid.uuid"], "t.unit.worker.test_control.test_ControlPanel.test_revoke_with_name_not_in_registry": ["kombu.utils.uuid.uuid"], "t.unit.worker.test_control.test_ControlPanel.test_revoke": ["kombu.utils.uuid.uuid"], "t.unit.worker.test_control.test_ControlPanel.test_revoke_terminate": ["celery.worker.state.task_reserved", "t.unit.worker.test_control.test_ControlPanel.create_state", "unittest.mock.Mock", "celery.worker.state.task_ready", "celery.worker.control.revoke", "kombu.utils.uuid.uuid"], "celery.worker.control.revoke": [], "t.unit.worker.test_control.test_ControlPanel.test_revoke_by_stamped_headers_terminate": ["celery.worker.state.task_reserved", "t.unit.worker.test_control.test_ControlPanel.create_state", "unittest.mock.Mock", "celery.worker.state.task_ready", "kombu.utils.uuid.uuid", "celery.worker.control.revoke_by_stamped_headers"], "celery.worker.control.revoke_by_stamped_headers": [], "t.unit.worker.test_control.test_ControlPanel.test_autoscale": ["unittest.mock.Mock"], "t.unit.worker.test_control.test_ControlPanel.test_ping": [], "t.unit.worker.test_control.test_ControlPanel.test_shutdown": ["pytest.raises"], "t.unit.worker.test_control.test_ControlPanel.test_panel_reply": ["t.unit.worker.test_control.test_ControlPanel.create_state", "kombu.pidbox.Node.__init__", "kombu.pidbox.Node.dispatch", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_panel_reply._Node.reply": [], "kombu.pidbox.Node.__init__": [], "kombu.pidbox.Node.dispatch": [], "t.unit.worker.test_control.test_ControlPanel.test_pool_restart": ["unittest.mock.Mock", "celery.worker.WorkController", "t.unit.worker.test_control.test_ControlPanel.create_panel", "<builtin>.NotImplementedError", "pytest.raises", "t.unit.worker.test_control.Consumer.__init__"], "celery.worker.WorkController": [], "t.unit.worker.test_control.test_ControlPanel": ["unittest.mock.patch"], "t.unit.worker.test_control.test_ControlPanel.test_pool_restart_import_modules": ["unittest.mock.patch", "unittest.mock.Mock", "celery.worker.WorkController", "t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_pool_restart_reload_modules": ["unittest.mock.patch.dict", "unittest.mock.Mock", "celery.worker.WorkController", "t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__"], "t.unit.worker.test_control.test_ControlPanel.test_query_task": ["celery.worker.state.task_reserved", "celery.worker.state.reserved_requests.clear", "celery.worker.request.Request", "celery.worker.WorkController", "t.unit.worker.test_control.test_ControlPanel.create_panel", "t.unit.worker.test_control.Consumer.__init__", "celery.worker.state.active_requests.clear", "celery.worker.state.active_requests.add"], "t.unit.utils.test_utils": ["pytest.mark.parametrize"], "t.unit.utils.test_utils.test_chunks": ["celery.utils.chunks", "<builtin>.iter", "<builtin>.list"], "celery.utils.chunks": [], "t.unit.utils.test_utils.test_cached_property": ["celery.utils.cached_property"], "t.unit.utils.test_utils.test_cached_property.fun": [], "t.unit.utils.test_nodenames": [], "t.unit.utils.test_nodenames.test_worker_direct.test_returns_if_queue": ["kombu.Queue", "celery.utils.nodenames.worker_direct"], "t.unit.utils.test_serialization": [], "t.unit.utils.test_serialization.test_AAPickle": ["pytest.mark.masked_modules"], "t.unit.utils.test_serialization.test_AAPickle.test_no_cpickle": ["sys.modules.pop"], "t.unit.utils.test_serialization.test_ensure_serializable.test_json_py3": ["celery.utils.serialization.ensure_serializable"], "t.unit.utils.test_serialization.test_ensure_serializable.test_pickle": ["celery.utils.serialization.ensure_serializable"], "t.unit.utils.test_serialization.test_UnpickleExceptionWrapper.test_init": ["celery.utils.serialization.UnpickleableExceptionWrapper", "<builtin>.len"], "t.unit.utils.test_serialization.test_UnpickleExceptionWrapper.test_init.<list1>.<lambda1>": [], "celery.utils.serialization.UnpickleableExceptionWrapper": [], "t.unit.utils.test_serialization.test_get_pickleable_etype.test_get_pickleable_etype": ["celery.utils.serialization.get_pickleable_etype"], "t.unit.utils.test_serialization.test_get_pickleable_etype.test_get_pickleable_etype.Unpickleable.__reduce__": ["<builtin>.ValueError"], "celery.utils.serialization.get_pickleable_etype": [], "t.unit.utils.test_serialization.test_jsonify": ["pytest.mark.parametrize"], "t.unit.utils.test_serialization.test_jsonify.test_simple": ["celery.utils.serialization.jsonify"], "celery.utils.serialization.jsonify": [], "t.unit.utils.test_serialization.test_jsonify.test_unknown_type_filter": ["<builtin>.object", "pytest.raises", "unittest.mock.Mock", "celery.utils.serialization.jsonify"], "celery.utils.serialization.STRTOBOOL_DEFAULT_TABLE.items": [], "t.unit.utils.test_serialization.test_strtobool": ["celery.utils.serialization.STRTOBOOL_DEFAULT_TABLE.items", "pytest.mark.parametrize"], "t.unit.utils.test_serialization.test_strtobool.test_default_table": ["celery.utils.serialization.strtobool"], "celery.utils.serialization.strtobool": [], "t.unit.utils.test_serialization.test_strtobool.test_unknown_value": ["pytest.raises", "celery.utils.serialization.strtobool"], "t.unit.utils.test_serialization.test_strtobool.test_no_op": ["celery.utils.serialization.strtobool"], "t.unit.utils.test_serialization.test_strtobool.test_custom_table": ["celery.utils.serialization.strtobool"], "t.unit.utils.test_local": [], "t.unit.utils.test_local.test_try_import.test_imports": ["celery.local.try_import"], "celery.local.try_import": [], "t.unit.utils.test_local.test_try_import.test_when_default": ["<builtin>.object", "celery.local.try_import"], "t.unit.utils.test_local.test_Proxy.test_std_class_attributes": ["<builtin>.isinstance"], "t.unit.utils.test_local.test_Proxy.test_doc": ["celery.local.Proxy"], "t.unit.utils.test_local.test_Proxy.test_doc.real": [], "celery.local.Proxy": [], "t.unit.utils.test_local.test_Proxy.test_name": ["<builtin>.repr", "<builtin>.type", "celery.local.Proxy"], "t.unit.utils.test_local.test_Proxy.test_name.real": [], "t.unit.utils.test_local.test_Proxy.test_name.<lambda1>": [], "t.unit.utils.test_local.test_Proxy.test_name.<lambda2>": [], "t.unit.utils.test_local.test_Proxy.test_get_current_local": ["celery.local.Proxy", "unittest.mock.Mock"], "t.unit.utils.test_local.test_Proxy.test_get_current_local.<lambda1>": [], "t.unit.utils.test_local.test_Proxy.test_bool": ["celery.local.Proxy"], "t.unit.utils.test_local.test_Proxy.test_bool.X.__bool__": [], "t.unit.utils.test_local.test_Proxy.test_bool.<lambda1>": [], "t.unit.utils.test_local.test_Proxy.test_slots": ["celery.local.Proxy", "pytest.raises"], "t.unit.utils.test_local.test_Proxy.test_dir": ["<builtin>.dir", "celery.local.Proxy"], "t.unit.utils.test_local.test_Proxy.test_dir.X.__dir__": [], "t.unit.utils.test_local.test_Proxy.test_dir.<lambda1>": [], "<builtin>.dir": [], "t.unit.utils.test_local.test_Proxy.test_dir.Y.__dir__": ["<builtin>.RuntimeError"], "t.unit.utils.test_local.test_Proxy.test_dir.<lambda2>": [], "t.unit.utils.test_local.test_Proxy.test_getsetdel_attr": ["<builtin>.setattr", "celery.local.Proxy"], "t.unit.utils.test_local.test_Proxy.test_getsetdel_attr.X.__dir__": [], "t.unit.utils.test_local.test_Proxy.test_getsetdel_attr.<lambda1>": [], "t.unit.utils.test_local.test_Proxy.test_dictproxy": ["<builtin>.iter", "celery.local.Proxy", "<builtin>.len", "pytest.raises"], "t.unit.utils.test_local.test_Proxy.test_dictproxy.<lambda1>": [], "t.unit.utils.test_local.test_Proxy.test_listproxy": ["<builtin>.iter", "celery.local.Proxy", "<builtin>.len", "<builtin>.str"], "t.unit.utils.test_local.test_Proxy.test_listproxy.<lambda1>": [], "t.unit.utils.test_local.test_Proxy.test_complex_cast": ["celery.local.Proxy", "<builtin>.complex"], "t.unit.utils.test_local.test_Proxy.test_complex_cast.O.__complex__": ["<builtin>.complex"], "<builtin>.complex": [], "t.unit.utils.test_local.test_Proxy.test_index": ["celery.local.Proxy"], "t.unit.utils.test_local.test_Proxy.test_index.O.__index__": [], "t.unit.utils.test_local.test_Proxy.test_coerce": ["celery.local.Proxy"], "t.unit.utils.test_local.test_Proxy.test_coerce.O.__coerce__": [], "t.unit.utils.test_local.test_Proxy.test_int": ["<builtin>.oct", "<builtin>.abs", "<builtin>.hex", "<builtin>.type", "celery.local.Proxy"], "t.unit.utils.test_local.test_Proxy.test_int.<lambda1>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda2>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda3>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda4>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda5>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda6>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda7>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda8>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda9>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda10>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda11>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda12>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda13>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda14>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda15>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda16>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda17>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda18>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda19>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda20>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda21>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda22>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda23>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda24>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda25>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda26>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda27>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda28>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda29>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda30>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda31>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda32>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda33>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda34>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda35>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda36>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda37>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda38>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda39>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda40>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda41>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda42>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda43>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda44>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda45>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda46>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda47>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda48>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda49>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda50>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda51>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda52>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda53>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda54>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda55>": [], "t.unit.utils.test_local.test_Proxy.test_int.<lambda56>": [], "<builtin>.hex": [], "<builtin>.oct": [], "t.unit.utils.test_local.test_Proxy.test_hash": ["celery.local.Proxy", "<builtin>.hash"], "t.unit.utils.test_local.test_Proxy.test_hash.X.__hash__": [], "t.unit.utils.test_local.test_Proxy.test_hash.<lambda1>": [], "t.unit.utils.test_local.test_Proxy.test_call": ["celery.local.Proxy"], "t.unit.utils.test_local.test_Proxy.test_call.X.__call__": [], "t.unit.utils.test_local.test_Proxy.test_call.<lambda1>": [], "t.unit.utils.test_local.test_Proxy.test_context": ["celery.local.Proxy"], "t.unit.utils.test_local.test_Proxy.test_context.X.__enter__": [], "t.unit.utils.test_local.test_Proxy.test_context.X.__exit__": [], "t.unit.utils.test_local.test_Proxy.test_context.<lambda1>": [], "t.unit.utils.test_local.test_Proxy.test_reduce": ["celery.local.Proxy"], "t.unit.utils.test_local.test_Proxy.test_reduce.X.__reduce__": [], "t.unit.utils.test_local.test_Proxy.test_reduce.<lambda1>": [], "t.unit.utils.test_local.test_PromiseProxy.test_only_evaluated_once": ["celery.local.PromiseProxy"], "t.unit.utils.test_local.test_PromiseProxy.test_only_evaluated_once.X.__init__": [], "celery.local.PromiseProxy": [], "t.unit.utils.test_local.test_PromiseProxy.test_callbacks": ["<builtin>.repr", "pytest.raises", "unittest.mock.Mock", "celery.local.PromiseProxy"], "t.unit.utils.test_local.test_PromiseProxy.test_maybe_evaluate": ["celery.local.maybe_evaluate", "celery.local.PromiseProxy"], "t.unit.utils.test_local.test_PromiseProxy.test_maybe_evaluate.<lambda1>": [], "celery.local.maybe_evaluate": [], "t.unit.utils.test_local.test_celery_import.test_import_celery": ["importlib.util.find_spec"], "importlib.util.find_spec": [], "t.unit.utils.test_sysinfo": ["pytest.mark.skipif", "importlib.import_module", "<builtin>.hasattr"], "t.unit.utils.test_sysinfo.test_load_average": ["celery.utils.sysinfo.load_average"], "celery.utils.sysinfo.load_average": [], "t.unit.utils.test_sysinfo.test_df": ["celery.utils.sysinfo.df"], "celery.utils.sysinfo.df": [], "t.unit.utils.test_dispatcher": ["celery.utils.dispatch.Signal", "<builtin>.hasattr", "sys.platform.startswith"], "sys.platform.startswith": [], "t.unit.utils.test_dispatcher.garbage_collect": ["time.sleep", "gc.collect"], "t.unit.utils.test_dispatcher.receiver_1_arg": [], "t.unit.utils.test_dispatcher.Callable.__call__": [], "t.unit.utils.test_dispatcher.Callable.a": [], "celery.utils.dispatch.Signal": [], "t.unit.utils.test_dispatcher.test_Signal._testIsClean": [], "t.unit.utils.test_dispatcher.test_Signal.test_exact": ["t.unit.utils.test_dispatcher.test_Signal._testIsClean"], "t.unit.utils.test_dispatcher.test_Signal.test_ignored_sender": ["t.unit.utils.test_dispatcher.test_Signal._testIsClean"], "t.unit.utils.test_dispatcher.test_Signal.test_garbage_collected": ["t.unit.utils.test_dispatcher.garbage_collect", "t.unit.utils.test_dispatcher.test_Signal._testIsClean"], "t.unit.utils.test_dispatcher.test_Signal.test_multiple_registration": ["t.unit.utils.test_dispatcher.garbage_collect", "<builtin>.len", "t.unit.utils.test_dispatcher.test_Signal._testIsClean"], "t.unit.utils.test_dispatcher.test_Signal.test_uid_registration": ["<builtin>.len", "t.unit.utils.test_dispatcher.test_Signal._testIsClean"], "t.unit.utils.test_dispatcher.test_Signal.test_uid_registration.uid_based_receiver_1": [], "t.unit.utils.test_dispatcher.test_Signal.test_uid_registration.uid_based_receiver_2": [], "t.unit.utils.test_dispatcher.test_Signal.test_robust": ["t.unit.utils.test_dispatcher.test_Signal._testIsClean"], "t.unit.utils.test_dispatcher.test_Signal.test_robust.fails": ["<builtin>.ValueError"], "t.unit.utils.test_dispatcher.test_Signal.test_disconnection": ["t.unit.utils.test_dispatcher.garbage_collect", "t.unit.utils.test_dispatcher.test_Signal._testIsClean"], "t.unit.utils.test_dispatcher.test_Signal.test_retry": ["t.unit.utils.test_dispatcher.test_Signal._testIsClean"], "t.unit.utils.test_dispatcher.test_Signal.test_retry.succeeds_eventually": ["<builtin>.ValueError"], "t.unit.utils.test_dispatcher.test_Signal.test_retry_with_dispatch_uid": ["t.unit.utils.test_dispatcher.test_Signal._testIsClean"], "t.unit.utils.test_dispatcher.test_Signal.test_boundmethod": ["t.unit.utils.test_dispatcher.garbage_collect", "t.unit.utils.test_dispatcher.test_Signal._testIsClean"], "t.unit.utils.test_objects": [], "t.unit.utils.test_objects.test_Bunch.test": ["celery.utils.objects.Bunch"], "t.unit.utils.test_text": ["pytest.mark.parametrize"], "t.unit.utils.test_text.test_Info.test_textindent": ["celery.utils.text.indent"], "celery.utils.text.indent": [], "t.unit.utils.test_text.test_Info.test_format_queues": ["<builtin>.sorted"], "t.unit.utils.test_text.test_Info.test_ensure_newlines": ["celery.utils.text.ensure_newlines", "<builtin>.len"], "celery.utils.text.ensure_newlines": [], "t.unit.utils.test_text.test_truncate_text": ["celery.utils.text.truncate"], "celery.utils.text.truncate": [], "t.unit.utils.test_text.test_abbr": ["celery.utils.text.abbr"], "celery.utils.text.abbr": [], "t.unit.utils.test_text.test_abbrtask": ["celery.utils.text.abbrtask"], "celery.utils.text.abbrtask": [], "t.unit.utils.test_text.test_pretty": ["celery.utils.text.pretty"], "celery.utils.text.pretty": [], "t.unit.utils.test_time": ["pytest.mark.parametrize"], "t.unit.utils.test_time.test_LocalTimezone.test_daylight": ["unittest.mock.Mock", "datetime.datetime.now", "celery.utils.time.LocalTimezone", "<builtin>.repr", "datetime.timedelta"], "celery.utils.time.LocalTimezone": [], "t.unit.utils.test_time.test_iso8601.test_parse_with_timezone": ["datetime.datetime.utcnow", "celery.utils.iso8601.parse_iso8601"], "celery.utils.iso8601.parse_iso8601": [], "t.unit.utils.test_time.test_delta_resolution": ["datetime.datetime", "celery.utils.time.delta_resolution"], "celery.utils.time.delta_resolution": [], "t.unit.utils.test_time.test_humanize_seconds": ["celery.utils.time.humanize_seconds"], "celery.utils.time.humanize_seconds": [], "t.unit.utils.test_time.test_humanize_seconds__prefix": ["celery.utils.time.humanize_seconds"], "t.unit.utils.test_time.test_maybe_iso8601_datetime": ["celery.utils.time.maybe_iso8601", "datetime.datetime.now"], "celery.utils.time.maybe_iso8601": [], "t.unit.utils.test_time.test_maybe_timedelta": ["celery.utils.time.maybe_timedelta"], "celery.utils.time.maybe_timedelta": [], "t.unit.utils.test_time.test_remaining": ["datetime.datetime.now", "<builtin>.str", "celery.utils.time.remaining", "datetime.datetime.utcnow", "pytz.timezone", "pytest.approx", "datetime.datetime", "celery.utils.time.ffwd", "datetime.timedelta"], "celery.utils.time.remaining": [], "pytest.approx": [], "celery.utils.time.ffwd": [], "t.unit.utils.test_time.test_timezone.test_get_timezone_with_pytz": ["celery.utils.time.timezone.get_timezone"], "t.unit.utils.test_time.test_timezone.test_tz_or_local": ["celery.utils.time.timezone.tz_or_local"], "celery.utils.time.timezone.tz_or_local": [], "t.unit.utils.test_time.test_timezone.test_to_local": ["datetime.datetime.utcnow", "celery.utils.time.make_aware", "celery.utils.time.timezone.to_local"], "celery.utils.time.make_aware": [], "celery.utils.time.timezone.to_local": [], "t.unit.utils.test_time.test_timezone.test_to_local_fallback": ["datetime.datetime.utcnow", "celery.utils.time.make_aware", "celery.utils.time.timezone.to_local_fallback"], "celery.utils.time.timezone.to_local_fallback": [], "t.unit.utils.test_time.test_make_aware.test_tz_without_localize": ["datetime.tzinfo", "datetime.datetime.utcnow", "celery.utils.time.make_aware", "<builtin>.hasattr"], "datetime.tzinfo": [], "t.unit.utils.test_time.test_make_aware.test_when_has_localize": ["datetime.tzinfo.__init__", "datetime.datetime.utcnow", "celery.utils.time.make_aware"], "t.unit.utils.test_time.test_make_aware.test_when_has_localize.tzz.localize": ["pytz.AmbiguousTimeError"], "pytz.AmbiguousTimeError": [], "datetime.tzinfo.__init__": [], "t.unit.utils.test_time.test_make_aware.test_maybe_make_aware": ["celery.utils.time.maybe_make_aware", "datetime.datetime.utcnow", "pytz.timezone"], "celery.utils.time.maybe_make_aware": [], "t.unit.utils.test_time.test_localize.test_tz_without_normalize": ["celery.utils.time.make_aware", "datetime.datetime.utcnow", "datetime.tzinfo.__init__", "<builtin>.hasattr", "celery.utils.time.localize"], "t.unit.utils.test_time.test_localize.test_tz_without_normalize.tzz.utcoffset": [], "t.unit.utils.test_time.test_localize.test_when_has_normalize": ["celery.utils.time.make_aware", "datetime.datetime.utcnow", "datetime.tzinfo.__init__", "pytz.AmbiguousTimeError", "<builtin>.TypeError", "celery.utils.time.localize"], "t.unit.utils.test_time.test_localize.test_when_has_normalize.tzz.utcoffset": [], "t.unit.utils.test_time.test_localize.test_when_has_normalize.tzz.normalize": [], "t.unit.utils.test_time.test_localize.test_localize_changes_utc_dt": ["celery.utils.time.localize", "pytz.timezone", "datetime.datetime.now"], "t.unit.utils.test_time.test_localize.test_localize_aware_dt_idempotent": ["t.unit.utils.test_time.test_localize.test_tz_without_normalize.tzz.utcoffset", "t.unit.utils.test_time.test_localize.test_when_has_normalize.tzz.utcoffset", "datetime.tzinfo.utcoffset", "pytz.timezone", "celery.utils.time.localize", "datetime.datetime"], "datetime.tzinfo.utcoffset": [], "t.unit.utils.test_time.test_rate_limit_string": ["celery.utils.time.rate"], "t.unit.utils.test_time.test_ffwd.test_repr": ["celery.utils.time.ffwd", "<builtin>.repr"], "t.unit.utils.test_time.test_ffwd.test_radd_with_unknown_gives_NotImplemented": ["celery.utils.time.ffwd", "<builtin>.object"], "t.unit.utils.test_time.test_utcoffset.test_utcoffset": ["celery.utils.time.utcoffset"], "celery.utils.time.utcoffset": [], "t.unit.utils.test_time.test_get_exponential_backoff_interval.<lambda1>": [], "t.unit.utils.test_time.test_get_exponential_backoff_interval": ["unittest.mock.patch"], "t.unit.utils.test_time.test_get_exponential_backoff_interval.test_with_jitter": ["celery.utils.time.get_exponential_backoff_interval"], "celery.utils.time.get_exponential_backoff_interval": [], "t.unit.utils.test_time.test_get_exponential_backoff_interval.test_without_jitter": ["celery.utils.time.get_exponential_backoff_interval"], "t.unit.utils.test_time.test_get_exponential_backoff_interval.test_bound_by_maximum": ["celery.utils.time.get_exponential_backoff_interval"], "t.unit.utils.test_time.test_get_exponential_backoff_interval.<lambda2>": [], "t.unit.utils.test_time.test_get_exponential_backoff_interval.test_negative_values": ["celery.utils.time.get_exponential_backoff_interval"], "t.unit.utils.test_time.test_get_exponential_backoff_interval.test_valid_random_range": ["celery.utils.time.get_exponential_backoff_interval"], "t.unit.utils.test_functional": ["pytest.mark.parametrize"], "t.unit.utils.test_functional.test_DummyContext": ["celery.utils.functional.DummyContext", "pytest.raises", "<builtin>.KeyError"], "celery.utils.functional.DummyContext": [], "t.unit.utils.test_functional.test_padlist": ["celery.utils.functional.padlist"], "celery.utils.functional.padlist": [], "t.unit.utils.test_functional.test_firstmethod.test_AttributeError": ["celery.utils.functional.firstmethod"], "celery.utils.functional.firstmethod": [], "t.unit.utils.test_functional.test_firstmethod.test_handles_lazy": ["celery.utils.functional.firstmethod"], "t.unit.utils.test_functional.test_firstmethod.test_handles_lazy.A.__init__": [], "t.unit.utils.test_functional.test_firstmethod.test_handles_lazy.A.m": [], "t.unit.utils.test_functional.test_first": ["celery.utils.functional.first", "<builtin>.range"], "t.unit.utils.test_functional.test_first.predicate": [], "celery.utils.functional.first": [], "t.unit.utils.test_functional.test_lookahead": ["celery.utils.functional.lookahead", "<builtin>.list", "<builtin>.range"], "celery.utils.functional.lookahead": [], "t.unit.utils.test_functional.test_maybe_list": ["celery.utils.functional.maybe_list"], "celery.utils.functional.maybe_list": [], "t.unit.utils.test_functional.test_mlazy": ["celery.utils.functional.mlazy", "<builtin>.iter", "<builtin>.repr", "<builtin>.range"], "celery.utils.functional.mlazy": [], "t.unit.utils.test_functional.test_regen.test_list": ["celery.utils.functional.regen", "<builtin>.iter"], "celery.utils.functional.regen": [], "t.unit.utils.test_functional.test_regen": ["pytest.fixture"], "t.unit.utils.test_functional.test_regen.g": ["celery.utils.functional.regen", "<builtin>.iter", "<builtin>.list", "<builtin>.range"], "t.unit.utils.test_functional.test_regen.test_gen": ["<builtin>.list", "<builtin>.range"], "t.unit.utils.test_functional.test_regen.test_gen__index_2": ["<builtin>.list", "<builtin>.range"], "t.unit.utils.test_functional.test_regen.test_gen__index_error": ["<builtin>.iter", "pytest.raises", "<builtin>.list", "<builtin>.range"], "t.unit.utils.test_functional.test_regen.test_gen__negative_index": ["<builtin>.iter", "<builtin>.list", "<builtin>.range"], "t.unit.utils.test_functional.test_regen.test_nonzero__does_not_consume_more_than_first_item": ["celery.utils.functional.regen", "<builtin>.bool", "t.unit.utils.test_functional.test_regen.test_nonzero__does_not_consume_more_than_first_item.build_generator"], "t.unit.utils.test_functional.test_regen.test_nonzero__does_not_consume_more_than_first_item.build_generator": ["pytest.fail"], "t.unit.utils.test_functional.test_regen.test_nonzero__empty_iter": ["celery.utils.functional.regen", "<builtin>.iter"], "t.unit.utils.test_functional.test_regen.test_deque": ["celery.utils.functional.regen", "collections.deque"], "t.unit.utils.test_functional.test_regen.test_repr": ["celery.utils.functional.regen", "<builtin>.repr", "t.unit.utils.test_functional.test_regen.test_repr.die"], "t.unit.utils.test_functional.test_regen.test_repr.die": ["<builtin>.AssertionError"], "t.unit.utils.test_functional.test_regen.test_partial_reconcretisation": ["<builtin>.list", "pytest.xfail", "t.unit.utils.test_functional.test_regen.test_partial_reconcretisation.WeirdIterator.__init__", "celery.utils.functional.regen", "pytest.raises", "<builtin>.next", "<builtin>.iter", "<builtin>.getattr", "<builtin>.range"], "t.unit.utils.test_functional.test_regen.test_partial_reconcretisation.WeirdIterator.__init__": [], "t.unit.utils.test_functional.test_regen.test_partial_reconcretisation.WeirdIterator.__iter__": ["<builtin>.AssertionError"], "pytest.xfail": [], "t.unit.utils.test_functional.test_regen.test_length_hint_passthrough": [], "t.unit.utils.test_functional.test_regen.test_getitem_repeated": ["<builtin>.range"], "t.unit.utils.test_functional.test_regen.test_done_does_not_lag": ["<builtin>.zip", "<builtin>.getattr", "<builtin>.range"], "t.unit.utils.test_functional.test_regen.test_lookahead_consume": ["t.unit.utils.test_functional.test_regen.test_lookahead_consume.g", "celery.utils.functional.regen", "pytest.raises", "t.unit.utils.test_functional.test_regen.test_lookahead_consume.g2", "<builtin>.next", "<builtin>.bool", "<builtin>.iter"], "t.unit.utils.test_functional.test_regen.test_lookahead_consume.g": ["pytest.fail"], "t.unit.utils.test_functional.test_regen.test_lookahead_consume.g2": [], "t.unit.utils.test_functional.test_head_from_fun.test_from_cls": ["celery.utils.functional.head_from_fun", "pytest.raises"], "t.unit.utils.test_functional.test_head_from_fun.test_from_cls.X.__call__": [], "celery.utils.functional.head_from_fun": [], "t.unit.utils.test_functional.test_head_from_fun.test_from_fun": ["celery.utils.functional.head_from_fun", "pytest.raises"], "t.unit.utils.test_functional.test_head_from_fun.test_from_fun.f": [], "t.unit.utils.test_functional.test_head_from_fun.test_regression_3678": ["<builtin>.exec", "pytest.raises", "celery.utils.functional.head_from_fun"], "<builtin>.exec": [], "t.unit.utils.test_functional.test_head_from_fun.test_from_fun_with_hints": ["<builtin>.exec", "pytest.raises", "celery.utils.functional.head_from_fun"], "t.unit.utils.test_functional.test_head_from_fun.test_from_fun_forced_kwargs": ["<builtin>.exec", "pytest.raises", "celery.utils.functional.head_from_fun"], "t.unit.utils.test_functional.test_head_from_fun.test_classmethod": ["celery.utils.functional.head_from_fun"], "t.unit.utils.test_functional.test_head_from_fun.test_classmethod.A.f": [], "t.unit.utils.test_functional.test_head_from_fun.test_kwonly_required_args": ["<builtin>.exec", "pytest.raises", "celery.utils.functional.head_from_fun"], "t.unit.utils.test_functional.test_fun_takes_argument.test_starkwargs": ["celery.utils.functional.fun_takes_argument"], "t.unit.utils.test_functional.test_fun_takes_argument.test_starkwargs.<lambda1>": [], "celery.utils.functional.fun_takes_argument": [], "t.unit.utils.test_functional.test_fun_takes_argument.test_named": ["celery.utils.functional.fun_takes_argument"], "t.unit.utils.test_functional.test_fun_takes_argument.test_named.<lambda1>": [], "t.unit.utils.test_functional.test_fun_takes_argument.test_named.fun": [], "t.unit.utils.test_functional.test_fun_takes_argument.test_starargs": ["celery.utils.functional.fun_takes_argument"], "t.unit.utils.test_functional.test_fun_takes_argument.test_starargs.<lambda1>": [], "t.unit.utils.test_functional.test_fun_takes_argument.test_does_not": ["celery.utils.functional.fun_takes_argument"], "t.unit.utils.test_functional.test_fun_takes_argument.test_does_not.<lambda1>": [], "t.unit.utils.test_functional.test_fun_takes_argument.test_does_not.<lambda2>": [], "t.unit.utils.test_functional.test_fun_takes_argument.test_does_not.fun": [], "t.unit.utils.test_functional.test_seq_concat_seq": ["celery.utils.functional.seq_concat_seq", "<builtin>.type"], "celery.utils.functional.seq_concat_seq": [], "t.unit.utils.test_functional.test_seq_concat_item": ["<builtin>.type", "celery.utils.functional.seq_concat_item"], "celery.utils.functional.seq_concat_item": [], "t.unit.utils.test_functional.StarKwargsCallable.__call__": [], "t.unit.utils.test_functional.StarArgsStarKwargsCallable.__call__": [], "t.unit.utils.test_functional.StarArgsCallable.__call__": [], "t.unit.utils.test_functional.ArgsCallable.__call__": [], "t.unit.utils.test_functional.ArgsStarKwargsCallable.__call__": [], "t.unit.utils.test_functional.test_fun_accepts_kwargs": ["pytest.mark.parametrize"], "t.unit.utils.test_functional.test_fun_accepts_kwargs.test_accepts": ["celery.utils.functional.fun_accepts_kwargs"], "celery.utils.functional.fun_accepts_kwargs": [], "t.unit.utils.test_functional.test_fun_accepts_kwargs.test_rejects": ["celery.utils.functional.fun_accepts_kwargs"], "t.unit.utils.test_functional.test_is_numeric_value": ["<builtin>.type", "celery.utils.functional.is_numeric_value"], "celery.utils.functional.is_numeric_value": [], "t.unit.utils.test_pickle": [], "t.unit.utils.test_pickle.ArgOverrideException.__init__": ["<builtin>.super"], "t.unit.utils.test_pickle.test_Pickle.test_pickle_regular_exception": ["celery.utils.serialization.pickle.loads", "celery.utils.serialization.pickle.dumps", "<builtin>.isinstance"], "t.unit.utils.test_pickle.test_Pickle.test_pickle_arg_override_exception": ["t.unit.utils.test_pickle.ArgOverrideException.__init__", "celery.utils.serialization.pickle.dumps", "<builtin>.isinstance", "celery.utils.serialization.pickle.loads"], "t.unit.utils.test_platforms": ["unittest.mock.patch", "pytest.mark.skip", "pytest.mark.xfail", "t.unit.utils.test_platforms.fails_on_win32", "pytest.mark.parametrize"], "t.unit.utils.test_platforms.test_find_option_with_arg.test_long_opt": ["celery._find_option_with_arg"], "celery._find_option_with_arg": [], "t.unit.utils.test_platforms.test_find_option_with_arg.test_short_opt": ["celery._find_option_with_arg"], "t.unit.utils.test_platforms.test_fd_by_path": ["celery.platforms.fd_by_path", "unittest.mock.patch", "<builtin>.OSError", "tempfile.NamedTemporaryFile"], "celery.platforms.fd_by_path": [], "t.unit.utils.test_platforms.test_close_open_fds": ["unittest.mock.patch", "<builtin>.OSError", "celery.platforms.close_open_fds"], "celery.platforms.close_open_fds": [], "t.unit.utils.test_platforms.test_ignore_errno.test_raises_EBADF": ["celery.platforms.ignore_errno", "<builtin>.OSError"], "celery.platforms.ignore_errno": [], "t.unit.utils.test_platforms.test_ignore_errno.test_otherwise": ["celery.platforms.ignore_errno", "<builtin>.OSError", "pytest.raises"], "t.unit.utils.test_platforms.test_set_process_title.test_no_setps": ["celery.platforms.set_process_title"], "celery.platforms.set_process_title": [], "t.unit.utils.test_platforms.test_set_process_title": ["unittest.mock.patch"], "t.unit.utils.test_platforms.test_set_process_title.test_mp_no_hostname": ["celery.platforms.set_mp_process_title"], "celery.platforms.set_mp_process_title": [], "t.unit.utils.test_platforms.test_set_process_title.test_mp_hostname": ["celery.platforms.set_mp_process_title"], "t.unit.utils.test_platforms.test_Signals": ["unittest.mock.patch"], "t.unit.utils.test_platforms.test_Signals.test_getitem": [], "t.unit.utils.test_platforms.test_Signals.test_supported": ["celery.platforms.signals.supported"], "celery.platforms.signals.supported": [], "t.unit.utils.test_platforms.test_Signals.test_reset_alarm": ["celery.platforms.signals.reset_alarm", "unittest.mock.patch"], "celery.platforms.signals.reset_alarm": [], "t.unit.utils.test_platforms.test_Signals.test_arm_alarm": ["unittest.mock.patch", "celery.platforms.signals.arm_alarm", "<builtin>.hasattr"], "celery.platforms.signals.arm_alarm": [], "t.unit.utils.test_platforms.test_Signals.test_signum": ["celery.platforms.signals.signum", "<builtin>.object", "pytest.raises"], "celery.platforms.signals.signum": [], "t.unit.utils.test_platforms.test_Signals.test_ignore": ["celery.platforms.signals.signum", "celery.platforms.signals.ignore"], "celery.platforms.signals.ignore": [], "t.unit.utils.test_platforms.test_Signals.test_reset": ["celery.platforms.signals.signum", "celery.platforms.signals.reset"], "celery.platforms.signals.reset": [], "t.unit.utils.test_platforms.test_Signals.test_setitem": [], "t.unit.utils.test_platforms.test_Signals.test_setitem.handle": [], "t.unit.utils.test_platforms.test_Signals.test_setitem_raises": ["<builtin>.ValueError"], "t.unit.utils.test_platforms.test_Signals.test_setitem_raises.<lambda1>": [], "t.unit.utils.test_platforms.test_set_pdeathsig.test_call": ["celery.platforms.set_pdeathsig"], "celery.platforms.set_pdeathsig": [], "t.unit.utils.test_platforms.test_set_pdeathsig.test_call_with_correct_parameter": ["celery.platforms.set_pdeathsig", "unittest.mock.patch"], "t.unit.utils.test_platforms.test_get_fdmax": ["unittest.mock.patch"], "t.unit.utils.test_platforms.test_get_fdmax.test_when_infinity": ["<builtin>.object", "unittest.mock.patch", "celery.platforms.get_fdmax", "<builtin>.KeyError"], "celery.platforms.get_fdmax": [], "t.unit.utils.test_platforms.test_get_fdmax.test_when_actual": ["unittest.mock.patch", "celery.platforms.get_fdmax", "<builtin>.KeyError"], "t.unit.utils.test_platforms.test_maybe_drop_privileges.test_on_windows": ["celery.platforms.maybe_drop_privileges"], "celery.platforms.maybe_drop_privileges": [], "t.unit.utils.test_platforms.test_maybe_drop_privileges": ["unittest.mock.patch", "pytest.mark.skip"], "t.unit.utils.test_platforms.test_maybe_drop_privileges.test_with_uid": ["t.unit.utils.test_platforms.test_maybe_drop_privileges.test_with_uid.to_root_on_second_call", "pytest.raises", "celery.platforms.maybe_drop_privileges"], "t.unit.utils.test_platforms.test_maybe_drop_privileges.test_with_uid.raise_on_second_call": ["<builtin>.OSError"], "t.unit.utils.test_platforms.test_maybe_drop_privileges.test_with_uid.to_root_on_second_call": [], "t.unit.utils.test_platforms.test_maybe_drop_privileges.test_with_uid.to_root_on_second_call.on_first_call": [], "t.unit.utils.test_platforms.test_maybe_drop_privileges.test_with_guid": ["<builtin>.OSError", "pytest.raises", "celery.platforms.maybe_drop_privileges"], "t.unit.utils.test_platforms.test_maybe_drop_privileges.test_with_guid.raise_on_second_call": ["<builtin>.OSError"], "t.unit.utils.test_platforms.test_maybe_drop_privileges.test_only_gid": ["celery.platforms.maybe_drop_privileges"], "t.unit.utils.test_platforms.test_setget_uid_gid": ["unittest.mock.patch"], "t.unit.utils.test_platforms.test_setget_uid_gid.test_setuid": ["celery.platforms.setuid"], "celery.platforms.setuid": [], "t.unit.utils.test_platforms.test_setget_uid_gid.test_setgid": ["celery.platforms.setgid"], "celery.platforms.setgid": [], "t.unit.utils.test_platforms.test_setget_uid_gid.test_parse_uid_when_int": ["celery.platforms.parse_uid"], "celery.platforms.parse_uid": [], "t.unit.utils.test_platforms.test_setget_uid_gid.test_parse_uid_when_existing_name": ["celery.platforms.parse_uid"], "t.unit.utils.test_platforms.test_setget_uid_gid.test_parse_uid_when_nonexisting_name": ["celery.platforms.parse_uid", "pytest.raises", "<builtin>.KeyError"], "t.unit.utils.test_platforms.test_setget_uid_gid.test_parse_gid_when_int": ["celery.platforms.parse_gid"], "celery.platforms.parse_gid": [], "t.unit.utils.test_platforms.test_setget_uid_gid.test_parse_gid_when_existing_name": ["celery.platforms.parse_gid"], "t.unit.utils.test_platforms.test_setget_uid_gid.test_parse_gid_when_nonexisting_name": ["pytest.raises", "<builtin>.KeyError", "celery.platforms.parse_gid"], "t.unit.utils.test_platforms.test_initgroups": ["unittest.mock.patch"], "t.unit.utils.test_platforms.test_initgroups.test_with_initgroups": ["celery.platforms.initgroups"], "celery.platforms.initgroups": [], "t.unit.utils.test_platforms.test_initgroups.test_without_initgroups": ["t.unit.utils.test_platforms.test_initgroups.test_without_initgroups.grent.__init__", "celery.platforms.initgroups", "<builtin>.getattr", "<builtin>.delattr"], "t.unit.utils.test_platforms.test_initgroups.test_without_initgroups.grent.__init__": [], "t.unit.utils.test_platforms.test_detached.test_without_resource": ["celery.platforms.detached", "pytest.raises"], "celery.platforms.detached": [], "t.unit.utils.test_platforms.test_detached": ["unittest.mock.patch"], "t.unit.utils.test_platforms.test_detached.test_default": ["celery.platforms.detached", "unittest.mock.Mock", "<builtin>.isinstance"], "t.unit.utils.test_platforms.test_DaemonContext": ["unittest.mock.patch"], "t.unit.utils.test_platforms.test_DaemonContext.test_open": ["celery.platforms.DaemonContext", "unittest.mock.patch", "unittest.mock.Mock"], "celery.platforms.DaemonContext": [], "t.unit.utils.test_platforms.test_Pidfile": ["unittest.mock.patch"], "t.unit.utils.test_platforms.test_Pidfile.test_create_pidlock": ["pytest.raises", "unittest.mock.Mock", "t.unit.conftest.stdouts", "celery.platforms.create_pidlock"], "celery.platforms.create_pidlock": [], "t.unit.utils.test_platforms.test_Pidfile.test_context": ["celery.platforms.Pidfile", "unittest.mock.Mock"], "celery.platforms.Pidfile": [], "t.unit.utils.test_platforms.test_Pidfile.test_acquire_raises_LockFailed": ["<builtin>.OSError", "pytest.raises", "celery.platforms.Pidfile", "unittest.mock.Mock"], "t.unit.utils.test_platforms.test_Pidfile.test_is_locked": ["celery.platforms.Pidfile"], "t.unit.utils.test_platforms.test_Pidfile.test_read_pid": ["t.unit.conftest.open", "celery.platforms.Pidfile"], "t.unit.utils.test_platforms.test_Pidfile.test_read_pid_partially_written": ["t.unit.conftest.open", "pytest.raises", "celery.platforms.Pidfile"], "t.unit.utils.test_platforms.test_Pidfile.test_read_pid_raises_ENOENT": ["<builtin>.IOError", "t.unit.conftest.open", "celery.platforms.Pidfile"], "<builtin>.IOError": [], "t.unit.utils.test_platforms.test_Pidfile.test_read_pid_raises_IOError": ["<builtin>.IOError", "pytest.raises", "t.unit.conftest.open", "celery.platforms.Pidfile"], "t.unit.utils.test_platforms.test_Pidfile.test_read_pid_bogus_pidfile": ["t.unit.conftest.open", "pytest.raises", "celery.platforms.Pidfile"], "t.unit.utils.test_platforms.test_Pidfile.test_remove": ["celery.platforms.Pidfile"], "t.unit.utils.test_platforms.test_Pidfile.test_remove_ENOENT": ["<builtin>.OSError", "celery.platforms.Pidfile"], "t.unit.utils.test_platforms.test_Pidfile.test_remove_EACCES": ["<builtin>.OSError", "celery.platforms.Pidfile"], "t.unit.utils.test_platforms.test_Pidfile.test_remove_OSError": ["<builtin>.OSError", "pytest.raises", "celery.platforms.Pidfile"], "t.unit.utils.test_platforms.test_Pidfile.test_remove_if_stale_process_alive": ["<builtin>.OSError", "celery.platforms.Pidfile", "unittest.mock.Mock"], "t.unit.utils.test_platforms.test_Pidfile.test_remove_if_stale_process_dead": ["<builtin>.OSError", "celery.platforms.Pidfile", "t.unit.conftest.stdouts", "unittest.mock.Mock"], "t.unit.utils.test_platforms.test_Pidfile.test_remove_if_stale_broken_pid": ["<builtin>.ValueError", "celery.platforms.Pidfile", "t.unit.conftest.stdouts", "unittest.mock.Mock"], "t.unit.utils.test_platforms.test_Pidfile.test_remove_if_stale_unprivileged_user": ["<builtin>.OSError", "celery.platforms.Pidfile", "t.unit.conftest.stdouts", "unittest.mock.Mock"], "t.unit.utils.test_platforms.test_Pidfile.test_remove_if_stale_no_pidfile": ["celery.platforms.Pidfile", "unittest.mock.Mock"], "t.unit.utils.test_platforms.test_Pidfile.test_write_pid": ["celery.utils.text.WhateverIO", "unittest.mock.Mock", "celery.platforms.Pidfile"], "t.unit.utils.test_platforms.test_Pidfile.test_write_reread_fails": ["pytest.raises", "celery.utils.text.WhateverIO", "unittest.mock.Mock", "celery.platforms.Pidfile"], "t.unit.utils.test_platforms.test_setgroups": ["unittest.mock.patch"], "t.unit.utils.test_platforms.test_setgroups.test_setgroups_hack_ValueError": ["<builtin>.list", "celery.platforms._setgroups_hack", "pytest.raises", "<builtin>.ValueError", "<builtin>.range"], "t.unit.utils.test_platforms.test_setgroups.test_setgroups_hack_ValueError.on_setgroups": ["<builtin>.ValueError", "<builtin>.len"], "celery.platforms._setgroups_hack": [], "t.unit.utils.test_platforms.test_setgroups.test_setgroups_hack_OSError": ["<builtin>.list", "celery.platforms._setgroups_hack", "pytest.raises", "<builtin>.OSError", "<builtin>.range"], "t.unit.utils.test_platforms.test_setgroups.test_setgroups_hack_OSError.on_setgroups": ["<builtin>.len"], "t.unit.utils.test_platforms.test_setgroups.test_setgroups": ["unittest.mock.patch", "celery.platforms.setgroups", "<builtin>.list", "<builtin>.range"], "celery.platforms.setgroups": [], "t.unit.utils.test_platforms.test_setgroups.test_setgroups_sysconf_raises": ["unittest.mock.patch", "<builtin>.list", "celery.platforms.setgroups", "<builtin>.ValueError", "<builtin>.range"], "t.unit.utils.test_platforms.test_setgroups.test_setgroups_raises_ESRCH": ["unittest.mock.patch", "<builtin>.OSError", "<builtin>.list", "celery.platforms.setgroups", "pytest.raises", "<builtin>.ValueError", "<builtin>.range"], "t.unit.utils.test_platforms.test_setgroups.test_setgroups_raises_EPERM": ["unittest.mock.patch", "<builtin>.list", "<builtin>.OSError", "celery.platforms.setgroups", "pytest.raises", "<builtin>.ValueError", "<builtin>.range"], "pytest.mark.xfail": [], "t.unit.utils.test_platforms.fails_on_win32": [], "t.unit.utils.test_platforms.test_check_privileges_suspicious_platform": ["pytest.raises", "celery.platforms.check_privileges"], "celery.platforms.check_privileges": [], "t.unit.utils.test_platforms.test_check_privileges": ["<builtin>.len", "celery.platforms.check_privileges"], "t.unit.utils.test_platforms.test_check_privileges_no_fchown": ["<builtin>.len", "celery.platforms.check_privileges"], "t.unit.utils.test_platforms.test_check_privileges_without_c_force_root": ["re.escape", "pytest.raises", "celery.platforms.ROOT_DISALLOWED.format", "celery.platforms.check_privileges"], "celery.platforms.ROOT_DISALLOWED.format": [], "t.unit.utils.test_platforms.test_check_privileges_with_c_force_root": ["pytest.warns", "celery.platforms.check_privileges"], "t.unit.utils.test_platforms.test_check_privileges_with_c_force_root_and_with_suspicious_group": ["re.escape", "pytest.warns", "celery.platforms.ROOT_DISCOURAGED.format", "celery.platforms.check_privileges"], "celery.platforms.ROOT_DISCOURAGED.format": [], "t.unit.utils.test_platforms.test_check_privileges_without_c_force_root_and_with_suspicious_group": ["re.escape", "pytest.raises", "celery.platforms.ROOT_DISALLOWED.format", "celery.platforms.check_privileges"], "t.unit.utils.test_platforms.test_check_privileges_with_c_force_root_and_no_group_entry": ["<builtin>.len", "celery.platforms.ROOT_DISCOURAGED.format", "celery.platforms.check_privileges"], "t.unit.utils.test_platforms.test_check_privileges_without_c_force_root_and_no_group_entry": ["re.escape", "pytest.raises", "celery.platforms.ROOT_DISALLOWED.format", "celery.platforms.check_privileges"], "t.unit.utils.test_platforms.test_skip_checking_privileges_when_grp_is_unavailable": ["unittest.mock.patch", "<builtin>.len", "celery.platforms.check_privileges"], "t.unit.utils.test_platforms.test_skip_checking_privileges_when_pwd_is_unavailable": ["unittest.mock.patch", "<builtin>.len", "celery.platforms.check_privileges"], "t.unit.utils": [], "t.unit.utils.test_timer2": [], "t.unit.utils.test_timer2.test_Timer.test_enter_after": ["<builtin>.Exception", "time.sleep", "celery.utils.timer2.Timer"], "t.unit.utils.test_timer2.test_Timer.test_enter_after.set_done": [], "t.unit.utils.test_timer2.test_Timer.test_exit_after": ["unittest.mock.Mock", "celery.utils.timer2.Timer"], "t.unit.utils.test_timer2.test_Timer.test_ensure_started_not_started": ["unittest.mock.Mock", "celery.utils.timer2.Timer"], "t.unit.utils.test_timer2.test_Timer": ["unittest.mock.patch"], "t.unit.utils.test_timer2.test_Timer.test_on_tick": ["t.unit.utils.test_timer2.test_Timer.test_on_tick.next_entry_side_effect", "unittest.mock.Mock", "celery.utils.timer2.Timer"], "t.unit.utils.test_timer2.test_Timer.test_on_tick.next_entry_side_effect": ["<builtin>.getattr", "<builtin>.range"], "t.unit.utils.test_timer2.test_Timer.test_thread_crash": ["<builtin>.OSError", "unittest.mock.Mock", "celery.utils.timer2.Timer"], "t.unit.utils.test_timer2.test_Timer.test_gc_race_lost": ["<builtin>.TypeError", "unittest.mock.patch.object", "celery.utils.timer2.Timer"], "t.unit.utils.test_timer2.test_Timer.test_test_enter": ["unittest.mock.Mock", "celery.utils.timer2.Timer"], "t.unit.utils.test_timer2.test_Timer.test_test_enter_after": ["unittest.mock.Mock", "celery.utils.timer2.Timer"], "t.unit.utils.test_timer2.test_Timer.test_cancel": ["unittest.mock.Mock", "celery.utils.timer2.Timer"], "t.unit.utils.test_imports": [], "t.unit.utils.test_imports.test_find_module": ["celery.utils.imports.find_module", "pytest.raises", "unittest.mock.Mock"], "t.unit.utils.test_imports.test_find_module.imp_side_effect": ["<builtin>.ImportError"], "celery.utils.imports.find_module": [], "t.unit.utils.test_imports.test_find_module_legacy_namespace_package": ["celery.utils.imports.find_module", "unittest.mock.patch.dict", "<builtin>.list", "<builtin>.str", "pytest.raises"], "t.unit.utils.test_imports.test_find_module_pep420_namespace_package": ["celery.utils.imports.find_module", "unittest.mock.patch.dict", "<builtin>.list", "<builtin>.str", "pytest.raises"], "t.unit.utils.test_imports.test_qualname": ["celery.utils.imports.qualname", "<builtin>.type"], "t.unit.utils.test_imports.test_reload_from_cwd": ["celery.utils.imports.reload_from_cwd"], "celery.utils.imports.reload_from_cwd": [], "t.unit.utils.test_imports.test_reload_from_cwd_custom_reloader": ["celery.utils.imports.reload_from_cwd", "unittest.mock.Mock"], "t.unit.utils.test_imports.test_module_file": ["celery.utils.imports.module_file", "unittest.mock.Mock"], "celery.utils.imports.module_file": [], "t.unit.utils.test_imports.test_gen_task_name.test_no_module": ["celery.utils.imports.gen_task_name", "unittest.mock.Mock"], "celery.utils.imports.gen_task_name": [], "t.unit.utils.test_debug": ["pytest.mark.parametrize"], "t.unit.utils.test_debug.test_on_blocking": ["celery.utils.debug._on_blocking", "pytest.raises", "unittest.mock.Mock"], "celery.utils.debug._on_blocking": [], "t.unit.utils.test_debug.test_blockdetection": ["celery.utils.debug.blockdetection"], "celery.utils.debug.blockdetection": [], "t.unit.utils.test_debug.test_sample_mem": ["celery.utils.debug.sample_mem"], "celery.utils.debug.sample_mem": [], "t.unit.utils.test_debug.test_sample": ["celery.utils.debug.sample", "<builtin>.list", "<builtin>.range"], "celery.utils.debug.sample": [], "t.unit.utils.test_debug.test_hfloat": ["<builtin>.str", "celery.utils.debug.hfloat"], "celery.utils.debug.hfloat": [], "t.unit.utils.test_debug.test_humanbytes": ["celery.utils.debug.humanbytes"], "celery.utils.debug.humanbytes": [], "t.unit.utils.test_debug.test_mem_rss": ["celery.utils.debug.mem_rss"], "celery.utils.debug.mem_rss": [], "t.unit.utils.test_debug.test_ps": ["celery.utils.debug.ps"], "celery.utils.debug.ps": [], "t.unit.utils.test_graph": [], "t.unit.utils.test_graph.test_DependencyGraph.graph1": ["celery.utils.graph.DependencyGraph"], "celery.utils.graph.DependencyGraph": [], "t.unit.utils.test_graph.test_DependencyGraph.test_repr": ["<builtin>.repr", "t.unit.utils.test_graph.test_DependencyGraph.graph1"], "t.unit.utils.test_graph.test_DependencyGraph.test_topsort": ["t.unit.utils.test_graph.test_DependencyGraph.graph1"], "t.unit.utils.test_graph.test_DependencyGraph.test_edges": ["<builtin>.sorted", "t.unit.utils.test_graph.test_DependencyGraph.graph1"], "t.unit.utils.test_graph.test_DependencyGraph.test_connect": ["t.unit.utils.test_graph.test_DependencyGraph.graph1"], "t.unit.utils.test_graph.test_DependencyGraph.test_valency_of_when_missing": ["t.unit.utils.test_graph.test_DependencyGraph.graph1"], "t.unit.utils.test_graph.test_DependencyGraph.test_format": ["unittest.mock.Mock", "t.unit.utils.test_graph.test_DependencyGraph.graph1"], "t.unit.utils.test_graph.test_DependencyGraph.test_items": ["<builtin>.dict", "t.unit.utils.test_graph.test_DependencyGraph.graph1"], "t.unit.utils.test_graph.test_DependencyGraph.test_repr_node": ["t.unit.utils.test_graph.test_DependencyGraph.graph1"], "t.unit.utils.test_graph.test_DependencyGraph.test_to_dot": ["celery.utils.text.WhateverIO", "t.unit.utils.test_graph.test_DependencyGraph.graph1"], "t.unit.utils.test_term": [], "t.unit.utils.test_term.test_colored": ["pytest.fixture", "pytest.mark.parametrize"], "t.unit.utils.test_term.test_colored.preserve_encoding": [], "t.unit.utils.test_term.test_colored.test_colors": ["celery.utils.term.fg", "celery.utils.term.colored", "<builtin>.str"], "celery.utils.term.fg": [], "celery.utils.term.colored": [], "t.unit.utils.test_term.test_colored.test_modifiers": ["celery.utils.term.colored", "<builtin>.getattr", "<builtin>.str"], "t.unit.utils.test_term.test_colored.test_unicode": ["celery.utils.term.colored", "<builtin>.str"], "t.unit.utils.test_term.test_colored.test_repr": ["celery.utils.term.colored", "<builtin>.repr"], "t.unit.utils.test_term.test_colored.test_more_unicode": ["celery.utils.term.colored"], "t.unit.utils.test_threads": [], "t.unit.utils.test_threads.test_bgThread.test_crash": ["unittest.mock.patch", "celery.utils.threads.bgThread.__init__", "pytest.raises", "t.unit.conftest.stdouts", "celery.utils.threads.bgThread.run", "<builtin>.ValueError"], "t.unit.utils.test_threads.test_bgThread.test_crash.T.body": ["<builtin>.KeyError"], "celery.utils.threads.bgThread.__init__": [], "celery.utils.threads.bgThread.run": [], "t.unit.utils.test_threads.test_bgThread.test_interface": ["celery.utils.threads.bgThread", "pytest.raises"], "celery.utils.threads.bgThread": [], "t.unit.utils.test_threads.test_Local.test_iter": ["celery.utils.threads.Local", "<builtin>.list", "pytest.raises", "<builtin>.delattr", "<builtin>.iter"], "celery.utils.threads.Local": [], "t.unit.utils.test_threads.test_Local.test_iter.<lambda1>": [], "t.unit.utils.test_threads.test_LocalStack.test_stack": ["pytest.raises", "celery.utils.threads._LocalStack"], "celery.utils.threads._LocalStack": [], "t.unit.utils.test_threads.test_FastLocalStack.test_stack": ["<builtin>.len", "celery.utils.threads._FastLocalStack"], "celery.utils.threads._FastLocalStack": [], "t.unit.utils.test_threads.test_LocalManager.test_init": ["<builtin>.repr", "unittest.mock.patch", "celery.utils.threads.Local", "celery.utils.threads.LocalManager"], "celery.utils.threads.LocalManager": [], "t.unit.utils.test_threads.test_LocalManager.test_init.ident": [], "t.unit.utils.test_deprecated": [], "t.unit.utils.test_deprecated.test_deprecated_property": ["unittest.mock.patch"], "t.unit.utils.test_deprecated.test_deprecated_property.test_deprecated": [], "celery.utils.deprecated.Property": [], "t.unit.utils.test_deprecated.test_deprecated_property.test_deprecated.X": ["celery.utils.deprecated.Property"], "t.unit.utils.test_deprecated.test_deprecated_property.test_deprecated.X.foo": [], "t.unit.utils.test_deprecated.test_deprecated_property.test_deprecated_no_setter_or_deleter": ["pytest.raises"], "t.unit.utils.test_deprecated.test_deprecated_property.test_deprecated_no_setter_or_deleter.X": ["celery.utils.deprecated.Property"], "t.unit.utils.test_deprecated.test_deprecated_property.test_deprecated_no_setter_or_deleter.X.foo": [], "t.unit.utils.test_deprecated.test_warn": ["unittest.mock.patch"], "t.unit.utils.test_deprecated.test_warn.test_warn_deprecated": ["celery.utils.deprecated.warn"], "celery.utils.deprecated.warn": [], "t.unit.utils.test_saferepr": ["re.compile", "<builtin>.complex", "<builtin>.list", "decimal.Decimal"], "t.unit.utils.test_saferepr.old_repr": ["<builtin>.repr", "<builtin>.str"], "t.unit.utils.test_saferepr.list3.__repr__": ["<builtin>.super"], "t.unit.utils.test_saferepr.tuple3.__repr__": ["<builtin>.super"], "t.unit.utils.test_saferepr.set3.__repr__": ["<builtin>.super"], "t.unit.utils.test_saferepr.frozenset3.__repr__": ["<builtin>.super"], "t.unit.utils.test_saferepr.dict3.__repr__": ["<builtin>.super"], "t.unit.utils.test_saferepr.test_saferepr": ["pytest.mark.parametrize", "<builtin>.list"], "t.unit.utils.test_saferepr.test_saferepr.test_safe_types": ["t.unit.utils.test_saferepr.old_repr", "celery.utils.saferepr.saferepr"], "celery.utils.saferepr.saferepr": [], "t.unit.utils.test_saferepr.test_saferepr.test_numbers_dict": ["t.unit.utils.test_saferepr.old_repr", "celery.utils.saferepr.saferepr"], "t.unit.utils.test_saferepr.test_saferepr.test_numbers_list": ["t.unit.utils.test_saferepr.old_repr", "celery.utils.saferepr.saferepr"], "t.unit.utils.test_saferepr.test_saferepr.test_numbers_keys": ["t.unit.utils.test_saferepr.old_repr", "celery.utils.saferepr.saferepr"], "t.unit.utils.test_saferepr.test_saferepr.test_text": ["t.unit.utils.test_saferepr.old_repr", "celery.utils.saferepr.saferepr"], "t.unit.utils.test_saferepr.test_saferepr.test_text_maxlen": ["celery.utils.saferepr.saferepr"], "t.unit.utils.test_saferepr.test_saferepr.test_maxlevels": ["celery.utils.saferepr.saferepr"], "t.unit.utils.test_saferepr.test_saferepr.test_recursion": ["celery.utils.saferepr.saferepr"], "t.unit.utils.test_saferepr.test_saferepr.test_same_as_repr": ["celery.utils.saferepr.saferepr", "t.unit.utils.test_saferepr.old_repr"], "t.unit.utils.test_saferepr.test_saferepr.test_single_quote": ["ast.literal_eval", "celery.utils.saferepr.saferepr"], "ast.literal_eval": [], "t.unit.utils.test_saferepr.test_saferepr.test_unicode_bytes": ["celery.utils.saferepr.saferepr"], "t.unit.utils.test_saferepr.test_saferepr.test_unicode_bytes__long": ["celery.utils.saferepr.saferepr"], "t.unit.utils.test_saferepr.test_saferepr.test_binary_bytes": ["struct.pack", "<builtin>.hasattr", "celery.utils.saferepr.saferepr"], "struct.pack": [], "t.unit.utils.test_saferepr.test_saferepr.test_binary_bytes__long": ["struct.pack", "celery.utils.saferepr.saferepr"], "t.unit.utils.test_saferepr.test_saferepr.test_repr_raises": ["celery.utils.saferepr.saferepr"], "t.unit.utils.test_saferepr.test_saferepr.test_repr_raises.O.__repr__": ["<builtin>.KeyError"], "t.unit.utils.test_saferepr.test_saferepr.test_bytes_with_unicode_py2_and_3": ["celery.utils.saferepr.saferepr"], "t.unit.utils.test_collections": [], "t.unit.utils.test_collections.test_DictAttribute.test_get_set_keys_values_items": ["celery.utils.collections.DictAttribute", "pytest.raises", "<builtin>.list", "celery.utils.objects.Bunch"], "t.unit.utils.test_collections.test_DictAttribute.test_setdefault": ["celery.utils.collections.DictAttribute", "celery.utils.objects.Bunch"], "t.unit.utils.test_collections.test_DictAttribute.test_contains": ["celery.utils.collections.DictAttribute", "celery.utils.objects.Bunch"], "t.unit.utils.test_collections.test_DictAttribute.test_items": ["celery.utils.collections.DictAttribute", "celery.utils.objects.Bunch"], "t.unit.utils.test_collections.test_ConfigurationView.setup_method": ["celery.utils.collections.ConfigurationView"], "celery.utils.collections.ConfigurationView": [], "t.unit.utils.test_collections.test_ConfigurationView.test_setdefault": [], "t.unit.utils.test_collections.test_ConfigurationView.test_get": ["<builtin>.object"], "t.unit.utils.test_collections.test_ConfigurationView.test_update": ["<builtin>.dict"], "t.unit.utils.test_collections.test_ConfigurationView.test_contains": [], "t.unit.utils.test_collections.test_ConfigurationView.test_repr": ["<builtin>.repr"], "t.unit.utils.test_collections.test_ConfigurationView.test_iter": ["<builtin>.iter", "<builtin>.sorted", "<builtin>.dict", "<builtin>.list"], "t.unit.utils.test_collections.test_ConfigurationView.test_add_defaults_dict": [], "t.unit.utils.test_collections.test_ConfigurationView.test_add_defaults_object": ["celery.utils.objects.Bunch"], "t.unit.utils.test_collections.test_ConfigurationView.test_clear": [], "t.unit.utils.test_collections.test_ConfigurationView.test_bool": ["<builtin>.bool"], "t.unit.utils.test_collections.test_ConfigurationView.test_len": ["<builtin>.len"], "t.unit.utils.test_collections.test_ConfigurationView.test_isa_mapping": ["<builtin>.issubclass"], "t.unit.utils.test_collections.test_ConfigurationView.test_isa_mutable_mapping": ["<builtin>.issubclass"], "t.unit.utils.test_collections.test_ExceptionInfo.test_exception_info": ["<builtin>.str", "<builtin>.LookupError", "<builtin>.isinstance", "billiard.einfo.ExceptionInfo", "<builtin>.repr"], "<builtin>.LookupError": [], "t.unit.utils.test_collections.test_LimitedSet.test_add": ["celery.utils.collections.LimitedSet", "<builtin>.len", "<builtin>.range"], "t.unit.utils.test_collections.test_LimitedSet.test_purge": ["time.monotonic", "celery.utils.collections.LimitedSet", "<builtin>.len", "<builtin>.range"], "t.unit.utils.test_collections.test_LimitedSet.test_purge.<lambda1>": ["time.monotonic"], "t.unit.utils.test_collections.test_LimitedSet.test_pickleable": ["celery.utils.collections.LimitedSet", "pickle.loads", "pickle.dumps"], "t.unit.utils.test_collections.test_LimitedSet.test_iter": ["celery.utils.collections.LimitedSet", "<builtin>.iter", "<builtin>.list"], "t.unit.utils.test_collections.test_LimitedSet.test_repr": ["<builtin>.repr", "celery.utils.collections.LimitedSet"], "t.unit.utils.test_collections.test_LimitedSet.test_discard": ["celery.utils.collections.LimitedSet", "<builtin>.len"], "t.unit.utils.test_collections.test_LimitedSet.test_clear": ["celery.utils.collections.LimitedSet", "<builtin>.len"], "t.unit.utils.test_collections.test_LimitedSet.test_update": ["celery.utils.collections.LimitedSet", "<builtin>.range", "<builtin>.list", "<builtin>.sorted"], "t.unit.utils.test_collections.test_LimitedSet.test_iterable_and_ordering": ["itertools.count", "<builtin>.range", "<builtin>.next", "celery.utils.collections.LimitedSet", "<builtin>.reversed"], "t.unit.utils.test_collections.test_LimitedSet.test_pop_and_ordering_again": ["celery.utils.collections.LimitedSet", "<builtin>.range"], "t.unit.utils.test_collections.test_LimitedSet.test_as_dict": ["celery.utils.collections.LimitedSet", "<builtin>.isinstance"], "t.unit.utils.test_collections.test_LimitedSet.test_add_removes_duplicate_from_small_heap": ["celery.utils.collections.LimitedSet", "<builtin>.len"], "t.unit.utils.test_collections.test_LimitedSet.test_add_removes_duplicate_from_big_heap": ["celery.utils.collections.LimitedSet", "<builtin>.len", "<builtin>.range"], "t.unit.utils.test_collections.test_AttributeDict.test_getattr__setattr": ["celery.utils.collections.AttributeDict", "pytest.raises"], "t.unit.utils.test_collections.test_Messagebuffer.assert_size_and_first": ["<builtin>.len"], "t.unit.utils.test_collections.test_Messagebuffer.test_append_limited": ["celery.utils.collections.Messagebuffer", "t.unit.utils.test_collections.test_Messagebuffer.assert_size_and_first", "<builtin>.range"], "celery.utils.collections.Messagebuffer": [], "t.unit.utils.test_collections.test_Messagebuffer.test_append_unlimited": ["celery.utils.collections.Messagebuffer", "t.unit.utils.test_collections.test_Messagebuffer.assert_size_and_first", "<builtin>.range"], "t.unit.utils.test_collections.test_Messagebuffer.test_extend_limited": ["celery.utils.collections.Messagebuffer", "t.unit.utils.test_collections.test_Messagebuffer.assert_size_and_first", "<builtin>.list", "<builtin>.range"], "t.unit.utils.test_collections.test_Messagebuffer.test_extend_unlimited": ["celery.utils.collections.Messagebuffer", "t.unit.utils.test_collections.test_Messagebuffer.assert_size_and_first", "<builtin>.list", "<builtin>.range"], "t.unit.utils.test_collections.test_Messagebuffer.test_extend_eviction_time_limited": ["celery.utils.collections.Messagebuffer", "<builtin>.len", "<builtin>.range"], "t.unit.utils.test_collections.test_Messagebuffer.test_pop_empty_with_default": ["<builtin>.object", "celery.utils.collections.Messagebuffer"], "t.unit.utils.test_collections.test_Messagebuffer.test_pop_empty_no_default": ["celery.utils.collections.Messagebuffer", "pytest.raises"], "t.unit.utils.test_collections.test_Messagebuffer.test_repr": ["celery.utils.collections.Messagebuffer", "<builtin>.repr"], "t.unit.utils.test_collections.test_Messagebuffer.test_iter": ["<builtin>.list", "<builtin>.len", "celery.utils.collections.Messagebuffer", "<builtin>.enumerate", "<builtin>.range"], "t.unit.utils.test_collections.test_Messagebuffer.test_contains": ["celery.utils.collections.Messagebuffer", "<builtin>.list", "<builtin>.range"], "t.unit.utils.test_collections.test_Messagebuffer.test_reversed": ["celery.utils.collections.Messagebuffer", "<builtin>.reversed", "<builtin>.list", "<builtin>.range"], "t.unit.utils.test_collections.test_Messagebuffer.test_getitem": ["celery.utils.collections.Messagebuffer", "<builtin>.list", "<builtin>.range"], "t.unit.utils.test_collections.test_BufferMap.test_append_limited": ["t.unit.utils.test_collections.test_BufferMap.assert_size_and_first", "celery.utils.collections.BufferMap", "<builtin>.range"], "celery.utils.collections.BufferMap": [], "t.unit.utils.test_collections.test_BufferMap.assert_size_and_first": [], "t.unit.utils.test_collections.test_BufferMap.test_append_unlimited": ["t.unit.utils.test_collections.test_BufferMap.assert_size_and_first", "celery.utils.collections.BufferMap", "<builtin>.range"], "t.unit.utils.test_collections.test_BufferMap.test_extend_limited": ["t.unit.utils.test_collections.test_BufferMap.assert_size_and_first", "celery.utils.collections.BufferMap", "<builtin>.list", "<builtin>.range"], "t.unit.utils.test_collections.test_BufferMap.test_extend_unlimited": ["t.unit.utils.test_collections.test_BufferMap.assert_size_and_first", "celery.utils.collections.BufferMap", "<builtin>.list", "<builtin>.range"], "t.unit.utils.test_collections.test_BufferMap.test_pop_empty_with_default": ["<builtin>.object", "celery.utils.collections.BufferMap"], "t.unit.utils.test_collections.test_BufferMap.test_pop_empty_no_default": ["celery.utils.collections.BufferMap", "pytest.raises"], "t.unit.utils.test_collections.test_BufferMap.test_repr": ["celery.utils.collections.Messagebuffer", "<builtin>.repr"], "t.unit.fixups.test_django": [], "t.unit.fixups.test_django.FixupCase": ["contextlib.contextmanager"], "t.unit.fixups.test_django.FixupCase.fixup_context": ["unittest.mock.patch"], "t.unit.fixups.test_django.test_DjangoFixup.test_setting_default_app": ["celery.fixups.django.DjangoFixup", "unittest.mock.Mock"], "celery.fixups.django.DjangoFixup": [], "t.unit.fixups.test_django.test_DjangoFixup": ["pytest.mark.masked_modules", "unittest.mock.patch"], "t.unit.fixups.test_django.test_DjangoFixup.test_worker_fixup_property": ["celery.fixups.django.DjangoFixup"], "t.unit.fixups.test_django.test_DjangoFixup.test_on_import_modules": ["celery.fixups.django.DjangoFixup", "unittest.mock.Mock"], "t.unit.fixups.test_django.test_DjangoFixup.test_autodiscover_tasks": ["celery.fixups.django.DjangoFixup", "unittest.mock.Mock"], "t.unit.fixups.test_django.test_DjangoFixup.test_fixup_no_django": ["celery.fixups.django.DjangoFixup.assert_not_called", "unittest.mock.patch", "celery.fixups.django.fixup", "pytest.warns"], "celery.fixups.django.fixup": [], "celery.fixups.django.DjangoFixup.assert_not_called": [], "t.unit.fixups.test_django.test_DjangoFixup.test_fixup": ["celery.fixups.django.DjangoFixup.assert_not_called", "unittest.mock.patch", "celery.fixups.django.fixup", "celery.fixups.django.DjangoFixup.assert_called", "t.unit.conftest.module_exists"], "celery.fixups.django.DjangoFixup.assert_called": [], "t.unit.fixups.test_django.test_DjangoFixup.test_maybe_close_fd": ["<builtin>.object", "unittest.mock.patch", "celery.fixups.django._maybe_close_fd", "unittest.mock.Mock"], "celery.fixups.django._maybe_close_fd": [], "t.unit.fixups.test_django.test_DjangoFixup.test_init": ["t.unit.fixups.test_django.FixupCase.fixup_context"], "t.unit.fixups.test_django.test_DjangoFixup.test_install": ["t.unit.fixups.test_django.FixupCase.fixup_context", "unittest.mock.Mock"], "t.unit.fixups.test_django.test_DjangoFixup.test_now": ["t.unit.fixups.test_django.FixupCase.fixup_context"], "t.unit.fixups.test_django.test_DjangoFixup.test_on_worker_init": ["t.unit.fixups.test_django.FixupCase.fixup_context", "unittest.mock.patch"], "t.unit.fixups.test_django.test_DjangoWorkerFixup.test_init": ["t.unit.fixups.test_django.FixupCase.fixup_context"], "t.unit.fixups.test_django.test_DjangoWorkerFixup.test_install": ["t.unit.fixups.test_django.FixupCase.fixup_context", "unittest.mock.patch", "unittest.mock.Mock"], "t.unit.fixups.test_django.test_DjangoWorkerFixup.test_on_worker_process_init": ["t.unit.fixups.test_django.FixupCase.fixup_context", "unittest.mock.patch", "unittest.mock.patch.object", "unittest.mock.Mock"], "t.unit.fixups.test_django.test_DjangoWorkerFixup.test_on_task_prerun": ["t.unit.fixups.test_django.FixupCase.fixup_context", "unittest.mock.patch.object", "unittest.mock.Mock"], "t.unit.fixups.test_django.test_DjangoWorkerFixup.test_on_task_postrun": ["t.unit.fixups.test_django.FixupCase.fixup_context", "unittest.mock.patch.object", "unittest.mock.Mock"], "t.unit.fixups.test_django.test_DjangoWorkerFixup.test_close_database": ["t.unit.fixups.test_django.FixupCase.fixup_context", "unittest.mock.patch.object"], "t.unit.fixups.test_django.test_DjangoWorkerFixup.test__close_database": ["t.unit.fixups.test_django.FixupCase.fixup_context", "pytest.raises", "unittest.mock.Mock", "<builtin>.KeyError"], "t.unit.fixups.test_django.test_DjangoWorkerFixup.test__close_database.<lambda1>": [], "t.unit.fixups.test_django.test_DjangoWorkerFixup.test_close_cache": ["t.unit.fixups.test_django.FixupCase.fixup_context"], "t.unit.fixups.test_django.test_DjangoWorkerFixup": ["pytest.mark.patched_module"], "t.unit.fixups.test_django.test_DjangoWorkerFixup.test_validate_models": ["django.core.checks.run_checks.assert_called_with", "unittest.mock.Mock", "django.core.checks.run_checks.reset_mock", "celery.fixups.django.DjangoWorkerFixup", "django.core.checks.run_checks.assert_not_called"], "celery.fixups.django.DjangoWorkerFixup": [], "django.core.checks.run_checks.assert_called_with": [], "django.core.checks.run_checks.reset_mock": [], "django.core.checks.run_checks.assert_not_called": [], "t.unit.fixups.test_django.test_DjangoWorkerFixup.test_django_setup": ["celery.fixups.django.DjangoWorkerFixup"], "t.unit.fixups": [], "t.unit.tasks.unit_tasks": ["celery.shared_task"], "t.unit.tasks.unit_tasks.mul": [], "t.unit.tasks.test_canvas": ["celery.canvas.Signature"], "t.unit.tasks.test_canvas.return_True": [], "t.unit.tasks.test_canvas.test_maybe_unroll_group.test_when_no_len_and_no_length_hint": ["unittest.mock.Mock", "celery.canvas.maybe_unroll_group", "<builtin>.TypeError", "<builtin>.AttributeError", "unittest.mock.MagicMock"], "celery.canvas.maybe_unroll_group": [], "t.unit.tasks.test_canvas.CanvasCase.setup_method": [], "t.unit.tasks.test_canvas.CanvasCase.setup_method.add": [], "t.unit.tasks.test_canvas.CanvasCase.setup_method.mul": [], "t.unit.tasks.test_canvas.CanvasCase.setup_method.div": [], "t.unit.tasks.test_canvas.CanvasCase.setup_method.xsum": ["<builtin>.sum", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.CanvasCase.setup_method.replaced": [], "t.unit.tasks.test_canvas.CanvasCase.setup_method.replaced_group": ["celery.canvas.group"], "celery.canvas.group": [], "t.unit.tasks.test_canvas.CanvasCase.setup_method.replace_with_group": ["celery.canvas.group"], "t.unit.tasks.test_canvas.CanvasCase.setup_method.replace_with_chain": ["celery.canvas.group"], "t.unit.tasks.test_canvas.CanvasCase.setup_method.xprod": ["math.prod", "functools.reduce"], "math.prod": [], "functools.reduce": [], "t.unit.tasks.test_canvas.chord_subclass.__init__": ["<builtin>.super"], "t.unit.tasks.test_canvas.group_subclass.__init__": ["<builtin>.super"], "t.unit.tasks.test_canvas.chain_subclass.__init__": ["<builtin>.super"], "t.unit.tasks.test_canvas.chunks_subclass.__init__": ["<builtin>.super"], "t.unit.tasks.test_canvas.test_Signature": ["pytest.mark.usefixtures", "pytest.mark.parametrize"], "t.unit.tasks.test_canvas.test_Signature.test_on_signature_gets_the_signature": ["celery.canvas.StampingVisitor.__init__"], "t.unit.tasks.test_canvas.test_Signature.test_on_signature_gets_the_signature.CustomStampingVisitor.on_signature": [], "celery.canvas.StampingVisitor.__init__": [], "t.unit.tasks.test_canvas.test_Signature.test_double_stamping": ["<builtin>.sorted"], "t.unit.tasks.test_canvas.test_Signature.test_twice_stamping": ["<builtin>.sorted"], "t.unit.tasks.test_canvas.test_Signature.test_manual_stamping": ["<builtin>.sorted"], "t.unit.tasks.test_canvas.test_Signature.test_custom_stamping_visitor": ["celery.canvas.StampingVisitor.__init__", "<builtin>.sorted"], "t.unit.tasks.test_canvas.test_Signature.test_custom_stamping_visitor.CustomStampingVisitor1.on_signature": [], "t.unit.tasks.test_canvas.test_Signature.test_custom_stamping_visitor.CustomStampingVisitor2.on_signature": [], "t.unit.tasks.test_canvas.test_Signature.test_callback_stamping": ["celery.canvas.group", "celery.canvas.chain", "<builtin>.sorted", "celery.canvas.StampingVisitor.__init__", "celery.canvas.signature", "celery.canvas.chord"], "t.unit.tasks.test_canvas.test_Signature.test_callback_stamping.CustomStampingVisitor.on_signature": [], "t.unit.tasks.test_canvas.test_Signature.test_callback_stamping.CustomStampingVisitor.on_callback": [], "t.unit.tasks.test_canvas.test_Signature.test_callback_stamping.CustomStampingVisitor.on_errback": [], "celery.canvas.chord": [], "celery.canvas.chain": [], "celery.canvas.signature": [], "t.unit.tasks.test_canvas.test_Signature.test_callback_stamping_link_after_stamp": ["celery.canvas.group", "celery.canvas.chain", "<builtin>.sorted", "celery.canvas.StampingVisitor.__init__", "celery.canvas.signature", "celery.canvas.chord"], "t.unit.tasks.test_canvas.test_Signature.test_callback_stamping_link_after_stamp.CustomStampingVisitor.on_signature": [], "t.unit.tasks.test_canvas.test_Signature.test_callback_stamping_link_after_stamp.CustomStampingVisitor.on_callback": [], "t.unit.tasks.test_canvas.test_Signature.test_callback_stamping_link_after_stamp.CustomStampingVisitor.on_errback": [], "t.unit.tasks.test_canvas.test_Signature.test_callback_stamping_on_replace": ["celery.canvas.signature", "<builtin>.sorted", "pytest.raises"], "t.unit.tasks.test_canvas.test_Signature.test_callback_stamping_on_replace.CustomStampingVisitor.on_signature": [], "t.unit.tasks.test_canvas.test_Signature.test_callback_stamping_on_replace.CustomStampingVisitor.on_callback": [], "t.unit.tasks.test_canvas.test_Signature.test_callback_stamping_on_replace.CustomStampingVisitor.on_errback": [], "t.unit.tasks.test_canvas.test_Signature.test_callback_stamping_on_replace.MyTask.on_replace": ["<builtin>.super", "celery.canvas.StampingVisitor.__init__"], "t.unit.tasks.test_canvas.test_Signature.test_getitem_property_class": [], "t.unit.tasks.test_canvas.test_Signature.test_getitem_property": [], "t.unit.tasks.test_canvas.test_Signature.test_call": ["unittest.mock.Mock", "celery.canvas.Signature"], "t.unit.tasks.test_canvas.test_Signature.test_link_on_scalar": ["<builtin>.isinstance", "celery.canvas.Signature"], "t.unit.tasks.test_canvas.test_Signature.test_json": ["<builtin>.dict", "celery.canvas.Signature"], "t.unit.tasks.test_canvas.test_Signature.test_reduce": ["celery.canvas.Signature"], "t.unit.tasks.test_canvas.test_Signature.test_replace": ["celery.canvas.Signature"], "t.unit.tasks.test_canvas.test_Signature.test_set": ["celery.canvas.Signature"], "t.unit.tasks.test_canvas.test_Signature.test_link": ["celery.canvas.signature", "<builtin>.len"], "t.unit.tasks.test_canvas.test_Signature.test_link_error": ["celery.canvas.signature", "<builtin>.len"], "t.unit.tasks.test_canvas.test_Signature.test_flatten_links": [], "t.unit.tasks.test_canvas.test_Signature.test_OR": ["celery.canvas.signature", "<builtin>.len", "pytest.raises", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_Signature.test_INVERT": ["unittest.mock.Mock"], "t.unit.tasks.test_canvas.test_Signature.test_merge_immutable": [], "t.unit.tasks.test_canvas.test_Signature.test_merge_options__none": [], "t.unit.tasks.test_canvas.test_Signature.test_merge_options__group_id": [], "t.unit.tasks.test_canvas.test_Signature.test_set_immutable": [], "t.unit.tasks.test_canvas.test_Signature.test_election": ["unittest.mock.Mock"], "t.unit.tasks.test_canvas.test_Signature.test_AsyncResult_when_not_registered": ["celery.canvas.signature"], "t.unit.tasks.test_canvas.test_Signature.test_apply_async_when_not_registered": ["celery.canvas.signature"], "t.unit.tasks.test_canvas.test_Signature.test_keeping_link_error_on_chaining": ["celery.canvas.signature", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_Signature.test_signature_on_error_adds_error_callback": ["celery.canvas.signature"], "t.unit.tasks.test_canvas.test_Signature.test_freezing_args_set_in_options": [], "t.unit.tasks.test_canvas.test_xmap_xstarmap.test_apply": ["unittest.mock.Mock", "<builtin>.dict", "<builtin>.repr", "<builtin>.getattr", "<builtin>.range"], "t.unit.tasks.test_canvas.test_chunks.test_chunks_preserves_state": ["celery.canvas.chunks.from_dict", "<builtin>.dict", "<builtin>.isinstance", "<builtin>.range"], "celery.canvas.chunks.from_dict": [], "t.unit.tasks.test_canvas.test_chunks.test_chunks": ["unittest.mock.Mock", "<builtin>.len", "<builtin>.dict", "celery.canvas.chunks.from_dict", "celery.canvas.chunks.apply_chunks", "<builtin>.range"], "celery.canvas.chunks.apply_chunks": [], "t.unit.tasks.test_canvas.test_chain.test_chain_of_chain_with_a_single_task": ["celery.canvas.chain", "<builtin>.list"], "t.unit.tasks.test_canvas.test_chain": ["pytest.mark.usefixtures", "pytest.mark.parametrize"], "t.unit.tasks.test_canvas.test_chain.test_clone_preserves_state": ["<builtin>.isinstance", "<builtin>.range"], "t.unit.tasks.test_canvas.test_chain.test_repr": ["<builtin>.repr"], "t.unit.tasks.test_canvas.test_chain.test_apply_async": [], "t.unit.tasks.test_canvas.test_chain.test_splices_chains": ["<builtin>.len", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chain.test_from_dict_no_tasks": ["<builtin>.dict", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chain.test_from_dict_full_subtasks": ["json.loads", "<builtin>.isinstance", "<builtin>.all", "json.dumps"], "json.loads": [], "t.unit.tasks.test_canvas.test_chain.test_app_falls_back_to_default": ["celery.canvas.chain"], "t.unit.tasks.test_canvas.test_chain.test_handles_dicts": ["celery.canvas.chain", "<builtin>.all", "<builtin>.dict", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chain.test_groups_in_chain_to_chord": ["celery.canvas.group", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chain.test_group_to_chord": ["celery.canvas.group", "<builtin>.len", "<builtin>.isinstance", "<builtin>.range"], "t.unit.tasks.test_canvas.test_chain.test_group_to_chord__protocol_2__or": ["celery.canvas.group", "<builtin>.isinstance", "<builtin>.range"], "t.unit.tasks.test_canvas.test_chain.test_group_to_chord__protocol_2": ["celery.canvas.group", "celery.canvas.chain", "<builtin>.len", "<builtin>.isinstance", "<builtin>.range"], "t.unit.tasks.test_canvas.test_chain.test_chord_to_chain": ["celery.canvas.chord", "celery.canvas.chain", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chain.test_chord_to_group": ["celery.canvas.chord", "celery.canvas.group", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chain.test_chain_of_chord__or__group_of_single_task": ["celery.canvas.group", "celery.canvas.chain", "celery.canvas.signature", "celery.canvas.chord", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chain.test_chain_of_chord_upgrade_on_chaining": ["celery.canvas.group", "celery.canvas.chain", "celery.canvas.signature", "celery.canvas.chord", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chain.test_apply_options": ["celery.canvas.Signature.apply_async", "t.unit.tasks.test_canvas.test_chain.test_apply_options.s", "celery.canvas.GroupStampingVisitor", "celery.canvas.Signature.stamp"], "t.unit.tasks.test_canvas.test_chain.test_apply_options.static.clone": [], "t.unit.tasks.test_canvas.test_chain.test_apply_options.s": ["celery.canvas.Signature.__init__"], "celery.canvas.Signature.__init__": [], "celery.canvas.Signature.apply_async": [], "celery.canvas.GroupStampingVisitor": [], "celery.canvas.Signature.stamp": [], "t.unit.tasks.test_canvas.test_chain.test_apply_options_none": ["celery.canvas.Signature.apply_async", "celery.canvas.Signature.__init__"], "t.unit.tasks.test_canvas.test_chain.test_apply_options_none.static.clone": [], "t.unit.tasks.test_canvas.test_chain.test_apply_options_none.static._apply_async": [], "t.unit.tasks.test_canvas.test_chain.test_reverse": ["celery.canvas.signature", "<builtin>.dict", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chain.test_always_eager": [], "t.unit.tasks.test_canvas.test_chain.test_chain_always_eager": [], "t.unit.tasks.test_canvas.test_chain.test_chain_always_eager.chain_add": [], "t.unit.tasks.test_canvas.test_chain.test_apply": ["celery.canvas.chain", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chain.test_kwargs_apply": ["celery.canvas.chain"], "t.unit.tasks.test_canvas.test_chain.test_single_expresion": ["celery.canvas.chain"], "t.unit.tasks.test_canvas.test_chain.test_empty_chain_returns_none": ["celery.canvas.chain"], "t.unit.tasks.test_canvas.test_chain.test_call_no_tasks": ["celery.canvas.chain"], "t.unit.tasks.test_canvas.test_chain.test_call_with_tasks": ["unittest.mock.Mock"], "t.unit.tasks.test_canvas.test_chain.test_from_dict_no_args__with_args": ["<builtin>.isinstance", "<builtin>.dict", "celery.canvas.chain.from_dict"], "celery.canvas.chain.from_dict": [], "t.unit.tasks.test_canvas.test_chain.test_accepts_generator_argument": ["celery.canvas.chain", "<builtin>.range"], "t.unit.tasks.test_canvas.test_chain.test_chord_sets_result_parent": ["<builtin>.set", "celery.canvas.group", "<builtin>.isinstance", "<builtin>.range"], "t.unit.tasks.test_canvas.test_chain.test_append_to_empty_chain": ["<builtin>.len", "celery.canvas.chain"], "t.unit.tasks.test_canvas.test_chain.test_chain_single_child_result": ["celery.canvas.chain", "unittest.mock.patch.object"], "t.unit.tasks.test_canvas.test_chain.test_chain_single_child_group_result": ["celery.canvas.chain", "celery.canvas.group", "unittest.mock.patch.object"], "t.unit.tasks.test_canvas.test_chain.test_chain_flattening_keep_links_of_inner_chain": ["celery.canvas.signature", "t.unit.tasks.test_canvas.test_chain.test_chain_flattening_keep_links_of_inner_chain.link_chain", "celery.canvas.chain"], "t.unit.tasks.test_canvas.test_chain.test_chain_flattening_keep_links_of_inner_chain.link_chain": ["celery.canvas.signature"], "t.unit.tasks.test_canvas.test_group.test_group_stamping_one_level": ["celery.canvas.group", "<builtin>.sorted"], "t.unit.tasks.test_canvas.test_group.test_group_stamping_two_levels": ["celery.canvas.group", "celery.canvas.chain", "<builtin>.sorted"], "t.unit.tasks.test_canvas.test_group.test_group_stamping_with_replace": ["celery.canvas.group"], "t.unit.tasks.test_canvas.test_group.test_group_stamping_with_replaced_group": ["celery.canvas.group"], "t.unit.tasks.test_canvas.test_group.test_group_stamping_with_replaced_chain": ["celery.canvas.group"], "t.unit.tasks.test_canvas.test_group.test_group_stamping_three_levels": ["celery.canvas.group", "celery.canvas.chain", "<builtin>.sorted"], "t.unit.tasks.test_canvas.test_group.test_group_stamping_parallel_groups": ["celery.canvas.group", "celery.canvas.chain", "<builtin>.sorted"], "t.unit.tasks.test_canvas.test_group.test_repr": ["<builtin>.repr", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_group.test_repr_empty_group": ["<builtin>.repr", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_group.test_reverse": ["celery.canvas.signature", "celery.canvas.group", "<builtin>.dict", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_group.test_reverse_with_subclass": ["celery.canvas.signature", "t.unit.tasks.test_canvas.group_subclass.__init__", "<builtin>.dict", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_group.test_cannot_link_on_group": ["celery.canvas.group", "pytest.raises"], "t.unit.tasks.test_canvas.test_group.test_cannot_link_error_on_group": ["celery.canvas.group", "pytest.raises"], "t.unit.tasks.test_canvas.test_group.test_group_with_group_argument": ["celery.canvas.group"], "t.unit.tasks.test_canvas.test_group.test_maybe_group_sig": ["celery.canvas._maybe_group"], "celery.canvas._maybe_group": [], "t.unit.tasks.test_canvas.test_group.test_apply": ["celery.canvas.group"], "t.unit.tasks.test_canvas.test_group.test_apply_async": ["celery.canvas.group"], "t.unit.tasks.test_canvas.test_group.test_prepare_with_dict": ["celery.canvas.group", "<builtin>.dict"], "t.unit.tasks.test_canvas.test_group.test_group_in_group": ["celery.canvas.group"], "t.unit.tasks.test_canvas.test_group.test_set_immutable": ["celery.canvas.group", "unittest.mock.Mock"], "t.unit.tasks.test_canvas.test_group.test_link": ["celery.canvas.group", "unittest.mock.Mock"], "t.unit.tasks.test_canvas.test_group.test_link_error": ["celery.canvas.group", "unittest.mock.Mock"], "t.unit.tasks.test_canvas.test_group.test_apply_empty": ["celery.canvas.group"], "t.unit.tasks.test_canvas.test_group.test_apply_async_with_parent": ["celery._state._task_stack.push", "<builtin>.len", "celery.canvas.group", "celery._state._task_stack.pop"], "t.unit.tasks.test_canvas.test_group": ["pytest.mark.xfail", "pytest.mark.usefixtures", "pytest.mark.parametrize"], "t.unit.tasks.test_canvas.test_group.test_from_dict": ["<builtin>.dict", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_group.test_from_dict_deep_deserialize": ["json.loads", "<builtin>.isinstance", "<builtin>.all", "json.dumps"], "t.unit.tasks.test_canvas.test_group.test_from_dict_deeper_deserialize": ["json.loads", "<builtin>.isinstance", "<builtin>.all", "json.dumps"], "t.unit.tasks.test_canvas.test_group.test_call_empty_group": ["celery.canvas.group", "<builtin>.len"], "t.unit.tasks.test_canvas.test_group.test_skew": ["celery.canvas.group", "<builtin>.enumerate", "<builtin>.range"], "t.unit.tasks.test_canvas.test_group.test_iter": ["celery.canvas.group", "<builtin>.iter", "<builtin>.list", "<builtin>.range"], "t.unit.tasks.test_canvas.test_group.test_single_task": ["celery.canvas.group", "<builtin>.len", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_group.helper_test_get_delay": ["time.sleep", "time.time"], "t.unit.tasks.test_canvas.test_group.test_kwargs_direct": ["t.unit.tasks.test_canvas.CanvasCase.setup_method.add"], "t.unit.tasks.test_canvas.test_group.test_kwargs_apply": ["celery.canvas.group"], "t.unit.tasks.test_canvas.test_group.test_kwargs_apply_async": ["celery.canvas.group", "t.unit.tasks.test_canvas.test_group.helper_test_get_delay"], "t.unit.tasks.test_canvas.test_group.test_kwargs_delay": ["celery.canvas.group", "t.unit.tasks.test_canvas.test_group.helper_test_get_delay"], "t.unit.tasks.test_canvas.test_group.test_kwargs_delay_partial": ["celery.canvas.group", "t.unit.tasks.test_canvas.test_group.helper_test_get_delay"], "t.unit.tasks.test_canvas.test_group.test_apply_from_generator": ["unittest.mock.patch", "celery.canvas.group", "<builtin>.len", "<builtin>.range"], "t.unit.tasks.test_canvas.test_group.test_apply_from_generator_empty": ["unittest.mock.patch", "celery.canvas.group", "<builtin>.len", "<builtin>.range"], "t.unit.tasks.test_canvas.test_group.test_apply_contains_chord": ["unittest.mock.patch", "celery.canvas.group", "<builtin>.len", "celery.canvas.chord", "unittest.mock.patch.object"], "t.unit.tasks.test_canvas.test_group.test_apply_contains_chords_containing_chain": ["unittest.mock.patch", "celery.canvas.group", "celery.canvas.chain", "<builtin>.len", "celery.canvas.chord", "unittest.mock.call", "unittest.mock.patch.object"], "t.unit.tasks.test_canvas.test_group.test_apply_contains_chords_containing_empty_chain": ["celery.canvas.chord", "celery.canvas.group", "celery.canvas.chain", "<builtin>.tuple"], "<builtin>.tuple": [], "t.unit.tasks.test_canvas.test_group.test_apply_contains_chords_containing_chain_with_empty_tail": ["unittest.mock.patch", "celery.canvas.group", "celery.canvas.chain", "<builtin>.len", "<builtin>.tuple", "celery.canvas.chord", "unittest.mock.patch.object"], "t.unit.tasks.test_canvas.test_group.test_apply_contains_chords_containing_group": ["unittest.mock.patch", "celery.canvas.group", "<builtin>.len", "celery.canvas.chord", "unittest.mock.call", "unittest.mock.patch.object"], "t.unit.tasks.test_canvas.test_group.test_apply_contains_chords_containing_empty_group": ["unittest.mock.patch", "celery.canvas.group", "<builtin>.len", "<builtin>.tuple", "celery.canvas.chord", "unittest.mock.call", "unittest.mock.patch.object"], "t.unit.tasks.test_canvas.test_group.test_apply_contains_chords_containing_chord": ["unittest.mock.patch", "celery.canvas.group", "<builtin>.len", "celery.canvas.chord", "unittest.mock.call", "unittest.mock.patch.object"], "t.unit.tasks.test_canvas.test_group.test_apply_contains_chords_containing_empty_chord": ["unittest.mock.patch", "celery.canvas.group", "<builtin>.len", "<builtin>.tuple", "celery.canvas.chord", "unittest.mock.call", "unittest.mock.patch.object"], "t.unit.tasks.test_canvas.test_group.test_group_prepared": ["celery.canvas.group", "<builtin>.dict", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chord.test_chord_stamping_one_level": ["celery.canvas.chord", "<builtin>.sorted"], "t.unit.tasks.test_canvas.test_chord.test_chord_stamping_two_levels": ["celery.canvas.chord", "celery.canvas.group", "celery.canvas.chain", "<builtin>.sorted"], "t.unit.tasks.test_canvas.test_chord.test_chord_stamping_body_group": ["celery.canvas.chord", "celery.canvas.group", "<builtin>.range"], "t.unit.tasks.test_canvas.test_chord.test_chord_stamping_body_chord": ["celery.canvas.chord", "celery.canvas.group", "<builtin>.len", "<builtin>.range"], "t.unit.tasks.test_canvas.test_chord.test__get_app_does_not_exhaust_generator": ["celery.canvas.chord", "t.unit.tasks.test_canvas.test_chord.test__get_app_does_not_exhaust_generator.build_generator"], "t.unit.tasks.test_canvas.test_chord.test__get_app_does_not_exhaust_generator.build_generator": ["pytest.fail"], "t.unit.tasks.test_canvas.test_chord": ["pytest.mark.usefixtures", "pytest.mark.parametrize"], "t.unit.tasks.test_canvas.test_chord.test_reverse": ["celery.canvas.signature", "<builtin>.dict", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chord.test_clone_clones_body": ["celery.canvas.chord"], "t.unit.tasks.test_canvas.test_chord.test_argument_is_group": ["celery.canvas.chord", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_chord.test_app_when_app": ["celery.canvas.chord", "unittest.mock.Mock"], "t.unit.tasks.test_canvas.test_chord.test_app_when_app_in_task": ["celery.canvas.chord", "unittest.mock.Mock"], "t.unit.tasks.test_canvas.test_chord.test_app_when_header_is_empty": ["celery.canvas.chord"], "t.unit.tasks.test_canvas.test_chord.test_app_fallback_to_current": ["celery.canvas.chord", "unittest.mock.Mock"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_simple": ["celery.canvas.chord"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_with_body": ["celery.canvas.chord"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_explicit_group_single": ["celery.canvas.chord", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_explicit_group_many": ["celery.canvas.chord", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_implicit_group_single": ["celery.canvas.chord"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_implicit_group_many": ["celery.canvas.chord"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_chain_single": ["celery.canvas.chord", "celery.canvas.chain"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_chain_many": ["celery.canvas.chord", "celery.canvas.chain"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_chain_chain_single": ["celery.canvas.chord", "celery.canvas.chain"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_chain_chain_many": ["celery.canvas.chord", "celery.canvas.chain"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_implicit_chain_single": ["celery.canvas.chord"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_implicit_chain_many": ["celery.canvas.chord"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_implicit_chain_chain_single": ["celery.canvas.chord", "celery.canvas.chain"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_implicit_chain_chain_many": ["celery.canvas.chord", "celery.canvas.chain"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_chord_body_simple": ["celery.canvas.chord", "<builtin>.tuple"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_chord_body_implicit_group_single": ["celery.canvas.chord", "<builtin>.tuple"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_chord_body_implicit_group_many": ["celery.canvas.chord", "<builtin>.tuple"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_group_chain_group_head_single": ["celery.canvas.chord", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_group_chain_group_head_many": ["celery.canvas.chord", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_group_chain_group_mid_single": ["celery.canvas.chord", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_group_chain_group_mid_many": ["celery.canvas.chord", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_group_chain_group_tail_single": ["celery.canvas.chord", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_group_chain_group_tail_many": ["celery.canvas.chord", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_implicit_group_chain_group_tail_single": ["celery.canvas.chord", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_nested_implicit_group_chain_group_tail_many": ["celery.canvas.chord", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_deserialized_element_single": ["unittest.mock.patch", "<builtin>.tuple", "celery.canvas.chord", "json.loads", "json.dumps"], "t.unit.tasks.test_canvas.test_chord.test_chord_size_deserialized_element_many": ["unittest.mock.patch", "<builtin>.tuple", "celery.canvas.chord", "json.loads", "json.dumps"], "t.unit.tasks.test_canvas.test_chord.test_set_immutable": ["celery.canvas.chord", "unittest.mock.Mock"], "t.unit.tasks.test_canvas.test_chord.test_links_to_body": ["celery.canvas.chord"], "t.unit.tasks.test_canvas.test_chord.test_repr": ["<builtin>.repr", "celery.canvas.chord"], "t.unit.tasks.test_canvas.test_chord.test_freeze_tasks_body_is_group": ["<builtin>.enumerate", "celery.canvas.chord", "<builtin>.all", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chord.test_freeze_tasks_is_not_group": ["celery.canvas.chord"], "t.unit.tasks.test_canvas.test_chord.test_chain_always_eager": [], "t.unit.tasks.test_canvas.test_chord.test_chain_always_eager.finalize": [], "t.unit.tasks.test_canvas.test_chord.test_chain_always_eager.chord_add": ["celery.canvas.chord"], "t.unit.tasks.test_canvas.test_chord.test_from_dict": ["<builtin>.dict", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chord.test_from_dict_with_body": ["<builtin>.dict", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chord.test_from_dict_deep_deserialize": ["celery.canvas.chord.from_dict", "celery.canvas.chord", "<builtin>.all", "<builtin>.isinstance", "json.loads", "json.dumps"], "celery.canvas.chord.from_dict": [], "t.unit.tasks.test_canvas.test_chord.test_from_dict_deep_deserialize_group": ["celery.canvas.chord.from_dict", "celery.canvas.chord", "<builtin>.all", "<builtin>.isinstance", "json.loads", "json.dumps"], "t.unit.tasks.test_canvas.test_chord.test_from_dict_deeper_deserialize_group": ["celery.canvas.chord.from_dict", "celery.canvas.chord", "<builtin>.all", "<builtin>.isinstance", "json.loads", "json.dumps"], "t.unit.tasks.test_canvas.test_chord.test_from_dict_deep_deserialize_chain": ["celery.canvas.chain", "celery.canvas.chord.from_dict", "celery.canvas.chord", "<builtin>.all", "<builtin>.isinstance", "json.loads", "json.dumps"], "t.unit.tasks.test_canvas.test_chord.test_chord_clone_kwargs": ["celery.canvas.signature", "celery.canvas.chord"], "t.unit.tasks.test_canvas.test_chord.test_flag_allow_error_cb_on_chord_header": ["celery.canvas.chord", "celery.canvas.group", "unittest.mock.Mock"], "t.unit.tasks.test_canvas.test_chord.test_flag_allow_error_cb_on_chord_header_various_header_types": ["celery.canvas.signature", "celery.canvas.chord", "celery.canvas.group"], "t.unit.tasks.test_canvas.test_chord.test_chord__or__group_of_single_task": ["celery.canvas.signature", "celery.canvas.chord", "celery.canvas.group", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chord.test_chord_upgrade_on_chaining": ["celery.canvas.signature", "celery.canvas.chord", "celery.canvas.group", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_chord.test_link_error_on_chord_header": ["celery.canvas.signature", "celery.canvas.chord"], "t.unit.tasks.test_canvas.test_maybe_signature.test_is_None": ["celery.canvas.maybe_signature"], "celery.canvas.maybe_signature": [], "t.unit.tasks.test_canvas.test_maybe_signature.test_is_dict": ["celery.canvas.maybe_signature", "<builtin>.dict", "<builtin>.isinstance"], "t.unit.tasks.test_canvas.test_maybe_signature.test_when_sig": ["celery.canvas.maybe_signature"], "t.unit.tasks.test_canvas.test_merge_dictionaries.test_docstring_example": ["celery.canvas._merge_dictionaries"], "celery.canvas._merge_dictionaries": [], "t.unit.tasks.test_canvas.test_merge_dictionaries": ["pytest.mark.parametrize"], "t.unit.tasks.test_canvas.test_merge_dictionaries.test_none_values": ["celery.canvas._merge_dictionaries"], "t.unit.tasks.test_result": [], "t.unit.tasks.test_result.mock_task": ["celery.uuid"], "t.unit.tasks.test_result.save_result": [], "t.unit.tasks.test_result.make_mock_group": ["t.unit.tasks.test_result.save_result", "<builtin>.range", "t.unit.tasks.test_result.mock_task"], "t.unit.tasks.test_result._MockBackend.add_pending_result": [], "t.unit.tasks.test_result._MockBackend.wait_for_pending": [], "t.unit.tasks.test_result._MockBackend.remove_pending_result": [], "t.unit.tasks.test_result.test_AsyncResult.setup_method": ["t.unit.tasks.test_result.save_result", "<builtin>.KeyError", "t.unit.tasks.test_result.mock_task"], "t.unit.tasks.test_result.test_AsyncResult.setup_method.mytask": [], "t.unit.tasks.test_result.test_AsyncResult.test_forget": ["unittest.mock.Mock"], "t.unit.tasks.test_result.test_AsyncResult.test_ignored_getter": ["celery.uuid"], "t.unit.tasks.test_result.test_AsyncResult": ["pytest.mark.usefixtures", "unittest.mock.patch", "pytest.mark.parametrize"], "t.unit.tasks.test_result.test_AsyncResult.test_assert_will_not_block": ["pytest.raises", "celery.result.assert_will_not_block"], "celery.result.assert_will_not_block": [], "t.unit.tasks.test_result.test_AsyncResult.test_get_sync_subtask_option": ["celery.result.AsyncResult", "celery.uuid", "pytest.raises"], "celery.result.AsyncResult": [], "t.unit.tasks.test_result.test_AsyncResult.test_without_id": ["celery.result.AsyncResult", "pytest.raises"], "t.unit.tasks.test_result.test_AsyncResult.test_compat_properties": [], "t.unit.tasks.test_result.test_AsyncResult.test_reduce_direct": ["celery.result.AsyncResult"], "t.unit.tasks.test_result.test_AsyncResult.test_children": ["unittest.mock.Mock", "<builtin>.str", "celery.result.EagerResult", "<builtin>.len", "<builtin>.range"], "celery.result.EagerResult": [], "t.unit.tasks.test_result.test_AsyncResult.test_propagates_for_parent": ["unittest.mock.Mock", "<builtin>.KeyError", "celery.result.EagerResult", "celery.uuid", "pytest.raises"], "t.unit.tasks.test_result.test_AsyncResult.test_get_children": ["celery.uuid", "<builtin>.len", "<builtin>.range"], "t.unit.tasks.test_result.test_AsyncResult.test_build_graph_get_leaf_collect": ["unittest.mock.Mock", "<builtin>.list", "<builtin>.str", "celery.result.EagerResult", "<builtin>.range"], "t.unit.tasks.test_result.test_AsyncResult.test_iterdeps": ["unittest.mock.Mock", "<builtin>.list", "<builtin>.str", "celery.result.EagerResult", "pytest.raises", "<builtin>.range"], "t.unit.tasks.test_result.test_AsyncResult.test_eq_not_implemented": ["<builtin>.object"], "t.unit.tasks.test_result.test_AsyncResult.test_reduce": ["celery.utils.serialization.pickle.loads", "celery.utils.serialization.pickle.dumps"], "t.unit.tasks.test_result.test_AsyncResult.test_maybe_set_cache_empty": [], "t.unit.tasks.test_result.test_AsyncResult.test_set_cache__children": [], "t.unit.tasks.test_result.test_AsyncResult.test_successful": ["celery.uuid"], "t.unit.tasks.test_result.test_AsyncResult.test_raising": ["traceback.format_tb", "pytest.raises"], "traceback.format_tb": [], "t.unit.tasks.test_result.test_AsyncResult.test_raising_remote_tracebacks": ["traceback.format_tb", "pytest.raises", "pytest.importorskip"], "t.unit.tasks.test_result.test_AsyncResult.test_str": ["celery.uuid", "<builtin>.str"], "t.unit.tasks.test_result.test_AsyncResult.test_repr": ["<builtin>.repr", "celery.uuid"], "t.unit.tasks.test_result.test_AsyncResult.test_hash": ["<builtin>.hash"], "t.unit.tasks.test_result.test_AsyncResult.test_get_traceback": ["celery.uuid"], "t.unit.tasks.test_result.test_AsyncResult.test_get__backend_gives_None": ["unittest.mock.Mock"], "t.unit.tasks.test_result.test_AsyncResult.test_get": ["pytest.raises", "unittest.mock.Mock", "<builtin>.isinstance"], "t.unit.tasks.test_result.test_AsyncResult.test_get_when_ignored": ["celery.uuid"], "t.unit.tasks.test_result.test_AsyncResult.test_eq_ne": [], "t.unit.tasks.test_result.test_AsyncResult.test_reduce_restore": [], "t.unit.tasks.test_result.test_AsyncResult.test_get_timeout": ["celery.uuid", "pytest.raises", "unittest.mock.patch"], "t.unit.tasks.test_result.test_AsyncResult.test_get_timeout_longer": ["unittest.mock.patch", "pytest.raises"], "t.unit.tasks.test_result.test_AsyncResult.test_ready": ["celery.uuid", "<builtin>.all"], "t.unit.tasks.test_result.test_AsyncResult.test_del": ["copy.copy", "unittest.mock.patch"], "copy.copy": [], "t.unit.tasks.test_result.test_AsyncResult.test_get_request_meta": ["<builtin>.isinstance", "celery.app.task.Context"], "t.unit.tasks.test_result.test_AsyncResult.test_date_done": ["celery.uuid"], "t.unit.tasks.test_result.test_ResultSet.test_resultset_repr": ["<builtin>.repr"], "t.unit.tasks.test_result.test_ResultSet.test_eq_other": [], "t.unit.tasks.test_result.test_ResultSet.test_get": ["unittest.mock.Mock"], "t.unit.tasks.test_result.test_ResultSet": ["contextlib.contextmanager", "unittest.mock.patch"], "t.unit.tasks.test_result.test_ResultSet.test_get_sync_subtask_option": ["pytest.raises", "unittest.mock.Mock", "<builtin>.str"], "t.unit.tasks.test_result.test_ResultSet.test_join_native_with_group_chain_group": ["unittest.mock.Mock", "celery.result.GroupResult", "t.unit.tasks.test_result.test_ResultSet.test_join_native_with_group_chain_group._get_meta"], "t.unit.tasks.test_result.test_ResultSet.test_join_native_with_group_chain_group._get_meta": [], "celery.result.GroupResult": [], "t.unit.tasks.test_result.test_ResultSet.test_eq_ne": ["<builtin>.object"], "t.unit.tasks.test_result.test_ResultSet.test_takes_app_from_first_task": ["celery.result.ResultSet"], "celery.result.ResultSet": [], "t.unit.tasks.test_result.test_ResultSet.test_get_empty": ["unittest.mock.Mock"], "t.unit.tasks.test_result.test_ResultSet.test_add": ["<builtin>.len"], "t.unit.tasks.test_result.test_ResultSet.dummy_copy": ["unittest.mock.patch"], "t.unit.tasks.test_result.test_ResultSet.dummy_copy.passt": [], "t.unit.tasks.test_result.test_ResultSet.test_add_discard": [], "t.unit.tasks.test_result.test_ResultSet.test_clear": [], "t.unit.tasks.test_result.MockAsyncResultFailure.result": ["<builtin>.KeyError"], "t.unit.tasks.test_result.MockAsyncResultFailure.state": [], "t.unit.tasks.test_result.MockAsyncResultFailure.get": [], "t.unit.tasks.test_result.MockAsyncResultSuccess.__init__": ["<builtin>.super"], "t.unit.tasks.test_result.MockAsyncResultSuccess.forget": [], "t.unit.tasks.test_result.MockAsyncResultSuccess.result": [], "t.unit.tasks.test_result.MockAsyncResultSuccess.state": [], "t.unit.tasks.test_result.MockAsyncResultSuccess.get": [], "t.unit.tasks.test_result.SimpleBackend.__init__": [], "t.unit.tasks.test_result.SimpleBackend._ensure_not_eager": [], "t.unit.tasks.test_result.SimpleBackend.get_many": ["<builtin>.enumerate"], "t.unit.tasks.test_result.test_GroupResult.setup_method": ["celery.uuid", "t.unit.tasks.test_result.make_mock_group"], "t.unit.tasks.test_result.test_GroupResult": ["pytest.mark.usefixtures"], "t.unit.tasks.test_result.test_GroupResult.test_is_pickleable": ["celery.utils.serialization.pickle.loads", "celery.uuid", "celery.utils.serialization.pickle.dumps"], "t.unit.tasks.test_result.test_GroupResult.test_reduce": ["celery.uuid"], "t.unit.tasks.test_result.test_GroupResult.test_eq_ne": ["<builtin>.object", "celery.uuid"], "t.unit.tasks.test_result.test_GroupResult.test_len": ["<builtin>.len"], "t.unit.tasks.test_result.test_GroupResult.test_eq_other": [], "t.unit.tasks.test_result.test_GroupResult.test_eq_with_parent": ["celery.uuid", "<builtin>.range"], "t.unit.tasks.test_result.test_GroupResult.test_pickleable": ["celery.utils.serialization.pickle.loads", "celery.utils.serialization.pickle.dumps"], "t.unit.tasks.test_result.test_GroupResult.test_forget": ["t.unit.tasks.test_result.MockAsyncResultSuccess.__init__", "celery.uuid"], "t.unit.tasks.test_result.test_GroupResult.test_get_nested_without_native_join": ["t.unit.tasks.test_result.SimpleBackend.__init__", "celery.uuid", "t.unit.tasks.test_result.MockAsyncResultSuccess.__init__", "unittest.mock.patch"], "t.unit.tasks.test_result.test_GroupResult.test_getitem": ["t.unit.tasks.test_result.MockAsyncResultSuccess.__init__", "celery.uuid"], "t.unit.tasks.test_result.test_GroupResult.test_save_restore": ["<builtin>.object", "t.unit.tasks.test_result.MockAsyncResultSuccess.__init__", "celery.uuid", "pytest.raises"], "t.unit.tasks.test_result.test_GroupResult.test_save_restore_empty": ["celery.uuid", "<builtin>.isinstance"], "t.unit.tasks.test_result.test_GroupResult.test_restore_app": ["t.unit.tasks.test_result.MockAsyncResultSuccess.__init__", "celery.uuid", "celery.result.GroupResult.restore"], "celery.result.GroupResult.restore": [], "t.unit.tasks.test_result.test_GroupResult.test_restore_current_app_fallback": ["t.unit.tasks.test_result.MockAsyncResultSuccess.__init__", "celery.uuid", "celery.result.GroupResult.restore", "pytest.raises"], "t.unit.tasks.test_result.test_GroupResult.test_join_native": ["unittest.mock.patch", "unittest.mock.Mock", "<builtin>.list", "t.unit.tasks.test_result.SimpleBackend.__init__", "celery.uuid", "unittest.mock.call", "<builtin>.enumerate", "<builtin>.range"], "t.unit.tasks.test_result.test_GroupResult.test_join_native_raises": ["celery.uuid", "pytest.raises", "<builtin>.iter", "unittest.mock.Mock"], "t.unit.tasks.test_result.test_GroupResult.test_failed_join_report": ["<builtin>.next", "celery.uuid", "pytest.raises", "unittest.mock.Mock"], "t.unit.tasks.test_result.test_GroupResult.test_repr": ["<builtin>.repr", "celery.uuid"], "t.unit.tasks.test_result.test_GroupResult.test_children_is_results": ["celery.uuid"], "t.unit.tasks.test_result.test_GroupResult.test_iter_native": ["unittest.mock.patch", "<builtin>.list", "t.unit.tasks.test_result.SimpleBackend.__init__", "<builtin>.len", "celery.uuid", "<builtin>.range"], "t.unit.tasks.test_result.test_GroupResult.test_join_timeout": ["t.unit.tasks.test_result.MockAsyncResultSuccess.__init__", "celery.uuid", "pytest.raises", "unittest.mock.Mock"], "t.unit.tasks.test_result.test_GroupResult.test_iter_native_when_empty_group": ["celery.uuid", "<builtin>.list"], "t.unit.tasks.test_result.test_GroupResult.test___iter__": ["<builtin>.iter", "<builtin>.list"], "t.unit.tasks.test_result.test_GroupResult.test_join": ["<builtin>.list", "<builtin>.range"], "t.unit.tasks.test_result.test_GroupResult.test_successful": [], "t.unit.tasks.test_result.test_GroupResult.test_failed": [], "t.unit.tasks.test_result.test_GroupResult.test_maybe_throw": ["unittest.mock.Mock"], "t.unit.tasks.test_result.test_GroupResult.test_join__on_message": ["pytest.raises", "unittest.mock.Mock"], "t.unit.tasks.test_result.test_GroupResult.test_waiting": [], "t.unit.tasks.test_result.test_GroupResult.test_ready": [], "t.unit.tasks.test_result.test_GroupResult.test_completed_count": ["<builtin>.len"], "t.unit.tasks.test_result.test_pending_AsyncResult.test_result": ["celery.uuid"], "t.unit.tasks.test_result.test_failed_AsyncResult.setup_method": ["<builtin>.KeyError", "t.unit.tasks.test_result.make_mock_group", "t.unit.tasks.test_result.mock_task", "celery.uuid", "t.unit.tasks.test_result.save_result"], "t.unit.tasks.test_result.test_failed_AsyncResult.test_completed_count": ["<builtin>.len"], "t.unit.tasks.test_result.test_failed_AsyncResult.test_join": ["pytest.raises"], "t.unit.tasks.test_result.test_failed_AsyncResult.test_successful": [], "t.unit.tasks.test_result.test_failed_AsyncResult.test_failed": [], "t.unit.tasks.test_result.test_pending_Group.setup_method": ["celery.uuid"], "t.unit.tasks.test_result.test_pending_Group.test_completed_count": [], "t.unit.tasks.test_result.test_pending_Group.test_ready": [], "t.unit.tasks.test_result.test_pending_Group.test_waiting": [], "t.unit.tasks.test_result.test_pending_Group.test_join": ["pytest.raises"], "t.unit.tasks.test_result.test_pending_Group.test_join_longer": ["pytest.raises"], "t.unit.tasks.test_result.test_EagerResult.setup_method": [], "t.unit.tasks.test_result.test_EagerResult.setup_method.raising": ["<builtin>.KeyError"], "t.unit.tasks.test_result.test_EagerResult.test_wait_raises": ["pytest.raises"], "t.unit.tasks.test_result.test_EagerResult.test_wait": ["celery.result.EagerResult"], "t.unit.tasks.test_result.test_EagerResult.test_forget": ["celery.result.EagerResult"], "t.unit.tasks.test_result.test_EagerResult.test_revoke": [], "t.unit.tasks.test_result.test_EagerResult": ["unittest.mock.patch"], "t.unit.tasks.test_result.test_EagerResult.test_get_sync_subtask_option": ["celery.result.EagerResult", "celery.uuid", "pytest.raises"], "t.unit.tasks.test_result.test_tuples.test_AsyncResult": ["celery.uuid", "celery.result.result_from_tuple"], "t.unit.tasks.test_result.test_tuples.test_with_parent": ["celery.uuid", "celery.result.result_from_tuple", "<builtin>.isinstance"], "t.unit.tasks.test_result.test_tuples.test_compat": ["celery.uuid", "celery.result.result_from_tuple"], "t.unit.tasks.test_result.test_tuples.test_as_list": ["celery.uuid", "<builtin>.isinstance"], "t.unit.tasks.test_result.test_tuples.test_GroupResult": ["celery.uuid", "celery.result.result_from_tuple", "<builtin>.range"], "t.unit.tasks.test_result.test_tuples.test_GroupResult_with_parent": ["celery.uuid", "celery.result.result_from_tuple", "<builtin>.range"], "t.unit.tasks.test_result.test_tuples.test_GroupResult_as_tuple": ["celery.uuid", "<builtin>.isinstance", "<builtin>.range"], "t.unit.tasks.test_chord": ["contextlib.contextmanager"], "t.unit.tasks.test_chord.passthru": [], "t.unit.tasks.test_chord.AnySignatureWithTask.__eq__": [], "t.unit.tasks.test_chord.ChordCase.setup_method": [], "t.unit.tasks.test_chord.ChordCase.setup_method.add": [], "t.unit.tasks.test_chord.TSR.ready": [], "t.unit.tasks.test_chord.TSR.join": ["<builtin>.isinstance"], "t.unit.tasks.test_chord.TSR._failed_join_report": ["celery.result.EagerResult", "<builtin>.isinstance"], "t.unit.tasks.test_chord.TSRNoReport._failed_join_report": ["<builtin>.iter"], "t.unit.tasks.test_chord.patch_unlock_retry": ["celery.exceptions.Retry", "unittest.mock.Mock"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_unlock_ready": ["t.unit.tasks.test_chord.test_unlock_chord_task._chord_context"], "t.unit.tasks.test_chord.test_unlock_chord_task._chord_context": ["t.unit.tasks.test_chord.test_unlock_chord_task.test_callback_fails.setup", "unittest.mock.Mock", "t.unit.tasks.test_chord.patch_unlock_retry"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_deps_ready_fails": ["pytest.raises", "unittest.mock.Mock", "<builtin>.KeyError"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_callback_fails": ["t.unit.tasks.test_chord.test_unlock_chord_task._chord_context", "<builtin>.isinstance"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_callback_fails.setup": ["<builtin>.IOError"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_unlock_ready_failed": ["<builtin>.str", "t.unit.tasks.test_chord.test_unlock_chord_task._chord_context", "<builtin>.isinstance"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_unlock_ready_failed.Failed": ["<builtin>.KeyError"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_unlock_ready_failed_no_culprit": ["t.unit.tasks.test_chord.test_unlock_chord_task._chord_context", "<builtin>.isinstance"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_unlock_ready_failed_no_culprit.Failed": ["<builtin>.KeyError"], "t.unit.tasks.test_chord.test_unlock_chord_task": ["contextlib.contextmanager"], "t.unit.tasks.test_chord.test_unlock_chord_task._chord_context.callback": [], "t.unit.tasks.test_chord.test_unlock_chord_task.test_when_not_ready": ["t.unit.tasks.test_chord.test_unlock_chord_task._chord_context"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_when_not_ready_with_configured_chord_retry_interval": ["t.unit.tasks.test_chord.test_unlock_chord_task._chord_context"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_is_in_registry": [], "t.unit.tasks.test_chord.test_unlock_chord_task._test_unlock_join_timeout": ["t.unit.tasks.test_chord.test_unlock_chord_task._chord_context"], "t.unit.tasks.test_chord.test_unlock_chord_task._test_unlock_join_timeout.MockJoinResult": ["unittest.mock.Mock"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_unlock_join_timeout_default": ["t.unit.tasks.test_chord.test_unlock_chord_task._test_unlock_join_timeout"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_unlock_join_timeout_custom": ["t.unit.tasks.test_chord.test_unlock_chord_task._test_unlock_join_timeout"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_unlock_with_chord_params_default": ["celery.group", "celery.chord", "celery.canvas.Signature.__init__", "unittest.mock.patch.object"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_unlock_with_chord_params_default.mul": [], "t.unit.tasks.test_chord.test_unlock_chord_task.test_unlock_with_chord_params_and_task_id": ["celery.group", "celery.chord", "celery.canvas.Signature.__init__", "unittest.mock.patch.object"], "t.unit.tasks.test_chord.test_unlock_chord_task.test_unlock_with_chord_params_and_task_id.mul": [], "t.unit.tasks.test_chord.test_chord.test_eager": ["<builtin>.sum", "celery.chord", "<builtin>.range"], "t.unit.tasks.test_chord.test_chord.test_eager.addX": [], "t.unit.tasks.test_chord.test_chord.test_eager.sumX": ["<builtin>.sum"], "t.unit.tasks.test_chord.test_chord.test_apply": ["unittest.mock.Mock", "celery.chord.run.assert_called", "pytest.raises", "celery.chord", "<builtin>.range"], "celery.chord.run.assert_called": [], "t.unit.tasks.test_chord.test_chord.test_init": ["celery.utils.serialization.pickle.loads", "celery.utils.serialization.pickle.dumps", "celery.chord", "<builtin>.range"], "t.unit.tasks.test_chord.test_chord.test_init.addX": [], "t.unit.tasks.test_chord.test_chord.test_init.sumX": ["<builtin>.sum"], "t.unit.tasks.test_chord.test_add_to_chord.setup_method": [], "t.unit.tasks.test_chord.test_add_to_chord.setup_method.add": [], "t.unit.tasks.test_chord.test_add_to_chord.setup_method.adds": [], "unittest.mock.PropertyMock": [], "t.unit.tasks.test_chord.test_add_to_chord": ["unittest.mock.patch", "unittest.mock.PropertyMock"], "t.unit.tasks.test_chord.test_add_to_chord.test_add_to_chord": ["celery.uuid", "pytest.raises", "unittest.mock.Mock"], "t.unit.tasks.test_chord.test_Chord_task": ["unittest.mock.patch", "unittest.mock.PropertyMock"], "t.unit.tasks.test_chord.test_Chord_task.test_run": ["celery.group", "unittest.mock.Mock", "<builtin>.range"], "t.unit.tasks.test_chord.test_Chord_task.test_run__chord_size_set": ["celery.group", "<builtin>.range"], "t.unit.tasks.test_trace": [], "t.unit.tasks.test_trace.trace": ["celery.app.trace.build_tracer"], "t.unit.tasks.test_trace.TraceCase.setup_method": [], "t.unit.tasks.test_trace.TraceCase.setup_method.add": [], "t.unit.tasks.test_trace.TraceCase.setup_method.add_cast": [], "t.unit.tasks.test_trace.TraceCase.setup_method.raises": [], "t.unit.tasks.test_trace.TraceCase.trace": ["t.unit.tasks.test_trace.TraceCase.trace"], "t.unit.tasks.test_trace.test_trace.test_trace_successful": ["t.unit.tasks.test_trace.TraceCase.trace"], "t.unit.tasks.test_trace.test_trace.test_trace_before_start": ["t.unit.tasks.test_trace.TraceCase.trace", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_trace_before_start.add_with_before_start": [], "t.unit.tasks.test_trace.test_trace.test_trace_on_success": ["t.unit.tasks.test_trace.TraceCase.trace", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_trace_on_success.add_with_success": [], "t.unit.tasks.test_trace.test_trace.test_get_log_policy": ["<builtin>.KeyError", "unittest.mock.Mock", "celery.app.trace.get_log_policy", "<builtin>.TypeError", "celery.exceptions.Ignore", "celery.exceptions.Reject"], "celery.app.trace.get_log_policy": [], "t.unit.tasks.test_trace.test_trace.test_get_task_name": ["celery.app.trace.get_task_name", "celery.app.task.Context"], "celery.app.trace.get_task_name": [], "t.unit.tasks.test_trace.test_trace.test_trace_after_return": ["t.unit.tasks.test_trace.TraceCase.trace", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_trace_after_return.add_with_after_return": [], "t.unit.tasks.test_trace.test_trace.test_with_prerun_receivers": ["celery.signals.task_prerun.connect", "t.unit.tasks.test_trace.TraceCase.trace", "unittest.mock.Mock"], "celery.signals.task_prerun.connect": [], "t.unit.tasks.test_trace.test_trace.test_with_postrun_receivers": ["t.unit.tasks.test_trace.TraceCase.trace", "unittest.mock.Mock", "celery.signals.task_postrun.connect"], "celery.signals.task_postrun.connect": [], "t.unit.tasks.test_trace.test_trace.test_with_success_receivers": ["t.unit.tasks.test_trace.TraceCase.trace", "celery.signals.task_success.connect", "unittest.mock.Mock"], "celery.signals.task_success.connect": [], "t.unit.tasks.test_trace.test_trace.test_when_chord_part": ["t.unit.tasks.test_trace.TraceCase.trace", "celery.uuid", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_when_chord_part.add": [], "t.unit.tasks.test_trace.test_trace.test_when_backend_cleanup_raises": ["unittest.mock.Mock", "<builtin>.KeyError", "t.unit.tasks.test_trace.TraceCase.trace", "pytest.raises", "<builtin>.MemoryError"], "t.unit.tasks.test_trace.test_trace.test_when_backend_cleanup_raises.add": [], "t.unit.tasks.test_trace.test_trace.test_eager_task_does_not_store_result_even_if_not_ignore_result": ["t.unit.tasks.test_trace.TraceCase.trace", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_eager_task_does_not_store_result_even_if_not_ignore_result.add": [], "t.unit.tasks.test_trace.test_trace.test_eager_task_does_not_call_store_result": ["t.unit.tasks.test_trace.TraceCase.trace", "celery.backends.base.BaseDictBackend", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_eager_task_does_not_call_store_result.add": [], "t.unit.tasks.test_trace.test_trace.test_eager_task_will_store_result_if_proper_setting_is_set": ["t.unit.tasks.test_trace.TraceCase.trace", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_eager_task_will_store_result_if_proper_setting_is_set.add": [], "t.unit.tasks.test_trace.test_trace.test_eager_task_with_setting_will_call_store_result": ["t.unit.tasks.test_trace.TraceCase.trace", "celery.backends.base.BaseDictBackend", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_eager_task_with_setting_will_call_store_result.add": [], "t.unit.tasks.test_trace.test_trace.test_when_backend_raises_exception": ["t.unit.tasks.test_trace.TraceCase.trace", "pytest.raises", "<builtin>.Exception", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_when_backend_raises_exception.add": [], "t.unit.tasks.test_trace.test_trace.test_traceback_clear": ["t.unit.tasks.test_trace.test_trace.test_traceback_clear.raise_dummy", "unittest.mock.Mock", "<builtin>.str", "<builtin>.len", "celery.app.trace.traceback_clear"], "t.unit.tasks.test_trace.test_trace.test_traceback_clear.raise_dummy": ["inspect.currentframe", "<builtin>.KeyError", "<builtin>.str"], "celery.app.trace.traceback_clear": [], "t.unit.tasks.test_trace.test_trace": ["unittest.mock.patch"], "t.unit.tasks.test_trace.test_trace.test_when_Ignore": ["t.unit.tasks.test_trace.TraceCase.trace"], "t.unit.tasks.test_trace.test_trace.test_when_Ignore.ignored": ["celery.exceptions.Ignore"], "t.unit.tasks.test_trace.test_trace.test_when_Reject": ["t.unit.tasks.test_trace.TraceCase.trace"], "t.unit.tasks.test_trace.test_trace.test_when_Reject.rejecting": ["celery.exceptions.Reject"], "t.unit.tasks.test_trace.test_trace.test_backend_cleanup_raises": ["<builtin>.RuntimeError", "t.unit.tasks.test_trace.TraceCase.trace", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_callbacks__scalar": ["t.unit.tasks.test_trace.TraceCase.trace", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_chain_proto2": ["t.unit.tasks.test_trace.TraceCase.trace", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_chain_inherit_parent_priority": ["t.unit.tasks.test_trace.TraceCase.trace", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_callbacks__EncodeError": ["t.unit.tasks.test_trace.TraceCase.trace", "kombu.exceptions.EncodeError", "unittest.mock.Mock"], "kombu.exceptions.EncodeError": [], "t.unit.tasks.test_trace.test_trace.test_callbacks__sigs": ["t.unit.tasks.test_trace.TraceCase.trace", "celery.group", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_callbacks__sigs.passt": [], "t.unit.tasks.test_trace.test_trace.test_callbacks__only_groups": ["t.unit.tasks.test_trace.TraceCase.trace", "celery.group", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_trace.test_callbacks__only_groups.passt": [], "t.unit.tasks.test_trace.test_trace.test_trace_SystemExit": ["t.unit.tasks.test_trace.TraceCase.trace", "pytest.raises", "<builtin>.SystemExit"], "t.unit.tasks.test_trace.test_trace.test_trace_Retry": ["t.unit.tasks.test_trace.TraceCase.trace", "celery.exceptions.Retry"], "t.unit.tasks.test_trace.test_trace.test_trace_exception": ["t.unit.tasks.test_trace.TraceCase.trace", "<builtin>.KeyError"], "t.unit.tasks.test_trace.test_trace.test_trace_task_ret__no_content_type": ["celery.app.trace.trace_task_ret"], "t.unit.tasks.test_trace.test_trace.test_fast_trace_task__no_content_type": ["celery.app.trace.fast_trace_task", "celery.app.trace.build_tracer"], "t.unit.tasks.test_trace.test_trace.test_trace_exception_propagate": ["t.unit.tasks.test_trace.TraceCase.trace", "pytest.raises", "<builtin>.KeyError"], "t.unit.tasks.test_trace.test_trace.test_outside_body_error": ["celery.app.trace.trace_task", "unittest.mock.Mock", "<builtin>.KeyError"], "t.unit.tasks.test_trace.test_trace.test_outside_body_error.xtask": [], "t.unit.tasks.test_trace.test_trace.test_backend_error_should_report_failure": ["celery.backends.base.BaseDictBackend", "unittest.mock.Mock", "celery.app.trace.trace_task", "<builtin>.Exception", "<builtin>.isinstance"], "t.unit.tasks.test_trace.test_trace.test_backend_error_should_report_failure.xtask": [], "t.unit.tasks.test_trace.test_trace.test_deduplicate_successful_tasks__deduplication": ["t.unit.tasks.test_trace.trace", "uuid.uuid4", "<builtin>.str", "celery.backends.cache.CacheBackend"], "t.unit.tasks.test_trace.test_trace.test_deduplicate_successful_tasks__deduplication.add": [], "uuid.uuid4": [], "t.unit.tasks.test_trace.test_trace.test_deduplicate_successful_tasks__no_deduplication": ["unittest.mock.patch", "<builtin>.str", "celery.backends.cache.CacheBackend", "t.unit.tasks.test_trace.trace", "uuid.uuid4"], "t.unit.tasks.test_trace.test_trace.test_deduplicate_successful_tasks__no_deduplication.add": [], "t.unit.tasks.test_trace.test_trace.test_deduplicate_successful_tasks__result_not_found": ["unittest.mock.patch", "<builtin>.str", "celery.backends.cache.CacheBackend", "t.unit.tasks.test_trace.trace", "<builtin>.type", "uuid.uuid4", "unittest.mock.PropertyMock"], "t.unit.tasks.test_trace.test_trace.test_deduplicate_successful_tasks__result_not_found.add": [], "t.unit.tasks.test_trace.test_trace.test_deduplicate_successful_tasks__cached_request": ["<builtin>.str", "celery.worker.state.successful_requests.clear", "celery.worker.state.successful_requests.add", "celery.backends.cache.CacheBackend", "t.unit.tasks.test_trace.trace", "uuid.uuid4"], "t.unit.tasks.test_trace.test_trace.test_deduplicate_successful_tasks__cached_request.add": [], "celery.worker.state.successful_requests.add": [], "celery.worker.state.successful_requests.clear": [], "t.unit.tasks.test_trace.test_TraceInfo.test_handle_error_state": ["celery.app.trace.TraceInfo.handle_error_state", "celery.app.trace.TraceInfo.__init__", "unittest.mock.Mock"], "celery.app.trace.TraceInfo.__init__": [], "celery.app.trace.TraceInfo.handle_error_state": [], "t.unit.tasks.test_trace.test_TraceInfo.test_handle_error_state_for_eager_task": ["celery.app.trace.TraceInfo.handle_error_state", "celery.app.trace.TraceInfo.__init__", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_TraceInfo.test_handle_error_for_eager_saved_to_backend": ["celery.app.trace.TraceInfo.handle_error_state", "celery.app.trace.TraceInfo.__init__", "unittest.mock.Mock"], "t.unit.tasks.test_trace.test_TraceInfo": ["unittest.mock.patch"], "t.unit.tasks.test_trace.test_TraceInfo.test_handle_reject": ["celery.app.trace.TraceInfo.__init__", "celery.app.trace.TraceInfo.handle_reject", "unittest.mock.Mock"], "celery.app.trace.TraceInfo.handle_reject": [], "t.unit.tasks.test_trace.test_stackprotection.test_stackprotection": ["celery.app.trace.setup_worker_optimizations", "celery.app.trace.reset_worker_optimizations", "t.unit.tasks.test_trace.test_stackprotection.test_stackprotection.foo"], "t.unit.tasks.test_trace.test_stackprotection.test_stackprotection.foo": ["t.unit.tasks.test_trace.test_stackprotection.test_stackprotection.foo"], "t.unit.tasks": [], "t.unit.tasks.test_states": [], "t.unit.tasks.test_states.test_state_precedence": ["pytest.mark.parametrize"], "t.unit.tasks.test_states.test_state_precedence.test_gt": ["celery.states.state"], "celery.states.state": [], "t.unit.tasks.test_states.test_state_precedence.test_gte": ["celery.states.state"], "t.unit.tasks.test_states.test_state_precedence.test_lt": ["celery.states.state"], "t.unit.tasks.test_states.test_state_precedence.test_lte": ["celery.states.state"], "t.unit.tasks.test_context": ["t.unit.tasks.test_context.get_context_as_dict", "celery.app.task.Context"], "t.unit.tasks.test_context.get_context_as_dict": ["celery.app.task.Context.get", "<builtin>.dir", "<builtin>.callable"], "celery.app.task.Context.get": [], "<builtin>.callable": [], "t.unit.tasks.test_context.test_Context.test_default_context": ["t.unit.tasks.test_context.get_context_as_dict", "<builtin>.dict", "celery.app.task.Context"], "t.unit.tasks.test_context.test_Context.test_updated_context": ["t.unit.tasks.test_context.get_context_as_dict", "<builtin>.dict", "celery.app.task.Context"], "t.unit.tasks.test_context.test_Context.test_modified_context": ["t.unit.tasks.test_context.get_context_as_dict", "<builtin>.dict", "celery.app.task.Context"], "t.unit.tasks.test_context.test_Context.test_cleared_context": ["t.unit.tasks.test_context.get_context_as_dict", "<builtin>.dict", "celery.app.task.Context"], "t.unit.tasks.test_context.test_Context.test_context_get": ["t.unit.tasks.test_context.get_context_as_dict", "<builtin>.dict", "celery.app.task.Context"], "t.unit.tasks.test_context.test_Context.test_extract_headers": ["celery.app.task.Context"], "t.unit.tasks.test_context.test_Context.test_dont_override_headers": ["celery.app.task.Context"], "t.unit.tasks.test_tasks": [], "t.unit.tasks.test_tasks.return_True": [], "t.unit.tasks.test_tasks.MockApplyTask.run": [], "t.unit.tasks.test_tasks.MockApplyTask.apply_async": [], "t.unit.tasks.test_tasks.TasksCase.setup_method": ["kombu.transport.memory.Channel.queues.clear"], "t.unit.tasks.test_tasks.TasksCase.setup_method.increment_counter": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.raising": ["<builtin>.KeyError"], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_task": ["<builtin>.repr"], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_task_noargs": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_task_return_without_throw": ["<builtin>.Exception"], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_task_return_with_throw": ["<builtin>.Exception"], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_task_auto_retry_with_single_new_arg": ["<builtin>.Exception"], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_task_auto_retry_with_new_args": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_task_auto_retry_exception_with_new_args": ["<builtin>.Exception"], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_task_max_retries_override": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_task_explicit_exception": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_task_raise_without_throw": ["<builtin>.Exception"], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_task_mockapply": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_task_customexc": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.autoretry_task_no_kwargs": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.autoretry_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.autoretry_arith_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.autoretry_backoff_task": ["urllib.error.HTTPError", "tempfile.TemporaryFile", "urllib2.HTTPError"], "tempfile.TemporaryFile": [], "urllib.error.HTTPError": [], "urllib2.HTTPError": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.autoretry_backoff_jitter_task": ["urllib.error.HTTPError", "tempfile.TemporaryFile", "urllib2.HTTPError"], "t.unit.tasks.test_tasks.TasksCase.setup_method.autoretry_for_from_base_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.override_autoretry_for_from_base_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_kwargs_from_base_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.override_retry_kwargs_from_base_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_backoff_from_base_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.override_retry_backoff_from_base_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_backoff_max_from_base_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.override_retry_backoff_max_from_base_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.retry_backoff_jitter_from_base_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.override_backoff_jitter_from_base_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.task_check_request_context": ["socket.gethostname"], "t.unit.tasks.test_tasks.TasksCase.setup_method.task_with_ignored_result": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.task_called_by_other_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.task_which_calls_other_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.task_replacing_another_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.task_replaced_by_other_task": [], "t.unit.tasks.test_tasks.TasksCase.setup_method.task_replaced_by_other_task_with_autoretry": [], "kombu.transport.memory.Channel.queues.clear": [], "t.unit.tasks.test_tasks.test_task_retries.test_retry": [], "t.unit.tasks.test_tasks.test_task_retries.test_retry_priority": [], "t.unit.tasks.test_tasks.test_task_retries.test_retry_no_args": [], "t.unit.tasks.test_tasks.test_task_retries.test_signature_from_request__passes_headers": [], "t.unit.tasks.test_tasks.test_task_retries.test_signature_from_request__delivery_info": [], "t.unit.tasks.test_tasks.test_task_retries.test_signature_from_request__shadow_name": [], "t.unit.tasks.test_tasks.test_task_retries.test_retry_kwargs_can_be_empty": ["sys.exc_clear", "pytest.raises"], "sys.exc_clear": [], "t.unit.tasks.test_tasks.test_task_retries.test_retry_without_throw_eager": [], "t.unit.tasks.test_tasks.test_task_retries.test_raise_without_throw_eager": [], "t.unit.tasks.test_tasks.test_task_retries.test_return_with_throw_eager": [], "t.unit.tasks.test_tasks.test_task_retries.test_eager_retry_with_single_new_params": [], "t.unit.tasks.test_tasks.test_task_retries.test_eager_retry_with_new_params": [], "t.unit.tasks.test_tasks.test_task_retries.test_eager_retry_with_autoretry_for_exception": [], "t.unit.tasks.test_tasks.test_task_retries.test_retry_task_max_retries_override": ["pytest.raises"], "t.unit.tasks.test_tasks.test_task_retries.test_retry_task_explicit_exception": ["pytest.raises"], "t.unit.tasks.test_tasks.test_task_retries.test_retry_eager_should_return_value": [], "t.unit.tasks.test_tasks.test_task_retries.test_retry_not_eager": ["<builtin>.Exception", "pytest.raises"], "t.unit.tasks.test_tasks.test_task_retries.test_retry_with_kwargs": [], "t.unit.tasks.test_tasks.test_task_retries.test_retry_with_custom_exception": ["pytest.raises"], "t.unit.tasks.test_tasks.test_task_retries.test_max_retries_exceeded": ["pytest.raises"], "t.unit.tasks.test_tasks.test_task_retries.test_max_retries_exceeded_task_args": ["pytest.raises"], "t.unit.tasks.test_tasks.test_task_retries.test_autoretry_no_kwargs": [], "t.unit.tasks.test_tasks.test_task_retries.test_autoretry": [], "t.unit.tasks.test_tasks.test_task_retries.test_autoretry_arith": [], "t.unit.tasks.test_tasks.test_task_retries.<lambda1>": [], "t.unit.tasks.test_tasks.test_task_retries": ["unittest.mock.patch"], "t.unit.tasks.test_tasks.test_task_retries.test_autoretry_backoff": ["unittest.mock.patch.object"], "t.unit.tasks.test_tasks.test_task_retries.<lambda2>": [], "t.unit.tasks.test_tasks.test_task_retries.test_autoretry_backoff_jitter": ["unittest.mock.patch.object"], "t.unit.tasks.test_tasks.test_task_retries.test_autoretry_for_from_base": [], "t.unit.tasks.test_tasks.test_task_retries.test_override_autoretry_for_from_base": [], "t.unit.tasks.test_tasks.test_task_retries.test_retry_kwargs_from_base": [], "t.unit.tasks.test_tasks.test_task_retries.test_override_retry_kwargs_from_base": [], "t.unit.tasks.test_tasks.test_task_retries.test_retry_backoff_from_base": ["unittest.mock.patch.object"], "t.unit.tasks.test_tasks.test_task_retries.test_override_retry_backoff_from_base": [], "t.unit.tasks.test_tasks.test_task_retries.test_retry_backoff_max_from_base": ["unittest.mock.patch.object"], "t.unit.tasks.test_tasks.test_task_retries.test_override_retry_backoff_max_from_base": ["unittest.mock.patch.object"], "t.unit.tasks.test_tasks.test_task_retries.test_retry_backoff_jitter_from_base": ["unittest.mock.patch.object"], "t.unit.tasks.test_tasks.test_task_retries.<lambda3>": [], "t.unit.tasks.test_tasks.test_task_retries.test_override_backoff_jitter_from_base": ["unittest.mock.patch.object"], "t.unit.tasks.test_tasks.test_task_retries.test_retry_wrong_eta_when_not_enable_utc": [], "t.unit.tasks.test_tasks.test_task_retries.test_autoretry_class_based_task": ["celery.Task.__init__", "celery.Task.apply"], "t.unit.tasks.test_tasks.test_task_retries.test_autoretry_class_based_task.ClassBasedAutoRetryTask.run": [], "celery.Task.__init__": [], "celery.Task.apply": [], "t.unit.tasks.test_tasks.test_canvas_utils.test_si": [], "t.unit.tasks.test_tasks.test_canvas_utils.test_chunks": ["<builtin>.range"], "t.unit.tasks.test_tasks.test_canvas_utils.test_map": ["<builtin>.range"], "t.unit.tasks.test_tasks.test_canvas_utils.test_starmap": ["<builtin>.range"], "t.unit.tasks.test_tasks.test_canvas_utils.test_on_success": [], "t.unit.tasks.test_tasks.test_tasks.now": [], "t.unit.tasks.test_tasks.test_tasks.test_typing": ["pytest.raises"], "t.unit.tasks.test_tasks.test_tasks.test_typing.add": [], "t.unit.tasks.test_tasks.test_tasks.test_shadow_name": ["unittest.mock.Mock"], "t.unit.tasks.test_tasks.test_tasks.test_shadow_name.shadow_name": [], "t.unit.tasks.test_tasks.test_tasks.test_shadow_name.shadowed": [], "t.unit.tasks.test_tasks.test_tasks.test_inherit_parent_priority_child_task": ["unittest.mock.Mock", "celery.contrib.testing.mocks.ContextMock"], "t.unit.tasks.test_tasks.test_tasks.test_typing__disabled": [], "t.unit.tasks.test_tasks.test_tasks.test_typing__disabled.add": [], "t.unit.tasks.test_tasks.test_tasks.test_typing__disabled_by_app": [], "t.unit.tasks.test_tasks.test_tasks.test_typing__disabled_by_app.add": [], "t.unit.tasks.test_tasks.test_tasks": ["pytest.mark.usefixtures", "unittest.mock.patch"], "t.unit.tasks.test_tasks.test_tasks.test_unpickle_task": ["pickle.loads", "pickle.dumps"], "t.unit.tasks.test_tasks.test_tasks.test_unpickle_task.xxx": [], "t.unit.tasks.test_tasks.test_tasks.test_bind__no_app": ["unittest.mock.Mock"], "t.unit.tasks.test_tasks.test_tasks.test_reprtask__no_fmt": ["celery.app.task._reprtask"], "celery.app.task._reprtask": [], "t.unit.tasks.test_tasks.test_tasks.test_AsyncResult": ["celery.uuid"], "t.unit.tasks.test_tasks.test_tasks.assert_next_task_data_equal": ["celery.utils.time.parse_iso8601", "<builtin>.isinstance"], "celery.utils.time.parse_iso8601": [], "t.unit.tasks.test_tasks.test_tasks.test_incomplete_task_cls": ["celery.Task.run", "celery.Task.__init__", "pytest.raises"], "celery.Task.run": [], "t.unit.tasks.test_tasks.test_tasks.test_task_kwargs_must_be_dictionary": ["pytest.raises"], "t.unit.tasks.test_tasks.test_tasks.test_task_args_must_be_list": ["pytest.raises"], "t.unit.tasks.test_tasks.test_tasks.test_regular_task": ["t.unit.tasks.test_tasks.test_tasks.now", "<builtin>.callable", "pytest.raises", "<builtin>.isinstance", "t.unit.tasks.test_tasks.test_tasks.assert_next_task_data_equal", "datetime.timedelta"], "t.unit.tasks.test_tasks.test_tasks.test_send_event": ["unittest.mock.Mock", "celery.contrib.testing.mocks.ContextMock"], "t.unit.tasks.test_tasks.test_tasks.test_on_replace": ["celery.canvas.signature", "pytest.raises"], "t.unit.tasks.test_tasks.test_tasks.test_on_replace.CustomStampingVisitor.on_signature": [], "t.unit.tasks.test_tasks.test_tasks.test_on_replace.MyTask.on_replace": ["<builtin>.super", "celery.canvas.StampingVisitor.__init__"], "t.unit.tasks.test_tasks.test_tasks.test_replace": ["pytest.raises", "unittest.mock.MagicMock"], "t.unit.tasks.test_tasks.test_tasks.test_replace_with_chord": ["pytest.raises", "unittest.mock.Mock"], "t.unit.tasks.test_tasks.test_tasks.test_replace_callback": ["celery.group", "unittest.mock.patch", "pytest.raises", "unittest.mock.Mock"], "t.unit.tasks.test_tasks.test_tasks.test_replace_group": ["celery.group", "pytest.raises", "unittest.mock.Mock"], "t.unit.tasks.test_tasks.test_tasks.test_replace_run": ["pytest.raises"], "t.unit.tasks.test_tasks.test_tasks.test_replace_run_with_autoretry": ["pytest.raises"], "t.unit.tasks.test_tasks.test_tasks.test_replace_delay": ["<builtin>.isinstance"], "t.unit.tasks.test_tasks.test_tasks.test_replace_apply": ["<builtin>.isinstance"], "t.unit.tasks.test_tasks.test_tasks.test_add_trail__no_trail": [], "t.unit.tasks.test_tasks.test_tasks.test_repr_v2_compat": ["<builtin>.repr"], "t.unit.tasks.test_tasks.test_tasks.test_context_get": [], "t.unit.tasks.test_tasks.test_tasks.test_annotate": ["unittest.mock.patch"], "t.unit.tasks.test_tasks.test_tasks.test_annotate.task": [], "t.unit.tasks.test_tasks.test_tasks.test_after_return": [], "t.unit.tasks.test_tasks.test_tasks.test_update_state": ["celery.uuid"], "t.unit.tasks.test_tasks.test_tasks.test_update_state.yyy": [], "t.unit.tasks.test_tasks.test_tasks.test_update_state_passes_request_to_backend": ["celery.uuid", "unittest.mock.Mock"], "t.unit.tasks.test_tasks.test_tasks.test_update_state_passes_request_to_backend.ttt": [], "t.unit.tasks.test_tasks.test_tasks.test_repr": ["<builtin>.repr"], "t.unit.tasks.test_tasks.test_tasks.test_repr.task_test_repr": [], "t.unit.tasks.test_tasks.test_tasks.test_has___name__": [], "t.unit.tasks.test_tasks.test_tasks.test_has___name__.yyy2": [], "t.unit.tasks.test_tasks.test_tasks.test_default_priority": ["unittest.mock.Mock"], "t.unit.tasks.test_tasks.test_tasks.test_default_priority.yyy3": [], "t.unit.tasks.test_tasks.test_tasks.test_default_priority.yyy4": [], "t.unit.tasks.test_tasks.test_tasks.test_default_priority.yyy5": [], "t.unit.tasks.test_tasks.test_apply_task.test_apply_throw": ["pytest.raises"], "t.unit.tasks.test_tasks.test_apply_task.test_apply_with_task_eager_propagates": ["pytest.raises"], "t.unit.tasks.test_tasks.test_apply_task.test_apply_request_context_is_ok": [], "t.unit.tasks.test_tasks.test_apply_task.test_apply": ["<builtin>.repr", "pytest.raises", "<builtin>.isinstance"], "t.unit.tasks.test_tasks.test_apply_task.test_apply_simulates_delivery_info": ["unittest.mock.patch.object"], "t.unit.tasks.test_tasks.test_apply_async.common_send_task_arguments": ["<builtin>.dict"], "t.unit.tasks.test_tasks.test_apply_async.test_eager_serialization_failure": ["pytest.raises"], "t.unit.tasks.test_tasks.test_apply_async.test_eager_serialization_failure.task": [], "t.unit.tasks.test_tasks.test_apply_async.test_eager_serialization_uses_task_serializer_setting": ["pytest.raises"], "t.unit.tasks.test_tasks.test_apply_async.test_eager_serialization_uses_task_serializer_setting.task": [], "t.unit.tasks.test_tasks.test_apply_async.test_eager_serialization_uses_task_serializer_setting.task2": [], "t.unit.tasks.test_tasks.test_apply_async.test_always_eager_with_task_serializer_option": [], "t.unit.tasks.test_tasks.test_apply_async.test_always_eager_with_task_serializer_option.task": [], "t.unit.tasks.test_tasks.test_apply_async.test_always_eager_uses_task_serializer_setting": [], "t.unit.tasks.test_tasks.test_apply_async.test_always_eager_uses_task_serializer_setting.task": [], "t.unit.tasks.test_tasks.test_apply_async.test_task_with_ignored_result": ["unittest.mock.patch.object", "t.unit.tasks.test_tasks.test_apply_async.common_send_task_arguments"], "t.unit.tasks.test_tasks.test_apply_async.test_task_with_result": ["unittest.mock.patch.object", "t.unit.tasks.test_tasks.test_apply_async.common_send_task_arguments"], "t.unit.tasks.test_tasks.test_apply_async.test_task_with_result_ignoring_on_call": ["unittest.mock.patch.object", "t.unit.tasks.test_tasks.test_apply_async.common_send_task_arguments"], "t.unit": [], "t.benchmarks.bench_worker": ["os.environ.get", "t.benchmarks.bench_worker.main", "celery.Celery", "<builtin>.hasattr", "os.environ.update"], "t.benchmarks.bench_worker.tdiff": ["time.monotonic"], "t.benchmarks.bench_worker.it": ["<builtin>.print", "time.monotonic", "t.benchmarks.bench_worker.tdiff", "os._exit"], "<builtin>.print": [], "os._exit": [], "t.benchmarks.bench_worker.bench_apply": ["<builtin>.print", "time.monotonic", "<builtin>.range"], "t.benchmarks.bench_worker.bench_work": ["<builtin>.print", "<builtin>.sum", "os.environ.get"], "t.benchmarks.bench_worker.bench_both": ["t.benchmarks.bench_worker.bench_apply", "t.benchmarks.bench_worker.bench_work"], "t.benchmarks.bench_worker.main": ["<builtin>.int", "<builtin>.len", "os.path.basename", "<builtin>.print", "sys.exit"], "sys.exit": [], "t.skip": ["pytest.mark.skipif", "sys.platform.startswith", "<builtin>.getattr"], "t": [], "t.integration.test_canvas": ["pytest.mark.flaky", "pytest.mark.timeout", "pytest.mark.skip"], "t.integration.test_canvas.is_retryable_exception": ["<builtin>.isinstance"], "pytest.mark.flaky": [], "pytest.mark.timeout": [], "t.integration.test_canvas.flaky": [], "t.integration.test_canvas.await_redis_echo": ["collections.Counter", "conftest.get_redis_connection", "celery.exceptions.TimeoutError", "<builtin>.dict", "<builtin>.isinstance", "<builtin>.min"], "conftest.get_redis_connection": [], "collections.Counter": [], "celery.exceptions.TimeoutError": [], "t.integration.test_canvas.await_redis_list_message_length": ["time.sleep", "<builtin>.int", "conftest.get_redis_connection", "<builtin>.min", "<builtin>.range"], "t.integration.test_canvas.await_redis_count": ["time.sleep", "<builtin>.int", "conftest.get_redis_connection", "<builtin>.min", "<builtin>.range"], "t.integration.test_canvas.compare_group_ids_in_redis": ["conftest.get_redis_connection", "<builtin>.len"], "t.integration.test_canvas.test_link_error": ["t.integration.test_canvas.flaky", "pytest.mark.xfail"], "t.integration.test_canvas.test_link_error.test_link_error_eager": ["tasks.return_exception.s", "tasks.ExpectedException", "tasks.fail.apply"], "tasks.ExpectedException": [], "tasks.return_exception.s": [], "tasks.fail.apply": [], "t.integration.test_canvas.test_link_error.test_link_error": ["tasks.return_exception.s", "tasks.ExpectedException", "tasks.fail.apply"], "t.integration.test_canvas.test_link_error.test_link_error_callback_error_callback_retries_eager": ["tasks.ExpectedException", "tasks.retry_once.s", "tasks.fail.apply"], "tasks.retry_once.s": [], "t.integration.test_canvas.test_link_error.test_link_error_callback_retries": ["tasks.ExpectedException", "tasks.retry_once.s", "tasks.fail.apply_async"], "tasks.fail.apply_async": [], "t.integration.test_canvas.test_link_error.test_link_error_using_signature_eager": ["celery.signature", "tasks.ExpectedException"], "t.integration.test_canvas.test_link_error.test_link_error_using_signature": ["celery.signature", "tasks.ExpectedException"], "t.integration.test_canvas.test_chain": ["pytest.mark.parametrize", "t.integration.test_canvas.flaky", "pytest.mark.xfail"], "t.integration.test_canvas.test_chain.test_simple_chain": ["tasks.add.s"], "tasks.add.s": [], "t.integration.test_canvas.test_chain.test_single_chain": ["tasks.add.s", "celery.chain"], "celery.chain": [], "t.integration.test_canvas.test_chain.test_complex_chain": ["tasks.add.s", "celery.group", "tasks.add_replaced.s", "<builtin>.range"], "tasks.add_replaced.s": [], "t.integration.test_canvas.test_chain.test_group_results_in_chain": ["tasks.add.s", "celery.group"], "t.integration.test_canvas.test_chain.test_chain_of_chain_with_a_single_task": ["celery.signature", "celery.chain"], "t.integration.test_canvas.test_chain.test_chain_on_error": ["pytest.skip", "tasks.add.s", "celery.chain", "tasks.fail.s", "pytest.raises"], "pytest.skip": [], "tasks.fail.s": [], "t.integration.test_canvas.test_chain.test_chain_inside_group_receives_arguments": ["tasks.add.s", "celery.group"], "t.integration.test_canvas.test_chain.test_eager_chain_inside_task": ["tasks.chain_add.apply_async"], "tasks.chain_add.apply_async": [], "t.integration.test_canvas.test_chain.test_group_chord_group_chain": ["celery.group", "pytest.skip", "<builtin>.list", "<builtin>.set", "conftest.get_redis_connection", "tasks.redis_echo.si", "<builtin>.range"], "tasks.redis_echo.si": [], "t.integration.test_canvas.test_chain.test_group_result_not_has_cache": ["celery.group", "celery.chain", "tasks.identity.si"], "tasks.identity.si": [], "t.integration.test_canvas.test_chain.test_second_order_replace": ["conftest.get_redis_connection", "pytest.skip", "tasks.second_order_replace1.delay", "<builtin>.list"], "tasks.second_order_replace1.delay": [], "t.integration.test_canvas.test_chain.test_parent_ids": ["tasks.ids.si", "t.integration.test_canvas.assert_ping", "celery.chain", "<builtin>.print", "t.integration.test_canvas.test_chain.assert_ids", "<builtin>.range"], "t.integration.test_canvas.assert_ping": ["<builtin>.list"], "tasks.ids.si": [], "t.integration.test_canvas.test_chain.assert_ids": [], "t.integration.test_canvas.test_chain.test_chord_soft_timeout_recuperation": ["pytest.skip", "tasks.add.s", "tasks.delayed_sum_with_soft_guard.s", "tasks.delayed_sum.s", "celery.chord"], "tasks.delayed_sum_with_soft_guard.s": [], "tasks.delayed_sum.s": [], "t.integration.test_canvas.test_chain.test_chain_error_handler_with_eta": ["celery.group", "pytest.skip", "tasks.add.s", "datetime.datetime.utcnow", "tasks.print_unicode.s", "celery.chain", "tasks.tsum.s", "datetime.timedelta"], "tasks.print_unicode.s": [], "tasks.tsum.s": [], "t.integration.test_canvas.test_chain.test_groupresult_serialization": ["pytest.skip", "<builtin>.len", "tasks.build_chain_inside_task.delay", "<builtin>.isinstance"], "tasks.build_chain_inside_task.delay": [], "t.integration.test_canvas.test_chain.test_chain_of_task_a_group_and_a_chord": ["celery.group", "pytest.skip", "tasks.add.s", "tasks.tsum.s", "tasks.add.si"], "tasks.add.si": [], "t.integration.test_canvas.test_chain.test_chain_of_chords_as_groups_chained_to_a_task_with_two_tasks": ["celery.group", "pytest.skip", "tasks.add.s", "tasks.tsum.s", "tasks.add.si"], "t.integration.test_canvas.test_chain.test_chain_of_chords_with_two_tasks": ["celery.group", "pytest.skip", "tasks.add.s", "tasks.tsum.s", "tasks.add.si", "celery.chord"], "t.integration.test_canvas.test_chain.test_chain_of_a_chord_and_a_group_with_two_tasks": ["celery.group", "pytest.skip", "tasks.add.s", "tasks.tsum.s", "tasks.add.si"], "t.integration.test_canvas.test_chain.test_chain_of_a_chord_and_a_task_and_a_group": ["tasks.add.s", "celery.group", "pytest.skip", "tasks.tsum.s"], "t.integration.test_canvas.test_chain.test_chain_of_a_chord_and_two_tasks_and_a_group": ["tasks.add.s", "celery.group", "pytest.skip", "tasks.tsum.s"], "t.integration.test_canvas.test_chain.test_chain_of_a_chord_and_three_tasks_and_a_group": ["tasks.add.s", "celery.group", "pytest.skip", "tasks.tsum.s"], "t.integration.test_canvas.test_chain.test_stamping_example_canvas": ["celery.group", "pytest.skip", "tasks.mul.s", "celery.chain", "tasks.xsum.s", "celery.chord", "tasks.identity.s", "<builtin>.range"], "tasks.identity.s": [], "tasks.xsum.s": [], "tasks.mul.s": [], "t.integration.test_canvas.test_chain.test_nested_chain_group_lone": ["celery.group", "celery.chain", "tasks.identity.s"], "t.integration.test_canvas.test_chain.test_nested_chain_group_mid": ["celery.group", "celery.chain", "pytest.skip", "tasks.identity.s"], "t.integration.test_canvas.test_chain.test_nested_chain_group_last": ["celery.group", "celery.chain", "tasks.identity.s"], "t.integration.test_canvas.test_chain.test_chain_replaced_with_a_chain_and_a_callback": ["tasks.replace_with_chain.s", "pytest.skip", "tasks.add.s", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_echo", "celery.chain", "tasks.identity.s"], "tasks.replace_with_chain.s": [], "t.integration.test_canvas.test_chain.test_chain_replaced_with_a_chain_and_an_error_callback": ["pytest.skip", "tasks.replace_with_chain_which_raises.s", "tasks.add.s", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_echo", "celery.chain", "pytest.raises", "tasks.identity.s"], "tasks.replace_with_chain_which_raises.s": [], "t.integration.test_canvas.test_chain.test_chain_with_cb_replaced_with_chain_with_cb": ["tasks.replace_with_chain.s", "pytest.skip", "tasks.redis_echo.s", "tasks.add.s", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_echo", "celery.chain", "tasks.identity.s"], "tasks.redis_echo.s": [], "t.integration.test_canvas.test_chain.test_chain_flattening_keep_links_of_inner_chain": ["pytest.skip", "t.integration.test_canvas.test_chain.test_chain_flattening_keep_links_of_inner_chain.link_chain", "tasks.add.s", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_echo", "tasks.redis_echo.si", "celery.chain", "tasks.identity.s"], "t.integration.test_canvas.test_chain.test_chain_flattening_keep_links_of_inner_chain.link_chain": ["tasks.identity.s"], "t.integration.test_canvas.test_chain.test_chain_with_eb_replaced_with_chain_with_eb": ["pytest.skip", "tasks.replace_with_chain_which_raises.s", "tasks.add.s", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_echo", "celery.chain", "tasks.redis_echo.si", "pytest.raises", "tasks.identity.s"], "t.integration.test_canvas.test_chain.test_replace_chain_with_empty_chain": ["celery.chain", "pytest.raises", "tasks.replace_with_empty_chain.s", "tasks.identity.s"], "tasks.replace_with_empty_chain.s": [], "t.integration.test_canvas.test_chain.test_chain_children_with_callbacks": ["pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "celery.chain", "tasks.redis_count.si", "tasks.identity.si", "uuid.uuid4", "<builtin>.range"], "tasks.redis_count.si": [], "t.integration.test_canvas.test_chain.test_chain_children_with_errbacks": ["pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "celery.chain", "pytest.raises", "tasks.redis_count.si", "tasks.fail.si", "uuid.uuid4", "<builtin>.range"], "tasks.fail.si": [], "t.integration.test_canvas.test_chain.test_chain_with_callback_child_replaced": ["pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "celery.chain", "tasks.add_replaced.si", "tasks.redis_count.si", "uuid.uuid4", "tasks.identity.s"], "tasks.add_replaced.si": [], "t.integration.test_canvas.test_chain.test_chain_with_errback_child_replaced": ["pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "celery.chain", "tasks.add_replaced.si", "tasks.fail.s", "pytest.raises", "tasks.redis_count.si", "uuid.uuid4"], "t.integration.test_canvas.test_chain.test_chain_child_with_callback_replaced": ["pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "celery.chain", "tasks.add_replaced.si", "tasks.redis_count.si", "uuid.uuid4", "tasks.identity.s"], "t.integration.test_canvas.test_chain.test_chain_child_with_errback_replaced": ["pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "tasks.fail_replaced.si", "t.integration.test_canvas.await_redis_count", "celery.chain", "pytest.raises", "tasks.redis_count.si", "tasks.identity.si", "uuid.uuid4"], "tasks.fail_replaced.si": [], "t.integration.test_canvas.test_chain.test_task_replaced_with_chain": ["tasks.replace_with_chain.si"], "tasks.replace_with_chain.si": [], "t.integration.test_canvas.test_chain.test_chain_child_replaced_with_chain_first": ["celery.chain", "tasks.replace_with_chain.si", "tasks.identity.s"], "t.integration.test_canvas.test_chain.test_chain_child_replaced_with_chain_middle": ["tasks.replace_with_chain.s", "celery.chain", "tasks.identity.s"], "t.integration.test_canvas.test_chain.test_chain_child_replaced_with_chain_last": ["tasks.replace_with_chain.s", "celery.chain", "tasks.identity.s"], "t.integration.test_canvas.test_chain.test_chord_header_id_duplicated_on_rabbitmq_msg_duplication": ["celery.signals.before_task_publish.connect", "t.integration.test_canvas.await_redis_list_message_length", "pytest.skip", "conftest.get_redis_connection", "pytest.xfail", "tasks.redis_echo_group_id.s", "celery.chain", "t.integration.test_canvas.compare_group_ids_in_redis", "celery.signals.before_task_publish.disconnect", "celery.chord", "tasks.identity.s"], "celery.signals.before_task_publish.connect": [], "t.integration.test_canvas.test_chain.test_chord_header_id_duplicated_on_rabbitmq_msg_duplication.before_task_publish_handler": [], "tasks.redis_echo_group_id.s": [], "celery.signals.before_task_publish.disconnect": [], "t.integration.test_canvas.test_chain.test_chaining_upgraded_chords_pure_groups": ["celery.group", "pytest.skip", "<builtin>.sorted", "<builtin>.str", "conftest.get_redis_connection", "celery.chain", "tasks.redis_echo.si", "t.integration.test_canvas.await_redis_list_message_length", "<builtin>.range"], "t.integration.test_canvas.test_chain.test_chaining_upgraded_chords_starting_with_chord": ["celery.group", "pytest.skip", "<builtin>.sorted", "<builtin>.str", "conftest.get_redis_connection", "tasks.redis_echo.si", "celery.chain", "t.integration.test_canvas.await_redis_list_message_length", "celery.chord", "<builtin>.range"], "t.integration.test_canvas.test_chain.test_chaining_upgraded_chords_mixed_canvas": ["celery.group", "pytest.skip", "<builtin>.sorted", "<builtin>.str", "conftest.get_redis_connection", "tasks.redis_echo.si", "celery.chain", "t.integration.test_canvas.await_redis_list_message_length", "celery.chord", "<builtin>.range"], "t.integration.test_canvas.test_result_set": ["t.integration.test_canvas.flaky"], "t.integration.test_canvas.test_result_set.test_result_set": ["t.integration.test_canvas.assert_ping", "tasks.add.delay", "celery.result.ResultSet"], "tasks.add.delay": [], "t.integration.test_canvas.test_result_set.test_result_set_error": ["t.integration.test_canvas.assert_ping", "tasks.add.delay", "celery.result.ResultSet", "tasks.raise_error.delay"], "tasks.raise_error.delay": [], "t.integration.test_canvas.test_group.test_group_stamping": ["tasks.add.s", "celery.group", "pytest.skip"], "t.integration.test_canvas.test_group.test_nested_group_stamping": ["tasks.add.s", "celery.group", "celery.chain", "pytest.skip"], "t.integration.test_canvas.test_group": ["t.integration.test_canvas.flaky", "pytest.mark.xfail"], "t.integration.test_canvas.test_group.test_ready_with_exception": ["tasks.add.s", "celery.group", "pytest.skip", "tasks.raise_error.s"], "tasks.raise_error.s": [], "t.integration.test_canvas.test_group.test_empty_group_result": ["celery.group", "celery.result.GroupResult.save", "pytest.skip", "celery.result.GroupResult.restore"], "celery.result.GroupResult.save": [], "t.integration.test_canvas.test_group.test_parent_ids": ["celery.group", "tasks.ids.si", "t.integration.test_canvas.assert_ping", "<builtin>.enumerate", "<builtin>.range"], "t.integration.test_canvas.test_group.test_nested_group": ["t.integration.test_canvas.assert_ping", "celery.group", "tasks.add.si"], "t.integration.test_canvas.test_group.test_large_group": ["celery.group", "<builtin>.list", "t.integration.test_canvas.assert_ping", "tasks.identity.s", "<builtin>.range"], "t.integration.test_canvas.test_group.test_group_lone": ["celery.group", "tasks.identity.s"], "t.integration.test_canvas.test_group.test_nested_group_group": ["celery.group", "tasks.identity.s"], "t.integration.test_canvas.test_group.test_nested_group_chord_counting_simple": ["celery.group", "pytest.skip", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_group.test_nested_group_chord_counting_chain": ["celery.group", "pytest.skip", "celery.chain", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_group.test_nested_group_chord_counting_group": ["celery.group", "pytest.skip", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_group.test_nested_group_chord_counting_chord": ["celery.group", "pytest.skip", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_group.test_nested_group_chord_counting_mixed": ["celery.group", "pytest.skip", "celery.chain", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_group.test_nested_group_chord_body_chain": ["celery.group", "pytest.skip", "celery.chain", "pytest.raises", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_group.test_callback_called_by_group": ["celery.group", "pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_echo", "tasks.redis_echo.si", "tasks.identity.si", "uuid.uuid4"], "t.integration.test_canvas.test_group.test_errback_called_by_group_fail_first": ["celery.group", "pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_echo", "tasks.redis_echo.si", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "uuid.uuid4"], "t.integration.test_canvas.test_group.test_errback_called_by_group_fail_last": ["celery.group", "pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_echo", "tasks.redis_echo.si", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "uuid.uuid4"], "t.integration.test_canvas.test_group.test_errback_called_by_group_fail_multiple": ["celery.group", "pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "tasks.fail.s", "pytest.raises", "tasks.redis_count.si", "tasks.identity.si", "uuid.uuid4", "<builtin>.range"], "t.integration.test_canvas.test_group.test_group_children_with_callbacks": ["celery.group", "pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "tasks.redis_count.si", "tasks.identity.si", "uuid.uuid4", "<builtin>.range"], "t.integration.test_canvas.test_group.test_group_children_with_errbacks": ["celery.group", "pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "pytest.raises", "tasks.redis_count.si", "tasks.fail.si", "uuid.uuid4", "<builtin>.range"], "t.integration.test_canvas.test_group.test_group_with_callback_child_replaced": ["celery.group", "pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "tasks.add_replaced.si", "tasks.redis_count.si", "tasks.identity.si", "uuid.uuid4"], "t.integration.test_canvas.test_group.test_group_with_errback_child_replaced": ["celery.group", "pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "tasks.add_replaced.si", "tasks.fail.s", "pytest.raises", "tasks.redis_count.si", "uuid.uuid4"], "t.integration.test_canvas.test_group.test_group_child_with_callback_replaced": ["celery.group", "pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "tasks.add_replaced.si", "tasks.redis_count.si", "tasks.identity.si", "uuid.uuid4"], "t.integration.test_canvas.test_group.test_group_child_with_errback_replaced": ["celery.group", "pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "tasks.fail_replaced.si", "t.integration.test_canvas.await_redis_count", "pytest.raises", "tasks.redis_count.si", "tasks.identity.si", "uuid.uuid4"], "t.integration.test_canvas.test_group.test_group_child_replaced_with_chain_first": ["celery.group", "tasks.replace_with_chain.si", "tasks.identity.s"], "t.integration.test_canvas.test_group.test_group_child_replaced_with_chain_middle": ["tasks.replace_with_chain.s", "celery.group", "tasks.identity.s"], "t.integration.test_canvas.test_group.test_group_child_replaced_with_chain_last": ["tasks.replace_with_chain.s", "celery.group", "tasks.identity.s"], "t.integration.test_canvas.assert_ids": [], "t.integration.test_canvas.test_chord.test_chord_stamping_two_levels": ["celery.group", "pytest.skip", "tasks.add.s", "celery.chain", "tasks.xsum.s", "celery.chord"], "t.integration.test_canvas.test_chord": ["pytest.mark.parametrize", "t.integration.test_canvas.flaky", "pytest.mark.xfail", "conftest.TEST_BACKEND.startswith"], "t.integration.test_canvas.test_chord.test_simple_chord_with_a_delay_in_group_save": ["pytest.skip", "tasks.tsum.s", "<builtin>.isinstance", "tasks.add.si", "celery.chord"], "t.integration.test_canvas.test_chord.test_simple_chord_with_a_delay_in_group_save.apply_chord_incr_with_sleep": ["time.sleep", "celery.backends.base.BaseKeyValueStoreBackend._apply_chord_incr"], "celery.backends.base.BaseKeyValueStoreBackend._apply_chord_incr": [], "t.integration.test_canvas.test_chord.test_redis_subscribed_channels_leak": ["conftest.get_active_redis_channels", "pytest.skip", "<builtin>.set", "tasks.add.s", "<builtin>.len", "tasks.delayed_sum.s", "celery.chord", "<builtin>.range"], "conftest.get_active_redis_channels": [], "t.integration.test_canvas.test_chord.test_replaced_nested_chord": ["pytest.skip", "tasks.add.s", "tasks.add_to_all.s", "tasks.tsum.s", "tasks.add_replaced.s", "celery.chord"], "tasks.add_to_all.s": [], "t.integration.test_canvas.test_chord.test_add_to_chord": ["celery.group", "pytest.skip", "<builtin>.sorted", "tasks.add_to_all_to_chord.s", "tasks.identity.s"], "tasks.add_to_all_to_chord.s": [], "t.integration.test_canvas.test_chord.test_add_chord_to_chord": ["celery.group", "pytest.skip", "<builtin>.sorted", "tasks.add_chord_to_chord.s", "tasks.identity.s"], "tasks.add_chord_to_chord.s": [], "t.integration.test_canvas.test_chord.test_eager_chord_inside_task": ["tasks.chord_add.apply_async"], "tasks.chord_add.apply_async": [], "t.integration.test_canvas.test_chord.test_group_chain": ["celery.group", "pytest.skip", "tasks.add.s", "tasks.add_to_all.s", "<builtin>.range"], "t.integration.test_canvas.test_chord.test_group_kwargs": ["celery.group", "pytest.skip", "tasks.add.s", "tasks.add_to_all.s", "<builtin>.range"], "t.integration.test_canvas.test_chord.test_group_args_and_kwargs": ["celery.group", "pytest.skip", "<builtin>.set", "tasks.add.s", "tasks.add_to_all.s", "<builtin>.range"], "t.integration.test_canvas.test_chord.test_nested_group_chain": ["celery.group", "celery.chain", "pytest.skip", "tasks.add.si"], "t.integration.test_canvas.test_chord.test_single_task_header": ["celery.group", "pytest.skip", "tasks.add.s", "tasks.add_to_all.s", "celery.chord"], "t.integration.test_canvas.test_chord.test_empty_header_chord": ["celery.group", "tasks.add_to_all.s", "pytest.skip", "celery.chord"], "t.integration.test_canvas.test_chord.test_nested_chord": ["celery.group", "pytest.skip", "tasks.add.s", "tasks.add_to_all.s", "celery.chord"], "t.integration.test_canvas.test_chord.test_parent_ids": ["celery.group", "pytest.skip", "t.integration.test_canvas.test_chord.assert_parentids_chord", "tasks.ids.si", "tasks.collect_ids.s", "celery.chain", "celery.chord", "<builtin>.range"], "tasks.collect_ids.s": [], "t.integration.test_canvas.test_chord.assert_parentids_chord": ["t.integration.test_canvas.assert_ids", "<builtin>.enumerate", "<builtin>.isinstance"], "t.integration.test_canvas.test_chord.test_parent_ids__OR": ["celery.group", "pytest.skip", "t.integration.test_canvas.test_chord.assert_parentids_chord", "tasks.ids.si", "tasks.collect_ids.s", "<builtin>.range"], "t.integration.test_canvas.test_chord.test_chord_on_error": ["tasks.fail.app.backend.decode", "tasks.fail.app.backend.get_key_for_group", "pytest.skip", "time.monotonic", "time.sleep", "<builtin>.str", "tasks.add.s", "celery.result.AsyncResult", "conftest.get_redis_connection", "re.compile", "tasks.print_unicode.s", "<builtin>.len", "celery.exceptions.TimeoutError", "tasks.errback_old_style.s", "<builtin>.all", "tasks.fail.s", "pytest.raises", "celery.chord"], "tasks.errback_old_style.s": [], "t.integration.test_canvas.test_chord.test_chord_on_error.<lambda1>": [], "t.integration.test_canvas.test_chord.test_chord_on_error.<lambda2>": [], "t.integration.test_canvas.test_chord.test_chord_on_error.<lambda3>": [], "tasks.fail.app.backend.get_key_for_group": [], "tasks.fail.app.backend.decode": [], "t.integration.test_canvas.test_chord.test_generator": ["pytest.skip", "tempfile.NamedTemporaryFile", "tasks.tsum.s", "t.integration.test_canvas.test_chord.test_generator.assert_generator", "celery.chord"], "t.integration.test_canvas.test_chord.test_generator.assert_generator": ["tasks.write_to_file_and_return_int.s", "<builtin>.open", "time.sleep", "<builtin>.range"], "tasks.write_to_file_and_return_int.s": [], "t.integration.test_canvas.test_chord.test_parallel_chords": ["celery.group", "pytest.skip", "tasks.add.s", "tasks.tsum.s", "celery.chord"], "t.integration.test_canvas.test_chord.test_chord_in_chords_with_chains": ["celery.group", "pytest.skip", "celery.chain", "tasks.add.si", "celery.chord"], "t.integration.test_canvas.test_chord.test_chain_chord_chain_chord": ["celery.chain", "pytest.skip", "celery.chord", "tasks.identity.si"], "t.integration.test_canvas.test_chord.test_chord_in_chain_with_args": ["celery.chain", "pytest.skip", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_chain_in_chain_with_args": ["celery.chain", "pytest.skip", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_large_header": ["celery.group", "pytest.skip", "tasks.tsum.s", "tasks.identity.si", "<builtin>.range"], "t.integration.test_canvas.test_chord.test_chain_to_a_chord_with_large_header": ["celery.group", "pytest.skip", "tasks.tsum.s", "tasks.identity.si", "tasks.identity.s", "<builtin>.range"], "t.integration.test_canvas.test_chord.test_priority": ["celery.chain", "tasks.return_priority.signature"], "tasks.return_priority.signature": [], "t.integration.test_canvas.test_chord.test_priority_chain": ["tasks.return_priority.signature"], "t.integration.test_canvas.test_chord.test_nested_chord_group": ["celery.group", "pytest.skip", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_nested_chord_group_chain_group_tail": ["celery.group", "pytest.skip", "celery.chain", "celery.chord", "tasks.identity.s"], "conftest.TEST_BACKEND.startswith": [], "t.integration.test_canvas.test_chord.test_error_propagates_from_chord": ["celery.group", "pytest.skip", "tasks.add.s", "tasks.fail.s", "pytest.raises"], "t.integration.test_canvas.test_chord.test_error_propagates_from_chord2": ["celery.group", "pytest.skip", "tasks.add.s", "tasks.fail.s", "pytest.raises"], "t.integration.test_canvas.test_chord.test_error_propagates_to_chord_from_simple": ["pytest.skip", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_immutable_errback_called_by_chord_from_simple": ["pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_echo", "tasks.redis_echo.si", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "uuid.uuid4", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_mutable_errback_called_by_chord_from_simple": ["pytest.skip", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_error_propagates_to_chord_from_chain": ["pytest.skip", "celery.chain", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_immutable_errback_called_by_chord_from_chain": ["pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_echo", "tasks.redis_echo.si", "celery.chain", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "uuid.uuid4", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_mutable_errback_called_by_chord_from_chain": ["pytest.skip", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "celery.chain", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_error_propagates_to_chord_from_chain_tail": ["pytest.skip", "celery.chain", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_immutable_errback_called_by_chord_from_chain_tail": ["pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_echo", "tasks.redis_echo.si", "celery.chain", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "uuid.uuid4", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_mutable_errback_called_by_chord_from_chain_tail": ["pytest.skip", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "celery.chain", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_error_propagates_to_chord_from_group": ["celery.group", "pytest.skip", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_immutable_errback_called_by_chord_from_group": ["celery.group", "pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_echo", "tasks.redis_echo.si", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "uuid.uuid4", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_mutable_errback_called_by_chord_from_group": ["celery.group", "pytest.skip", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_immutable_errback_called_by_chord_from_group_fail_multiple": ["celery.group", "pytest.skip", "<builtin>.str", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_count", "tasks.fail.s", "pytest.raises", "tasks.redis_count.si", "tasks.identity.si", "uuid.uuid4", "celery.chord", "tasks.identity.s", "<builtin>.range"], "t.integration.test_canvas.test_chord.test_mutable_errback_called_by_chord_from_group_fail_multiple_on_header_failure": ["celery.group", "pytest.skip", "time.sleep", "conftest.get_redis_connection", "<builtin>.tuple", "t.integration.test_canvas.await_redis_count", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "celery.chord", "tasks.identity.s", "<builtin>.range"], "t.integration.test_canvas.test_chord.test_mutable_errback_called_by_chord_from_group_fail_multiple_on_body_failure": ["celery.group", "<builtin>.enumerate", "pytest.skip", "time.sleep", "conftest.get_redis_connection", "<builtin>.tuple", "t.integration.test_canvas.await_redis_count", "tasks.fail.s", "pytest.raises", "tasks.identity.si", "celery.chord", "<builtin>.range"], "t.integration.test_canvas.test_chord.test_chord_header_task_replaced_with_chain": ["pytest.skip", "tasks.replace_with_chain.si", "tasks.identity.s", "celery.chord"], "t.integration.test_canvas.test_chord.test_chord_header_child_replaced_with_chain_first": ["pytest.skip", "tasks.replace_with_chain.si", "tasks.identity.s", "celery.chord"], "t.integration.test_canvas.test_chord.test_chord_header_child_replaced_with_chain_middle": ["tasks.replace_with_chain.s", "pytest.skip", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_chord_header_child_replaced_with_chain_last": ["tasks.replace_with_chain.s", "pytest.skip", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_chord_body_task_replaced_with_chain": ["tasks.replace_with_chain.s", "pytest.skip", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_chord_body_chain_child_replaced_with_chain_first": ["tasks.replace_with_chain.s", "pytest.skip", "celery.chain", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_chord_body_chain_child_replaced_with_chain_middle": ["tasks.replace_with_chain.s", "pytest.skip", "celery.chain", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_chord_body_chain_child_replaced_with_chain_last": ["tasks.replace_with_chain.s", "pytest.skip", "celery.chain", "celery.chord", "tasks.identity.s"], "t.integration.test_canvas.test_chord.test_enabling_flag_allow_error_cb_on_chord_header": ["pytest.skip", "<builtin>.list", "conftest.get_redis_connection", "<builtin>.len", "<builtin>.filter", "<builtin>.tuple", "t.integration.test_canvas.await_redis_echo", "tasks.redis_echo.si", "pytest.raises", "tasks.identity.si", "tasks.fail.si", "celery.chord", "<builtin>.range"], "t.integration.test_canvas.test_chord.test_enabling_flag_allow_error_cb_on_chord_header.<lambda1>": ["tasks.fail.si"], "<builtin>.filter": [], "t.integration.test_canvas.test_chord.test_disabling_flag_allow_error_cb_on_chord_header": ["pytest.skip", "conftest.get_redis_connection", "t.integration.test_canvas.await_redis_echo", "tasks.redis_echo.si", "pytest.raises", "tasks.identity.si", "tasks.fail.si", "celery.chord"], "t.integration.test_canvas.test_chord.test_flag_allow_error_cb_on_chord_header_on_upgraded_chord": ["celery.group", "pytest.skip", "<builtin>.list", "conftest.get_redis_connection", "<builtin>.len", "<builtin>.tuple", "t.integration.test_canvas.await_redis_echo", "tasks.redis_echo.si", "celery.chain", "pytest.raises", "tasks.identity.si", "tasks.fail.si", "<builtin>.filter", "<builtin>.range"], "t.integration.test_canvas.test_chord.test_flag_allow_error_cb_on_chord_header_on_upgraded_chord.<lambda1>": ["tasks.fail.si"], "t.integration.test_canvas.test_signature_serialization.test_rebuild_nested_chain_chain": ["tasks.rebuild_signature.s", "celery.chain", "tasks.return_nested_signature_chain_chain.s"], "tasks.return_nested_signature_chain_chain.s": [], "tasks.rebuild_signature.s": [], "t.integration.test_canvas.test_signature_serialization.test_rebuild_nested_chain_group": ["tasks.rebuild_signature.s", "celery.chain", "tasks.return_nested_signature_chain_group.s"], "tasks.return_nested_signature_chain_group.s": [], "t.integration.test_canvas.test_signature_serialization.test_rebuild_nested_chain_chord": ["celery.chain", "tasks.rebuild_signature.s", "pytest.skip", "tasks.return_nested_signature_chain_chord.s"], "tasks.return_nested_signature_chain_chord.s": [], "t.integration.test_canvas.test_signature_serialization.test_rebuild_nested_group_chain": ["celery.chain", "tasks.rebuild_signature.s", "tasks.return_nested_signature_group_chain.s"], "tasks.return_nested_signature_group_chain.s": [], "t.integration.test_canvas.test_signature_serialization.test_rebuild_nested_group_group": ["tasks.return_nested_signature_group_group.s", "tasks.rebuild_signature.s", "celery.chain"], "tasks.return_nested_signature_group_group.s": [], "t.integration.test_canvas.test_signature_serialization.test_rebuild_nested_group_chord": ["celery.chain", "tasks.rebuild_signature.s", "pytest.skip", "tasks.return_nested_signature_group_chord.s"], "tasks.return_nested_signature_group_chord.s": [], "t.integration.test_canvas.test_signature_serialization.test_rebuild_nested_chord_chain": ["celery.chain", "tasks.rebuild_signature.s", "pytest.skip", "tasks.return_nested_signature_chord_chain.s"], "tasks.return_nested_signature_chord_chain.s": [], "t.integration.test_canvas.test_signature_serialization.test_rebuild_nested_chord_group": ["celery.chain", "tasks.rebuild_signature.s", "pytest.skip", "tasks.return_nested_signature_chord_group.s"], "tasks.return_nested_signature_chord_group.s": [], "t.integration.test_canvas.test_signature_serialization.test_rebuild_nested_chord_chord": ["celery.chain", "tasks.rebuild_signature.s", "pytest.skip", "tasks.return_nested_signature_chord_chord.s"], "tasks.return_nested_signature_chord_chord.s": [], "t.integration.test_canvas.test_stamping_visitor.test_stamp_value_type_defined_by_visitor": ["celery.signals.before_task_publish.connect", "celery.canvas.StampingVisitor.__init__", "<builtin>.isinstance", "tasks.add.si"], "t.integration.test_canvas.test_stamping_visitor.test_stamp_value_type_defined_by_visitor.before_task_publish_handler": [], "t.integration.test_canvas.test_stamping_visitor.test_stamp_value_type_defined_by_visitor.CustomStampingVisitor.on_signature": [], "t.integration.test_canvas.test_stamping_visitor.test_properties_not_affected_from_stamping": ["celery.signals.before_task_publish.connect", "celery.canvas.StampingVisitor.__init__", "tasks.add.si"], "t.integration.test_canvas.test_stamping_visitor.test_properties_not_affected_from_stamping.before_task_publish_handler": [], "t.integration.test_canvas.test_stamping_visitor.test_properties_not_affected_from_stamping.CustomStampingVisitor.on_signature": [], "t.integration.test_canvas.test_stamping_visitor.test_task_received_has_access_to_stamps": ["celery.signals.task_received.connect", "celery.canvas.StampingVisitor.__init__", "tasks.add.si"], "t.integration.test_canvas.test_stamping_visitor.test_task_received_has_access_to_stamps.task_received_handler": ["<builtin>.all"], "t.integration.test_canvas.test_stamping_visitor.test_task_received_has_access_to_stamps.CustomStampingVisitor.on_signature": [], "t.integration.test_canvas.test_stamping_visitor.test_all_tasks_of_canvas_are_stamped": ["celery.group", "pytest.skip", "tasks.add.s", "celery.signals.task_received.connect", "celery.canvas.StampingVisitor.__init__", "celery.chain", "tasks.xsum.s", "celery.chord"], "t.integration.test_canvas.test_stamping_visitor.test_all_tasks_of_canvas_are_stamped.task_received_handler": ["<builtin>.all"], "t.integration.test_canvas.test_stamping_visitor.test_all_tasks_of_canvas_are_stamped.CustomStampingVisitor.on_signature": [], "t.integration.test_canvas.test_stamping_visitor.test_replace_merge_stamps": ["celery.canvas.StampingVisitor.__init__", "celery.signals.task_received.connect", "time.sleep", "tasks.replace_with_stamped_task.s"], "t.integration.test_canvas.test_stamping_visitor.test_replace_merge_stamps.task_received_handler": ["tasks.StampOnReplace.stamp.values", "<builtin>.all", "<builtin>.list", "tasks.StampOnReplace.stamp.keys"], "tasks.StampOnReplace.stamp.keys": [], "tasks.StampOnReplace.stamp.values": [], "t.integration.test_canvas.test_stamping_visitor.test_replace_merge_stamps.CustomStampingVisitor.on_signature": [], "tasks.replace_with_stamped_task.s": [], "t.integration.test_canvas.test_stamping_visitor.test_replace_group_merge_stamps": ["celery.group", "time.sleep", "tasks.add.s", "celery.signals.task_received.connect", "tasks.replace_with_stamped_task.s"], "t.integration.test_canvas.test_stamping_visitor.test_replace_group_merge_stamps.task_received_handler": ["<builtin>.all"], "t.integration.test_canvas.test_stamping_visitor.test_linking_stamped_sig": ["<builtin>.str", "celery.signals.task_received.connect", "tasks.identity.si", "uuid.uuid4", "t.integration.test_canvas.test_stamping_visitor.test_linking_stamped_sig.FixedMonitoringIdStampingVisitor.__init__"], "t.integration.test_canvas.test_stamping_visitor.test_linking_stamped_sig.task_received_handler": ["<builtin>.all"], "t.integration.test_canvas.test_stamping_visitor.test_linking_stamped_sig.FixedMonitoringIdStampingVisitor.__init__": [], "t.integration.test_canvas.test_stamping_visitor.test_linking_stamped_sig.FixedMonitoringIdStampingVisitor.on_signature": [], "t.integration.test_canvas.test_stamping_visitor.test_err_linking_stamped_sig": ["<builtin>.str", "celery.signals.task_received.connect", "pytest.raises", "tasks.fail.si", "tasks.identity.si", "t.integration.test_canvas.test_stamping_visitor.test_err_linking_stamped_sig.FixedMonitoringIdStampingVisitor.__init__", "uuid.uuid4"], "t.integration.test_canvas.test_stamping_visitor.test_err_linking_stamped_sig.task_received_handler": ["<builtin>.all"], "t.integration.test_canvas.test_stamping_visitor.test_err_linking_stamped_sig.FixedMonitoringIdStampingVisitor.__init__": [], "t.integration.test_canvas.test_stamping_visitor.test_err_linking_stamped_sig.FixedMonitoringIdStampingVisitor.on_signature": [], "t.integration.test_inspect": ["pytest.mark.flaky", "pytest.mark.skip", "pytest.fixture", "celery.utils.nodenames.anon_nodename", "pytest.mark.timeout"], "t.integration.test_inspect.flaky": [], "t.integration.test_inspect.inspect": [], "t.integration.test_inspect.test_Inspect": ["t.integration.test_inspect.flaky"], "t.integration.test_inspect.test_Inspect.test_ping": ["<builtin>.len"], "t.integration.test_inspect.test_Inspect.test_clock": ["<builtin>.len"], "t.integration.test_inspect.test_Inspect.test_registered": ["<builtin>.len", "<builtin>.isinstance", "re.fullmatch"], "re.fullmatch": [], "t.integration.test_inspect.test_Inspect.test_active_queues": ["<builtin>.len"], "t.integration.test_inspect.test_Inspect.test_active": ["tasks.sleeping.delay", "<builtin>.len", "time.sleep"], "tasks.sleeping.delay": [], "t.integration.test_inspect.test_Inspect.test_scheduled": ["datetime.datetime.utcnow", "<builtin>.len", "datetime.timedelta", "tasks.add.apply_async"], "tasks.add.apply_async": [], "t.integration.test_inspect.test_Inspect.test_query_task": ["tasks.sleeping.delay", "<builtin>.len", "time.sleep"], "t.integration.test_inspect.test_Inspect.test_stats": ["<builtin>.len", "os.getpid"], "t.integration.test_inspect.test_Inspect.test_report": ["<builtin>.len"], "t.integration.test_inspect.test_Inspect.test_revoked": ["tasks.sleeping.delay", "tasks.add.apply_async", "<builtin>.len", "<builtin>.range"], "t.integration.test_inspect.test_Inspect.test_conf": ["<builtin>.len"], "t.integration.test_security": ["pytest.mark.skip"], "t.integration.test_security.test_security": ["pytest.fixture", "pytest.mark.xfail"], "t.integration.test_security.test_security.class_certs": ["cryptography.hazmat.primitives.serialization.NoEncryption", "tempfile.mkdtemp", "t.integration.test_security.test_security.gen_certificate", "<builtin>.open", "os.rmdir", "os.remove", "t.integration.test_security.test_security.gen_private_key"], "t.integration.test_security.test_security.gen_private_key": ["cryptography.hazmat.backends.default_backend", "cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key"], "t.integration.test_security.test_security.gen_certificate": ["datetime.datetime.utcnow", "datetime.timedelta", "cryptography.x509.BasicConstraints", "cryptography.x509.Name", "cryptography.x509.CertificateBuilder", "cryptography.hazmat.backends.default_backend", "cryptography.hazmat.primitives.hashes.SHA256", "cryptography.x509.random_serial_number"], "cryptography.hazmat.primitives.serialization.NoEncryption": [], "os.rmdir": [], "t.integration.test_security.test_security._prepare_setup": [], "cryptography.hazmat.backends.default_backend": [], "cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key": [], "cryptography.hazmat.primitives.hashes.SHA256": [], "cryptography.x509.BasicConstraints": [], "cryptography.x509.random_serial_number": [], "cryptography.x509.Name": [], "cryptography.x509.CertificateBuilder": [], "t.integration.test_security.test_security.test_security_task_done": ["tasks.add.delay"], "t.integration.conftest": ["os.environ.get", "pytest.fixture"], "t.integration.conftest.get_redis_connection": ["redis.StrictRedis", "os.environ.get"], "redis.StrictRedis": [], "t.integration.conftest.get_active_redis_channels": ["t.integration.conftest.get_redis_connection"], "t.integration.conftest.celery_config": ["<builtin>.open", "json.load", "<builtin>.str"], "json.load": [], "t.integration.conftest.celery_enable_logging": [], "t.integration.conftest.celery_worker_pool": [], "t.integration.conftest.celery_includes": [], "t.integration.conftest.app": [], "t.integration.conftest.manager": ["celery.contrib.testing.manager.Manager"], "celery.contrib.testing.manager.Manager": [], "t.integration.conftest.ZZZZ_set_app_current": [], "t.integration.conftest.celery_class_tasks": [], "t.integration": [], "t.integration.test_worker_config": [], "t.integration.tasks": ["celery.utils.log.get_task_logger", "celery.shared_task"], "t.integration.tasks.identity": [], "t.integration.tasks.add": [], "t.integration.tasks.mul": [], "t.integration.tasks.write_to_file_and_return_int": ["<builtin>.open", "<builtin>.str"], "t.integration.tasks.add_not_typed": [], "t.integration.tasks.add_ignore_result": [], "t.integration.tasks.raise_error": ["<builtin>.ValueError"], "t.integration.tasks.chain_add": [], "t.integration.tasks.chord_add": ["celery.chord"], "t.integration.tasks.delayed_sum": ["<builtin>.sum", "time.sleep"], "t.integration.tasks.delayed_sum_with_soft_guard": ["<builtin>.sum", "time.sleep"], "t.integration.tasks.tsum": ["<builtin>.sum"], "t.integration.tasks.xsum": ["<builtin>.sum", "<builtin>.isinstance"], "t.integration.tasks.add_replaced": [], "t.integration.tasks.replace_with_chain": ["celery.chain"], "t.integration.tasks.replace_with_chain_which_raises": ["celery.chain"], "t.integration.tasks.replace_with_empty_chain": ["celery.chain"], "t.integration.tasks.add_to_all": ["celery.group"], "t.integration.tasks.add_to_all_to_chord": [], "t.integration.tasks.add_chord_to_chord": ["celery.group"], "t.integration.tasks.print_unicode": ["<builtin>.print"], "t.integration.tasks.return_exception": [], "t.integration.tasks.sleeping": ["time.sleep"], "t.integration.tasks.ids": [], "t.integration.tasks.collect_ids": [], "t.integration.tasks.retry": ["<builtin>.print", "<builtin>.getattr", "<builtin>.delattr"], "t.integration.tasks.retry_once": [], "t.integration.tasks.retry_once_priority": [], "t.integration.tasks.retry_once_headers": [], "t.integration.tasks.redis_echo": ["conftest.get_redis_connection"], "t.integration.tasks.redis_echo_group_id": ["conftest.get_redis_connection"], "t.integration.tasks.redis_count": ["conftest.get_redis_connection"], "t.integration.tasks.second_order_replace1": ["conftest.get_redis_connection", "celery.chain"], "t.integration.tasks.second_order_replace2": ["conftest.get_redis_connection", "celery.chain"], "t.integration.tasks.build_chain_inside_task": ["celery.group"], "t.integration.tasks.ExpectedException.__eq__": ["<builtin>.isinstance"], "t.integration.tasks.ExpectedException.__hash__": ["<builtin>.hash"], "t.integration.tasks.fail": [], "t.integration.tasks.fail_replaced": [], "t.integration.tasks.return_priority": [], "t.integration.tasks.return_properties": [], "t.integration.tasks.ClassBasedAutoRetryTask.run": ["<builtin>.ValueError"], "t.integration.tasks.return_nested_signature_chain_chain": ["celery.chain"], "t.integration.tasks.return_nested_signature_chain_group": ["celery.group", "celery.chain"], "t.integration.tasks.return_nested_signature_chain_chord": ["celery.chain", "celery.chord"], "t.integration.tasks.return_nested_signature_group_chain": ["celery.group", "celery.chain"], "t.integration.tasks.return_nested_signature_group_group": ["celery.group"], "t.integration.tasks.return_nested_signature_group_chord": ["celery.group", "celery.chord"], "t.integration.tasks.return_nested_signature_chord_chain": ["celery.chain", "celery.chord"], "t.integration.tasks.return_nested_signature_chord_group": ["celery.group", "celery.chord"], "t.integration.tasks.return_nested_signature_chord_chord": ["celery.chord"], "t.integration.tasks.rebuild_signature": ["celery.Signature.from_dict", "t.integration.tasks.rebuild_signature._recurse"], "celery.Signature.from_dict": [], "t.integration.tasks.rebuild_signature._recurse": ["<builtin>.TypeError", "t.integration.tasks.rebuild_signature._recurse", "<builtin>.isinstance"], "t.integration.tasks.errback_old_style": ["t.integration.tasks.redis_count"], "t.integration.tasks.errback_new_style": ["t.integration.tasks.redis_count"], "t.integration.tasks.StampOnReplace.on_signature": [], "t.integration.tasks.StampedTaskOnReplace.on_replace": ["<builtin>.super", "celery.canvas.StampingVisitor.__init__"], "t.integration.tasks.replaced_with_me": [], "t.integration.tasks.replace_with_stamped_task": ["celery.canvas.signature"], "t.integration.test_backend": ["pytest.importorskip"], "t.integration.test_backend.test_AzureBlockBlobBackend.test_crud": ["celery.backends.azureblockblob.AzureBlockBlobBackend", "<builtin>.list", "<builtin>.range"], "t.integration.test_backend.test_AzureBlockBlobBackend.test_get_missing": ["celery.backends.azureblockblob.AzureBlockBlobBackend"], "t.integration.test_tasks": ["pytest.mark.flaky", "pytest.mark.timeout", "pytest.mark.skip"], "t.integration.test_tasks.flaky": [], "t.integration.test_tasks.test_class_based_tasks": ["t.integration.test_tasks.flaky"], "t.integration.test_tasks.test_class_based_tasks.test_class_based_task_retried": ["tasks.ClassBasedAutoRetryTask"], "tasks.ClassBasedAutoRetryTask": [], "t.integration.test_tasks._producer": ["<builtin>.range"], "t.integration.test_tasks.test_tasks.test_simple_call": ["tasks.add"], "tasks.add": [], "t.integration.test_tasks.test_tasks": ["t.integration.test_tasks.flaky", "pytest.mark.xfail"], "t.integration.test_tasks.test_tasks.test_basic_task": ["tasks.add.delay", "<builtin>.range"], "t.integration.test_tasks.test_tasks.test_multiprocess_producer": ["multiprocessing.Pool", "<builtin>.list", "<builtin>.range"], "multiprocessing.Pool": [], "t.integration.test_tasks.test_tasks.test_multithread_producer": ["multiprocessing.pool.ThreadPool", "<builtin>.list", "<builtin>.range"], "multiprocessing.pool.ThreadPool": [], "t.integration.test_tasks.test_tasks.test_ignore_result": ["tasks.add.apply_async", "time.sleep"], "t.integration.test_tasks.test_tasks.test_timeout": ["tasks.sleeping.delay", "pytest.raises"], "t.integration.test_tasks.test_tasks.test_expired": ["datetime.datetime.utcnow", "tasks.sleeping.delay", "pytest.raises", "tasks.add.apply_async", "datetime.timedelta", "<builtin>.range"], "t.integration.test_tasks.test_tasks.test_eta": ["time.perf_counter", "time.sleep", "datetime.datetime.utcnow", "tasks.add.apply_async", "datetime.timedelta"], "time.perf_counter": [], "t.integration.test_tasks.test_tasks.test_fail": ["tasks.fail.delay", "pytest.raises"], "tasks.fail.delay": [], "t.integration.test_tasks.test_tasks.test_revoked": ["tasks.sleeping.delay", "tasks.add.apply_async", "pytest.raises", "<builtin>.range"], "t.integration.test_tasks.test_tasks.test_revoked_by_headers_simple_canvas": ["celery.canvas.StampingVisitor.__init__", "pytest.raises", "tasks.add.si", "uuid.uuid4", "celery.worker.state.revoked_headers.clear"], "t.integration.test_tasks.test_tasks.test_revoked_by_headers_simple_canvas.MonitoringIdStampingVisitor.on_signature": [], "t.integration.test_tasks.test_tasks.test_revoked_by_headers_complex_canvas": ["pytest.skip", "celery.canvas.StampingVisitor.__init__", "pytest.raises", "<builtin>.isinstance", "uuid.uuid4", "celery.worker.state.revoked_headers.clear", "tasks.sleeping.si"], "t.integration.test_tasks.test_tasks.test_revoked_by_headers_complex_canvas.MonitoringIdStampingVisitor.on_signature": [], "tasks.sleeping.si": [], "t.integration.test_tasks.test_tasks.test_wrong_arguments": ["tasks.add_not_typed.delay", "tasks.add", "tasks.add.delay", "pytest.raises"], "tasks.add_not_typed.delay": [], "t.integration.test_tasks.test_tasks.test_retry": ["tasks.retry.delay", "pytest.raises", "time.sleep", "<builtin>.range"], "tasks.retry.delay": [], "t.integration.test_tasks.test_tasks.test_task_accepted": ["tasks.sleeping.delay"], "t.integration.test_tasks.test_tasks.test_task_retried_once": ["tasks.retry_once.delay"], "tasks.retry_once.delay": [], "t.integration.test_tasks.test_tasks.test_task_retried_once_with_expires": ["tasks.retry_once.delay"], "t.integration.test_tasks.test_tasks.test_task_retried_priority": ["tasks.retry_once_priority.apply_async"], "tasks.retry_once_priority.apply_async": [], "t.integration.test_tasks.test_tasks.test_task_retried_headers": ["tasks.retry_once_headers.apply_async"], "tasks.retry_once_headers.apply_async": [], "t.integration.test_tasks.test_tasks.test_unicode_task": ["celery.group", "tasks.print_unicode.s", "<builtin>.range"], "t.integration.test_tasks.test_tasks.test_properties": ["tasks.return_properties.apply_async"], "tasks.return_properties.apply_async": [], "t.integration.test_tasks.test_task_redis_result_backend": ["pytest.fixture"], "t.integration.test_tasks.test_task_redis_result_backend.manager": ["pytest.skip"], "t.integration.test_tasks.test_task_redis_result_backend.test_ignoring_result_no_subscriptions": ["conftest.get_active_redis_channels", "tasks.add_ignore_result.delay"], "tasks.add_ignore_result.delay": [], "t.integration.test_tasks.test_task_redis_result_backend.test_asyncresult_forget_cancels_subscription": ["conftest.get_active_redis_channels", "tasks.add.delay", "<builtin>.set"], "t.integration.test_tasks.test_task_redis_result_backend.test_asyncresult_get_cancels_subscription": ["conftest.get_active_redis_channels", "tasks.add.delay", "<builtin>.set"], "t.integration.test_worker": [], "t.integration.test_worker.test_run_worker": ["pytest.raises", "subprocess.check_output"], "subprocess.check_output": []}