{"tests.test_utils": ["requests.compat.quote", "pytest.mark.skipif", "requests.cookies.RequestsCookieJar", "requests.compat.cookielib.CookieJar", "pytest.mark.parametrize", "requests.structures.CaseInsensitiveDict"], "pytest.mark.skipif": [], "tests.test_utils.TestSuperLen": ["pytest.mark.parametrize", "pytest.param", "pytest.mark.skipif"], "pytest.param": [], "pytest.mark.parametrize": [], "tests.test_utils.TestSuperLen.test_io_streams": ["requests.utils.super_len"], "requests.utils.super_len": [], "tests.test_utils.TestSuperLen.test_super_len_correctly_calculates_len_of_partially_read_file": ["requests.utils.super_len", "compat.StringIO.StringIO"], "compat.StringIO.StringIO": [], "tests.test_utils.TestSuperLen.test_super_len_handles_files_raising_weird_errors_in_tell": ["requests.utils.super_len"], "tests.test_utils.TestSuperLen.test_super_len_handles_files_raising_weird_errors_in_tell.BoomFile.__len__": [], "tests.test_utils.TestSuperLen.test_super_len_handles_files_raising_weird_errors_in_tell.BoomFile.tell": [], "tests.test_utils.TestSuperLen.test_super_len_tell_ioerror": ["requests.utils.super_len"], "tests.test_utils.TestSuperLen.test_super_len_tell_ioerror.NoLenBoomFile.tell": [], "tests.test_utils.TestSuperLen.test_super_len_tell_ioerror.NoLenBoomFile.seek": [], "tests.test_utils.TestSuperLen.test_string": ["requests.utils.super_len"], "tests.test_utils.TestSuperLen.test_file": ["<builtin>.len", "requests.utils.super_len"], "<builtin>.len": [], "tests.test_utils.TestSuperLen.test_tarfile_member": ["requests.utils.super_len", "tarfile.open", "<builtin>.str"], "<builtin>.str": [], "tarfile.open": [], "tests.test_utils.TestSuperLen.test_super_len_with__len__": ["requests.utils.super_len"], "tests.test_utils.TestSuperLen.test_super_len_with_no__len__": ["requests.utils.super_len", "tests.test_utils.TestSuperLen.test_super_len_with_no__len__.LenFile.__init__"], "tests.test_utils.TestSuperLen.test_super_len_with_no__len__.LenFile.__init__": [], "tests.test_utils.TestSuperLen.test_super_len_with_tell": ["requests.utils.super_len", "compat.StringIO.StringIO"], "tests.test_utils.TestSuperLen.test_super_len_with_fileno": ["<builtin>.len", "requests.utils.super_len", "<builtin>.open"], "<builtin>.open": [], "tests.test_utils.TestSuperLen.test_super_len_with_no_matches": ["requests.utils.super_len", "<builtin>.object"], "<builtin>.object": [], "tests.test_utils.TestToKeyValList": ["pytest.mark.parametrize"], "tests.test_utils.TestToKeyValList.test_valid": ["requests.utils.to_key_val_list"], "requests.utils.to_key_val_list": [], "tests.test_utils.TestToKeyValList.test_invalid": ["requests.utils.to_key_val_list", "pytest.raises"], "pytest.raises": [], "tests.test_utils.TestUnquoteHeaderValue": ["pytest.mark.parametrize"], "tests.test_utils.TestUnquoteHeaderValue.test_valid": ["requests.utils.unquote_header_value"], "requests.utils.unquote_header_value": [], "tests.test_utils.TestUnquoteHeaderValue.test_is_filename": ["requests.utils.unquote_header_value"], "pytest.fixture": [], "tests.test_utils.TestGetEnvironProxies": ["pytest.mark.parametrize", "pytest.fixture"], "tests.test_utils.TestGetEnvironProxies.no_proxy": [], "tests.test_utils.TestGetEnvironProxies.test_bypass": ["requests.utils.get_environ_proxies"], "requests.utils.get_environ_proxies": [], "tests.test_utils.TestGetEnvironProxies.test_not_bypass": ["requests.utils.get_environ_proxies"], "tests.test_utils.TestGetEnvironProxies.test_bypass_no_proxy_keyword": ["requests.utils.get_environ_proxies"], "tests.test_utils.TestGetEnvironProxies.test_not_bypass_no_proxy_keyword": ["requests.utils.get_environ_proxies"], "tests.test_utils.TestIsIPv4Address.test_valid": ["requests.utils.is_ipv4_address"], "requests.utils.is_ipv4_address": [], "tests.test_utils.TestIsIPv4Address": ["pytest.mark.parametrize"], "tests.test_utils.TestIsIPv4Address.test_invalid": ["requests.utils.is_ipv4_address"], "tests.test_utils.TestIsValidCIDR.test_valid": ["requests.utils.is_valid_cidr"], "requests.utils.is_valid_cidr": [], "tests.test_utils.TestIsValidCIDR": ["pytest.mark.parametrize"], "tests.test_utils.TestIsValidCIDR.test_invalid": ["requests.utils.is_valid_cidr"], "tests.test_utils.TestAddressInNetwork.test_valid": ["requests.utils.address_in_network"], "requests.utils.address_in_network": [], "tests.test_utils.TestAddressInNetwork.test_invalid": ["requests.utils.address_in_network"], "<builtin>.type": [], "tests.test_utils.TestGuessFilename": ["pytest.mark.parametrize", "<builtin>.type"], "tests.test_utils.TestGuessFilename.test_guess_filename_invalid": ["requests.utils.guess_filename"], "requests.utils.guess_filename": [], "tests.test_utils.TestGuessFilename.test_guess_filename_valid": ["requests.utils.guess_filename", "<builtin>.type", "<builtin>.isinstance"], "<builtin>.isinstance": [], "tests.test_utils.TestExtractZippedPaths": ["pytest.mark.parametrize"], "tests.test_utils.TestExtractZippedPaths.test_unzipped_paths_unchanged": ["requests.utils.extract_zipped_paths"], "requests.utils.extract_zipped_paths": [], "tests.test_utils.TestExtractZippedPaths.test_zipped_paths_extracted": ["os.path.exists", "zipfile.ZipFile", "os.path.join", "os.path.splitdrive", "filecmp.cmp", "requests.utils.extract_zipped_paths"], "zipfile.ZipFile": [], "os.path.splitdrive": [], "os.path.join": [], "os.path.exists": [], "filecmp.cmp": [], "tests.test_utils.TestExtractZippedPaths.test_invalid_unc_path": ["requests.utils.extract_zipped_paths"], "tests.test_utils.TestContentEncodingDetection.test_none": ["requests.utils.get_encodings_from_content", "<builtin>.len"], "requests.utils.get_encodings_from_content": [], "tests.test_utils.TestContentEncodingDetection": ["pytest.mark.parametrize"], "tests.test_utils.TestContentEncodingDetection.test_pragmas": ["requests.utils.get_encodings_from_content", "<builtin>.len"], "tests.test_utils.TestContentEncodingDetection.test_precedence": ["requests.utils.get_encodings_from_content"], "tests.test_utils.TestGuessJSONUTF": ["pytest.mark.parametrize"], "tests.test_utils.TestGuessJSONUTF.test_encoded": ["requests.utils.guess_json_utf"], "requests.utils.guess_json_utf": [], "tests.test_utils.TestGuessJSONUTF.test_bad_utf_like_encoding": ["requests.utils.guess_json_utf"], "tests.test_utils.TestGuessJSONUTF.test_guess_by_bom": ["requests.utils.guess_json_utf"], "requests.compat.quote": [], "tests.test_utils.test_get_auth_from_url": ["requests.utils.get_auth_from_url"], "requests.utils.get_auth_from_url": [], "tests.test_utils.test_requote_uri_with_unquoted_percents": ["requests.utils.requote_uri"], "requests.utils.requote_uri": [], "tests.test_utils.test_unquote_unreserved": ["requests.utils.unquote_unreserved"], "requests.utils.unquote_unreserved": [], "tests.test_utils.test_dotted_netmask": ["requests.utils.dotted_netmask"], "requests.utils.dotted_netmask": [], "tests.test_utils.test_select_proxies": ["requests.utils.select_proxy"], "requests.utils.select_proxy": [], "tests.test_utils.test_parse_dict_header": ["requests.utils.parse_dict_header"], "requests.utils.parse_dict_header": [], "tests.test_utils.test__parse_content_type_header": ["requests.utils._parse_content_type_header"], "requests.utils._parse_content_type_header": [], "requests.structures.CaseInsensitiveDict": [], "tests.test_utils.test_get_encoding_from_headers": ["requests.utils.get_encoding_from_headers"], "requests.utils.get_encoding_from_headers": [], "tests.test_utils.test_iter_slices": ["<builtin>.len", "requests.utils.iter_slices", "<builtin>.list"], "requests.utils.iter_slices": [], "<builtin>.list": [], "tests.test_utils.test_parse_header_links": ["requests.utils.parse_header_links"], "requests.utils.parse_header_links": [], "tests.test_utils.test_prepend_scheme_if_needed": ["requests.utils.prepend_scheme_if_needed"], "requests.utils.prepend_scheme_if_needed": [], "tests.test_utils.test_to_native_string": ["requests.utils.to_native_string"], "requests.utils.to_native_string": [], "tests.test_utils.test_urldefragauth": ["requests.utils.urldefragauth"], "requests.utils.urldefragauth": [], "tests.test_utils.test_should_bypass_proxies": ["requests.utils.should_bypass_proxies"], "requests.utils.should_bypass_proxies": [], "tests.test_utils.test_should_bypass_proxies_pass_only_hostname": ["requests.utils.should_bypass_proxies"], "requests.compat.cookielib.CookieJar": [], "requests.cookies.RequestsCookieJar": [], "tests.test_utils.test_add_dict_to_cookiejar": ["requests.utils.add_dict_to_cookiejar"], "requests.utils.add_dict_to_cookiejar": [], "tests.test_utils.test_unicode_is_ascii": ["requests._internal_utils.unicode_is_ascii"], "requests._internal_utils.unicode_is_ascii": [], "tests.test_utils.test_should_bypass_proxies_no_proxy": ["requests.utils.should_bypass_proxies"], "tests.test_utils.test_should_bypass_proxies_win_registry": ["collections.deque", "requests.utils.should_bypass_proxies"], "tests.test_utils.test_should_bypass_proxies_win_registry.RegHandle.Close": [], "collections.deque": [], "tests.test_utils.test_should_bypass_proxies_win_registry.OpenKey": [], "tests.test_utils.test_should_bypass_proxies_win_registry.QueryValueEx": [], "tests.test_utils.test_should_bypass_proxies_win_registry_bad_values": ["requests.utils.should_bypass_proxies"], "tests.test_utils.test_should_bypass_proxies_win_registry_bad_values.RegHandle.Close": [], "tests.test_utils.test_should_bypass_proxies_win_registry_bad_values.OpenKey": [], "tests.test_utils.test_should_bypass_proxies_win_registry_bad_values.QueryValueEx": [], "tests.test_utils.test_set_environ": ["copy.deepcopy", "os.environ.get", "requests.utils.set_environ"], "copy.deepcopy": [], "requests.utils.set_environ": [], "os.environ.get": [], "tests.test_utils.test_set_environ_raises_exception": ["<builtin>.str", "pytest.raises", "<builtin>.Exception", "requests.utils.set_environ"], "<builtin>.Exception": [], "tests.test_hooks": ["pytest.mark.parametrize"], "tests.test_hooks.hook": [], "tests.test_hooks.test_hooks": ["requests.hooks.dispatch_hook"], "requests.hooks.dispatch_hook": [], "tests.test_hooks.test_default_hooks": ["requests.hooks.default_hooks"], "requests.hooks.default_hooks": [], "tests.compat": [], "tests.compat.u": ["warnings.warn"], "warnings.warn": [], "tests.test_lowlevel": ["pytest.mark.parametrize"], "tests.test_lowlevel.echo_response_handler": ["<builtin>.len", "tests.testserver.server.consume_socket_content"], "tests.testserver.server.consume_socket_content": ["select.select"], "tests.test_lowlevel.test_chunked_upload": ["<builtin>.iter", "requests.post", "threading.Event", "tests.testserver.server.Server.basic_response_server"], "threading.Event": [], "tests.testserver.server.Server.basic_response_server": [], "<builtin>.iter": [], "requests.post": [], "tests.test_lowlevel.test_chunked_encoding_error": ["tests.testserver.server.Server", "pytest.raises", "threading.Event", "requests.get"], "tests.test_lowlevel.test_chunked_encoding_error.incomplete_chunked_response_handler": ["tests.testserver.server.consume_socket_content"], "tests.testserver.server.Server": [], "requests.get": [], "tests.test_lowlevel.test_chunked_upload_uses_only_specified_host_header": ["requests.post", "tests.testserver.server.Server", "threading.Event", "<builtin>.iter"], "tests.test_lowlevel.test_chunked_upload_doesnt_skip_host_header": ["requests.post", "tests.testserver.server.Server", "threading.Event", "<builtin>.iter"], "tests.test_lowlevel.test_conflicting_content_lengths": ["tests.testserver.server.Server", "pytest.raises", "threading.Event", "requests.get"], "tests.test_lowlevel.test_conflicting_content_lengths.multiple_content_length_response_handler": ["tests.testserver.server.consume_socket_content"], "tests.test_lowlevel.test_digestauth_401_count_reset_on_redirect": ["tests.testserver.server.Server", "requests.auth.HTTPDigestAuth", "threading.Event", "requests.get"], "requests.auth.HTTPDigestAuth": [], "tests.test_lowlevel.test_digestauth_401_count_reset_on_redirect.digest_response_handler": ["tests.testserver.server.consume_socket_content"], "tests.test_lowlevel.test_digestauth_401_only_sent_once": ["tests.testserver.server.Server", "requests.auth.HTTPDigestAuth", "threading.Event", "requests.get"], "tests.test_lowlevel.test_digestauth_401_only_sent_once.digest_failed_response_handler": ["tests.testserver.server.consume_socket_content"], "tests.test_lowlevel.test_digestauth_only_on_4xx": ["<builtin>.len", "requests.auth.HTTPDigestAuth", "threading.Event", "requests.get", "tests.testserver.server.Server"], "tests.test_lowlevel.test_digestauth_only_on_4xx.digest_response_handler": ["tests.testserver.server.consume_socket_content"], "tests.test_lowlevel.test_use_proxy_from_environment": ["<builtin>.len", "requests.get", "utils.override_environ", "tests.testserver.server.Server", "pytest.raises"], "utils.override_environ": [], "tests.test_lowlevel.test_redirect_rfc1808_to_non_ascii_location": ["<builtin>.len", "tests.testserver.server.Server", "threading.Event", "requests.get"], "tests.test_lowlevel.test_redirect_rfc1808_to_non_ascii_location.redirect_resp_handler": ["tests.testserver.server.consume_socket_content"], "tests.test_lowlevel.test_fragment_not_sent_with_request": ["tests.testserver.server.Server", "threading.Event", "requests.get"], "tests.test_lowlevel.test_fragment_update_on_redirect": ["<builtin>.len", "tests.testserver.server.Server", "threading.Event", "requests.get"], "tests.test_lowlevel.test_fragment_update_on_redirect.response_handler": ["tests.testserver.server.consume_socket_content"], "tests.test_lowlevel.test_json_decode_compatibility_for_alt_utf_encodings": ["threading.Event", "<builtin>.str", "<builtin>.isinstance", "requests.get", "tests.testserver.server.Server", "pytest.raises"], "tests.test_lowlevel.test_json_decode_compatibility_for_alt_utf_encodings.response_handler": ["tests.testserver.server.consume_socket_content"], "tests.test_packages": [], "tests.test_packages.test_can_access_urllib3_attribute": [], "tests.test_packages.test_can_access_idna_attribute": [], "tests.test_packages.test_can_access_chardet_attribute": [], "tests.conftest": ["pytest.fixture"], "tests.conftest.prepare_url": [], "tests.conftest.prepare_url.inner": ["requests.compat.urljoin"], "requests.compat.urljoin": [], "tests.conftest.httpbin": ["tests.conftest.prepare_url"], "tests.conftest.httpbin_secure": ["tests.conftest.prepare_url"], "tests.conftest.nosan_server": ["http.server.HTTPServer", "<builtin>.str", "BaseHTTPServer.HTTPServer", "trustme.CA", "ssl.create_default_context", "threading.Thread"], "trustme.CA": [], "ssl.create_default_context": [], "BaseHTTPServer.HTTPServer": [], "http.server.HTTPServer": [], "threading.Thread": [], "tests.test_requests": ["collections.namedtuple", "pytest.mark.parametrize"], "tests.test_requests.TestRequests.test_entry_points": ["requests.session"], "requests.session": [], "tests.test_requests.TestRequests": ["<builtin>.tuple", "pytest.mark.parametrize", "<builtin>.bytearray", "pytest.mark.xfail"], "tests.test_requests.TestRequests.test_invalid_url": ["pytest.raises", "requests.get"], "tests.test_requests.TestRequests.test_basic_building": ["requests.Request"], "requests.Request": [], "tests.test_requests.TestRequests.test_no_content_length": ["requests.Request"], "tests.test_requests.TestRequests.test_no_body_content_length": ["requests.Request"], "tests.test_requests.TestRequests.test_empty_content_length": ["requests.Request"], "tests.test_requests.TestRequests.test_override_content_length": ["requests.Request"], "tests.test_requests.TestRequests.test_path_is_not_double_encoded": ["requests.Request"], "tests.test_requests.TestRequests.test_params_are_added_before_fragment": ["requests.Request"], "tests.test_requests.TestRequests.test_params_original_order_is_preserved_by_default": ["collections.OrderedDict", "requests.Request", "requests.Session"], "collections.OrderedDict": [], "requests.Session": [], "tests.test_requests.TestRequests.test_params_bytes_are_encoded": ["requests.Request"], "tests.test_requests.TestRequests.test_binary_put": ["requests.Request", "<builtin>.isinstance"], "tests.test_requests.TestRequests.test_whitespaces_are_removed_from_url": ["requests.Request"], "tests.test_requests.TestRequests.test_mixed_case_scheme_acceptable": ["requests.compat.getproxies", "requests.Request", "requests.compat.urlparse", "requests.Session"], "requests.compat.getproxies": [], "requests.compat.urlparse": [], "tests.test_requests.TestRequests.test_HTTP_200_OK_GET_ALTERNATIVE": ["requests.Request", "requests.Session", "requests.compat.getproxies"], "tests.test_requests.TestRequests.test_HTTP_302_ALLOW_REDIRECT_GET": ["requests.get"], "tests.test_requests.TestRequests.test_HTTP_307_ALLOW_REDIRECT_POST": ["requests.post"], "tests.test_requests.TestRequests.test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE": ["requests.post", "io.BytesIO"], "io.BytesIO": [], "tests.test_requests.TestRequests.test_HTTP_302_TOO_MANY_REDIRECTS": ["<builtin>.len", "pytest.fail", "requests.get"], "pytest.fail": [], "tests.test_requests.TestRequests.test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS": ["<builtin>.len", "requests.session", "pytest.fail"], "tests.test_requests.TestRequests.test_http_301_changes_post_to_get": ["requests.post"], "tests.test_requests.TestRequests.test_http_301_doesnt_change_head_to_get": ["<builtin>.print", "requests.head"], "requests.head": [], "<builtin>.print": [], "tests.test_requests.TestRequests.test_http_302_changes_post_to_get": ["requests.post"], "tests.test_requests.TestRequests.test_http_302_doesnt_change_head_to_get": ["requests.head"], "tests.test_requests.TestRequests.test_http_303_changes_post_to_get": ["requests.post"], "tests.test_requests.TestRequests.test_http_303_doesnt_change_head_to_get": ["requests.head"], "tests.test_requests.TestRequests.test_header_and_body_removal_on_redirect": ["requests.Request", "<builtin>.next", "requests.Session"], "<builtin>.next": [], "tests.test_requests.TestRequests.test_transfer_enc_removal_on_redirect": ["<builtin>.range", "requests.Session", "<builtin>.setattr", "requests.Response", "io.BytesIO", "requests.Request", "<builtin>.next"], "<builtin>.range": [], "requests.Response": [], "tests.test_requests.TestRequests.test_transfer_enc_removal_on_redirect.<lambda1>": [], "<builtin>.setattr": [], "tests.test_requests.TestRequests.test_fragment_maintained_on_redirect": ["<builtin>.len", "requests.get"], "tests.test_requests.TestRequests.test_HTTP_200_OK_GET_WITH_PARAMS": ["requests.get"], "tests.test_requests.TestRequests.test_HTTP_200_OK_GET_WITH_MIXED_PARAMS": ["requests.get"], "tests.test_requests.TestRequests.test_set_cookie_on_301": ["requests.session"], "tests.test_requests.TestRequests.test_cookie_sent_on_redirect": ["requests.session"], "tests.test_requests.TestRequests.test_cookie_removed_on_expire": ["requests.session"], "tests.test_requests.TestRequests.test_cookie_quote_wrapped": ["requests.session"], "tests.test_requests.TestRequests.test_cookie_persists_via_api": ["requests.session"], "tests.test_requests.TestRequests.test_request_cookie_overrides_session_cookie": ["requests.session"], "tests.test_requests.TestRequests.test_request_cookies_not_persisted": ["requests.session"], "tests.test_requests.TestRequests.test_generic_cookiejar_works": ["requests.session", "requests.cookies.cookiejar_from_dict", "requests.compat.cookielib.CookieJar"], "requests.cookies.cookiejar_from_dict": [], "tests.test_requests.TestRequests.test_param_cookiejar_works": ["requests.session", "requests.cookies.cookiejar_from_dict", "requests.compat.cookielib.CookieJar"], "tests.test_requests.TestRequests.test_cookielib_cookiejar_on_redirect": ["requests.Session", "requests.compat.cookielib.CookieJar", "requests.Request", "<builtin>.isinstance", "requests.cookies.cookiejar_from_dict", "<builtin>.next"], "tests.test_requests.TestRequests.test_requests_in_history_are_not_overridden": ["requests.get"], "tests.test_requests.TestRequests.test_history_is_always_a_list": ["<builtin>.isinstance", "requests.get"], "tests.test_requests.TestRequests.test_headers_on_session_with_None_are_not_sent": ["requests.Request", "requests.Session"], "tests.test_requests.TestRequests.test_headers_preserve_order": ["collections.OrderedDict", "requests.Request", "requests.Session", "<builtin>.list"], "tests.test_requests.TestRequests.test_user_agent_transfers": ["requests.get"], "tests.test_requests.TestRequests.test_HTTP_200_OK_HEAD": ["requests.head"], "tests.test_requests.TestRequests.test_HTTP_200_OK_PUT": ["requests.put"], "requests.put": [], "tests.test_requests.TestRequests.test_BASICAUTH_TUPLE_HTTP_200_OK_GET": ["requests.session", "requests.get"], "tests.test_requests.TestRequests.test_set_basicauth": ["requests.Request", "requests.auth._basic_auth_str"], "requests.auth._basic_auth_str": [], "tests.test_requests.TestRequests.test_basicauth_encodes_byte_strings": ["requests.Request"], "tests.test_requests.TestRequests.test_errors": ["pytest.raises", "requests.get"], "tests.test_requests.TestRequests.test_proxy_error": ["pytest.raises", "requests.get"], "tests.test_requests.TestRequests.test_proxy_error_on_bad_url": ["pytest.raises", "requests.get"], "tests.test_requests.TestRequests.test_respect_proxy_env_on_send_self_prepared_request": ["requests.Request", "requests.Session", "utils.override_environ", "pytest.raises"], "tests.test_requests.TestRequests.test_respect_proxy_env_on_send_session_prepared_request": ["requests.Request", "requests.Session", "utils.override_environ", "pytest.raises"], "tests.test_requests.TestRequests.test_respect_proxy_env_on_send_with_redirects": ["requests.Session", "requests.Request", "utils.override_environ", "<builtin>.print", "pytest.raises"], "tests.test_requests.TestRequests.test_respect_proxy_env_on_get": ["requests.Session", "utils.override_environ", "pytest.raises"], "tests.test_requests.TestRequests.test_respect_proxy_env_on_request": ["requests.Session", "utils.override_environ", "pytest.raises"], "tests.test_requests.TestRequests.test_proxy_authorization_preserved_on_request": ["requests.Session"], "tests.test_requests.TestRequests.test_basicauth_with_netrc": ["requests.session", "requests.get"], "tests.test_requests.TestRequests.test_basicauth_with_netrc.get_netrc_auth_mock": [], "tests.test_requests.TestRequests.test_DIGEST_HTTP_200_OK_GET": ["requests.session", "<builtin>.print", "requests.auth.HTTPDigestAuth", "requests.get"], "tests.test_requests.TestRequests.test_DIGEST_AUTH_RETURNS_COOKIE": ["requests.auth.HTTPDigestAuth", "requests.get"], "tests.test_requests.TestRequests.test_DIGEST_AUTH_SETS_SESSION_COOKIES": ["requests.Session", "requests.auth.HTTPDigestAuth"], "tests.test_requests.TestRequests.test_DIGEST_STREAM": ["requests.auth.HTTPDigestAuth", "requests.get"], "tests.test_requests.TestRequests.test_DIGESTAUTH_WRONG_HTTP_401_GET": ["requests.session", "requests.auth.HTTPDigestAuth", "requests.get"], "tests.test_requests.TestRequests.test_DIGESTAUTH_QUOTES_QOP_VALUE": ["requests.auth.HTTPDigestAuth", "requests.get"], "tests.test_requests.TestRequests.test_POSTBIN_GET_POST_FILES": ["requests.post", "pytest.raises", "<builtin>.open"], "tests.test_requests.TestRequests.test_invalid_files_input": ["requests.post"], "tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER": ["requests.post", "tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.__init__", "tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.seek"], "tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.__init__": ["<builtin>.len"], "tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.__len__": [], "tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.read": [], "tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.tell": [], "tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.seek": [], "tests.test_requests.TestRequests.test_POSTBIN_GET_POST_FILES_WITH_DATA": ["requests.post", "pytest.raises", "<builtin>.open"], "tests.test_requests.TestRequests.test_post_with_custom_mapping": ["requests.post", "tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping.__init__"], "tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping.__init__": ["<builtin>.dict"], "<builtin>.dict": [], "tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping.__delitem__": [], "tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping.__getitem__": [], "tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping.__setitem__": [], "tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping.__iter__": ["<builtin>.iter"], "tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping.__len__": ["<builtin>.len"], "tests.test_requests.TestRequests.test_conflicting_post_params": ["requests.post", "pytest.raises", "<builtin>.open"], "tests.test_requests.TestRequests.test_request_ok_set": ["requests.get"], "tests.test_requests.TestRequests.test_status_raising": ["pytest.raises", "requests.get"], "tests.test_requests.TestRequests.test_decompress_gzip": ["requests.get"], "tests.test_requests.TestRequests.test_unicode_get": ["requests.get"], "tests.test_requests.TestRequests.test_unicode_header_name": ["requests.put"], "tests.test_requests.TestRequests.test_pyopenssl_redirect": ["requests.get"], "tests.test_requests.TestRequests.test_invalid_ca_certificate_path": ["pytest.raises", "<builtin>.str", "requests.get"], "tests.test_requests.TestRequests.test_invalid_ssl_certificate_files": ["pytest.raises", "<builtin>.str", "requests.get"], "tests.test_requests.TestRequests.test_env_cert_bundles": ["requests.Session"], "tests.test_requests.TestRequests.test_http_with_certificate": ["requests.get"], "tests.test_requests.TestRequests.test_https_warnings": ["warnings.simplefilter", "<builtin>.tuple", "pytest.warns", "requests.get"], "pytest.warns": [], "warnings.simplefilter": [], "<builtin>.tuple": [], "tests.test_requests.TestRequests.test_certificate_failure": ["pytest.raises", "requests.get"], "tests.test_requests.TestRequests.test_urlencoded_get_query_multivalued_param": ["requests.get"], "tests.test_requests.TestRequests.test_form_encoded_post_query_multivalued_element": ["requests.Request", "<builtin>.dict"], "tests.test_requests.TestRequests.test_different_encodings_dont_break_post": ["requests.post", "json.dumps", "<builtin>.open"], "json.dumps": [], "tests.test_requests.TestRequests.test_unicode_multipart_post": ["requests.post", "<builtin>.open"], "tests.test_requests.TestRequests.test_unicode_multipart_post_fieldnames": ["requests.Request", "<builtin>.open", "os.path.splitext"], "os.path.splitext": [], "tests.test_requests.TestRequests.test_unicode_method_name": ["requests.request", "<builtin>.open"], "requests.request": [], "tests.test_requests.TestRequests.test_unicode_method_name_with_request_object": ["requests.Request", "requests.Session", "<builtin>.isinstance", "<builtin>.open"], "tests.test_requests.TestRequests.test_non_prepared_request_error": ["requests.Request", "requests.Session", "pytest.raises", "<builtin>.str"], "tests.test_requests.TestRequests.test_custom_content_type": ["requests.post", "json.dumps", "<builtin>.open"], "tests.test_requests.TestRequests.test_hook_receives_request_arguments": ["requests.Request", "requests.Session"], "tests.test_requests.TestRequests.test_hook_receives_request_arguments.hook": [], "tests.test_requests.TestRequests.test_session_hooks_are_used_with_no_request_hooks": ["requests.Request", "requests.Session"], "tests.test_requests.TestRequests.test_session_hooks_are_used_with_no_request_hooks.hook": [], "tests.test_requests.TestRequests.test_session_hooks_are_overridden_by_request_hooks": ["requests.Request", "requests.Session"], "tests.test_requests.TestRequests.test_session_hooks_are_overridden_by_request_hooks.hook1": [], "tests.test_requests.TestRequests.test_session_hooks_are_overridden_by_request_hooks.hook2": [], "tests.test_requests.TestRequests.test_prepared_request_hook": ["requests.Request", "requests.Session", "<builtin>.hasattr", "requests.compat.getproxies"], "tests.test_requests.TestRequests.test_prepared_request_hook.hook": [], "<builtin>.hasattr": [], "tests.test_requests.TestRequests.test_prepared_from_session": ["requests.Request", "requests.Session", "requests.auth.AuthBase.__init__"], "tests.test_requests.TestRequests.test_prepared_from_session.DummyAuth.__call__": [], "requests.auth.AuthBase.__init__": [], "tests.test_requests.TestRequests.test_prepare_request_with_bytestring_url": ["requests.Request", "requests.Session"], "tests.test_requests.TestRequests.test_request_with_bytestring_host": ["requests.Session"], "tests.test_requests.TestRequests.test_links": ["requests.Response"], "tests.test_requests.TestRequests.test_cookie_parameters": ["<builtin>.len", "requests.cookies.RequestsCookieJar", "<builtin>.list"], "tests.test_requests.TestRequests.test_cookie_as_dict_keeps_len": ["<builtin>.len", "requests.cookies.RequestsCookieJar", "<builtin>.dict"], "tests.test_requests.TestRequests.test_cookie_as_dict_keeps_items": ["requests.cookies.RequestsCookieJar", "<builtin>.dict"], "tests.test_requests.TestRequests.test_cookie_as_dict_keys": ["requests.cookies.RequestsCookieJar", "<builtin>.list"], "tests.test_requests.TestRequests.test_cookie_as_dict_values": ["requests.cookies.RequestsCookieJar", "<builtin>.list"], "tests.test_requests.TestRequests.test_cookie_as_dict_items": ["requests.cookies.RequestsCookieJar", "<builtin>.list"], "tests.test_requests.TestRequests.test_cookie_duplicate_names_different_domains": ["<builtin>.len", "requests.cookies.RequestsCookieJar", "pytest.raises"], "tests.test_requests.TestRequests.test_cookie_duplicate_names_raises_cookie_conflict_error": ["requests.cookies.RequestsCookieJar", "pytest.raises"], "tests.test_requests.TestRequests.test_cookie_policy_copy": ["requests.cookies.RequestsCookieJar", "requests.compat.cookielib.DefaultCookiePolicy.__init__", "<builtin>.isinstance"], "requests.compat.cookielib.DefaultCookiePolicy.__init__": [], "tests.test_requests.TestRequests.test_time_elapsed_blank": ["requests.get"], "tests.test_requests.TestRequests.test_empty_response_has_content_none": ["requests.Response"], "tests.test_requests.TestRequests.test_response_is_iterable": ["<builtin>.setattr", "compat.StringIO.StringIO", "<builtin>.iter", "requests.Response", "<builtin>.next"], "tests.test_requests.TestRequests.test_response_is_iterable.read_mock": [], "tests.test_requests.TestRequests.test_response_decode_unicode": ["<builtin>.all", "requests.Response", "io.BytesIO", "<builtin>.isinstance"], "<builtin>.all": [], "tests.test_requests.TestRequests.test_response_reason_unicode": ["requests.Response"], "tests.test_requests.TestRequests.test_response_reason_unicode_fallback": ["requests.Response", "pytest.raises"], "tests.test_requests.TestRequests.test_response_chunk_size_type": ["<builtin>.len", "<builtin>.all", "requests.Response", "<builtin>.list", "io.BytesIO", "pytest.raises"], "tests.test_requests.TestRequests.test_iter_content_wraps_exceptions": ["requests.Response", "pytest.raises", "<builtin>.next"], "tests.test_requests.TestRequests.test_request_and_response_are_pickleable": ["pickle.loads", "pickle.dumps", "requests.get"], "pickle.dumps": [], "pickle.loads": [], "tests.test_requests.TestRequests.test_prepared_request_is_pickleable": ["requests.Request", "requests.Session", "pickle.dumps", "pickle.loads"], "tests.test_requests.TestRequests.test_prepared_request_with_file_is_pickleable": ["requests.Session", "pickle.dumps", "pickle.loads", "requests.Request", "<builtin>.open"], "tests.test_requests.TestRequests.test_prepared_request_with_hook_is_pickleable": ["requests.hooks.default_hooks", "requests.Session", "pickle.dumps", "pickle.loads", "requests.Request"], "tests.test_requests.TestRequests.test_cannot_send_unprepared_requests": ["requests.Request", "requests.Session", "pytest.raises"], "tests.test_requests.TestRequests.test_http_error": ["requests.Response", "<builtin>.str", "requests.exceptions.HTTPError"], "requests.exceptions.HTTPError": [], "tests.test_requests.TestRequests.test_session_pickling": ["requests.Session", "requests.compat.getproxies", "pickle.dumps", "pickle.loads", "requests.Request"], "tests.test_requests.TestRequests.test_fixes_1329": ["requests.Session"], "tests.test_requests.TestRequests.test_uppercase_scheme_redirect": ["requests.compat.urlparse", "requests.get"], "tests.test_requests.TestRequests.test_transport_adapter_ordering": ["requests.Session", "<builtin>.list", "requests.adapters.HTTPAdapter"], "requests.adapters.HTTPAdapter": [], "tests.test_requests.TestRequests.test_session_get_adapter_prefix_matching": ["requests.Session", "requests.adapters.HTTPAdapter"], "tests.test_requests.TestRequests.test_session_get_adapter_prefix_matching_mixed_case": ["requests.Session", "requests.adapters.HTTPAdapter"], "tests.test_requests.TestRequests.test_session_get_adapter_prefix_matching_is_case_insensitive": ["requests.Session", "requests.adapters.HTTPAdapter"], "tests.test_requests.TestRequests.test_header_remove_is_case_insensitive": ["requests.Session"], "tests.test_requests.TestRequests.test_params_are_merged_case_sensitive": ["requests.Session"], "tests.test_requests.TestRequests.test_long_authinfo_in_url": ["requests.Request"], "tests.test_requests.TestRequests.test_header_keys_are_native": ["requests.Request"], "tests.test_requests.TestRequests.test_header_validation": ["requests.get"], "tests.test_requests.TestRequests.test_header_value_not_str": ["pytest.raises", "<builtin>.str", "requests.get"], "tests.test_requests.TestRequests.test_header_no_return_chars": ["pytest.raises", "requests.get"], "tests.test_requests.TestRequests.test_header_no_leading_space": ["pytest.raises", "requests.get"], "<builtin>.bytearray": [], "tests.test_requests.TestRequests.test_can_send_objects_with_files": ["requests.Request"], "tests.test_requests.TestRequests.test_can_send_file_object_with_non_string_filename": ["requests.Request", "io.BytesIO"], "tests.test_requests.TestRequests.test_autoset_header_values_are_native": ["requests.Request"], "tests.test_requests.TestRequests.test_nonhttp_schemes_dont_check_URLs": ["requests.Request"], "tests.test_requests.TestRequests.test_auth_is_stripped_on_http_downgrade": ["requests.get"], "tests.test_requests.TestRequests.test_auth_is_retained_for_redirect_on_host": ["requests.get"], "tests.test_requests.TestRequests.test_should_strip_auth_host_change": ["requests.Session"], "tests.test_requests.TestRequests.test_should_strip_auth_http_downgrade": ["requests.Session"], "tests.test_requests.TestRequests.test_should_strip_auth_https_upgrade": ["requests.Session"], "tests.test_requests.TestRequests.test_should_strip_auth_port_change": ["requests.Session"], "tests.test_requests.TestRequests.test_should_strip_auth_default_port": ["requests.Session"], "tests.test_requests.TestRequests.test_manual_redirect_with_partial_body_read": ["<builtin>.next", "requests.Session"], "tests.test_requests.TestRequests.test_prepare_body_position_non_stream": ["requests.Request"], "tests.test_requests.TestRequests.test_rewind_body": ["requests.Request", "requests.utils.rewind_body", "io.BytesIO"], "requests.utils.rewind_body": [], "tests.test_requests.TestRequests.test_rewind_partially_read_body": ["requests.Request", "requests.utils.rewind_body", "io.BytesIO"], "tests.test_requests.TestRequests.test_rewind_body_no_seek": ["tests.test_requests.TestRequests.test_rewind_body_no_seek.BadFileObj.__init__", "<builtin>.str", "requests.Request", "pytest.raises", "requests.utils.rewind_body"], "tests.test_requests.TestRequests.test_rewind_body_no_seek.BadFileObj.__init__": [], "tests.test_requests.TestRequests.test_rewind_body_no_seek.BadFileObj.tell": [], "tests.test_requests.TestRequests.test_rewind_body_no_seek.BadFileObj.__iter__": [], "tests.test_requests.TestRequests.test_rewind_body_failed_seek": ["<builtin>.str", "requests.Request", "tests.test_requests.TestRequests.test_rewind_body_failed_seek.BadFileObj.__init__", "pytest.raises", "requests.utils.rewind_body"], "tests.test_requests.TestRequests.test_rewind_body_failed_seek.BadFileObj.__init__": [], "tests.test_requests.TestRequests.test_rewind_body_failed_seek.BadFileObj.tell": [], "tests.test_requests.TestRequests.test_rewind_body_failed_seek.BadFileObj.seek": ["<builtin>.OSError"], "<builtin>.OSError": [], "tests.test_requests.TestRequests.test_rewind_body_failed_seek.BadFileObj.__iter__": [], "tests.test_requests.TestRequests.test_rewind_body_failed_tell": ["<builtin>.str", "tests.test_requests.TestRequests.test_rewind_body_failed_tell.BadFileObj.__init__", "requests.Request", "pytest.raises", "requests.utils.rewind_body"], "tests.test_requests.TestRequests.test_rewind_body_failed_tell.BadFileObj.__init__": [], "tests.test_requests.TestRequests.test_rewind_body_failed_tell.BadFileObj.tell": ["<builtin>.OSError"], "tests.test_requests.TestRequests.test_rewind_body_failed_tell.BadFileObj.__iter__": [], "tests.test_requests.TestRequests._patch_adapter_gzipped_redirect": [], "tests.test_requests.TestRequests._patch_adapter_gzipped_redirect.build_response": [], "tests.test_requests.TestRequests.test_redirect_with_wrong_gzipped_header": ["tests.test_requests.TestRequests._patch_adapter_gzipped_redirect", "requests.Session"], "tests.test_requests.TestRequests.test_basic_auth_str_is_always_native": ["requests.auth._basic_auth_str", "<builtin>.isinstance"], "tests.test_requests.TestRequests.test_requests_history_is_saved": ["requests.get"], "tests.test_requests.TestRequests.test_json_param_post_content_type_works": ["requests.post"], "tests.test_requests.TestRequests.test_json_param_post_should_not_override_data_param": ["requests.Request"], "tests.test_requests.TestRequests.test_response_iter_lines": ["<builtin>.len", "<builtin>.next", "<builtin>.list", "requests.get"], "tests.test_requests.TestRequests.test_response_context_manager": ["<builtin>.isinstance", "requests.get"], "tests.test_requests.TestRequests.test_unconsumed_session_response_closes_connection": ["requests.session", "contextlib.closing"], "contextlib.closing": [], "pytest.mark.xfail": [], "tests.test_requests.TestRequests.test_response_iter_lines_reentrant": ["<builtin>.len", "<builtin>.next", "<builtin>.list", "requests.get"], "tests.test_requests.TestRequests.test_session_close_proxy_clear": ["requests.Session"], "tests.test_requests.TestRequests.test_proxy_auth": ["requests.adapters.HTTPAdapter"], "tests.test_requests.TestRequests.test_proxy_auth_empty_pass": ["requests.adapters.HTTPAdapter"], "tests.test_requests.TestRequests.test_response_json_when_content_is_None": ["pytest.raises", "requests.get"], "tests.test_requests.TestRequests.test_response_without_release_conn": ["requests.Response", "compat.StringIO.StringIO"], "tests.test_requests.TestRequests.test_empty_stream_with_auth_does_not_set_content_length_header": ["requests.Request", "io.BytesIO"], "tests.test_requests.TestRequests.test_stream_with_auth_does_not_set_transfer_encoding_header": ["requests.Request", "io.BytesIO"], "tests.test_requests.TestRequests.test_chunked_upload_does_not_set_content_length_header": ["requests.Request"], "tests.test_requests.TestRequests.test_custom_redirect_mixin": ["requests.Session.get", "requests.models.urlencode", "requests.Session.__init__", "<builtin>.len"], "requests.models.urlencode": [], "tests.test_requests.TestRequests.test_custom_redirect_mixin.CustomRedirectSession.get_redirect_target": [], "requests.Session.__init__": [], "requests.Session.get": [], "tests.test_requests.TestCaseInsensitiveDict": ["pytest.mark.parametrize", "requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_init": ["<builtin>.len"], "tests.test_requests.TestCaseInsensitiveDict.test_docstring_example": ["<builtin>.list", "requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_len": ["<builtin>.len", "requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_getitem": ["requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_fixes_649": ["<builtin>.list", "requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_delitem": ["<builtin>.len", "requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_contains": ["requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_get": ["requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_update": ["<builtin>.len", "requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_update_retains_unchanged": ["requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_iter": ["<builtin>.frozenset", "requests.structures.CaseInsensitiveDict", "<builtin>.iter"], "<builtin>.frozenset": [], "tests.test_requests.TestCaseInsensitiveDict.test_equality": ["<builtin>.object", "requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_setdefault": ["requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_lower_items": ["<builtin>.frozenset", "requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_preserve_key_case": ["<builtin>.frozenset", "requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_preserve_last_key_case": ["<builtin>.frozenset", "requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestCaseInsensitiveDict.test_copy": ["requests.structures.CaseInsensitiveDict"], "tests.test_requests.TestMorselToCookieExpires.test_expires_valid_str": ["requests.cookies.morsel_to_cookie", "requests.compat.Morsel"], "requests.compat.Morsel": [], "requests.cookies.morsel_to_cookie": [], "tests.test_requests.TestMorselToCookieExpires": ["pytest.mark.parametrize"], "tests.test_requests.TestMorselToCookieExpires.test_expires_invalid_int": ["pytest.raises", "requests.compat.Morsel", "requests.cookies.morsel_to_cookie"], "tests.test_requests.TestMorselToCookieExpires.test_expires_none": ["requests.cookies.morsel_to_cookie", "requests.compat.Morsel"], "tests.test_requests.TestMorselToCookieMaxAge.test_max_age_valid_int": ["requests.cookies.morsel_to_cookie", "requests.compat.Morsel", "<builtin>.isinstance"], "tests.test_requests.TestMorselToCookieMaxAge.test_max_age_invalid_str": ["pytest.raises", "requests.compat.Morsel", "requests.cookies.morsel_to_cookie"], "tests.test_requests.TestTimeout.test_stream_timeout": ["requests.get"], "tests.test_requests.TestTimeout": ["pytest.mark.parametrize", "urllib3.util.Timeout"], "tests.test_requests.TestTimeout.test_invalid_timeout": ["pytest.raises", "<builtin>.str", "requests.get"], "urllib3.util.Timeout": [], "tests.test_requests.TestTimeout.test_none_timeout": ["requests.get"], "tests.test_requests.TestTimeout.test_read_timeout": ["pytest.fail", "requests.get"], "tests.test_requests.TestTimeout.test_connect_timeout": ["<builtin>.isinstance", "pytest.fail", "requests.get"], "tests.test_requests.TestTimeout.test_total_timeout_connect": ["pytest.fail", "requests.get"], "tests.test_requests.TestTimeout.test_encoded_methods": ["requests.request"], "collections.namedtuple": [], "tests.test_requests.RedirectSession.__init__": [], "tests.test_requests.RedirectSession.send": ["tests.test_requests.RedirectSession.build_response"], "tests.test_requests.RedirectSession.build_response": ["requests.Response", "tests.test_requests.RedirectSession._build_raw", "requests.structures.CaseInsensitiveDict", "<builtin>.int"], "<builtin>.int": [], "tests.test_requests.RedirectSession._build_raw": ["<builtin>.setattr", "compat.StringIO.StringIO"], "tests.test_requests.RedirectSession._build_raw.<lambda1>": [], "tests.test_requests.test_json_encodes_as_bytes": ["requests.models.PreparedRequest", "<builtin>.isinstance"], "requests.models.PreparedRequest": [], "tests.test_requests.test_requests_are_updated_each_time": ["requests.Request", "requests.sessions.SessionRedirectMixin.resolve_redirects", "tests.test_requests.RedirectSession.send", "tests.test_requests.RedirectSession.__init__"], "requests.sessions.SessionRedirectMixin.resolve_redirects": [], "tests.test_requests.test_proxy_env_vars_override_default": ["utils.override_environ", "requests.compat.urlparse", "requests.Session", "requests.models.PreparedRequest"], "tests.test_requests.test_data_argument_accepts_tuples": ["requests.models.urlencode", "requests.hooks.default_hooks", "requests.models.PreparedRequest"], "tests.test_requests.test_prepared_copy": ["<builtin>.getattr", "requests.models.PreparedRequest"], "<builtin>.getattr": [], "tests.test_requests.test_urllib3_retries": ["urllib3.util.Retry", "requests.Session", "pytest.raises", "requests.adapters.HTTPAdapter"], "urllib3.util.Retry": [], "tests.test_requests.test_urllib3_pool_connection_closed": ["requests.Session", "<builtin>.str", "requests.adapters.HTTPAdapter"], "tests.test_requests.TestPreparingURLs": ["pytest.mark.parametrize"], "tests.test_requests.TestPreparingURLs.test_preparing_url": ["requests.Request", "tests.test_requests.TestPreparingURLs.test_preparing_url.normalize_percent_encode"], "tests.test_requests.TestPreparingURLs.test_preparing_url.normalize_percent_encode": ["re.findall"], "re.findall": [], "tests.test_requests.TestPreparingURLs.test_preparing_bad_url": ["requests.Request", "pytest.raises"], "tests.test_requests.TestPreparingURLs.test_redirecting_to_bad_url": ["pytest.raises", "requests.get"], "tests.test_requests.TestPreparingURLs.test_url_mutation": ["requests.Request"], "tests.test_requests.TestPreparingURLs.test_parameters_for_nonstandard_schemes": ["requests.Request"], "tests.test_requests.TestPreparingURLs.test_post_json_nan": ["requests.post", "pytest.raises", "<builtin>.float"], "<builtin>.float": [], "tests.test_requests.TestPreparingURLs.test_json_decode_compatibility": ["<builtin>.str", "pytest.raises", "<builtin>.isinstance", "requests.get"], "tests.test_requests.TestPreparingURLs.test_json_decode_persists_doc_attr": ["pytest.raises", "requests.get"], "tests": ["warnings.simplefilter"], "tests.test_help": [], "tests.test_help.test_system_ssl": ["requests.help.info"], "requests.help.info": [], "tests.test_help.VersionedPackage.__init__": [], "tests.test_help.test_idna_without_version_attribute": ["requests.help.info"], "tests.test_help.test_idna_with_version_attribute": ["tests.test_help.VersionedPackage.__init__", "requests.help.info"], "tests.test_structures": [], "tests.test_structures.TestCaseInsensitiveDict": ["pytest.mark.parametrize", "pytest.fixture", "tests.test_structures.TestCaseInsensitiveDict.possible_keys"], "tests.test_structures.TestCaseInsensitiveDict.setup": ["requests.structures.CaseInsensitiveDict"], "tests.test_structures.TestCaseInsensitiveDict.test_list": ["<builtin>.list"], "tests.test_structures.TestCaseInsensitiveDict.possible_keys": [], "tests.test_structures.TestCaseInsensitiveDict.test_getitem": [], "tests.test_structures.TestCaseInsensitiveDict.test_delitem": [], "tests.test_structures.TestCaseInsensitiveDict.test_lower_items": ["<builtin>.list"], "tests.test_structures.TestCaseInsensitiveDict.test_repr": ["<builtin>.repr"], "<builtin>.repr": [], "tests.test_structures.TestCaseInsensitiveDict.test_copy": [], "tests.test_structures.TestCaseInsensitiveDict.test_instance_equality": [], "tests.test_structures.TestLookupDict": ["pytest.mark.parametrize", "pytest.fixture", "tests.test_structures.TestLookupDict.get_item_parameters"], "tests.test_structures.TestLookupDict.setup": ["requests.structures.LookupDict"], "requests.structures.LookupDict": [], "tests.test_structures.TestLookupDict.test_repr": ["<builtin>.repr"], "tests.test_structures.TestLookupDict.get_item_parameters": [], "tests.test_structures.TestLookupDict.test_getitem": [], "tests.test_structures.TestLookupDict.test_get": [], "tests.testserver": [], "tests.testserver.server": [], "select.select": [], "tests.testserver.server.Server.__init__": ["<builtin>.super", "threading.Event"], "<builtin>.super": [], "tests.testserver.server.Server.text_response_server": ["tests.testserver.server.Server"], "tests.testserver.server.Server.text_response_server.text_response_handler": ["tests.testserver.server.consume_socket_content"], "tests.testserver.server.Server.run": [], "tests.testserver.server.Server._create_socket_and_bind": ["socket.socket"], "socket.socket": [], "tests.testserver.server.Server._close_server_sock_ignore_errors": [], "tests.testserver.server.Server._handle_requests": ["<builtin>.range"], "tests.testserver.server.Server._accept_connection": ["select.select"], "tests.testserver.server.Server.__enter__": ["<builtin>.RuntimeError"], "<builtin>.RuntimeError": [], "tests.testserver.server.Server.__exit__": [], "tests.utils": ["contextlib.contextmanager"], "contextlib.contextmanager": [], "tests.utils.override_environ": ["os.environ.update", "<builtin>.dict", "os.environ.clear"], "os.environ.clear": [], "os.environ.update": [], "tests.test_testserver": [], "tests.test_testserver.TestTestServer.test_basic": ["socket.socket", "tests.testserver.server.Server"], "tests.test_testserver.TestTestServer.test_basic.handler": [], "tests.test_testserver.TestTestServer.test_server_closes": ["socket.socket", "pytest.raises", "tests.testserver.server.Server.basic_response_server"], "tests.test_testserver.TestTestServer.test_text_response": ["tests.testserver.server.Server.text_response_server", "requests.get"], "tests.test_testserver.TestTestServer.test_basic_response": ["requests.get", "tests.testserver.server.Server.basic_response_server"], "tests.test_testserver.TestTestServer.test_basic_waiting_server": ["socket.socket", "time.sleep", "threading.Event", "tests.testserver.server.Server.basic_response_server"], "time.sleep": [], "tests.test_testserver.TestTestServer.test_multiple_requests": ["<builtin>.range", "pytest.raises", "requests.get", "tests.testserver.server.Server.basic_response_server"], "pytest.mark.skip": [], "tests.test_testserver.TestTestServer": ["pytest.mark.skip"], "tests.test_testserver.TestTestServer.test_request_recovery": ["socket.socket", "tests.testserver.server.Server.basic_response_server"], "tests.test_testserver.TestTestServer.test_requests_after_timeout_are_not_received": ["socket.socket", "time.sleep", "tests.testserver.server.Server.basic_response_server"], "tests.test_testserver.TestTestServer.test_request_recovery_with_bigger_timeout": ["socket.socket", "time.sleep", "tests.testserver.server.Server.basic_response_server"], "tests.test_testserver.TestTestServer.test_server_finishes_on_error": ["<builtin>.len", "pytest.raises", "<builtin>.Exception", "tests.testserver.server.Server.basic_response_server"], "tests.test_testserver.TestTestServer.test_server_finishes_when_no_connections": ["<builtin>.len", "tests.testserver.server.Server.basic_response_server"]}