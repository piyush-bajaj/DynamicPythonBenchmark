{"tests.test_config": ["pytest.fixture", "pytest.mark.parametrize", "pytest.mark.skipif"], "pytest.fixture": [], "tests.test_config.mocked_logging_config_module": [], "tests.test_config.json_logging_config": ["json.dumps"], "json.dumps": [], "tests.test_config.yaml_logging_config": ["yaml.dump"], "yaml.dump": [], "tests.test_config.asgi_app": [], "tests.test_config.wsgi_app": [], "pytest.mark.parametrize": [], "tests.test_config.test_config_should_reload_is_set": ["uvicorn.config.Config"], "uvicorn.config.Config": [], "tests.test_config.test_should_warn_on_invalid_reload_configuration": ["<builtin>.len", "uvicorn.config.Config", "<builtin>.str"], "<builtin>.str": [], "<builtin>.len": [], "tests.test_config.test_reload_dir_is_set": ["<builtin>.len", "uvicorn.config.Config", "<builtin>.str"], "tests.test_config.test_non_existant_reload_dir_is_not_set": ["tests.utils.as_cwd", "uvicorn.config.Config"], "tests.utils.as_cwd": ["pathlib.Path.cwd", "os.chdir"], "tests.test_config.test_reload_subdir_removal": ["tests.utils.as_cwd", "uvicorn.config.Config", "<builtin>.str"], "tests.test_config.test_reload_included_dir_is_added_to_reload_dirs": ["tests.utils.as_cwd", "<builtin>.frozenset", "uvicorn.config.Config", "<builtin>.str"], "<builtin>.frozenset": [], "tests.test_config.test_reload_dir_subdirectories_are_removed": ["tests.utils.as_cwd", "<builtin>.frozenset", "uvicorn.config.Config", "<builtin>.str"], "tests.test_config.test_reload_excluded_subdirectories_are_removed": ["tests.utils.as_cwd", "<builtin>.frozenset", "uvicorn.config.Config", "<builtin>.str"], "tests.test_config.test_reload_includes_exclude_dir_patterns_are_matched": ["<builtin>.str", "<builtin>.sorted", "<builtin>.len", "tests.utils.as_cwd", "<builtin>.frozenset", "uvicorn.config.Config"], "<builtin>.sorted": [], "tests.test_config.test_wsgi_app": ["<builtin>.isinstance", "uvicorn.config.Config"], "<builtin>.isinstance": [], "tests.test_config.test_proxy_headers": ["<builtin>.isinstance", "uvicorn.config.Config"], "tests.test_config.test_app_unimportable_module": ["pytest.raises", "uvicorn.config.Config"], "pytest.raises": [], "tests.test_config.test_app_unimportable_other": ["pytest.raises", "uvicorn.config.Config"], "tests.test_config.test_app_factory": ["<builtin>.len", "pytest.raises", "uvicorn.config.Config"], "tests.test_config.test_app_factory.create_app": [], "tests.test_config.test_concrete_http_class": ["uvicorn.config.Config"], "tests.test_config.test_socket_bind": ["<builtin>.isinstance", "uvicorn.config.Config"], "tests.test_config.test_ssl_config": ["uvicorn.config.Config"], "tests.test_config.test_ssl_config_combined": ["uvicorn.config.Config"], "tests.test_config.asgi2_app": [], "tests.test_config.asgi2_app.asgi": [], "tests.test_config.test_asgi_version": ["uvicorn.config.Config"], "tests.test_config.test_log_config_default": ["uvicorn.config.Config"], "tests.test_config.test_log_config_json": ["uvicorn.config.Config"], "tests.test_config.test_log_config_yaml": ["uvicorn.config.Config"], "tests.test_config.test_log_config_file": ["uvicorn.config.Config"], "tests.test_config.web_concurrency": ["os.getenv", "<builtin>.getattr"], "<builtin>.getattr": [], "os.getenv": [], "tests.test_config.forwarded_allow_ips": ["os.getenv", "<builtin>.getattr"], "tests.test_config.test_env_file": ["<builtin>.int", "<builtin>.str", "os.getenv", "<builtin>.len", "uvicorn.config.Config"], "<builtin>.int": [], "tests.test_config.test_config_access_log": ["logging.getLogger", "<builtin>.len", "uvicorn.config.Config"], "logging.getLogger": [], "tests.test_config.test_config_log_level": ["logging.getLogger", "uvicorn.config.Config"], "tests.test_config.test_ws_max_size": ["uvicorn.config.Config"], "pytest.mark.skipif": [], "tests.test_config.test_bind_unix_socket_works_with_reload_or_workers": ["<builtin>.isinstance", "uvicorn.config.Config"], "tests.test_config.test_bind_fd_works_with_reload_or_workers": ["socket.socket", "<builtin>.isinstance", "uvicorn.config.Config"], "socket.socket": [], "tests.test_config.test_config_use_subprocess": ["uvicorn.config.Config"], "tests.test_config.test_warn_when_using_reload_and_workers": ["<builtin>.len", "uvicorn.config.Config"], "tests.supervisors.test_reload": ["pytest.mark.skipif"], "tests.supervisors.test_reload.run": [], "tests.supervisors.test_reload.TestBaseReload": ["pytest.fixture", "pytest.mark.parametrize", "pytest.mark.skipif"], "tests.supervisors.test_reload.TestBaseReload.setup": ["pytest.skip"], "pytest.skip": [], "tests.supervisors.test_reload.TestBaseReload._setup_reloader": ["pytest.deprecated_call"], "pytest.deprecated_call": [], "tests.supervisors.test_reload.TestBaseReload._reload_tester": ["time.sleep", "<builtin>.isinstance", "<builtin>.next"], "<builtin>.next": [], "time.sleep": [], "tests.supervisors.test_reload.TestBaseReload.test_reloader_should_initialize": ["tests.utils.as_cwd", "uvicorn.config.Config", "tests.supervisors.test_reload.TestBaseReload._setup_reloader"], "tests.supervisors.test_reload.TestBaseReload.test_reload_when_python_file_is_changed": ["tests.utils.as_cwd", "tests.supervisors.test_reload.TestBaseReload._reload_tester", "uvicorn.config.Config", "tests.supervisors.test_reload.TestBaseReload._setup_reloader"], "tests.supervisors.test_reload.TestBaseReload.test_should_reload_when_python_file_in_subdir_is_changed": ["tests.utils.as_cwd", "tests.supervisors.test_reload.TestBaseReload._reload_tester", "uvicorn.config.Config", "tests.supervisors.test_reload.TestBaseReload._setup_reloader"], "tests.supervisors.test_reload.TestBaseReload.test_should_not_reload_when_python_file_in_excluded_subdir_is_changed": ["<builtin>.str", "tests.supervisors.test_reload.TestBaseReload._setup_reloader", "tests.supervisors.test_reload.TestBaseReload._reload_tester", "tests.utils.as_cwd", "uvicorn.config.Config"], "tests.supervisors.test_reload.TestBaseReload.test_reload_when_pattern_matched_file_is_changed": ["<builtin>.bool", "tests.supervisors.test_reload.TestBaseReload._setup_reloader", "tests.supervisors.test_reload.TestBaseReload._reload_tester", "tests.utils.as_cwd", "uvicorn.config.Config"], "<builtin>.bool": [], "tests.supervisors.test_reload.TestBaseReload.test_should_not_reload_when_exclude_pattern_match_file_is_changed": ["tests.utils.as_cwd", "tests.supervisors.test_reload.TestBaseReload._reload_tester", "uvicorn.config.Config", "tests.supervisors.test_reload.TestBaseReload._setup_reloader"], "tests.supervisors.test_reload.TestBaseReload.test_should_not_reload_when_dot_file_is_changed": ["tests.utils.as_cwd", "tests.supervisors.test_reload.TestBaseReload._reload_tester", "uvicorn.config.Config", "tests.supervisors.test_reload.TestBaseReload._setup_reloader"], "tests.supervisors.test_reload.TestBaseReload.test_should_reload_when_directories_have_same_prefix": ["<builtin>.str", "tests.supervisors.test_reload.TestBaseReload._setup_reloader", "tests.supervisors.test_reload.TestBaseReload._reload_tester", "tests.utils.as_cwd", "uvicorn.config.Config"], "tests.supervisors.test_reload.TestBaseReload.test_should_not_reload_when_only_subdirectory_is_watched": ["tests.supervisors.test_reload.TestBaseReload._reload_tester", "uvicorn.config.Config", "<builtin>.str", "tests.supervisors.test_reload.TestBaseReload._setup_reloader"], "tests.supervisors.test_reload.TestBaseReload.test_override_defaults": ["tests.utils.as_cwd", "tests.supervisors.test_reload.TestBaseReload._reload_tester", "uvicorn.config.Config", "tests.supervisors.test_reload.TestBaseReload._setup_reloader"], "tests.supervisors.test_reload.TestBaseReload.test_watchfiles_no_changes": ["<builtin>.str", "tests.supervisors.test_reload.TestBaseReload._setup_reloader", "tests.utils.as_cwd", "uvicorn.config.Config", "watchfiles.watch"], "watchfiles.watch": [], "tests.supervisors.test_reload.TestBaseReload.test_should_detect_new_reload_dirs": ["tests.utils.as_cwd", "tests.supervisors.test_reload.TestBaseReload._reload_tester", "uvicorn.config.Config", "tests.supervisors.test_reload.TestBaseReload._setup_reloader"], "tests.supervisors.test_reload.test_should_watch_one_dir_cwd": ["<builtin>.str", "uvicorn.supervisors.watchfilesreload.WatchFilesReload", "tests.utils.as_cwd", "pathlib.Path.cwd", "uvicorn.config.Config"], "uvicorn.supervisors.watchfilesreload.WatchFilesReload": [], "pathlib.Path.cwd": [], "tests.supervisors.test_reload.test_should_watch_separate_dirs_outside_cwd": ["<builtin>.str", "uvicorn.supervisors.watchfilesreload.WatchFilesReload", "<builtin>.set", "pathlib.Path.cwd", "uvicorn.config.Config"], "<builtin>.set": [], "tests.supervisors.test_reload.test_display_path_relative": ["tests.utils.as_cwd", "uvicorn.supervisors.basereload._display_path"], "uvicorn.supervisors.basereload._display_path": [], "tests.supervisors.test_reload.test_display_path_non_relative": ["pathlib.Path", "uvicorn.supervisors.basereload._display_path"], "pathlib.Path": [], "tests.supervisors.test_reload.test_base_reloader_run": ["uvicorn.supervisors.basereload.BaseReload.run", "uvicorn.supervisors.basereload.BaseReload.__init__", "uvicorn.config.Config"], "tests.supervisors.test_reload.test_base_reloader_run.CustomReload.startup": [], "tests.supervisors.test_reload.test_base_reloader_run.CustomReload.restart": [], "tests.supervisors.test_reload.test_base_reloader_run.CustomReload.shutdown": [], "tests.supervisors.test_reload.test_base_reloader_run.CustomReload.should_restart": ["<builtin>.StopIteration"], "<builtin>.StopIteration": [], "uvicorn.supervisors.basereload.BaseReload.__init__": [], "uvicorn.supervisors.basereload.BaseReload.run": [], "tests.supervisors.test_reload.test_base_reloader_should_exit": ["pytest.raises", "uvicorn.supervisors.basereload.BaseReload", "uvicorn.config.Config"], "uvicorn.supervisors.basereload.BaseReload": [], "tests.supervisors.test_reload.test_base_reloader_closes_sockets_on_shutdown": ["socket.socket", "uvicorn.supervisors.basereload.BaseReload", "uvicorn.config.Config"], "tests.supervisors.test_multiprocess": [], "tests.supervisors.test_multiprocess.app": [], "tests.supervisors.test_multiprocess.run": [], "tests.supervisors.test_multiprocess.test_multiprocess_run": ["uvicorn.supervisors.Multiprocess", "uvicorn.Config"], "uvicorn.Config": [], "uvicorn.supervisors.Multiprocess": [], "tests.response": [], "tests.response.Response.__init__": ["tests.response.Response.render", "tests.response.Response.set_content_type", "tests.response.Response.set_content_length"], "tests.response.Response.render": ["<builtin>.isinstance"], "tests.response.Response.set_content_type": [], "tests.response.Response.set_content_length": ["<builtin>.len", "<builtin>.str"], "tests.response.Response.__call__": [], "tests.test_default_headers": ["pytest.mark.anyio"], "tests.test_default_headers.app": [], "pytest.mark.anyio": [], "tests.test_default_headers.test_default_default_headers": ["tests.utils.run_server", "uvicorn.Config", "httpx.AsyncClient"], "tests.utils.run_server": ["asyncio.create_task", "asyncio.sleep", "uvicorn.Server"], "httpx.AsyncClient": [], "tests.test_default_headers.test_override_server_header": ["tests.utils.run_server", "uvicorn.Config", "httpx.AsyncClient"], "tests.test_default_headers.test_disable_default_server_header": ["tests.utils.run_server", "uvicorn.Config", "httpx.AsyncClient"], "tests.test_default_headers.test_override_server_header_multiple_times": ["tests.utils.run_server", "uvicorn.Config", "httpx.AsyncClient"], "tests.test_default_headers.test_add_additional_header": ["tests.utils.run_server", "uvicorn.Config", "httpx.AsyncClient"], "tests.test_default_headers.test_disable_default_date_header": ["tests.utils.run_server", "uvicorn.Config", "httpx.AsyncClient"], "tests.test_lifespan": ["pytest.mark.parametrize"], "tests.test_lifespan.test_lifespan_on": ["asyncio.new_event_loop", "tests.test_lifespan.test_lifespan_on.test"], "tests.test_lifespan.test_lifespan_on.app": [], "tests.test_lifespan.test_lifespan_on.test": ["uvicorn.lifespan.on.LifespanOn", "uvicorn.config.Config"], "uvicorn.lifespan.on.LifespanOn": [], "asyncio.new_event_loop": [], "tests.test_lifespan.test_lifespan_off": ["asyncio.new_event_loop", "tests.test_lifespan.test_lifespan_off.test"], "tests.test_lifespan.test_lifespan_off.app": [], "tests.test_lifespan.test_lifespan_off.test": ["uvicorn.config.Config", "uvicorn.lifespan.off.LifespanOff"], "uvicorn.lifespan.off.LifespanOff": [], "tests.test_lifespan.test_lifespan_auto": ["tests.test_lifespan.test_lifespan_auto.test", "asyncio.new_event_loop"], "tests.test_lifespan.test_lifespan_auto.app": [], "tests.test_lifespan.test_lifespan_auto.test": ["uvicorn.lifespan.on.LifespanOn", "uvicorn.config.Config"], "tests.test_lifespan.test_lifespan_auto_with_error": ["asyncio.new_event_loop", "tests.test_lifespan.test_lifespan_auto_with_error.test"], "tests.test_lifespan.test_lifespan_auto_with_error.app": [], "tests.test_lifespan.test_lifespan_auto_with_error.test": ["uvicorn.lifespan.on.LifespanOn", "uvicorn.config.Config"], "tests.test_lifespan.test_lifespan_on_with_error": ["asyncio.new_event_loop", "tests.test_lifespan.test_lifespan_on_with_error.test"], "tests.test_lifespan.test_lifespan_on_with_error.app": ["<builtin>.RuntimeError"], "<builtin>.RuntimeError": [], "tests.test_lifespan.test_lifespan_on_with_error.test": ["uvicorn.lifespan.on.LifespanOn", "uvicorn.config.Config"], "tests.test_lifespan.test_lifespan_with_failed_startup": ["asyncio.new_event_loop", "tests.test_lifespan.test_lifespan_with_failed_startup.test"], "tests.test_lifespan.test_lifespan_with_failed_startup.app": ["<builtin>.RuntimeError"], "tests.test_lifespan.test_lifespan_with_failed_startup.test": ["uvicorn.lifespan.on.LifespanOn", "uvicorn.config.Config"], "tests.test_lifespan.test_lifespan_scope_asgi3app": ["tests.test_lifespan.test_lifespan_scope_asgi3app.test", "asyncio.new_event_loop"], "tests.test_lifespan.test_lifespan_scope_asgi3app.asgi3app": [], "tests.test_lifespan.test_lifespan_scope_asgi3app.test": ["uvicorn.lifespan.on.LifespanOn", "uvicorn.config.Config"], "tests.test_lifespan.test_lifespan_scope_asgi2app": ["asyncio.new_event_loop", "tests.test_lifespan.test_lifespan_scope_asgi2app.test"], "tests.test_lifespan.test_lifespan_scope_asgi2app.asgi2app": [], "tests.test_lifespan.test_lifespan_scope_asgi2app.asgi2app.asgi": [], "tests.test_lifespan.test_lifespan_scope_asgi2app.test": ["uvicorn.lifespan.on.LifespanOn", "uvicorn.config.Config"], "tests.test_lifespan.test_lifespan_with_failed_shutdown": ["tests.test_lifespan.test_lifespan_with_failed_shutdown.test", "asyncio.new_event_loop"], "tests.test_lifespan.test_lifespan_with_failed_shutdown.app": ["<builtin>.RuntimeError"], "tests.test_lifespan.test_lifespan_with_failed_shutdown.test": ["uvicorn.lifespan.on.LifespanOn", "uvicorn.config.Config"], "tests.conftest": ["pytest.fixture"], "tests.conftest.tls_certificate_authority": ["trustme.CA"], "trustme.CA": [], "tests.conftest.tls_certificate": [], "tests.conftest.tls_ca_certificate_pem_path": [], "tests.conftest.tls_ca_certificate_private_key_path": [], "tests.conftest.tls_certificate_private_key_encrypted_path": ["cryptography.hazmat.primitives.serialization.BestAvailableEncryption", "cryptography.hazmat.backends.default_backend", "trustme.Blob", "cryptography.hazmat.primitives.serialization.load_pem_private_key"], "cryptography.hazmat.backends.default_backend": [], "cryptography.hazmat.primitives.serialization.load_pem_private_key": [], "cryptography.hazmat.primitives.serialization.BestAvailableEncryption": [], "trustme.Blob": [], "tests.conftest.tls_certificate_private_key_path": [], "tests.conftest.tls_certificate_key_and_chain_path": [], "tests.conftest.tls_certificate_server_cert_path": [], "tests.conftest.tls_ca_ssl_context": ["ssl.create_default_context"], "ssl.create_default_context": [], "tests.conftest.reload_directory_structure": [], "tests.conftest.anyio_backend": [], "tests.conftest.logging_config": ["copy.deepcopy"], "copy.deepcopy": [], "tests.conftest.short_socket_name": ["<builtin>.str", "os.getenv", "pathlib.Path", "uuid.uuid4", "hashlib.md5", "tests.conftest.short_socket_name.make_tmp_dir", "<builtin>.enumerate", "<builtin>.len"], "uuid.uuid4": [], "hashlib.md5": [], "tests.conftest.short_socket_name.make_tmp_dir": ["tempfile.TemporaryDirectory", "<builtin>.str"], "tempfile.TemporaryDirectory": [], "<builtin>.enumerate": [], "tests.conftest.sleep_touch": ["time.sleep"], "tests.conftest.touch_soon": [], "tests.conftest.touch_soon.start": ["threading.Thread"], "threading.Thread": [], "tests.conftest._unused_port": ["socket.socket", "contextlib.closing"], "contextlib.closing": [], "tests.conftest.unused_tcp_port": ["tests.conftest._unused_port"], "tests.test_subprocess": [], "tests.test_subprocess.server_run": [], "tests.test_subprocess.app": [], "tests.test_subprocess.test_get_subprocess": ["socket.socket", "<builtin>.isinstance", "uvicorn._subprocess.get_subprocess", "uvicorn.config.Config"], "uvicorn._subprocess.get_subprocess": [], "tests.test_subprocess.test_subprocess_started": ["socket.socket", "uvicorn._subprocess.subprocess_started", "unittest.mock.patch", "unittest.mock.patch.object", "uvicorn.config.Config"], "unittest.mock.patch": [], "unittest.mock.patch.object": [], "uvicorn._subprocess.subprocess_started": [], "tests.importer": [], "tests.importer.test_importer": [], "tests.importer.test_importer.test_invalid_format": ["pytest.raises", "uvicorn.importer.import_from_string", "<builtin>.str"], "uvicorn.importer.import_from_string": [], "tests.importer.test_importer.test_invalid_module": ["pytest.raises", "uvicorn.importer.import_from_string", "<builtin>.str"], "tests.importer.test_importer.test_invalid_attr": ["pytest.raises", "uvicorn.importer.import_from_string", "<builtin>.str"], "tests.importer.test_importer.test_internal_import_error": ["pytest.raises", "uvicorn.importer.import_from_string"], "tests.importer.test_importer.test_valid_import": ["uvicorn.importer.import_from_string"], "tests.importer.test_importer.test_no_import_needed": ["uvicorn.importer.import_from_string"], "tests.importer.raise_import_error": [], "tests": [], "tests.test_auto_detection": ["pytest.mark.anyio"], "tests.test_auto_detection.app": [], "tests.test_auto_detection.test_loop_auto": ["<builtin>.isinstance", "asyncio.get_event_loop_policy", "<builtin>.type", "uvicorn.loops.auto.auto_loop_setup"], "uvicorn.loops.auto.auto_loop_setup": [], "asyncio.get_event_loop_policy": [], "<builtin>.type": [], "tests.test_auto_detection.test_http_auto": ["uvicorn.protocols.http.auto.AutoHTTPProtocol", "uvicorn.main.ServerState", "<builtin>.type", "uvicorn.config.Config"], "uvicorn.main.ServerState": [], "uvicorn.protocols.http.auto.AutoHTTPProtocol": [], "tests.test_auto_detection.test_websocket_auto": ["uvicorn.protocols.websockets.auto.AutoWebSocketsProtocol", "uvicorn.main.ServerState", "<builtin>.type", "uvicorn.config.Config"], "uvicorn.protocols.websockets.auto.AutoWebSocketsProtocol": [], "tests.middleware.test_wsgi": ["pytest.mark.anyio", "pytest.fixture"], "tests.middleware.test_wsgi.hello_world": ["<builtin>.len", "<builtin>.str"], "tests.middleware.test_wsgi.echo_body": ["<builtin>.len", "<builtin>.str"], "tests.middleware.test_wsgi.raise_exception": ["<builtin>.RuntimeError"], "tests.middleware.test_wsgi.return_exc_info": ["<builtin>.len", "<builtin>.RuntimeError", "<builtin>.str", "sys.exc_info"], "sys.exc_info": [], "tests.middleware.test_wsgi.wsgi_middleware": [], "tests.middleware.test_wsgi.test_wsgi_get": ["httpx.AsyncClient"], "tests.middleware.test_wsgi.test_wsgi_post": ["httpx.AsyncClient"], "tests.middleware.test_wsgi.test_wsgi_put_more_body": ["tests.middleware.test_wsgi.test_wsgi_put_more_body.generate_body", "httpx.AsyncClient"], "tests.middleware.test_wsgi.test_wsgi_put_more_body.generate_body": ["<builtin>.range"], "<builtin>.range": [], "tests.middleware.test_wsgi.test_wsgi_exception": ["pytest.raises", "httpx.AsyncClient"], "tests.middleware.test_wsgi.test_wsgi_exc_info": ["httpx.ASGITransport", "pytest.raises", "httpx.AsyncClient"], "httpx.ASGITransport": [], "tests.middleware.test_wsgi.test_build_environ_encoding": ["uvicorn.middleware.wsgi.build_environ", "io.BytesIO"], "io.BytesIO": [], "uvicorn.middleware.wsgi.build_environ": [], "tests.middleware.test_proxy_headers": ["pytest.mark.anyio", "pytest.mark.parametrize"], "tests.middleware.test_proxy_headers.app": ["tests.response.Response.__init__"], "tests.middleware.test_proxy_headers.test_proxy_headers_trusted_hosts": ["httpx.AsyncClient", "uvicorn.middleware.proxy_headers.ProxyHeadersMiddleware"], "uvicorn.middleware.proxy_headers.ProxyHeadersMiddleware": [], "tests.middleware.test_proxy_headers.test_proxy_headers_multiple_proxies": ["httpx.AsyncClient", "uvicorn.middleware.proxy_headers.ProxyHeadersMiddleware"], "tests.middleware.test_proxy_headers.test_proxy_headers_invalid_x_forwarded_for": ["httpx.Headers", "httpx.AsyncClient", "uvicorn.middleware.proxy_headers.ProxyHeadersMiddleware"], "httpx.Headers": [], "tests.middleware.test_message_logger": ["pytest.mark.anyio"], "tests.middleware.test_message_logger.test_message_logger": ["httpx.AsyncClient", "<builtin>.sum", "uvicorn.middleware.message_logger.MessageLoggerMiddleware", "tests.middleware.test_logging.caplog_for_logger"], "tests.middleware.test_message_logger.test_message_logger.app": [], "tests.middleware.test_logging.caplog_for_logger": ["logging.getLogger"], "uvicorn.middleware.message_logger.MessageLoggerMiddleware": [], "<builtin>.sum": [], "tests.middleware.test_message_logger.test_message_logger_exc": ["httpx.AsyncClient", "uvicorn.middleware.message_logger.MessageLoggerMiddleware", "pytest.raises", "tests.middleware.test_logging.caplog_for_logger", "<builtin>.sum"], "tests.middleware.test_message_logger.test_message_logger_exc.app": ["<builtin>.RuntimeError"], "tests.middleware.test_logging": ["pytest.mark.anyio", "pytest.mark.parametrize", "contextlib.contextmanager", "pytest.mark.skipif"], "contextlib.contextmanager": [], "tests.middleware.test_logging.app": [], "tests.middleware.test_logging.test_trace_logging": ["tests.utils.run_server", "uvicorn.Config", "httpx.AsyncClient", "tests.middleware.test_logging.caplog_for_logger"], "tests.middleware.test_logging.test_trace_logging_on_http_protocol": ["uvicorn.Config", "httpx.AsyncClient", "tests.utils.run_server", "tests.middleware.test_logging.caplog_for_logger", "<builtin>.any"], "<builtin>.any": [], "tests.middleware.test_logging.test_trace_logging_on_ws_protocol": ["uvicorn.Config", "tests.utils.run_server", "tests.middleware.test_logging.caplog_for_logger", "<builtin>.any", "tests.middleware.test_logging.test_trace_logging_on_ws_protocol.open_connection"], "tests.middleware.test_logging.test_trace_logging_on_ws_protocol.websocket_app": [], "tests.middleware.test_logging.test_trace_logging_on_ws_protocol.open_connection": ["websockets.connect"], "websockets.connect": [], "tests.middleware.test_logging.test_access_logging": ["tests.utils.run_server", "uvicorn.Config", "httpx.AsyncClient", "tests.middleware.test_logging.caplog_for_logger"], "tests.middleware.test_logging.test_default_logging": ["tests.utils.run_server", "uvicorn.Config", "httpx.AsyncClient", "tests.middleware.test_logging.caplog_for_logger"], "tests.middleware.test_logging.test_running_log_using_uds": ["tests.utils.run_server", "uvicorn.Config", "tests.middleware.test_logging.caplog_for_logger"], "tests.middleware.test_logging.test_running_log_using_fd": ["uvicorn.Config", "socket.socket", "tests.utils.run_server", "contextlib.closing", "tests.middleware.test_logging.caplog_for_logger"], "tests.middleware.test_logging.test_unknown_status_code": ["tests.utils.run_server", "uvicorn.Config", "httpx.AsyncClient", "tests.middleware.test_logging.caplog_for_logger"], "tests.middleware.test_logging.test_unknown_status_code.app": [], "tests.middleware.test_logging.test_server_start_with_port_zero": ["tests.utils.run_server", "uvicorn.Config"], "tests.test_main": ["pytest.mark.anyio", "pytest.mark.skip", "pytest.mark.parametrize"], "tests.test_main.app": [], "tests.test_main._has_ipv6": ["socket.socket"], "pytest.mark.skip": [], "tests.test_main.test_run": ["tests.utils.run_server", "httpx.AsyncClient", "uvicorn.config.Config"], "tests.test_main.test_run_multiprocess": ["tests.utils.run_server", "httpx.AsyncClient", "uvicorn.config.Config"], "tests.test_main.test_run_reload": ["tests.utils.run_server", "httpx.AsyncClient", "uvicorn.config.Config"], "tests.test_main.test_run_invalid_app_config_combination": ["pytest.raises", "uvicorn.main.run"], "uvicorn.main.run": [], "tests.test_main.test_run_startup_failure": ["pytest.raises", "uvicorn.main.run"], "tests.test_main.test_run_startup_failure.app": ["<builtin>.RuntimeError"], "tests.test_main.test_run_match_config_params": ["<builtin>.repr", "inspect.signature"], "<builtin>.repr": [], "inspect.signature": [], "tests.test_main.test_exit_on_create_server_with_invalid_host": ["pytest.raises", "uvicorn.Server", "uvicorn.config.Config"], "uvicorn.Server": [], "tests.test_cli": ["pytest.fixture", "importlib.import_module", "pytest.mark.skipif"], "importlib.import_module": [], "tests.test_cli.test_cli_print_version": ["click.testing.CliRunner", "platform.python_implementation", "platform.system", "platform.python_version"], "click.testing.CliRunner": [], "platform.python_implementation": [], "platform.python_version": [], "platform.system": [], "tests.test_cli.test_cli_headers": ["click.testing.CliRunner", "unittest.mock.patch.object"], "tests.test_cli.test_cli_call_server_run": ["click.testing.CliRunner", "unittest.mock.patch.object"], "tests.test_cli.test_cli_call_change_reload_run": ["click.testing.CliRunner", "unittest.mock.patch.object"], "tests.test_cli.test_cli_call_multiprocess_run": ["click.testing.CliRunner", "unittest.mock.patch.object"], "tests.test_cli.uds_file": [], "tests.test_cli.test_cli_uds": ["click.testing.CliRunner", "unittest.mock.patch.object"], "tests.test_cli.test_cli_incomplete_app_parameter": ["click.testing.CliRunner"], "tests.test_cli.test_cli_event_size": ["click.testing.CliRunner", "unittest.mock.patch.object"], "tests.test_cli.load_env_h11_protocol": ["os.environ.clear", "<builtin>.dict", "os.environ.update"], "<builtin>.dict": [], "os.environ.clear": [], "os.environ.update": [], "tests.test_cli.test_env_variables": ["click.testing.CliRunner", "unittest.mock.patch.object"], "tests.test_cli.test_mistmatch_env_variables": ["click.testing.CliRunner", "unittest.mock.patch.object"], "tests.test_cli.test_app_dir": ["click.testing.CliRunner", "textwrap.dedent", "unittest.mock.patch.object", "<builtin>.str"], "textwrap.dedent": [], "tests.utils": ["contextlib.asynccontextmanager", "contextlib.contextmanager"], "contextlib.asynccontextmanager": [], "asyncio.create_task": [], "asyncio.sleep": [], "os.chdir": [], "tests.test_ssl": ["pytest.mark.anyio"], "tests.test_ssl.app": [], "tests.test_ssl.test_run": ["tests.utils.run_server", "httpx.AsyncClient", "uvicorn.config.Config"], "tests.test_ssl.test_run_chain": ["tests.utils.run_server", "httpx.AsyncClient", "uvicorn.config.Config"], "tests.test_ssl.test_run_chain_only": ["tests.utils.run_server", "httpx.AsyncClient", "uvicorn.config.Config"], "tests.test_ssl.test_run_password": ["tests.utils.run_server", "httpx.AsyncClient", "uvicorn.config.Config"], "tests.protocols.test_utils": ["pytest.mark.parametrize"], "tests.protocols.test_utils.MockSocket.__init__": [], "tests.protocols.test_utils.MockSocket.getpeername": [], "tests.protocols.test_utils.MockSocket.getsockname": [], "tests.protocols.test_utils.MockTransport.__init__": [], "tests.protocols.test_utils.MockTransport.get_extra_info": [], "tests.protocols.test_utils.test_get_local_addr_with_socket": ["uvicorn.protocols.utils.get_local_addr", "tests.protocols.test_utils.MockSocket.__init__", "tests.protocols.test_utils.MockTransport.__init__", "<builtin>.hasattr"], "uvicorn.protocols.utils.get_local_addr": [], "<builtin>.hasattr": [], "tests.protocols.test_utils.test_get_remote_addr_with_socket": ["<builtin>.hasattr", "tests.protocols.test_utils.MockSocket.__init__", "tests.protocols.test_utils.MockTransport.__init__", "uvicorn.protocols.utils.get_remote_addr"], "uvicorn.protocols.utils.get_remote_addr": [], "tests.protocols.test_utils.test_get_local_addr": ["uvicorn.protocols.utils.get_local_addr", "tests.protocols.test_utils.MockTransport.__init__"], "tests.protocols.test_utils.test_get_remote_addr": ["tests.protocols.test_utils.MockTransport.__init__", "uvicorn.protocols.utils.get_remote_addr"], "tests.protocols.test_utils.test_get_client_addr": ["uvicorn.protocols.utils.get_client_addr"], "uvicorn.protocols.utils.get_client_addr": [], "tests.protocols.test_http": ["pytest.param", "pytest.mark.skipif", "pytest.mark.anyio", "uvicorn.config.WS_PROTOCOLS.keys", "pytest.mark.parametrize"], "uvicorn.config.WS_PROTOCOLS.keys": [], "tests.protocols.test_http.MockTransport.__init__": [], "tests.protocols.test_http.MockTransport.get_extra_info": [], "tests.protocols.test_http.MockTransport.write": [], "tests.protocols.test_http.MockTransport.close": [], "tests.protocols.test_http.MockTransport.pause_reading": [], "tests.protocols.test_http.MockTransport.resume_reading": [], "tests.protocols.test_http.MockTransport.is_closing": [], "tests.protocols.test_http.MockTransport.clear_buffer": [], "tests.protocols.test_http.MockTransport.set_protocol": [], "tests.protocols.test_http.MockLoop.__init__": [], "tests.protocols.test_http.MockLoop.create_task": [], "tests.protocols.test_http.MockLoop.call_later": [], "tests.protocols.test_http.MockLoop.run_one": [], "tests.protocols.test_http.MockLoop.run_later": [], "tests.protocols.test_http.MockTask.add_done_callback": [], "tests.protocols.test_http.get_connected_protocol": ["uvicorn.protocols.http.h11_impl.H11Protocol", "uvicorn.protocols.http.httptools_impl.HttpToolsProtocol", "tests.protocols.test_http.MockLoop.__init__", "uvicorn.main.ServerState", "tests.protocols.test_http.MockTransport.__init__", "uvicorn.config.Config"], "uvicorn.protocols.http.h11_impl.H11Protocol": [], "uvicorn.protocols.http.httptools_impl.HttpToolsProtocol": [], "tests.protocols.test_http.test_get_request": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_request_logging": ["logging.getLogger", "tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_head_request": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_post_request": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_post_request.app": ["tests.response.Response.__init__"], "tests.protocols.test_http.test_keepalive": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_keepalive_timeout": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_close": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_chunked_encoding": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_chunked_encoding_empty_body": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_chunked_encoding_head_request": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_pipelined_requests": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_undersized_request": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_oversized_request": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_large_post_request": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_invalid_http": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_app_exception": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_app_exception.app": ["<builtin>.Exception"], "<builtin>.Exception": [], "tests.protocols.test_http.test_exception_during_response": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_exception_during_response.app": ["<builtin>.Exception"], "tests.protocols.test_http.test_no_response_returned": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_no_response_returned.app": [], "tests.protocols.test_http.test_partial_response_returned": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_partial_response_returned.app": [], "tests.protocols.test_http.test_duplicate_start_message": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_duplicate_start_message.app": [], "tests.protocols.test_http.test_missing_start_message": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_missing_start_message.app": [], "tests.protocols.test_http.test_message_after_body_complete": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_message_after_body_complete.app": [], "tests.protocols.test_http.test_value_returned": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_value_returned.app": [], "tests.protocols.test_http.test_early_disconnect": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_early_disconnect.app": [], "tests.protocols.test_http.test_early_response": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_read_after_response": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_read_after_response.app": ["tests.response.Response.__init__"], "tests.protocols.test_http.test_http10_request": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_http10_request.app": ["tests.response.Response.__init__"], "tests.protocols.test_http.test_root_path": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_root_path.app": ["tests.response.Response.__init__"], "tests.protocols.test_http.test_raw_path": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_raw_path.app": ["tests.response.Response.__init__"], "tests.protocols.test_http.test_max_concurrency": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_shutdown_during_request": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_shutdown_during_idle": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_100_continue_sent_when_body_consumed": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_100_continue_sent_when_body_consumed.app": ["tests.response.Response.__init__"], "tests.protocols.test_http.test_100_continue_not_sent_when_body_not_consumed": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_supported_upgrade_request": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_unsupported_ws_upgrade_request": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_unsupported_ws_upgrade_request_warn_on_auto": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol", "<builtin>.filter"], "tests.protocols.test_http.test_unsupported_ws_upgrade_request_warn_on_auto.<lambda1>": [], "<builtin>.filter": [], "tests.protocols.test_http.test_http2_upgrade_request": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.asgi3app": [], "tests.protocols.test_http.asgi2app": [], "tests.protocols.test_http.asgi2app.asgi": [], "tests.protocols.test_http.test_scopes": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_invalid_http_request": ["logging.getLogger", "tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_fragmentation": ["time.sleep", "tests.response.Response.__init__", "threading.Thread", "<builtin>.len", "tests.protocols.test_http.test_fragmentation.send_fragmented_req", "uvicorn.Server", "uvicorn.config.Config"], "tests.protocols.test_http.test_fragmentation.receive_all": [], "tests.protocols.test_http.test_fragmentation.send_fragmented_req": ["<builtin>.len", "socket.socket", "time.sleep", "tests.protocols.test_http.test_fragmentation.receive_all"], "tests.protocols.test_http.test_huge_headers_h11protocol_failure": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_huge_headers_httptools_will_pass": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_huge_headers_h11protocol_failure_with_setting": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_huge_headers_httptools": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_huge_headers_h11_max_incomplete": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "pytest.param": [], "tests.protocols.test_http.test_return_close_header": ["tests.response.Response.__init__", "tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_iterator_headers": ["tests.protocols.test_http.get_connected_protocol"], "tests.protocols.test_http.test_iterator_headers.app": ["<builtin>.iter"], "<builtin>.iter": [], "tests.protocols.test_websocket": ["pytest.mark.anyio", "pytest.mark.parametrize", "pytest.mark.skipif"], "tests.protocols.test_websocket.WebSocketResponse.__init__": [], "tests.protocols.test_websocket.WebSocketResponse.__await__": ["tests.protocols.test_websocket.WebSocketResponse.asgi"], "tests.protocols.test_websocket.WebSocketResponse.asgi": ["<builtin>.getattr"], "tests.protocols.test_websocket.test_invalid_upgrade": ["tests.utils.run_server", "httpx.AsyncClient", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_invalid_upgrade.app": [], "tests.protocols.test_websocket.test_accept_connection": ["tests.protocols.test_websocket.test_accept_connection.open_connection", "tests.utils.run_server", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_accept_connection.App.websocket_connect": [], "tests.protocols.test_websocket.test_accept_connection.open_connection": ["websockets.connect"], "tests.protocols.test_websocket.test_supports_permessage_deflate_extension": ["tests.protocols.test_websocket.test_supports_permessage_deflate_extension.open_connection", "tests.utils.run_server", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_supports_permessage_deflate_extension.App.websocket_connect": [], "tests.protocols.test_websocket.test_supports_permessage_deflate_extension.open_connection": ["websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory", "websockets.connect"], "websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory": [], "tests.protocols.test_websocket.test_can_disable_permessage_deflate_extension": ["tests.utils.run_server", "uvicorn.config.Config", "tests.protocols.test_websocket.test_can_disable_permessage_deflate_extension.open_connection"], "tests.protocols.test_websocket.test_can_disable_permessage_deflate_extension.App.websocket_connect": [], "tests.protocols.test_websocket.test_can_disable_permessage_deflate_extension.open_connection": ["websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory", "websockets.connect"], "tests.protocols.test_websocket.test_close_connection": ["tests.protocols.test_websocket.test_close_connection.open_connection", "tests.utils.run_server", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_close_connection.App.websocket_connect": [], "tests.protocols.test_websocket.test_close_connection.open_connection": ["websockets.connect"], "tests.protocols.test_websocket.test_headers": ["tests.utils.run_server", "tests.protocols.test_websocket.test_headers.open_connection", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_headers.App.websocket_connect": ["<builtin>.dict", "<builtin>.bytes"], "<builtin>.bytes": [], "tests.protocols.test_websocket.test_headers.open_connection": ["websockets.connect"], "tests.protocols.test_websocket.test_extra_headers": ["tests.utils.run_server", "tests.protocols.test_websocket.test_extra_headers.open_connection", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_extra_headers.App.websocket_connect": [], "tests.protocols.test_websocket.test_extra_headers.open_connection": ["websockets.connect"], "tests.protocols.test_websocket.test_path_and_raw_path": ["tests.utils.run_server", "tests.protocols.test_websocket.test_path_and_raw_path.open_connection", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_path_and_raw_path.App.websocket_connect": [], "tests.protocols.test_websocket.test_path_and_raw_path.open_connection": ["websockets.connect"], "tests.protocols.test_websocket.test_send_text_data_to_client": ["tests.utils.run_server", "tests.protocols.test_websocket.test_send_text_data_to_client.get_data", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_send_text_data_to_client.App.websocket_connect": [], "tests.protocols.test_websocket.test_send_text_data_to_client.get_data": ["websockets.connect"], "tests.protocols.test_websocket.test_send_binary_data_to_client": ["tests.utils.run_server", "tests.protocols.test_websocket.test_send_binary_data_to_client.get_data", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_send_binary_data_to_client.App.websocket_connect": [], "tests.protocols.test_websocket.test_send_binary_data_to_client.get_data": ["websockets.connect"], "tests.protocols.test_websocket.test_send_and_close_connection": ["tests.utils.run_server", "tests.protocols.test_websocket.test_send_and_close_connection.get_data", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_send_and_close_connection.App.websocket_connect": [], "tests.protocols.test_websocket.test_send_and_close_connection.get_data": ["websockets.connect"], "tests.protocols.test_websocket.test_send_text_data_to_server": ["tests.utils.run_server", "uvicorn.config.Config", "tests.protocols.test_websocket.test_send_text_data_to_server.send_text"], "tests.protocols.test_websocket.test_send_text_data_to_server.App.websocket_connect": [], "tests.protocols.test_websocket.test_send_text_data_to_server.App.websocket_receive": [], "tests.protocols.test_websocket.test_send_text_data_to_server.send_text": ["websockets.connect"], "tests.protocols.test_websocket.test_send_binary_data_to_server": ["tests.protocols.test_websocket.test_send_binary_data_to_server.send_text", "tests.utils.run_server", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_send_binary_data_to_server.App.websocket_connect": [], "tests.protocols.test_websocket.test_send_binary_data_to_server.App.websocket_receive": [], "tests.protocols.test_websocket.test_send_binary_data_to_server.send_text": ["websockets.connect"], "tests.protocols.test_websocket.test_send_after_protocol_close": ["tests.utils.run_server", "tests.protocols.test_websocket.test_send_after_protocol_close.get_data", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_send_after_protocol_close.App.websocket_connect": ["pytest.raises"], "tests.protocols.test_websocket.test_send_after_protocol_close.get_data": ["websockets.connect"], "tests.protocols.test_websocket.test_missing_handshake": ["pytest.raises", "tests.utils.run_server", "uvicorn.config.Config", "tests.protocols.test_websocket.test_missing_handshake.connect"], "tests.protocols.test_websocket.test_missing_handshake.app": [], "tests.protocols.test_websocket.test_missing_handshake.connect": ["websockets.connect"], "tests.protocols.test_websocket.test_send_before_handshake": ["pytest.raises", "tests.utils.run_server", "tests.protocols.test_websocket.test_send_before_handshake.connect", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_send_before_handshake.app": [], "tests.protocols.test_websocket.test_send_before_handshake.connect": ["websockets.connect"], "tests.protocols.test_websocket.test_duplicate_handshake": ["pytest.raises", "tests.utils.run_server", "tests.protocols.test_websocket.test_duplicate_handshake.connect", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_duplicate_handshake.app": [], "tests.protocols.test_websocket.test_duplicate_handshake.connect": ["websockets.connect"], "tests.protocols.test_websocket.test_asgi_return_value": ["pytest.raises", "tests.utils.run_server", "tests.protocols.test_websocket.test_asgi_return_value.connect", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_asgi_return_value.app": [], "tests.protocols.test_websocket.test_asgi_return_value.connect": ["websockets.connect"], "tests.protocols.test_websocket.test_app_close": ["pytest.raises", "tests.utils.run_server", "uvicorn.config.Config", "tests.protocols.test_websocket.test_app_close.websocket_session"], "tests.protocols.test_websocket.test_app_close.app": [], "tests.protocols.test_websocket.test_app_close.websocket_session": ["websockets.connect"], "tests.protocols.test_websocket.test_client_close": ["tests.utils.run_server", "tests.protocols.test_websocket.test_client_close.websocket_session", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_client_close.app": [], "tests.protocols.test_websocket.test_client_close.websocket_session": ["websockets.connect"], "tests.protocols.test_websocket.test_client_connection_lost": ["asyncio.sleep", "tests.utils.run_server", "websockets.client.connect", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_client_connection_lost.app": [], "websockets.client.connect": [], "tests.protocols.test_websocket.test_connection_lost_before_handshake_complete": ["asyncio.Event", "tests.utils.run_server", "tests.protocols.test_websocket.test_connection_lost_before_handshake_complete.websocket_session", "asyncio.create_task", "asyncio.sleep", "uvicorn.config.Config"], "asyncio.Event": [], "tests.protocols.test_websocket.test_connection_lost_before_handshake_complete.app": [], "tests.protocols.test_websocket.test_connection_lost_before_handshake_complete.websocket_session": ["httpx.AsyncClient"], "tests.protocols.test_websocket.test_send_close_on_server_shutdown": ["asyncio.Event", "tests.utils.run_server", "asyncio.create_task", "asyncio.sleep", "tests.protocols.test_websocket.test_send_close_on_server_shutdown.websocket_session", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_send_close_on_server_shutdown.app": [], "tests.protocols.test_websocket.test_send_close_on_server_shutdown.websocket_session": ["websockets.client.connect"], "tests.protocols.test_websocket.test_subprotocols": ["tests.utils.run_server", "tests.protocols.test_websocket.test_subprotocols.get_subprotocol", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_subprotocols.App.websocket_connect": [], "tests.protocols.test_websocket.test_subprotocols.get_subprotocol": ["websockets.connect"], "tests.protocols.test_websocket.test_send_binary_data_to_server_bigger_than_default": ["pytest.raises", "tests.utils.run_server", "uvicorn.config.Config", "tests.protocols.test_websocket.test_send_binary_data_to_server_bigger_than_default.send_text"], "tests.protocols.test_websocket.test_send_binary_data_to_server_bigger_than_default.App.websocket_connect": [], "tests.protocols.test_websocket.test_send_binary_data_to_server_bigger_than_default.App.websocket_receive": [], "tests.protocols.test_websocket.test_send_binary_data_to_server_bigger_than_default.send_text": ["websockets.connect"], "tests.protocols.test_websocket.test_server_reject_connection": ["tests.utils.run_server", "tests.protocols.test_websocket.test_server_reject_connection.websocket_session", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_server_reject_connection.app": [], "tests.protocols.test_websocket.test_server_reject_connection.websocket_session": ["websockets.connect"], "tests.protocols.test_websocket.test_server_can_read_messages_in_buffer_after_close": ["tests.utils.run_server", "tests.protocols.test_websocket.test_server_can_read_messages_in_buffer_after_close.send_text", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_server_can_read_messages_in_buffer_after_close.App.websocket_connect": ["asyncio.sleep"], "tests.protocols.test_websocket.test_server_can_read_messages_in_buffer_after_close.App.websocket_disconnect": [], "tests.protocols.test_websocket.test_server_can_read_messages_in_buffer_after_close.App.websocket_receive": [], "tests.protocols.test_websocket.test_server_can_read_messages_in_buffer_after_close.send_text": ["websockets.connect"], "tests.protocols.test_websocket.test_default_server_headers": ["tests.utils.run_server", "uvicorn.config.Config", "tests.protocols.test_websocket.test_default_server_headers.open_connection"], "tests.protocols.test_websocket.test_default_server_headers.App.websocket_connect": [], "tests.protocols.test_websocket.test_default_server_headers.open_connection": ["websockets.connect"], "tests.protocols.test_websocket.test_no_server_headers": ["tests.utils.run_server", "tests.protocols.test_websocket.test_no_server_headers.open_connection", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_no_server_headers.App.websocket_connect": [], "tests.protocols.test_websocket.test_no_server_headers.open_connection": ["websockets.connect"], "tests.protocols.test_websocket.test_no_date_header": ["tests.utils.run_server", "uvicorn.config.Config", "tests.protocols.test_websocket.test_no_date_header.open_connection"], "tests.protocols.test_websocket.test_no_date_header.App.websocket_connect": [], "tests.protocols.test_websocket.test_no_date_header.open_connection": ["websockets.connect"], "tests.protocols.test_websocket.test_multiple_server_header": ["tests.protocols.test_websocket.test_multiple_server_header.open_connection", "tests.utils.run_server", "uvicorn.config.Config"], "tests.protocols.test_websocket.test_multiple_server_header.App.websocket_connect": [], "tests.protocols.test_websocket.test_multiple_server_header.open_connection": ["websockets.connect"]}