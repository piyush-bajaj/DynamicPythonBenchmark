{"tests.test_bulk": [], "tests.test_bulk.BrokenTask.__call__": [], "tests.test_bulk.TestBulk.test_worker_error": ["fs._bulk._Task.__init__", "fs._bulk.Copier", "unittest.TestCase.assertRaises"], "unittest.TestCase.assertRaises": [], "fs._bulk.Copier": [], "fs._bulk._Task.__init__": [], "tests.test_ftpfs": ["socket.setdefaulttimeout"], "socket.setdefaulttimeout": [], "tests.test_ftpfs.TestFTPFSClass.test_parse_ftp_time": ["unittest.TestCase.assertIsNone", "unittest.TestCase.assertEqual", "fs.ftpfs.FTPFS._parse_ftp_time"], "fs.ftpfs.FTPFS._parse_ftp_time": [], "unittest.TestCase.assertIsNone": [], "unittest.TestCase.assertEqual": [], "tests.test_ftpfs.TestFTPFSClass.test_parse_mlsx": ["fs.ftpfs.FTPFS._parse_mlsx", "unittest.TestCase.assertEqual", "<builtin>.list"], "fs.ftpfs.FTPFS._parse_mlsx": [], "<builtin>.list": [], "tests.test_ftpfs.TestFTPFSClass.test_parse_mlsx_type": ["fs.ftpfs.FTPFS._parse_mlsx", "unittest.TestCase.assertEqual", "<builtin>.list"], "tests.test_ftpfs.TestFTPFSClass.test_opener": ["fs.opener.open_fs", "unittest.TestCase.assertIsInstance", "unittest.TestCase.assertEqual", "unittest.TestCase.assertTrue"], "fs.opener.open_fs": [], "unittest.TestCase.assertIsInstance": [], "unittest.TestCase.assertTrue": [], "tests.test_ftpfs.TestFTPErrors.test_manager": ["fs.opener.open_fs", "ftplib.error_perm", "ftplib.error_temp", "fs.ftpfs.ftp_errors", "unittest.TestCase.assertRaises"], "fs.ftpfs.ftp_errors": [], "ftplib.error_temp": [], "ftplib.error_perm": [], "tests.test_ftpfs.TestFTPErrors.test_manager_with_host": ["<builtin>.str", "fs.opener.open_fs", "unittest.TestCase.assertEqual", "fs.ftpfs.ftp_errors", "unittest.TestCase.assertRaises"], "<builtin>.str": [], "tests.test_ftpfs.TestFTPFS.setUpClass": ["uuid.uuid4", "tempfile.mkdtemp", "os.path.join", "six.text_type", "os.mkdir", "platform.system", "pyftpdlib.test.ThreadedTestFTPd", "<builtin>.RuntimeError", "time.sleep", "<builtin>.super", "pyftpdlib.authorizers.DummyAuthorizer"], "<builtin>.super": [], "tempfile.mkdtemp": [], "uuid.uuid4": [], "six.text_type": [], "os.path.join": [], "os.mkdir": [], "pyftpdlib.test.ThreadedTestFTPd": [], "pyftpdlib.authorizers.DummyAuthorizer": [], "platform.system": [], "time.sleep": [], "<builtin>.RuntimeError": [], "tests.test_ftpfs.TestFTPFS.tearDownClass": ["<builtin>.super", "shutil.rmtree"], "shutil.rmtree": [], "tests.test_ftpfs.TestFTPFS.make_fs": ["fs.opener.open_fs"], "tests.test_ftpfs.TestFTPFS.tearDown": ["<builtin>.super", "os.mkdir", "shutil.rmtree"], "tests.test_ftpfs.TestFTPFS.test_ftp_url": ["unittest.TestCase.assertEqual"], "tests.test_ftpfs.TestFTPFS.test_geturl": ["unittest.TestCase.assertEqual"], "tests.test_ftpfs.TestFTPFS.test_setinfo": ["calendar.timegm", "unittest.TestCase.assertEqual", "datetime.timedelta"], "datetime.timedelta": [], "calendar.timegm": [], "tests.test_ftpfs.TestFTPFS.test_host": ["unittest.TestCase.assertEqual"], "tests.test_ftpfs.TestFTPFS.test_connection_error": ["fs.ftpfs.FTPFS", "unittest.TestCase.assertRaises"], "fs.ftpfs.FTPFS": [], "tests.test_ftpfs.TestFTPFS.test_getmeta_unicode_path": ["unittest.TestCase.assertTrue", "fs.test.FSTestCases.assertFalse"], "fs.test.FSTestCases.assertFalse": [], "tests.test_ftpfs.TestFTPFS.test_getinfo_modified": ["unittest.TestCase.assertEqual", "fs.test.FSTestCases.assertIn"], "fs.test.FSTestCases.assertIn": [], "tests.test_ftpfs.TestFTPFS.test_opener_path": ["fs.opener.open_fs", "unittest.TestCase.assertIsInstance", "unittest.TestCase.assertEqual"], "tests.test_ftpfs.TestFTPFS.test_create": ["fs.opener.open_fs", "unittest.TestCase.assertTrue", "fs.path.join", "unittest.TestCase.assertRaises"], "fs.path.join": [], "tests.test_ftpfs.TestFTPFS.test_upload_connection": ["mock.patch.object", "unittest.TestCase.assertEqual", "six.BytesIO", "unittest.mock.patch.object"], "mock.patch.object": [], "unittest.mock.patch.object": [], "six.BytesIO": [], "tests.test_ftpfs.TestFTPFSNoMLSD.make_fs": ["<builtin>.super"], "tests.test_ftpfs.TestFTPFSNoMLSD.test_features": [], "tests.test_ftpfs.TestAnonFTPFS.setUpClass": ["uuid.uuid4", "tempfile.mkdtemp", "os.path.join", "six.text_type", "os.mkdir", "platform.system", "pyftpdlib.test.ThreadedTestFTPd", "<builtin>.RuntimeError", "time.sleep", "<builtin>.super", "pyftpdlib.authorizers.DummyAuthorizer"], "tests.test_ftpfs.TestAnonFTPFS.tearDownClass": ["<builtin>.super", "shutil.rmtree"], "tests.test_ftpfs.TestAnonFTPFS.make_fs": ["fs.opener.open_fs"], "tests.test_ftpfs.TestAnonFTPFS.tearDown": ["<builtin>.super", "os.mkdir", "shutil.rmtree"], "tests.test_ftpfs.TestAnonFTPFS.test_ftp_url": ["unittest.TestCase.assertEqual"], "tests.test_ftpfs.TestAnonFTPFS.test_geturl": ["unittest.TestCase.assertEqual"], "tests.test_mode": [], "tests.test_mode.TestMode.test_checks": ["unittest.TestCase.assertTrue", "fs.mode.check_writable", "fs.mode.check_readable", "unittest.TestCase.assertFalse"], "fs.mode.check_readable": [], "unittest.TestCase.assertFalse": [], "fs.mode.check_writable": [], "tests.test_mode.TestMode.test_mode_object": ["unittest.TestCase.assertFalse", "unittest.TestCase.assertTrue", "six.text_type", "unittest.TestCase.assertEqual", "fs.mode.Mode", "<builtin>.repr", "unittest.TestCase.assertRaises"], "fs.mode.Mode": [], "<builtin>.repr": [], "tests.test_archives": [], "tests.test_archives.ArchiveTestCases.make_source_fs": ["fs.opener.open_fs"], "tests.test_archives.ArchiveTestCases.build_source": [], "tests.test_archives.ArchiveTestCases.compress": [], "tests.test_archives.ArchiveTestCases.load_archive": [], "tests.test_archives.ArchiveTestCases.remove_archive": [], "tests.test_archives.ArchiveTestCases.setUp": ["tests.test_archives.ArchiveTestCases.build_source", "tests.test_archives.ArchiveTestCases.compress", "tests.test_archives.ArchiveTestCases.load_archive", "tests.test_archives.ArchiveTestCases.make_source_fs"], "tests.test_archives.ArchiveTestCases.tearDown": ["tests.test_archives.ArchiveTestCases.remove_archive"], "tests.test_archives.ArchiveTestCases.test_repr": ["<builtin>.repr"], "tests.test_archives.ArchiveTestCases.test_str": ["six.text_type"], "tests.test_archives.ArchiveTestCases.test_readonly": [], "tests.test_archives.ArchiveTestCases.test_getinfo": ["stat.S_IMODE", "os.stat"], "os.stat": [], "stat.S_IMODE": [], "tests.test_archives.ArchiveTestCases.test_listdir": ["<builtin>.sorted"], "<builtin>.sorted": [], "tests.test_archives.ArchiveTestCases.test_open": [], "tests.test_archives.ArchiveTestCases.test_gets": [], "tests.test_archives.ArchiveTestCases.test_walk_files": ["fs.walk.walk_files", "<builtin>.sorted"], "fs.walk.walk_files": [], "tests.test_archives.ArchiveTestCases.test_implied_dir": [], "tests.test_osfs": [], "tests.test_osfs.TestOSFS.setUpClass": ["warnings.simplefilter"], "warnings.simplefilter": [], "tests.test_osfs.TestOSFS.tearDownClass": ["warnings.simplefilter"], "tests.test_osfs.TestOSFS.make_fs": ["fs.osfs.OSFS", "tempfile.mkdtemp"], "fs.osfs.OSFS": [], "tests.test_osfs.TestOSFS.destroy_fs": ["shutil.rmtree"], "tests.test_osfs.TestOSFS._get_real_path": ["fs.path.relpath", "os.path.join"], "fs.path.relpath": [], "tests.test_osfs.TestOSFS.assert_exists": ["tests.test_osfs.TestOSFS._get_real_path", "unittest.TestCase.assertTrue", "os.path.exists"], "os.path.exists": [], "tests.test_osfs.TestOSFS.assert_not_exists": ["tests.test_osfs.TestOSFS._get_real_path", "fs.test.FSTestCases.assertFalse", "os.path.exists"], "tests.test_osfs.TestOSFS.assert_isfile": ["tests.test_osfs.TestOSFS._get_real_path", "unittest.TestCase.assertTrue", "os.path.isfile"], "os.path.isfile": [], "tests.test_osfs.TestOSFS.assert_isdir": ["tests.test_osfs.TestOSFS._get_real_path", "unittest.TestCase.assertTrue", "os.path.isdir"], "os.path.isdir": [], "tests.test_osfs.TestOSFS.assert_bytes": ["<builtin>.isinstance", "unittest.TestCase.assertIsInstance", "io.open", "unittest.TestCase.assertEqual", "tests.test_osfs.TestOSFS._get_real_path"], "<builtin>.isinstance": [], "io.open": [], "tests.test_osfs.TestOSFS.assert_text": ["<builtin>.isinstance", "unittest.TestCase.assertIsInstance", "io.open", "unittest.TestCase.assertEqual", "tests.test_osfs.TestOSFS._get_real_path"], "tests.test_osfs.TestOSFS.test_not_exists": ["fs.osfs.OSFS", "unittest.TestCase.assertRaises"], "tests.test_osfs.TestOSFS.test_expand_vars": ["fs.osfs.OSFS", "fs.test.FSTestCases.assertIn", "fs.test.FSTestCases.assertNotIn"], "fs.test.FSTestCases.assertNotIn": [], "tests.test_osfs.TestOSFS.test_copy_preserve_time": ["unittest.TestCase.assertTrue", "fs.test.FSTestCases.assertAlmostEqual", "time.time"], "time.time": [], "fs.test.FSTestCases.assertAlmostEqual": [], "unittest.skipUnless": [], "tests.test_osfs.TestOSFS": ["unittest.skipIf", "unittest.skipUnless", "<builtin>.hasattr"], "unittest.skipIf": [], "tests.test_osfs.TestOSFS.test_copy_sendfile": ["unittest.TestCase.assertRaises", "unittest.mock.patch.object", "<builtin>.OSError", "mock.patch.object", "fs.test.FSTestCases.test_copy"], "<builtin>.OSError": [], "fs.test.FSTestCases.test_copy": [], "tests.test_osfs.TestOSFS.test_create": ["fs.osfs.OSFS", "tempfile.mkdtemp", "os.path.join", "unittest.TestCase.assertTrue", "shutil.rmtree", "tempfile.NamedTemporaryFile", "os.path.isdir", "unittest.TestCase.assertRaises"], "tempfile.NamedTemporaryFile": [], "tests.test_osfs.TestOSFS.test_unicode_paths": ["fs.osfs.OSFS", "tempfile.mkdtemp", "os.path.join", "unittest.TestCase.assertTrue", "os.mkdir", "shutil.rmtree", "os.path.isdir"], "<builtin>.hasattr": [], "tests.test_osfs.TestOSFS.test_symlinks": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.test.FSTestCases.assertFalse", "<builtin>.open", "os.symlink", "tests.test_osfs.TestOSFS._get_real_path", "fs.test.FSTestCases.assertIn"], "<builtin>.open": [], "os.symlink": [], "tests.test_osfs.TestOSFS.test_validatepath": ["unittest.TestCase.assertRaises", "mock.patch", "unittest.mock.patch"], "mock.patch": [], "unittest.mock.patch": [], "tests.test_osfs.TestOSFS.test_validatepath.<lambda1>": [], "tests.test_osfs.TestOSFS.test_consume_geturl": ["fs.path.dirname", "unittest.TestCase.assertTrue", "fs.test.FSTestCases.assertFalse", "fs.open_fs"], "fs.path.dirname": [], "fs.open_fs": [], "tests.test_osfs.TestOSFS.test_complex_geturl": ["unittest.TestCase.assertEqual"], "tests.test_osfs.TestOSFS.test_geturl_return_no_url": ["unittest.TestCase.assertRaises"], "tests.test_lrucache": [], "tests.test_lrucache.TestLRUCache.setUp": [], "tests.test_lrucache.TestLRUCache.test_lrucache": ["unittest.TestCase.assertIn", "unittest.TestCase.assertNotIn"], "unittest.TestCase.assertIn": [], "unittest.TestCase.assertNotIn": [], "tests.test_doctest": ["tests.test_doctest.make_wrapper", "<builtin>.setattr", "tests.test_doctest._load_tests", "unittest.TestSuite"], "tests.test_doctest._home_fs": ["fs.memoryfs.MemoryFS"], "fs.memoryfs.MemoryFS": [], "tests.test_doctest._open_fs": ["fs.opener.parse", "tests.test_doctest._home_fs", "<builtin>.RuntimeError", "fs.memoryfs.MemoryFS"], "fs.opener.parse": [], "tests.test_doctest._my_fs": ["fs.memoryfs.MemoryFS"], "tests.test_doctest._open": ["tempfile.NamedTemporaryFile"], "tests.test_doctest._load_tests_from_module": ["<builtin>.isinstance", "<builtin>.dir", "<builtin>.getattr", "doctest.DocTestSuite"], "<builtin>.getattr": [], "<builtin>.dir": [], "doctest.DocTestSuite": [], "tests.test_doctest._load_tests": ["<builtin>.iter", "tests.test_doctest._my_fs", "doctest.DocTestSuite", "<builtin>.dict", "pkgutil.walk_packages", "importlib.import_module"], "tests.test_doctest._load_tests.setUp": ["warnings.simplefilter", "mock.patch.object", "unittest.mock.patch.object"], "tests.test_doctest._load_tests.tearDown": ["warnings.simplefilter"], "<builtin>.iter": [], "pkgutil.walk_packages": [], "importlib.import_module": [], "<builtin>.dict": [], "tests.test_doctest._load_tests.<lambda1>": ["fs.memoryfs.MemoryFS"], "tests.test_doctest._load_tests.<lambda2>": [], "tests.test_doctest.make_wrapper": [], "tests.test_doctest.make_wrapper._test_wrapper": [], "unittest.TestSuite": [], "<builtin>.setattr": [], "tests.test_time": [], "tests.test_time.TestEpoch.test_epoch_to_datetime": ["unittest.TestCase.assertEqual", "datetime.datetime", "fs.time.epoch_to_datetime"], "fs.time.epoch_to_datetime": [], "datetime.datetime": [], "tests.test_time.TestEpoch.test_datetime_to_epoch": ["fs.time.datetime_to_epoch", "datetime.datetime", "unittest.TestCase.assertEqual"], "fs.time.datetime_to_epoch": [], "tests.test_wrapfs": [], "tests.test_wrapfs.TestWrapFS.setUp": ["fs.opener.open_fs", "fs.wrapfs.WrapFS.__init__"], "fs.wrapfs.WrapFS.__init__": [], "tests.test_wrapfs.TestWrapFS.test_encode": ["unittest.TestCase.assertEqual", "fs.wrapfs.WrapFS.delegate_fs", "unittest.TestCase.assertIs", "fs.wrapfs.WrapFS.delegate_path"], "fs.wrapfs.WrapFS.delegate_path": [], "fs.wrapfs.WrapFS.delegate_fs": [], "unittest.TestCase.assertIs": [], "tests.test_wrapfs.TestWrapFS.test_repr": ["unittest.TestCase.assertEqual", "<builtin>.repr"], "tests.test_wrapfs.TestWrapFS.test_str": ["fs.opener.open_fs", "six.text_type", "unittest.TestCase.assertEqual", "fs.wrapfs.WrapFS"], "fs.wrapfs.WrapFS": [], "tests.mark": [], "tests.mark.slow": [], "tests.test_errors": [], "tests.test_errors.TestErrors.test_str": ["six.text_type", "unittest.TestCase.assertEqual", "<builtin>.repr", "fs.errors.FSError"], "fs.errors.FSError": [], "tests.test_errors.TestErrors.test_unsupported": ["fs.errors.Unsupported", "six.text_type", "unittest.TestCase.assertEqual", "<builtin>.repr"], "fs.errors.Unsupported": [], "tests.test_errors.TestErrors.test_raise_in_multiprocessing": ["multiprocessing.Pool", "unittest.TestCase.assertRaises"], "multiprocessing.Pool": [], "tests.test_errors._multiprocessing_test_task": [], "tests.test_errors.TestCreateFailed.test_catch_all": ["unittest.TestCase.assertIsInstance", "tests.test_errors.TestCreateFailed.test_catch_all.test", "unittest.TestCase.assertNotIsInstance", "fs.errors.CreateFailed.catch_all", "<builtin>.enumerate"], "fs.errors.CreateFailed.catch_all": [], "tests.test_errors.TestCreateFailed.test_catch_all.test": [], "<builtin>.enumerate": [], "unittest.TestCase.assertNotIsInstance": [], "tests.test_memoryfs": [], "tests.test_memoryfs.TestMemoryFS.make_fs": ["fs.memoryfs.MemoryFS"], "tests.test_memoryfs.TestMemoryFS._create_many_files": ["<builtin>.str", "posixpath.join", "<builtin>.range"], "<builtin>.range": [], "posixpath.join": [], "tests.test_memoryfs.TestMemoryFS": ["unittest.skipUnless"], "tests.test_memoryfs.TestMemoryFS.test_close_mem_free": ["tracemalloc.Filter", "tests.test_memoryfs.TestMemoryFS._create_many_files", "fs.test.FSTestCases.assertLess", "tracemalloc.stop", "tracemalloc.take_snapshot", "tracemalloc.start", "fs.test.FSTestCases.assertGreater"], "tracemalloc.Filter": [], "tracemalloc.start": [], "tracemalloc.take_snapshot": [], "tracemalloc.stop": [], "fs.test.FSTestCases.assertGreater": [], "fs.test.FSTestCases.assertLess": [], "tests.test_memoryfs.TestMemoryFS.test_copy_preserve_time": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual"], "tests.test_memoryfs.TestMemoryFile.setUp": ["fs.memoryfs.MemoryFS"], "tests.test_memoryfs.TestMemoryFile.tearDown": [], "tests.test_memoryfs.TestMemoryFile.test_readline_writing": ["unittest.TestCase.assertRaises"], "tests.test_memoryfs.TestMemoryFile.test_readinto_writing": ["unittest.TestCase.assertRaises", "<builtin>.bytearray"], "<builtin>.bytearray": [], "tests.test_mountfs": [], "tests.test_mountfs.TestMountFS.make_fs": ["fs.memoryfs.MemoryFS", "fs.mountfs.MountFS"], "fs.mountfs.MountFS": [], "tests.test_mountfs.TestMountFS2.make_fs": ["fs.memoryfs.MemoryFS", "fs.mountfs.MountFS"], "tests.test_mountfs.TestMountFSBehaviours.test_bad_mount": ["unittest.TestCase.assertRaises", "fs.mountfs.MountFS"], "tests.test_mountfs.TestMountFSBehaviours.test_listdir": ["fs.mountfs.MountFS", "fs.memoryfs.MemoryFS", "unittest.TestCase.assertEqual", "<builtin>.sorted", "fs.tempfs.TempFS", "unittest.TestCase.assertRaises"], "fs.tempfs.TempFS": [], "tests.test_mountfs.TestMountFSBehaviours.test_auto_close": ["unittest.TestCase.assertTrue", "fs.memoryfs.MemoryFS", "unittest.TestCase.assertFalse", "fs.mountfs.MountFS"], "tests.test_mountfs.TestMountFSBehaviours.test_no_auto_close": ["fs.memoryfs.MemoryFS", "unittest.TestCase.assertFalse", "fs.mountfs.MountFS"], "tests.test_mountfs.TestMountFSBehaviours.test_empty": ["unittest.TestCase.assertEqual", "fs.mountfs.MountFS"], "tests.test_mountfs.TestMountFSBehaviours.test_mount_self": ["unittest.TestCase.assertRaises", "fs.mountfs.MountFS"], "tests.test_mountfs.TestMountFSBehaviours.test_desc": ["fs.mountfs.MountFS"], "tests.test_encoding": ["platform.system"], "fs.fsdecode": [], "tests.test_encoding.TestEncoding": ["fs.fsdecode"], "tests.test_encoding.TestEncoding.setUp": ["<builtin>.open", "tempfile.mkdtemp", "os.path.join"], "tests.test_encoding.TestEncoding.tearDown": ["shutil.rmtree"], "tests.test_encoding.TestEncoding.test_open": ["unittest.TestCase.assertTrue", "fs.osfs.OSFS", "unittest.TestCase.assertEqual", "unittest.TestCase.assertFalse"], "tests.test_encoding.TestEncoding.test_listdir": ["fs.osfs.OSFS", "unittest.TestCase.assertEqual"], "tests.test_encoding.TestEncoding.test_scandir": ["unittest.TestCase.assertIsInstance", "fs.osfs.OSFS", "unittest.TestCase.assertEqual"], "tests.test_ftp_parse": ["time.struct_time"], "time.struct_time": [], "tests.test_ftp_parse.TestFTPParse": ["mock.patch", "unittest.mock.patch"], "tests.test_ftp_parse.TestFTPParse.test_parse_time": ["unittest.TestCase.assertEqual", "fs._ftp_parse._parse_time"], "fs._ftp_parse._parse_time": [], "tests.test_ftp_parse.TestFTPParse.test_parse": ["unittest.TestCase.assertListEqual", "fs._ftp_parse.parse"], "fs._ftp_parse.parse": [], "unittest.TestCase.assertListEqual": [], "tests.test_ftp_parse.TestFTPParse.test_parse_line": ["fs._ftp_parse.parse_line", "unittest.TestCase.assertIs"], "fs._ftp_parse.parse_line": [], "tests.test_ftp_parse.TestFTPParse.test_decode_linux": ["unittest.TestCase.assertListEqual", "textwrap.dedent", "fs._ftp_parse.parse"], "textwrap.dedent": [], "tests.test_ftp_parse.TestFTPParse.test_decode_windowsnt": ["unittest.TestCase.assertEqual", "textwrap.dedent", "fs._ftp_parse.parse"], "tests.test_ftp_parse.TestFTPParse.test_decode_linux_suid": ["unittest.TestCase.assertListEqual", "textwrap.dedent", "fs._ftp_parse.parse"], "tests.test_ftp_parse.TestFTPParse.test_decode_linux_sticky": ["unittest.TestCase.assertListEqual", "textwrap.dedent", "fs._ftp_parse.parse"], "tests.test_opener": [], "tests.test_opener.TestParse.test_registry_repr": ["<builtin>.str", "<builtin>.repr"], "tests.test_opener.TestParse.test_parse_not_url": ["fs.opener.parse", "unittest.TestCase.assertRaises"], "tests.test_opener.TestParse.test_parse_simple": ["fs.opener.parse", "unittest.TestCase.assertEqual", "fs.opener.parse.ParseResult"], "fs.opener.parse.ParseResult": [], "tests.test_opener.TestParse.test_parse_credentials": ["fs.opener.parse", "unittest.TestCase.assertEqual", "fs.opener.parse.ParseResult"], "tests.test_opener.TestParse.test_parse_path": ["fs.opener.parse", "unittest.TestCase.assertEqual", "fs.opener.parse.ParseResult"], "tests.test_opener.TestParse.test_parse_params": ["fs.opener.parse", "unittest.TestCase.assertEqual", "fs.opener.parse.ParseResult"], "tests.test_opener.TestParse.test_parse_params_multiple": ["fs.opener.parse", "unittest.TestCase.assertEqual", "fs.opener.parse.ParseResult"], "tests.test_opener.TestParse.test_parse_params_timeout": ["fs.opener.parse", "unittest.TestCase.assertEqual", "fs.opener.parse.ParseResult"], "tests.test_opener.TestParse.test_parse_user_password_proxy": ["fs.opener.parse", "unittest.TestCase.assertEqual", "fs.opener.parse.ParseResult"], "tests.test_opener.TestParse.test_parse_user_password_decode": ["fs.opener.parse", "unittest.TestCase.assertEqual", "fs.opener.parse.ParseResult"], "tests.test_opener.TestParse.test_parse_resource_decode": ["fs.opener.parse", "unittest.TestCase.assertEqual", "fs.opener.parse.ParseResult"], "tests.test_opener.TestParse.test_parse_params_decode": ["fs.opener.parse", "unittest.TestCase.assertEqual", "fs.opener.parse.ParseResult"], "tests.test_opener.TestRegistry.test_protocols": ["unittest.TestCase.assertIsInstance"], "tests.test_opener.TestRegistry.test_registry_protocols": ["pkg_resources.EntryPoint", "unittest.mock.patch.object", "unittest.mock.MagicMock", "mock.MagicMock", "unittest.TestCase.assertIn", "mock.patch.object"], "pkg_resources.EntryPoint": [], "unittest.mock.MagicMock": [], "mock.MagicMock": [], "tests.test_opener.TestRegistry.test_unknown_protocol": ["fs.opener.open_fs", "unittest.TestCase.assertRaises"], "tests.test_opener.TestRegistry.test_entry_point_load_error": ["<builtin>.ValueError", "unittest.TestCase.assertRaises", "<builtin>.iter", "mock.patch", "<builtin>.str", "fs.opener.open_fs", "unittest.mock.MagicMock", "unittest.TestCase.assertEqual", "mock.MagicMock", "unittest.mock.patch"], "<builtin>.ValueError": [], "tests.test_opener.TestRegistry.test_entry_point_type_error": ["unittest.TestCase.assertRaises", "<builtin>.iter", "mock.patch", "<builtin>.str", "fs.opener.open_fs", "unittest.mock.MagicMock", "unittest.TestCase.assertEqual", "mock.MagicMock", "unittest.mock.patch"], "tests.test_opener.TestRegistry.test_entry_point_create_error": ["unittest.TestCase.assertRaises", "<builtin>.iter", "mock.patch", "<builtin>.str", "fs.opener.open_fs", "unittest.mock.MagicMock", "unittest.TestCase.assertEqual", "mock.MagicMock", "unittest.mock.patch"], "tests.test_opener.TestRegistry.test_entry_point_create_error.BadOpener.__init__": ["<builtin>.ValueError"], "tests.test_opener.TestRegistry.test_entry_point_create_error.BadOpener.open_fs": [], "tests.test_opener.TestRegistry.test_install": ["unittest.TestCase.assertIn", "unittest.TestCase.assertNotIn", "fs.opener.registry.Registry"], "fs.opener.registry.Registry": [], "tests.test_opener.TestRegistry.test_install.FooOpener.open_fs": [], "tests.test_opener.TestManageFS.test_manage_fs_url": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertIsInstance", "fs.opener.manage_fs"], "fs.opener.manage_fs": [], "tests.test_opener.TestManageFS.test_manage_fs_obj": ["unittest.TestCase.assertIs", "fs.memoryfs.MemoryFS", "unittest.TestCase.assertFalse", "fs.opener.manage_fs"], "tests.test_opener.TestManageFS.test_manage_fs_error": ["unittest.TestCase.assertTrue", "fs.opener.manage_fs"], "tests.test_opener.TestOpeners.setUp": ["tempfile.mkdtemp"], "tests.test_opener.TestOpeners.tearDown": ["shutil.rmtree"], "tests.test_opener.TestOpeners.test_repr": ["<builtin>.repr", "pkg_resources.iter_entry_points"], "pkg_resources.iter_entry_points": [], "tests.test_opener.TestOpeners.test_open_osfs": ["fs.opener.open_fs", "unittest.TestCase.assertIsInstance"], "tests.test_opener.TestOpeners.test_open_memfs": ["fs.opener.open_fs", "unittest.TestCase.assertIsInstance"], "tests.test_opener.TestOpeners.test_open_zipfs": ["fs.opener.open_fs", "tempfile.mkstemp", "unittest.TestCase.assertEqual", "os.close", "os.remove"], "tempfile.mkstemp": [], "os.close": [], "os.remove": [], "tests.test_opener.TestOpeners.test_open_tarfs": ["fs.opener.open_fs", "tempfile.mkstemp", "unittest.TestCase.assertEqual", "os.close", "os.remove"], "tests.test_opener.TestOpeners.test_open_fs": ["fs.opener.open_fs", "unittest.TestCase.assertEqual"], "tests.test_opener.TestOpeners": ["mock.patch", "unittest.mock.patch"], "tests.test_opener.TestOpeners.test_open_userdata": ["fs.opener.open_fs", "unittest.TestCase.assertEqual", "unittest.TestCase.assertRaises"], "tests.test_opener.TestOpeners.test_open_userdata_no_version": ["fs.opener.open_fs", "unittest.TestCase.assertEqual"], "tests.test_opener.TestOpeners.test_user_data_opener": ["unittest.TestCase.assertIsInstance", "unittest.TestCase.assertEqual", "fs.open_fs"], "tests.test_opener.TestOpeners.test_open_ftp": ["fs.open_fs"], "tests.test_opener.TestOpeners.test_open_ftps": ["fs.open_fs"], "tests.test_opener.TestOpeners.test_open_ftp_proxy": ["fs.open_fs"], "tests.test_info": [], "tests.test_info.TestInfo.test_empty": ["unittest.TestCase.assertIsNone", "fs.info.Info", "unittest.TestCase.assertEqual", "unittest.TestCase.assertFalse"], "fs.info.Info": [], "tests.test_info.TestInfo.test_access": ["unittest.TestCase.assertIsInstance", "fs.info.Info", "unittest.TestCase.assertEqual", "fs.permissions.Permissions"], "fs.permissions.Permissions": [], "tests.test_info.TestInfo.test_link": ["unittest.TestCase.assertTrue", "fs.info.Info", "unittest.TestCase.assertEqual"], "tests.test_info.TestInfo.test_basic": ["unittest.TestCase.assertIsInstance", "unittest.TestCase.assertFalse", "unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.info.Info", "<builtin>.repr"], "tests.test_info.TestInfo.test_details": ["unittest.TestCase.assertIsInstance", "fs.time.datetime_to_epoch", "unittest.TestCase.assertEqual", "<builtin>.int", "datetime.datetime", "fs.info.Info"], "<builtin>.int": [], "tests.test_info.TestInfo.test_has_namespace": ["unittest.TestCase.assertTrue", "fs.info.Info", "unittest.TestCase.assertFalse"], "tests.test_info.TestInfo.test_copy": ["fs.info.Info", "unittest.TestCase.assertEqual"], "tests.test_info.TestInfo.test_get": ["unittest.TestCase.assertIsNone", "fs.info.Info"], "tests.test_info.TestInfo.test_suffix": ["fs.info.Info", "unittest.TestCase.assertEqual"], "tests.test_tempfs": [], "tests.test_tempfs.TestTempFS.make_fs": ["fs.tempfs.TempFS"], "tests.test_tempfs.TestTempFS.test_clean": ["fs.tempfs.TempFS", "test_osfs.TestOSFS.assertTrue", "os.path.isdir", "test_osfs.TestOSFS.assertFalse"], "test_osfs.TestOSFS.assertTrue": [], "test_osfs.TestOSFS.assertFalse": [], "tests.test_tempfs.TestTempFS": ["mock.patch", "unittest.mock.patch"], "tests.test_tempfs.TestTempFS.test_clean_error": ["<builtin>.Exception", "fs.tempfs.TempFS", "test_osfs.TestOSFS.assertRaises"], "<builtin>.Exception": [], "test_osfs.TestOSFS.assertRaises": [], "tests.test_fscompat": [], "tests.test_fscompat.PathMock.__init__": [], "tests.test_fscompat.PathMock.__fspath__": [], "tests.test_fscompat.BrokenPathMock.__init__": [], "tests.test_fscompat.BrokenPathMock.__fspath__": [], "tests.test_fscompat.TestFSCompact.test_fspath": ["fs._fscompat.fspath", "unittest.TestCase.assertEqual", "tests.test_fscompat.BrokenPathMock.__init__", "tests.test_fscompat.PathMock.__init__", "unittest.TestCase.assertRaises"], "fs._fscompat.fspath": [], "tests.test_fscompat.TestFSCompact.test_fsencode": ["<builtin>.isinstance", "fs._fscompat.fsencode", "unittest.TestCase.assertEqual", "unittest.TestCase.assertRaises"], "fs._fscompat.fsencode": [], "tests.test_fscompat.TestFSCompact.test_fsdecode": ["<builtin>.isinstance", "fs._fscompat.fsdecode", "unittest.TestCase.assertRaises"], "fs._fscompat.fsdecode": [], "tests": [], "tests.test_zipfs": [], "tests.test_zipfs.TestWriteReadZipFS.setUp": ["os.close", "tempfile.mkstemp"], "tests.test_zipfs.TestWriteReadZipFS.tearDown": ["os.remove"], "tests.test_zipfs.TestWriteReadZipFS.test_unicode_paths": ["fs.zipfs.ZipFS", "unittest.TestCase.assertIsInstance", "<builtin>.list"], "fs.zipfs.ZipFS": [], "tests.test_zipfs.TestWriteZipFS.make_fs": ["fs.zipfs.ZipFS", "tempfile.TemporaryFile"], "tempfile.TemporaryFile": [], "tests.test_zipfs.TestWriteZipFS.destroy_fs": [], "tests.test_zipfs.TestReadZipFS.compress": ["os.close", "tempfile.mkstemp", "fs.compress.write_zip"], "fs.compress.write_zip": [], "tests.test_zipfs.TestReadZipFS.load_archive": ["fs.zipfs.ZipFS"], "tests.test_zipfs.TestReadZipFS.remove_archive": ["os.remove"], "tests.test_zipfs.TestReadZipFS.test_large": ["fs.opener.open_fs", "tests.test_zipfs.TestReadZipFS.load_archive", "unittest.TestCase.assertEqual", "fs.compress.write_zip"], "tests.test_zipfs.TestReadZipFS.test_getinfo": ["unittest.TestCase.assertEqual", "<builtin>.super"], "tests.test_zipfs.TestReadZipFS.test_openbin": ["unittest.TestCase.assertEqual", "unittest.TestCase.assertRaises"], "tests.test_zipfs.TestReadZipFS.test_read": ["unittest.TestCase.assertEqual"], "tests.test_zipfs.TestReadZipFS.test_read1": ["unittest.TestCase.assertEqual"], "tests.test_zipfs.TestReadZipFS.test_seek_set": ["unittest.TestCase.assertEqual"], "tests.test_zipfs.TestReadZipFS.test_seek_current": ["unittest.TestCase.assertEqual", "unittest.TestCase.assertRaises"], "tests.test_zipfs.TestReadZipFS.test_seek_end": ["unittest.TestCase.assertEqual"], "tests.test_zipfs.TestReadZipFS.test_geturl_for_fs": ["unittest.TestCase.assertEqual"], "tests.test_zipfs.TestReadZipFS.test_geturl_for_fs_but_file_is_binaryio": ["six.BytesIO", "unittest.TestCase.assertRaises"], "tests.test_zipfs.TestReadZipFS.test_geturl_for_download": ["unittest.TestCase.assertRaises"], "tests.test_zipfs.TestReadZipFS.test_read_non_existent_file": ["fs.zipfs.ZipFS", "<builtin>.open", "test_archives.ArchiveTestCases.fail"], "test_archives.ArchiveTestCases.fail": [], "tests.test_zipfs.TestReadZipFSMem.make_source_fs": ["fs.opener.open_fs"], "tests.test_zipfs.TestDirsZipFS.test_implied": ["fs.zipfs.ReadZipFS", "unittest.TestCase.assertTrue", "tempfile.mkstemp", "unittest.TestCase.assertEqual", "os.close", "os.remove", "zipfile.ZipFile"], "zipfile.ZipFile": [], "fs.zipfs.ReadZipFS": [], "tests.test_zipfs.TestOpener.test_not_writeable": ["fs.opener.open_fs", "unittest.TestCase.assertRaises"], "tests.test_imports": [], "tests.test_imports.TestImports.test_import_path": ["sys.modules.pop"], "sys.modules.pop": [], "tests.test_wrap": [], "tests.test_wrap.TestWrapReadOnly.setUp": ["fs.open_fs"], "tests.test_wrap.TestWrapReadOnly.tearDown": [], "tests.test_wrap.TestWrapReadOnly.assertReadOnly": ["unittest.TestCase.assertRaises"], "tests.test_wrap.TestWrapReadOnly.test_open_w": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_appendtext": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_appendbytes": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_makedir": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_move": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_openbin_w": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_remove": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_removedir": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_removetree": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_setinfo": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_settimes": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_copy": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_create": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_writetext": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_writebytes": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_makedirs": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_touch": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly"], "tests.test_wrap.TestWrapReadOnly.test_upload": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly", "six.BytesIO"], "tests.test_wrap.TestWrapReadOnly.test_writefile": ["tests.test_wrap.TestWrapReadOnly.assertReadOnly", "six.StringIO"], "six.StringIO": [], "tests.test_wrap.TestWrapReadOnly.test_openbin_r": ["unittest.TestCase.assertEqual"], "tests.test_wrap.TestWrapReadOnly.test_open_r": ["unittest.TestCase.assertEqual"], "tests.test_wrap.TestWrapReadOnlySyspath.setUp": ["fs.open_fs"], "tests.test_wrap.TestWrapReadOnlySyspath.tearDown": [], "tests.test_wrap.TestWrapReadOnlySyspath.assertReadOnly": ["unittest.TestCase.assertRaises"], "tests.test_wrap.TestWrapReadOnlySyspath.test_copy_fs": ["tests.test_wrap.TestWrapReadOnlySyspath.assertReadOnly"], "tests.test_wrap.TestWrapReadOnlySyspath.test_copy_fs_if_newer": ["tests.test_wrap.TestWrapReadOnlySyspath.assertReadOnly"], "tests.test_wrap.TestWrapReadOnlySyspath.test_copy_file": ["tests.test_wrap.TestWrapReadOnlySyspath.assertReadOnly"], "tests.test_wrap.TestWrapReadOnlySyspath.test_copy_file_if_newer": ["tests.test_wrap.TestWrapReadOnlySyspath.assertReadOnly"], "tests.test_wrap.TestWrapReadOnlySyspath.test_copy_structure": ["tests.test_wrap.TestWrapReadOnlySyspath.assertReadOnly"], "tests.test_wrap.TestWrapReadOnlySyspath.test_mirror": ["tests.test_wrap.TestWrapReadOnlySyspath.assertReadOnly"], "tests.test_wrap.TestWrapReadOnlySyspath.test_move_fs": ["tests.test_wrap.TestWrapReadOnlySyspath.assertReadOnly"], "tests.test_wrap.TestWrapReadOnlySyspath.test_move_file": ["tests.test_wrap.TestWrapReadOnlySyspath.assertReadOnly"], "tests.test_wrap.TestWrapReadOnlySyspath.test_move_dir": ["tests.test_wrap.TestWrapReadOnlySyspath.assertReadOnly"], "tests.test_wrap.TestWrapCachedDir.setUp": ["fs.open_fs"], "tests.test_wrap.TestWrapCachedDir.tearDown": [], "tests.test_wrap.TestWrapCachedDir.assertNotFound": ["unittest.TestCase.assertRaises"], "tests.test_wrap.TestWrapCachedDir.test_scandir": ["operator.attrgetter", "mock.patch.object", "unittest.mock.patch.object", "unittest.TestCase.assertEqual", "<builtin>.sorted", "fs.info.Info"], "operator.attrgetter": [], "tests.test_wrap.TestWrapCachedDir.test_isdir": ["unittest.TestCase.assertTrue", "mock.patch.object", "unittest.TestCase.assertFalse", "unittest.mock.patch.object"], "tests.test_wrap.TestWrapCachedDir.test_isfile": ["unittest.TestCase.assertTrue", "mock.patch.object", "unittest.TestCase.assertFalse", "unittest.mock.patch.object"], "tests.test_wrap.TestWrapCachedDir.test_getinfo": ["tests.test_wrap.TestWrapCachedDir.assertNotFound", "mock.patch.object", "unittest.TestCase.assertEqual", "unittest.mock.patch.object"], "tests.test_tree": [], "tests.test_tree.TestInfo.setUp": ["fs.memoryfs.MemoryFS"], "tests.test_tree.TestInfo.test_tree": ["io.StringIO", "unittest.TestCase.assertEqual", "fs.tree.render"], "io.StringIO": [], "fs.tree.render": [], "tests.test_tree.TestInfo.test_tree_encoding": ["io.StringIO", "unittest.TestCase.assertEqual", "fs.tree.render", "<builtin>.print", "<builtin>.repr"], "<builtin>.print": [], "tests.test_tree.TestInfo.test_tree_bytes_no_dirs_first": ["io.StringIO", "unittest.TestCase.assertEqual", "fs.tree.render"], "tests.test_tree.TestInfo.test_error": ["io.StringIO", "unittest.TestCase.assertEqual", "fs.tree.render", "<builtin>.print", "<builtin>.repr"], "tests.test_tree.TestInfo.test_error.broken_filterdir": ["<builtin>.Exception"], "tests.test_mirror": [], "tests.test_mirror.TestMirror._contents": ["<builtin>.sorted"], "tests.test_mirror.TestMirror.assert_compare_fs": ["tests.test_mirror.TestMirror._contents", "unittest.TestCase.assertEqual"], "tests.test_mirror.TestMirror.test_empty_mirror": ["tests.test_mirror.TestMirror.assert_compare_fs", "fs.mirror.mirror", "fs.open_fs"], "fs.mirror.mirror": [], "tests.test_mirror.TestMirror.test_mirror_one_file": ["tests.test_mirror.TestMirror.assert_compare_fs", "fs.mirror.mirror", "fs.open_fs"], "tests.test_mirror.TestMirror.test_mirror_one_file_one_dir": ["tests.test_mirror.TestMirror.assert_compare_fs", "fs.mirror.mirror", "fs.open_fs"], "tests.test_mirror.TestMirror.test_mirror_delete_replace": ["tests.test_mirror.TestMirror.assert_compare_fs", "fs.mirror.mirror", "fs.open_fs"], "tests.test_mirror.TestMirror.test_mirror_extra_dir": ["tests.test_mirror.TestMirror.assert_compare_fs", "fs.mirror.mirror", "fs.open_fs"], "tests.test_mirror.TestMirror.test_mirror_extra_file": ["tests.test_mirror.TestMirror.assert_compare_fs", "fs.mirror.mirror", "fs.open_fs"], "tests.test_mirror.TestMirror.test_mirror_wrong_type": ["tests.test_mirror.TestMirror.assert_compare_fs", "fs.mirror.mirror", "fs.open_fs"], "tests.test_mirror.TestMirror.test_mirror_update": ["tests.test_mirror.TestMirror.assert_compare_fs", "fs.mirror.mirror", "fs.open_fs"], "tests.test_base": [], "tests.test_base.DummyFS.getinfo": [], "tests.test_base.DummyFS.listdir": [], "tests.test_base.DummyFS.makedir": [], "tests.test_base.DummyFS.openbin": [], "tests.test_base.DummyFS.remove": [], "tests.test_base.DummyFS.removedir": [], "tests.test_base.DummyFS.setinfo": [], "tests.test_base.TestBase.setUp": ["fs.base.FS.__init__"], "fs.base.FS.__init__": [], "tests.test_base.TestBase.test_validatepath": ["fs.base.FS.validatepath", "unittest.TestCase.assertRaises"], "fs.base.FS.validatepath": [], "tests.test_base.TestBase.test_validatepath.mock_getsyspath": [], "tests.test_error_tools": [], "tests.test_error_tools.TestErrorTools.test_convert_enoent": ["<builtin>.OSError", "unittest.TestCase.assertEqual", "fs.error_tools.convert_os_errors", "unittest.TestCase.assertRaises"], "fs.error_tools.convert_os_errors": [], "tests.test_error_tools.TestErrorTools.test_convert_enametoolong": ["<builtin>.OSError", "unittest.TestCase.assertEqual", "fs.error_tools.convert_os_errors", "unittest.TestCase.assertRaises"], "tests.test_wildcard": [], "tests.test_wildcard.TestFNMatch.test_wildcard": ["unittest.TestCase.assertTrue", "fs.wildcard.match", "fs.wildcard.imatch", "unittest.TestCase.assertFalse"], "fs.wildcard.match": [], "fs.wildcard.imatch": [], "tests.test_wildcard.TestFNMatch.test_match_any": ["fs.wildcard.imatch_any", "unittest.TestCase.assertTrue", "fs.wildcard.match_any"], "fs.wildcard.match_any": [], "fs.wildcard.imatch_any": [], "tests.test_wildcard.TestFNMatch.test_get_matcher": ["unittest.TestCase.assertTrue", "fs.wildcard.get_matcher", "unittest.TestCase.assertFalse"], "fs.wildcard.get_matcher": [], "tests.test_multifs": [], "tests.test_multifs.TestMultiFS.setUp": ["fs.memoryfs.MemoryFS", "fs.multifs.MultiFS"], "fs.multifs.MultiFS": [], "tests.test_multifs.TestMultiFS.make_fs": ["fs.memoryfs.MemoryFS", "fs.multifs.MultiFS"], "tests.test_multifs.TestMultiFS.test_get_fs": ["unittest.TestCase.assertIs"], "tests.test_multifs.TestMultiFS.test_which": ["unittest.TestCase.assertEqual"], "tests.test_multifs.TestMultiFS.test_auto_close": ["unittest.TestCase.assertTrue", "fs.memoryfs.MemoryFS", "fs.multifs.MultiFS", "fs.test.FSTestCases.assertFalse"], "tests.test_multifs.TestMultiFS.test_no_auto_close": ["fs.multifs.MultiFS", "fs.memoryfs.MemoryFS", "unittest.TestCase.assertEqual", "fs.test.FSTestCases.assertFalse", "<builtin>.repr"], "tests.test_multifs.TestMultiFS.test_opener": ["unittest.TestCase.assertIsInstance", "fs.multifs.MultiFS", "unittest.TestCase.assertRaises"], "tests.test_multifs.TestMultiFS.test_priority": ["fs.memoryfs.MemoryFS", "fs.multifs.MultiFS", "unittest.TestCase.assertEqual"], "tests.test_multifs.TestMultiFS.test_no_writable": ["fs.multifs.MultiFS", "unittest.TestCase.assertRaises"], "tests.test_multifs.TestMultiFS.test_validate_path": [], "tests.test_multifs.TestMultiFS.test_listdir_duplicates": ["fs.memoryfs.MemoryFS", "fs.multifs.MultiFS", "unittest.TestCase.assertEqual"], "tests.test_enums": [], "tests.test_enums.TestEnums.test_enums": ["unittest.TestCase.assertEqual"], "tests.test_walk": [], "tests.test_walk.TestWalker.setUp": ["fs.walk.Walker"], "fs.walk.Walker": [], "tests.test_walk.TestWalker.test_repr": ["<builtin>.repr"], "tests.test_walk.TestWalker.test_create": ["unittest.TestCase.assertRaises", "fs.walk.Walker"], "tests.test_walk.TestWalker.test_create.<lambda1>": [], "tests.test_walk.TestWalker.test_on_error_invalid": ["unittest.TestCase.assertRaises", "fs.walk.Walker"], "tests.test_walk.TestBoundWalkerBase.setUp": ["fs.memoryfs.MemoryFS"], "tests.test_walk.TestBoundWalker.test_repr": ["<builtin>.repr"], "tests.test_walk.TestBoundWalker.test_readonly_wrapper_uses_same_walker": ["fs.memoryfs.MemoryFS.__init__", "unittest.TestCase.assertEqual", "fs.wrap.read_only"], "tests.test_walk.TestBoundWalker.test_readonly_wrapper_uses_same_walker.CustomWalker.bind": ["fs.walk.BoundWalker"], "fs.walk.BoundWalker": [], "fs.memoryfs.MemoryFS.__init__": [], "fs.wrap.read_only": [], "tests.test_walk.TestWalk._walk_step_names": ["unittest.TestCase.assertIsInstance"], "tests.test_walk.TestWalk.test_invalid_search": ["unittest.TestCase.assertRaises"], "tests.test_walk.TestWalk.test_walk_simple": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestWalk.test_walk_filter": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestWalk.test_walk_exclude": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestWalk.test_walk_filter_dirs": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestWalk.test_walk_filter_glob_1": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestWalk.test_walk_filter_glob_2": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestWalk.test_walk_filter_mix": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestWalk.test_walk_exclude_dirs": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestWalk.test_walk_exclude_glob": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestWalk.test_walk_depth": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestWalk.test_walk_path": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestWalk.test_walk_max_depth_1_breadth": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestWalk.test_walk_max_depth_1_depth": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestWalk.test_walk_max_depth_2": ["unittest.TestCase.assertEqual", "tests.test_walk.TestWalk._walk_step_names"], "tests.test_walk.TestDirs.test_walk_dirs": ["unittest.TestCase.assertEqual", "<builtin>.list"], "tests.test_walk.TestDirs.test_foo": ["unittest.TestCase.assertEqual", "<builtin>.list"], "tests.test_walk.TestFiles.test_walk_files": ["unittest.TestCase.assertEqual", "<builtin>.list"], "tests.test_walk.TestFiles.test_walk_files_filter": ["unittest.TestCase.assertEqual", "<builtin>.list"], "tests.test_walk.TestFiles.test_walk_files_filter_glob": ["unittest.TestCase.assertEqual", "<builtin>.list"], "tests.test_walk.TestFiles.test_walk_files_exclude": ["unittest.TestCase.assertEqual", "<builtin>.list"], "tests.test_walk.TestFiles.test_broken": ["unittest.TestCase.assertEqual", "<builtin>.list", "unittest.TestCase.assertRaises"], "tests.test_walk.TestFiles.test_broken.broken_scandir": ["fs.errors.FSError"], "tests.test_walk.TestFiles.test_broken.<lambda1>": [], "tests.test_walk.TestFiles.test_subdir_uses_same_walker": ["fs.memoryfs.MemoryFS.walk.files", "unittest.TestCase.assertEqual", "fs.memoryfs.MemoryFS.makedirs", "fs.memoryfs.MemoryFS.writetext", "fs.memoryfs.MemoryFS.opendir", "fs.memoryfs.MemoryFS.__init__", "six.assertCountEqual"], "tests.test_walk.TestFiles.test_subdir_uses_same_walker.CustomWalker.bind": ["fs.walk.BoundWalker"], "fs.memoryfs.MemoryFS.writetext": [], "fs.memoryfs.MemoryFS.makedirs": [], "fs.memoryfs.MemoryFS.walk.files": [], "six.assertCountEqual": [], "fs.memoryfs.MemoryFS.opendir": [], "tests.test_walk.TestFiles.test_check_file_overwrite": ["fs.walk.Walker.files", "<builtin>.list", "unittest.TestCase.assertEqual", "fs.walk.Walker.__init__"], "tests.test_walk.TestFiles.test_check_file_overwrite.CustomWalker.check_file": [], "fs.walk.Walker.__init__": [], "fs.walk.Walker.files": [], "tests.test_walk.TestInfo.test_walk_info": ["unittest.TestCase.assertEqual"], "tests.test_glob": [], "tests.test_glob.TestGlob.setUp": ["<builtin>.repr", "fs.open_fs"], "parameterized.parameterized.expand": [], "tests.test_glob.TestGlob": ["parameterized.parameterized.expand"], "tests.test_glob.TestGlob.test_match": ["unittest.TestCase.assertEqual", "fs.glob.match"], "fs.glob.match": [], "tests.test_glob.TestGlob.test_count_1dir": ["unittest.TestCase.assertEqual", "fs.glob.Counts", "<builtin>.repr", "fs.glob.BoundGlobber"], "fs.glob.BoundGlobber": [], "fs.glob.Counts": [], "tests.test_glob.TestGlob.test_count_2dir": ["unittest.TestCase.assertEqual", "fs.glob.Counts", "fs.glob.BoundGlobber"], "tests.test_glob.TestGlob.test_count_recurse_dir": ["unittest.TestCase.assertEqual", "fs.glob.Counts", "fs.glob.BoundGlobber"], "tests.test_glob.TestGlob.test_count_lines": ["fs.glob.LineCounts", "unittest.TestCase.assertEqual", "fs.glob.BoundGlobber"], "fs.glob.LineCounts": [], "tests.test_glob.TestGlob.test_count_dirs": ["unittest.TestCase.assertEqual", "fs.glob.Counts", "fs.glob.BoundGlobber"], "tests.test_glob.TestGlob.test_count_all": ["unittest.TestCase.assertEqual", "fs.glob.Counts", "fs.glob.BoundGlobber"], "tests.test_glob.TestGlob.test_remove": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertFalse", "unittest.TestCase.assertEqual", "fs.glob.BoundGlobber"], "tests.test_glob.TestGlob.test_remove_dir": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertFalse", "unittest.TestCase.assertEqual", "fs.glob.BoundGlobber"], "tests.test_glob.TestGlob.test_remove_all": ["<builtin>.sorted", "unittest.TestCase.assertEqual", "fs.glob.BoundGlobber"], "tests.test_glob.TestGlob.test_translate": ["unittest.TestCase.assertTrue", "re.match", "unittest.TestCase.assertFalse", "fs.glob._translate"], "fs.glob._translate": [], "re.match": [], "tests.test_glob.TestGlob.test_translate_glob_simple": ["re.match", "unittest.TestCase.assertFalse", "fs.glob._translate_glob", "unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual"], "fs.glob._translate_glob": [], "tests.test_glob.TestGlob.test_translate_glob": ["re.match", "unittest.TestCase.assertFalse", "fs.glob._translate_glob", "unittest.TestCase.assertTrue", "unittest.TestCase.assertIsNone"], "tests.test_filesize": [], "tests.test_filesize.TestFilesize.test_traditional": ["unittest.TestCase.assertEqual", "fs.filesize.traditional"], "fs.filesize.traditional": [], "tests.test_filesize.TestFilesize.test_binary": ["unittest.TestCase.assertEqual", "fs.filesize.binary"], "fs.filesize.binary": [], "tests.test_filesize.TestFilesize.test_decimal": ["fs.filesize.decimal", "unittest.TestCase.assertEqual"], "fs.filesize.decimal": [], "tests.test_filesize.TestFilesize.test_errors": ["fs.filesize.traditional", "unittest.TestCase.assertRaises"], "tests.test_iotools": [], "tests.test_iotools.TestIOTools.setUp": ["fs.tempfs.TempFS"], "tests.test_iotools.TestIOTools.tearDown": [], "tests.test_iotools.TestIOTools.test_make_stream": ["<builtin>.isinstance", "unittest.TestCase.assertIsInstance", "unittest.TestCase.assertTrue", "fs.test.UNICODE_TEXT.encode", "fs.iotools.make_stream", "<builtin>.repr"], "fs.test.UNICODE_TEXT.encode": [], "fs.iotools.make_stream": [], "tests.test_iotools.TestIOTools.test_readinto": ["<builtin>.bytes", "fs.iotools.make_stream", "unittest.TestCase.assertEqual", "<builtin>.bytearray"], "<builtin>.bytes": [], "tests.test_iotools.TestIOTools.test_readinto.no_readinto": [], "tests.test_iotools.TestIOTools.test_readinto1": ["<builtin>.bytes", "fs.iotools.make_stream", "unittest.TestCase.assertEqual", "<builtin>.bytearray"], "tests.test_iotools.TestIOTools.test_readinto1.no_readinto": [], "tests.test_iotools.TestIOTools.test_isatty": ["fs.iotools.make_stream", "unittest.TestCase.assertFalse"], "tests.test_iotools.TestIOTools.test_readlines": ["fs.iotools.make_stream", "unittest.TestCase.assertEqual", "<builtin>.list"], "tests.test_iotools.TestIOTools.test_readall": ["unittest.TestCase.assertEqual"], "tests.test_iotools.TestIOTools.test_writelines": ["fs.iotools.make_stream", "unittest.TestCase.assertEqual"], "tests.test_iotools.TestIOTools.test_seekable": ["unittest.TestCase.assertTrue", "io.BytesIO", "unittest.TestCase.assertFalse", "fs.iotools.RawWrapper"], "io.BytesIO": [], "fs.iotools.RawWrapper": [], "tests.test_iotools.TestIOTools.test_seekable.no_seekable": ["<builtin>.AttributeError"], "<builtin>.AttributeError": [], "tests.test_iotools.TestIOTools.test_seekable.seek": ["<builtin>.IOError"], "<builtin>.IOError": [], "tests.test_iotools.TestIOTools.test_line_iterator": ["fs.iotools.line_iterator", "unittest.TestCase.assertEqual", "io.BytesIO", "<builtin>.list"], "fs.iotools.line_iterator": [], "tests.test_iotools.TestIOTools.test_make_stream_writer": ["unittest.TestCase.assertIsInstance", "fs.iotools.make_stream", "io.BytesIO", "unittest.TestCase.assertEqual"], "tests.test_iotools.TestIOTools.test_make_stream_reader": ["unittest.TestCase.assertIsInstance", "fs.iotools.make_stream", "io.BytesIO", "unittest.TestCase.assertEqual"], "tests.test_iotools.TestIOTools.test_make_stream_reader_writer": ["unittest.TestCase.assertIsInstance", "fs.iotools.make_stream", "io.BytesIO", "unittest.TestCase.assertEqual"], "tests.test_new_name": [], "tests.test_new_name.TestNewNameDecorator.double": [], "fs.base._new_name": [], "tests.test_new_name.TestNewNameDecorator": ["fs.base._new_name"], "tests.test_new_name.TestNewNameDecorator.test_old_name": ["<builtin>.str", "<builtin>.len", "unittest.TestCase.assertEqual", "warnings.catch_warnings", "warnings.simplefilter"], "warnings.catch_warnings": [], "<builtin>.len": [], "tests.test_appfs": [], "tests.test_appfs._TestAppFS.setUpClass": ["tempfile.mkdtemp", "<builtin>.super"], "tests.test_appfs._TestAppFS.tearDownClass": ["shutil.rmtree"], "tests.test_appfs._TestAppFS.make_fs": ["mock.patch", "tempfile.mkdtemp", "unittest.mock.patch"], "tests.test_appfs._TestAppFS.test_repr": ["<builtin>.repr"], "tests.test_appfs._TestAppFS.test_str": ["<builtin>.str"], "tests.test_copy": ["unittest.main"], "tests.test_copy._create_sandbox_dir": ["tempfile.mkdtemp", "os.path.join", "tests.test_copy.mkdirp"], "tests.test_copy.mkdirp": ["os.path.isdir", "os.makedirs"], "tests.test_copy._touch": ["os.path.join", "<builtin>.open", "os.path.dirname", "os.utime", "tests.test_copy.mkdirp"], "os.path.dirname": [], "os.utime": [], "tests.test_copy._write_file": ["<builtin>.open"], "tests.test_copy._delay_file_utime": ["calendar.timegm", "os.utime", "datetime.datetime.utcnow"], "datetime.datetime.utcnow": [], "os.makedirs": [], "tests.test_copy.TestCopySimple": ["parameterized.parameterized.expand"], "tests.test_copy.TestCopySimple.test_copy_fs": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.open_fs"], "tests.test_copy.TestCopySimple.test_copy_value_error": ["unittest.TestCase.assertRaises", "fs.open_fs"], "tests.test_copy.TestCopySimple.test_copy_dir0": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.open_fs"], "tests.test_copy.TestCopySimple.test_copy_dir": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.open_fs"], "tests.test_copy.TestCopySimple.test_copy_large": ["unittest.TestCase.assertEqual", "fs.open_fs"], "tests.test_copy.TestCopySimple.test_copy_dir_on_copy": ["unittest.TestCase.assertEqual", "fs.open_fs"], "tests.test_copy.TestCopySimple.test_copy_dir_on_copy.on_copy": [], "tests.test_copy.TestCopyIfNewer.test_copy_file_if_same_fs": ["datetime.timedelta", "unittest.TestCase.assertFalse", "unittest.TestCase.assertTrue", "fs.open_fs", "datetime.datetime.utcnow"], "tests.test_copy.TestCopyIfNewer.test_copy_file_if_dst_is_older": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "tests.test_copy._delay_file_utime", "unittest.TestCase.assertTrue", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfNewer.test_copy_file_if_dst_doesnt_exists": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "unittest.TestCase.assertTrue", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfNewer.test_copy_file_if_dst_is_newer": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "tests.test_copy._delay_file_utime", "unittest.TestCase.assertFalse", "unittest.TestCase.assertTrue", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfNewer.test_copy_fs_if": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "tests.test_copy._delay_file_utime", "unittest.TestCase.assertTrue", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfNewer.test_copy_fs_if.on_copy": [], "tests.test_copy.TestCopyIfNewer.test_copy_dir_if": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "os.path.join", "tests.test_copy._delay_file_utime", "unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch", "tests.test_copy.mkdirp"], "tests.test_copy.TestCopyIfNewer.test_copy_dir_if.on_copy": [], "tests.test_copy.TestCopyIfNewer.test_copy_dir_if_same_fs": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfNewer.test_copy_dir_if_same_fs.on_copy": [], "tests.test_copy.TestCopyIfNewer.test_copy_dir_if_multiple_files": ["unittest.TestCase.assertTrue", "tests.test_copy._create_sandbox_dir", "fs.open_fs", "shutil.rmtree"], "tests.test_copy.TestCopyIfOlder.test_copy_file_if_same_fs": ["datetime.timedelta", "unittest.TestCase.assertFalse", "unittest.TestCase.assertTrue", "fs.open_fs", "datetime.datetime.utcnow"], "tests.test_copy.TestCopyIfOlder.test_copy_file_if_dst_is_older": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "tests.test_copy._delay_file_utime", "unittest.TestCase.assertFalse", "unittest.TestCase.assertTrue", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfOlder.test_copy_file_if_dst_doesnt_exists": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "unittest.TestCase.assertTrue", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfOlder.test_copy_file_if_dst_is_newer": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "tests.test_copy._delay_file_utime", "unittest.TestCase.assertTrue", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfOlder.test_copy_fs_if": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "tests.test_copy._delay_file_utime", "unittest.TestCase.assertTrue", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfOlder.test_copy_fs_if.on_copy": [], "tests.test_copy.TestCopyIfOlder.test_copy_dir_if": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "os.path.join", "tests.test_copy._delay_file_utime", "unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch", "tests.test_copy.mkdirp"], "tests.test_copy.TestCopyIfOlder.test_copy_dir_if.on_copy": [], "tests.test_copy.TestCopyIfOlder.test_copy_dir_if_same_fs": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfOlder.test_copy_dir_if_same_fs.on_copy": [], "tests.test_copy.TestCopyIfOlder.test_copy_dir_if_multiple_files": ["unittest.TestCase.assertTrue", "tests.test_copy._create_sandbox_dir", "fs.open_fs", "shutil.rmtree"], "tests.test_copy.TestCopyIfExists.test_copy_file_if_same_fs": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertFalse", "fs.open_fs"], "tests.test_copy.TestCopyIfExists.test_copy_file_if_dst_doesnt_exists": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "unittest.TestCase.assertFalse", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfExists.test_copy_file_if_dst_exists": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "unittest.TestCase.assertTrue", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfExists.test_copy_fs_if": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "unittest.TestCase.assertFalse", "unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfExists.test_copy_fs_if.on_copy": [], "tests.test_copy.TestCopyIfExists.test_copy_dir_if": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "os.path.join", "unittest.TestCase.assertFalse", "unittest.TestCase.assertEqual", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch", "tests.test_copy.mkdirp"], "tests.test_copy.TestCopyIfExists.test_copy_dir_if.on_copy": [], "tests.test_copy.TestCopyIfExists.test_copy_dir_if_same_fs": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfExists.test_copy_dir_if_same_fs.on_copy": [], "tests.test_copy.TestCopyIfExists.test_copy_dir_if_multiple_files": ["unittest.TestCase.assertTrue", "tests.test_copy._create_sandbox_dir", "fs.open_fs", "shutil.rmtree"], "tests.test_copy.TestCopyIfNotExists.test_copy_file_if_same_fs": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertFalse", "fs.open_fs"], "tests.test_copy.TestCopyIfNotExists.test_copy_file_if_dst_doesnt_exists": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "unittest.TestCase.assertTrue", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfNotExists.test_copy_file_if_dst_exists": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "unittest.TestCase.assertFalse", "unittest.TestCase.assertTrue", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfNotExists.test_copy_fs_if": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfNotExists.test_copy_fs_if.on_copy": [], "tests.test_copy.TestCopyIfNotExists.test_copy_dir_if": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "os.path.join", "unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch", "tests.test_copy.mkdirp"], "tests.test_copy.TestCopyIfNotExists.test_copy_dir_if.on_copy": [], "tests.test_copy.TestCopyIfNotExists.test_copy_dir_if_same_fs": ["tests.test_copy._write_file", "tests.test_copy._create_sandbox_dir", "unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.open_fs", "shutil.rmtree", "tests.test_copy._touch"], "tests.test_copy.TestCopyIfNotExists.test_copy_dir_if_same_fs.on_copy": [], "tests.test_copy.TestCopyIfNotExists.test_copy_dir_if_multiple_files": ["unittest.TestCase.assertTrue", "tests.test_copy._create_sandbox_dir", "fs.open_fs", "shutil.rmtree"], "unittest.main": [], "tests.test_subfs": [], "tests.test_subfs.TestSubFS.setUp": ["fs.osfs.OSFS", "tempfile.mkdtemp"], "tests.test_subfs.TestSubFS.tearDown": ["shutil.rmtree"], "tests.test_subfs.TestSubFS._get_real_path": ["fs.path.relpath", "os.path.join"], "tests.test_subfs.CustomSubFS.custom_function": ["fs.subfs.SubFS.delegate_path"], "fs.subfs.SubFS.delegate_path": [], "tests.test_subfs.CustomFS.__init__": ["<builtin>.super"], "tests.test_subfs.CustomFS.custom_function": [], "tests.test_subfs.TestCustomSubFS.test_opendir": ["<builtin>.isinstance", "fs.memoryfs.MemoryFS.makedir", "fs.memoryfs.MemoryFS.opendir", "tests.test_subfs.CustomFS.__init__"], "fs.memoryfs.MemoryFS.makedir": [], "tests.test_permissions": [], "tests.test_permissions.TestPermissions.test_make_mode": ["fs.permissions.Permissions", "fs.permissions.make_mode", "unittest.TestCase.assertEqual"], "fs.permissions.make_mode": [], "tests.test_permissions.TestPermissions.test_parse": ["fs.permissions.Permissions.parse", "unittest.TestCase.assertEqual"], "fs.permissions.Permissions.parse": [], "tests.test_permissions.TestPermissions.test_create": ["fs.permissions.Permissions.create", "fs.permissions.Permissions", "unittest.TestCase.assertEqual", "unittest.TestCase.assertRaises"], "fs.permissions.Permissions.create": [], "tests.test_permissions.TestPermissions.test_constructor": ["unittest.TestCase.assertIn", "fs.permissions.Permissions", "unittest.TestCase.assertNotIn"], "tests.test_permissions.TestPermissions.test_properties": ["unittest.TestCase.assertFalse", "unittest.TestCase.assertTrue", "unittest.TestCase.assertNotIn", "unittest.TestCase.assertIn", "fs.permissions.Permissions"], "tests.test_permissions.TestPermissions.test_repr": ["fs.permissions.Permissions", "unittest.TestCase.assertEqual", "<builtin>.repr"], "tests.test_permissions.TestPermissions.test_as_str": ["fs.permissions.Permissions", "unittest.TestCase.assertEqual", "<builtin>.str"], "tests.test_permissions.TestPermissions.test_mode": ["fs.permissions.Permissions", "unittest.TestCase.assertEqual"], "tests.test_permissions.TestPermissions.test_serialize": ["unittest.TestCase.assertIn", "fs.permissions.Permissions", "unittest.TestCase.assertEqual", "fs.permissions.Permissions.load"], "fs.permissions.Permissions.load": [], "tests.test_permissions.TestPermissions.test_iter": ["fs.permissions.Permissions", "<builtin>.iter", "<builtin>.list", "unittest.TestCase.assertEqual"], "tests.test_permissions.TestPermissions.test_equality": ["fs.permissions.Permissions", "unittest.TestCase.assertNotEqual", "unittest.TestCase.assertEqual"], "unittest.TestCase.assertNotEqual": [], "tests.test_permissions.TestPermissions.test_copy": ["fs.permissions.Permissions", "unittest.TestCase.assertIsNot", "unittest.TestCase.assertEqual"], "unittest.TestCase.assertIsNot": [], "tests.test_permissions.TestPermissions.test_check": ["unittest.TestCase.assertTrue", "fs.permissions.Permissions", "unittest.TestCase.assertFalse"], "tests.test_permissions.TestPermissions.test_mode_set": ["fs.permissions.Permissions", "six.text_type", "unittest.TestCase.assertEqual"], "tests.test_tools": [], "tests.test_tools.TestTools.test_remove_empty": ["unittest.TestCase.assertFalse", "fs.opener.open_fs", "unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.tools.remove_empty"], "fs.tools.remove_empty": [], "tests.test_tools.TestTools.test_validate_openbin_mode": ["unittest.TestCase.assertRaises", "fs.mode.validate_openbin_mode"], "fs.mode.validate_openbin_mode": [], "tests.test_tools.TestTools.test_validate_open_mode": ["fs.mode.validate_open_mode", "unittest.TestCase.assertRaises"], "fs.mode.validate_open_mode": [], "tests.test_path": [], "tests.test_path.TestPathFunctions.test_normpath": ["fs.path.normpath", "unittest.TestCase.assertEqual"], "fs.path.normpath": [], "tests.test_path.TestPathFunctions.test_pathjoin": ["unittest.TestCase.assertEqual", "fs.path.join", "unittest.TestCase.assertRaises"], "tests.test_path.TestPathFunctions.test_relpath": ["unittest.TestCase.assertEqual", "fs.path.relpath"], "tests.test_path.TestPathFunctions.test_abspath": ["fs.path.abspath", "unittest.TestCase.assertEqual"], "fs.path.abspath": [], "tests.test_path.TestPathFunctions.test_forcedir": ["unittest.TestCase.assertEqual", "fs.path.forcedir"], "fs.path.forcedir": [], "tests.test_path.TestPathFunctions.test_frombase": ["fs.path.frombase", "unittest.TestCase.assertEqual", "unittest.TestCase.assertRaises"], "fs.path.frombase": [], "tests.test_path.TestPathFunctions.test_isabs": ["unittest.TestCase.assertTrue", "fs.path.isabs", "unittest.TestCase.assertFalse"], "fs.path.isabs": [], "tests.test_path.TestPathFunctions.test_iteratepath": ["unittest.TestCase.assertEqual", "fs.path.iteratepath", "<builtin>.zip"], "fs.path.iteratepath": [], "<builtin>.zip": [], "tests.test_path.TestPathFunctions.test_combine": ["unittest.TestCase.assertEqual", "fs.path.combine"], "fs.path.combine": [], "tests.test_path.TestPathFunctions.test_parts": ["unittest.TestCase.assertEqual", "fs.path.parts"], "fs.path.parts": [], "tests.test_path.TestPathFunctions.test_pathsplit": ["fs.path.split", "unittest.TestCase.assertEqual"], "fs.path.split": [], "tests.test_path.TestPathFunctions.test_splitext": ["unittest.TestCase.assertEqual", "fs.path.splitext"], "fs.path.splitext": [], "tests.test_path.TestPathFunctions.test_recursepath": ["unittest.TestCase.assertEqual", "fs.path.recursepath"], "fs.path.recursepath": [], "tests.test_path.TestPathFunctions.test_isbase": ["unittest.TestCase.assertTrue", "fs.path.isbase", "unittest.TestCase.assertFalse"], "fs.path.isbase": [], "tests.test_path.TestPathFunctions.test_isparent": ["unittest.TestCase.assertTrue", "fs.path.isparent", "unittest.TestCase.assertFalse"], "fs.path.isparent": [], "tests.test_path.TestPathFunctions.test_issamedir": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertFalse", "fs.path.issamedir"], "fs.path.issamedir": [], "tests.test_path.TestPathFunctions.test_isdotfile": ["unittest.TestCase.assertTrue", "fs.path.isdotfile", "unittest.TestCase.assertFalse"], "fs.path.isdotfile": [], "tests.test_path.TestPathFunctions.test_dirname": ["fs.path.dirname", "unittest.TestCase.assertEqual"], "tests.test_path.TestPathFunctions.test_basename": ["fs.path.basename", "unittest.TestCase.assertEqual"], "fs.path.basename": [], "tests.test_path.TestPathFunctions.test_iswildcard": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertFalse", "fs.path.iswildcard"], "fs.path.iswildcard": [], "tests.test_path.TestPathFunctions.test_realtivefrom": ["unittest.TestCase.assertEqual", "fs.path.relativefrom"], "fs.path.relativefrom": [], "tests.test_tarfs": [], "tests.test_tarfs.TestWriteReadTarFS.setUp": ["os.close", "tempfile.mkstemp"], "tests.test_tarfs.TestWriteReadTarFS.tearDown": ["os.remove"], "tests.test_tarfs.TestWriteReadTarFS.test_unicode_paths": ["unittest.TestCase.assertIsInstance", "<builtin>.list", "fs.tarfs.TarFS"], "fs.tarfs.TarFS": [], "tests.test_tarfs.TestWriteTarFS.make_fs": ["os.close", "tempfile.mkstemp", "fs.tarfs.TarFS"], "tests.test_tarfs.TestWriteTarFS.destroy_fs": ["os.remove"], "tests.test_tarfs.TestWriteTarFSToFileobj.make_fs": ["fs.tarfs.TarFS", "six.BytesIO"], "tests.test_tarfs.TestWriteTarFSToFileobj.destroy_fs": [], "tests.test_tarfs.TestWriteGZippedTarFS.make_fs": ["os.close", "tempfile.mkstemp", "fs.tarfs.TarFS"], "tests.test_tarfs.TestWriteGZippedTarFS.destroy_fs": ["os.remove"], "tests.test_tarfs.TestWriteXZippedTarFS.make_fs": ["os.close", "tempfile.mkstemp", "fs.tarfs.TarFS"], "tests.test_tarfs.TestWriteXZippedTarFS.destroy_fs": ["tests.test_tarfs.TestWriteXZippedTarFS.assert_is_xz", "os.remove"], "tests.test_tarfs.TestWriteXZippedTarFS.assert_is_xz": ["tarfile.open", "unittest.TestCase.fail", "unittest.TestCase.assertRaises"], "tarfile.open": [], "unittest.TestCase.fail": [], "tests.test_tarfs.TestWriteBZippedTarFS.make_fs": ["os.close", "tempfile.mkstemp", "fs.tarfs.TarFS"], "tests.test_tarfs.TestWriteBZippedTarFS.destroy_fs": ["tests.test_tarfs.TestWriteBZippedTarFS.assert_is_bzip", "os.remove"], "tests.test_tarfs.TestWriteBZippedTarFS.assert_is_bzip": ["tarfile.open", "unittest.TestCase.fail", "unittest.TestCase.assertRaises"], "tests.test_tarfs.TestReadTarFS.compress": ["fs.compress.write_tar", "os.close", "tempfile.mkstemp"], "fs.compress.write_tar": [], "tests.test_tarfs.TestReadTarFS.load_archive": ["fs.tarfs.TarFS"], "tests.test_tarfs.TestReadTarFS.remove_archive": ["os.remove"], "tests.test_tarfs.TestReadTarFS.test_read_from_fileobject": ["fs.tarfs.TarFS", "<builtin>.open", "test_archives.ArchiveTestCases.fail"], "tests.test_tarfs.TestReadTarFS.test_read_from_filename": ["fs.tarfs.TarFS", "test_archives.ArchiveTestCases.fail"], "tests.test_tarfs.TestReadTarFS.test_read_non_existent_file": ["fs.tarfs.TarFS", "<builtin>.open", "test_archives.ArchiveTestCases.fail"], "tests.test_tarfs.TestReadTarFS.test_getinfo": ["unittest.TestCase.assertTrue", "<builtin>.super"], "tests.test_tarfs.TestReadTarFS.test_geturl_for_fs": ["unittest.TestCase.assertEqual"], "tests.test_tarfs.TestReadTarFS.test_geturl_for_fs_but_file_is_binaryio": ["six.BytesIO", "unittest.TestCase.assertRaises"], "tests.test_tarfs.TestReadTarFS.test_geturl_for_download": ["unittest.TestCase.assertRaises"], "tests.test_tarfs.TestBrokenPaths.setUpClass": ["fs.opener.open_fs"], "tests.test_tarfs.TestBrokenPaths.tearDownClass": [], "tests.test_tarfs.TestBrokenPaths.setUp": ["tarfile.open", "tarfile.TarInfo", "io.StringIO", "fs.tarfs.TarFS"], "tarfile.TarInfo": [], "tests.test_tarfs.TestBrokenPaths.tearDown": [], "tests.test_tarfs.TestBrokenPaths.test_listdir": ["unittest.TestCase.assertEqual"], "tests.test_tarfs.TestImplicitDirectories.setUpClass": ["fs.opener.open_fs"], "tests.test_tarfs.TestImplicitDirectories.tearDownClass": [], "tests.test_tarfs.TestImplicitDirectories.setUp": ["tarfile.TarInfo", "io.BytesIO", "tarfile.open", "io.StringIO", "fs.tarfs.TarFS"], "tests.test_tarfs.TestImplicitDirectories.tearDown": [], "tests.test_tarfs.TestImplicitDirectories.test_isfile": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertFalse"], "tests.test_tarfs.TestImplicitDirectories.test_isdir": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertFalse"], "tests.test_tarfs.TestImplicitDirectories.test_listdir": ["unittest.TestCase.assertEqual", "<builtin>.sorted"], "tests.test_tarfs.TestImplicitDirectories.test_getinfo": ["unittest.TestCase.assertEqual", "unittest.TestCase.assertIs"], "tests.test_tarfs.TestReadTarFSMem.make_source_fs": ["fs.opener.open_fs"], "tests.test_tarfs.TestOpener.test_not_writeable": ["fs.opener.open_fs", "unittest.TestCase.assertRaises"], "tests.test_url_tools": [], "tests.test_url_tools.TestBase.test_quote": ["fs._url_tools.url_quote", "unittest.TestCase.assertEqual", "platform.system"], "fs._url_tools.url_quote": [], "tests.test_move": [], "tests.test_move.TestMoveCheckTime.test_move_fs": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertEqual", "fs.open_fs"], "tests.test_move.TestMoveCheckTime.test_move_file": ["unittest.TestCase.assertFalse", "unittest.TestCase.assertEqual", "fs.open_fs"], "tests.test_move.TestMoveCheckTime.test_move_dir": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertFalse", "unittest.TestCase.assertEqual", "fs.open_fs"], "tests.test_move.TestMove.test_move_file_tempfs": ["unittest.TestCase.assertFalse", "unittest.TestCase.assertEqual", "fs.open_fs"], "tests.test_move.TestMove.test_move_file_fs_urls": ["unittest.TestCase.assertFalse", "unittest.TestCase.assertEqual", "fs.path.join", "fs.open_fs"], "tests.test_move.TestMove.test_move_file_same_fs_read_only_source": ["unittest.TestCase.assertFalse", "unittest.TestCase.assertTrue", "fs.open_fs", "fs.wrap.read_only", "unittest.TestCase.assertRaises"], "tests.test_move.TestMove.test_move_file_read_only_mem_source": ["unittest.TestCase.assertFalse", "unittest.TestCase.assertTrue", "fs.open_fs", "fs.wrap.read_only", "unittest.TestCase.assertRaises"], "tests.test_move.TestMove.test_move_file_read_only_mem_dest": ["unittest.TestCase.assertFalse", "unittest.TestCase.assertTrue", "fs.open_fs", "fs.wrap.read_only", "unittest.TestCase.assertRaises"], "tests.test_move.TestMove": ["parameterized.parameterized.expand"], "tests.test_move.TestMove.test_move_file_overwrite": ["unittest.TestCase.assertTrue", "unittest.TestCase.assertFalse", "fs.open_fs", "unittest.TestCase.assertEquals"], "unittest.TestCase.assertEquals": [], "tests.test_move.TestMove.test_move_file_overwrite_itself": ["unittest.TestCase.assertTrue", "fs.open_fs", "unittest.TestCase.assertEquals"], "tests.test_move.TestMove.test_move_file_overwrite_itself_relpath": ["unittest.TestCase.assertTrue", "fs.open_fs", "unittest.TestCase.assertEquals"], "tests.test_move.TestMove.test_move_file_cleanup_on_error": ["unittest.TestCase.assertTrue", "unittest.mock.patch.object", "unittest.TestCase.assertEqual", "fs.open_fs", "mock.patch.object", "unittest.TestCase.assertRaises"]}