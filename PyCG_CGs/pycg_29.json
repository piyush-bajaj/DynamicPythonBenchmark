{"tests.test_objects": [], "tests.test_objects.test_cached_property": [], "tests.test_objects.test_cached_property.A.prop": [], "tests.test_objects.test_cached_property_doc": [], "tests.test_objects.test_cached_property_doc.A.prop": [], "tests.test_objects.test_cached_readonly": ["pytest.raises"], "tests.test_objects.test_cached_readonly.A.prop": [], "pytest.raises": [], "tests.test_objects.test_wrap_prop": ["funcy.suppress"], "tests.test_objects.test_wrap_prop.Manager.__init__": [], "tests.test_objects.test_wrap_prop.Manager.__enter__": [], "tests.test_objects.test_wrap_prop.Manager.__exit__": [], "tests.test_objects.test_wrap_prop.A": ["tests.test_objects.test_wrap_prop.A.cached_property", "tests.test_objects.test_wrap_prop.Manager.__init__"], "tests.test_objects.test_wrap_prop.A.prop": [], "tests.test_objects.test_wrap_prop.A.cached_property": [], "tests.test_objects.test_wrap_prop.A.cached_prop": [], "funcy.suppress": [], "tests.test_objects.test_monkey": ["tests.test_objects.test_monkey.A.f"], "tests.test_objects.test_monkey.A.f": [], "tests.test_objects.test_monkey.f": [], "tests.test_objects.test_monkey_with_name": ["tests.test_objects.test_monkey_with_name.A.f"], "tests.test_objects.test_monkey_with_name.A.f": [], "tests.test_objects.test_monkey_with_name.g": [], "tests.test_objects.test_monkey_property": [], "tests.test_objects.test_monkey_property.prop": [], "tests.test_objects.f": [], "tests.test_objects.test_monkey_module": ["tests.test_objects.test_monkey_module.f"], "tests.test_objects.test_monkey_module.f": [], "tests.test_objects.test_namespace": ["tests.test_objects.test_namespace.tests.<lambda1>"], "tests.test_objects.test_namespace.tests.<lambda1>": ["<builtin>.isinstance"], "<builtin>.isinstance": [], "tests.test_objects.test_lazy_object": [], "tests.test_objects.test_lazy_object.A.__init__": [], "tests.test_funcolls": [], "tests.test_funcolls.test_all_fn": ["funcy.compat.lfilter", "<builtin>.range"], "<builtin>.range": [], "funcy.compat.lfilter": [], "tests.test_funcolls.test_any_fn": ["funcy.compat.lfilter", "<builtin>.range"], "tests.test_funcolls.test_none_fn": ["funcy.compat.lfilter", "<builtin>.range"], "tests.test_funcolls.test_one_fn": ["funcy.compat.lfilter", "<builtin>.range"], "tests.test_funcolls.test_some_fn": [], "tests.test_funcolls.test_extended_fns": ["<builtin>.set"], "<builtin>.set": [], "tests.test_types": [], "tests.test_types.test_iterable": ["<builtin>.iter", "funcy.compat.range"], "<builtin>.iter": [], "funcy.compat.range": [], "tests.test_types.test_is_iter": ["<builtin>.iter", "funcy.compat.range"], "tests.test_seqs": ["pytest.mark.skipif"], "tests.test_seqs.test_repeatedly": [], "tests.test_seqs.test_repeatedly.<lambda1>": ["<builtin>.next"], "<builtin>.next": [], "tests.test_seqs.test_iterate": [], "tests.test_seqs.test_take": [], "tests.test_seqs.test_drop": ["<builtin>.isinstance", "<builtin>.list"], "<builtin>.list": [], "tests.test_seqs.test_first": [], "tests.test_seqs.test_second": [], "tests.test_seqs.test_last": ["funcy.compat.range"], "tests.test_seqs.test_nth": [], "tests.test_seqs.test_butlast": ["<builtin>.list"], "tests.test_seqs.test_ilen": ["funcy.compat.range"], "tests.test_seqs.test_lmap": ["<builtin>.set", "<builtin>.slice"], "<builtin>.slice": [], "pytest.mark.skipif": [], "tests.test_seqs.test_map_multi": [], "tests.test_seqs.test_imap_strange": ["<builtin>.map", "<builtin>.list"], "<builtin>.map": [], "tests.test_seqs.test_filter": ["<builtin>.set"], "tests.test_seqs.test_remove": ["funcy.compat.range"], "tests.test_seqs.test_keep": ["funcy.compat.range"], "tests.test_seqs.test_concat": ["<builtin>.list"], "tests.test_seqs.test_cat": ["<builtin>.list", "funcy.compat.range"], "tests.test_seqs.test_flatten": [], "tests.test_seqs.test_flatten_follow": [], "tests.test_seqs.test_mapcat": ["<builtin>.list"], "tests.test_seqs.test_mapcat.<lambda1>": [], "tests.test_seqs.test_interleave": ["<builtin>.list"], "tests.test_seqs.test_iterpose": ["<builtin>.list"], "tests.test_seqs.test_takewhile": ["<builtin>.list"], "tests.test_seqs.test_distinct": ["<builtin>.list"], "tests.test_seqs.test_split": ["funcy.compat.range"], "tests.test_seqs.test_lsplit": ["pytest.raises", "funcy.compat.range"], "tests.test_seqs.test_split_at": ["funcy.compat.range"], "tests.test_seqs.test_split_by": [], "tests.test_seqs.test_group_by": ["funcy.compat.range"], "tests.test_seqs.test_group_by_keys": [], "tests.test_seqs.test_group_values": [], "tests.test_seqs.test_count_by": ["funcy.compat.range"], "tests.test_seqs.test_count_by_is_defaultdict": [], "tests.test_seqs.test_count_reps": [], "tests.test_seqs.test_partition": ["<builtin>.iter", "funcy.compat.range"], "tests.test_seqs.test_chunks": ["<builtin>.iter", "funcy.compat.range"], "tests.test_seqs.test_partition_by": [], "tests.test_seqs.test_partition_by.<lambda1>": [], "tests.test_seqs.test_with_prev": ["<builtin>.list", "funcy.compat.range"], "tests.test_seqs.test_with_next": ["<builtin>.list", "funcy.compat.range"], "tests.test_seqs.test_pairwise": ["<builtin>.list", "funcy.compat.range"], "tests.test_seqs.test_reductions": [], "tests.test_seqs.test_reductions.<lambda1>": [], "tests.test_seqs.test_sums": [], "tests.test_seqs.test_without": [], "tests": [], "tests.test_interface": ["pkgutil.iter_modules", "pytest.mark.skipif", "<builtin>.getattr", "<builtin>.list"], "pkgutil.iter_modules": [], "<builtin>.getattr": [], "tests.test_interface.test_match": [], "tests.test_interface.test_full_py3": ["<builtin>.sorted", "funcy.py3.lcat"], "<builtin>.sorted": [], "funcy.py3.lcat": [], "tests.test_interface.test_full": ["<builtin>.len"], "<builtin>.len": [], "tests.test_interface.test_name_clashes": ["funcy.py3.count_reps", "funcy.py3.cat"], "funcy.py3.cat": [], "funcy.py3.count_reps": [], "tests.test_interface.test_renames": ["<builtin>.set"], "tests.test_interface.test_docs": ["<builtin>.getattr"], "tests.test_interface.test_list_iter": ["funcy.map", "funcy.py3.is_list", "funcy.py2.map", "funcy.py3.is_iter", "funcy.py3.map"], "funcy.py2.map": [], "funcy.py3.is_list": [], "funcy.py3.map": [], "funcy.py3.is_iter": [], "funcy.map": [], "tests.test_debug": [], "tests.test_debug.test_tap": ["tests.test_debug.capture"], "tests.test_debug.capture": ["cStringIO.StringIO", "sys.stdout.seek", "io.StringIO", "tests.test_debug.test_print_errors_manager.f", "sys.stdout.read", "tests.test_debug.test_print_errors_recursion.f"], "tests.test_debug.test_log_calls": ["tests.test_debug.test_log_calls.f"], "tests.test_debug.test_log_calls.f": [], "tests.test_debug.test_print_calls": ["tests.test_debug.capture"], "tests.test_debug.test_print_calls.f": [], "tests.test_debug.test_log_calls_raise": ["funcy.flow.silent"], "tests.test_debug.test_log_calls_raise.f": ["<builtin>.Exception"], "<builtin>.Exception": [], "funcy.flow.silent": [], "tests.test_debug.test_log_errors": ["re.search", "<builtin>.len", "funcy.flow.silent"], "tests.test_debug.test_log_errors.f": [], "re.search": [], "tests.test_debug.test_log_errors_manager": ["re.search", "<builtin>.len", "<builtin>.print"], "<builtin>.print": [], "tests.test_debug.test_print_errors": ["funcy.flow.silent", "tests.test_debug.capture"], "tests.test_debug.test_print_errors.error": [], "tests.test_debug.test_print_errors_manager": ["funcy.flow.silent", "tests.test_debug.capture"], "tests.test_debug.test_print_errors_manager.f": [], "tests.test_debug.test_print_errors_recursion": ["funcy.flow.silent", "tests.test_debug.capture"], "tests.test_debug.test_print_errors_recursion.f": ["tests.test_debug.test_print_errors_recursion.f"], "tests.test_debug.test_log_durations": ["<builtin>.iter", "funcy.py3.lmap"], "tests.test_debug.test_log_durations.<lambda1>": ["<builtin>.next"], "tests.test_debug.test_log_durations.<lambda2>": [], "funcy.py3.lmap": [], "tests.test_debug.test_log_durations_ex": ["<builtin>.iter", "<builtin>.len", "funcy.py3.lmap"], "tests.test_debug.test_log_durations_ex.<lambda1>": ["<builtin>.next"], "tests.test_debug.test_log_durations_ex.<lambda2>": [], "tests.test_debug.test_log_iter_dirations": ["<builtin>.len"], "io.StringIO": [], "cStringIO.StringIO": [], "sys.stdout.seek": [], "sys.stdout.read": [], "tests.test_calc": ["pytest.mark.parametrize"], "tests.test_calc.test_memoize": ["tests.test_calc.test_memoize.inc"], "tests.test_calc.test_memoize.inc": [], "tests.test_calc.test_memoize_args_kwargs": ["tests.test_calc.test_memoize_args_kwargs.mul"], "tests.test_calc.test_memoize_args_kwargs.mul": [], "tests.test_calc.test_memoize_memory": ["tests.test_calc.test_memoize_memory.inc"], "tests.test_calc.test_memoize_memory.inc": [], "tests.test_calc.test_memoize_key_func": ["tests.test_calc.test_memoize_key_func.inc"], "tests.test_calc.test_memoize_key_func.inc": [], "tests.test_calc.test_make_lookuper": ["tests.test_calc.test_make_lookuper.letter_index", "pytest.raises"], "tests.test_calc.test_make_lookuper.letter_index": ["<builtin>.enumerate"], "<builtin>.enumerate": [], "tests.test_calc.test_make_lookuper_nested": ["pytest.raises", "tests.test_calc.test_make_lookuper_nested.function_table", "math.sin", "math.cos"], "tests.test_calc.test_make_lookuper_nested.function_table": ["<builtin>.range", "math.sin", "math.cos"], "math.sin": [], "math.cos": [], "tests.test_calc.test_silent_lookuper": ["tests.test_calc.test_silent_lookuper.letter_index"], "tests.test_calc.test_silent_lookuper.letter_index": ["<builtin>.enumerate"], "tests.test_calc.test_silnent_lookuper_nested": ["tests.test_calc.test_silnent_lookuper_nested.function_table", "math.sin"], "tests.test_calc.test_silnent_lookuper_nested.function_table": ["<builtin>.range", "math.sin", "math.cos"], "pytest.mark.parametrize": [], "tests.test_calc.test_cache": ["tests.test_calc.test_cache.inc"], "tests.test_calc.test_cache.inc": [], "tests.test_calc.test_cache_mixed_args": ["tests.test_calc.test_cache_mixed_args.add"], "tests.test_calc.test_cache_mixed_args.add": [], "tests.test_calc.test_cache_timedout": ["<builtin>.len", "tests.test_calc.test_cache_timedout.inc"], "tests.test_calc.test_cache_timedout.inc": [], "tests.test_calc.test_cache_invalidate": ["tests.test_calc.test_cache_invalidate.inc"], "tests.test_calc.test_cache_invalidate.inc": [], "tests.test_tree": [], "tests.test_tree.test_tree_leaves": [], "tests.test_tree.test_tree_nodes": [], "tests.test_flow": ["pytest.mark.parametrize"], "tests.test_flow.test_silent": [], "tests.test_flow.test_ignore": ["pytest.raises"], "tests.test_flow.test_raiser": ["pytest.raises"], "tests.test_flow.test_suppress": ["pytest.raises"], "tests.test_flow.test_reraise": ["tests.test_flow.test_reraise.erry", "<builtin>.ValueError", "pytest.raises"], "tests.test_flow.test_reraise.erry": [], "tests.test_flow.test_reraise.<lambda1>": ["<builtin>.str"], "<builtin>.str": [], "<builtin>.ValueError": [], "tests.test_flow.test_retry": ["tests.test_flow._make_failing.failing", "tests.test_flow._make_failing", "pytest.raises"], "tests.test_flow._make_failing": [], "tests.test_flow._make_failing.failing": ["<builtin>.len"], "tests.test_flow.test_retry_timeout": ["pytest.raises"], "tests.test_flow.test_retry_timeout.failing": [], "tests.test_flow.test_retry_timeout.<lambda1>": [], "tests.test_flow.test_retry_many_errors": ["tests.test_flow._make_failing.failing", "tests.test_flow._make_failing"], "tests.test_flow.test_retry_filter": ["tests.test_flow._make_failing", "pytest.raises"], "tests.test_flow.test_retry_filter.<lambda1>": ["<builtin>.str"], "tests.test_flow.test_fallback": ["pytest.raises"], "tests.test_flow.test_fallback.<lambda1>": [], "tests.test_flow.test_fallback.<lambda2>": [], "tests.test_flow.test_fallback.<lambda3>": [], "tests.test_flow.test_limit_error_rate": ["tests.test_flow.test_limit_error_rate.limited", "pytest.raises"], "tests.test_flow.test_limit_error_rate.limited": [], "tests.test_flow.test_throttle": ["<builtin>.iter", "tests.test_flow.test_throttle.throttled"], "tests.test_flow.test_throttle.<lambda1>": ["<builtin>.next"], "tests.test_flow.test_throttle.throttled": [], "tests.test_flow.test_throttle_class": [], "tests.test_flow.test_throttle_class.A.foo": [], "tests.test_flow.test_post_processing": ["tests.test_flow.test_post_processing.my_max"], "tests.test_flow.test_post_processing.my_max": [], "tests.test_flow.test_collecting": ["tests.test_flow.test_collecting.doubles"], "tests.test_flow.test_collecting.doubles": [], "tests.test_flow.test_once": ["tests.test_flow.test_once.call"], "tests.test_flow.test_once.call": [], "tests.test_flow.test_once_per": ["tests.test_flow.test_once_per.call"], "tests.test_flow.test_once_per.call": [], "tests.test_flow.test_once_per_args": ["tests.test_flow.test_once_per_args.call"], "tests.test_flow.test_once_per_args.call": [], "tests.test_flow.test_wrap_with": ["tests.test_flow.test_wrap_with.calc"], "tests.test_flow.test_wrap_with.Manager.__enter__": [], "tests.test_flow.test_wrap_with.Manager.__exit__": [], "tests.test_flow.test_wrap_with.calc": [], "tests.test_funcmakers": [], "tests.test_funcmakers.test_callable": [], "tests.test_funcmakers.test_callable.<lambda1>": [], "tests.test_funcmakers.test_int": ["pytest.raises"], "tests.test_funcmakers.test_slice": ["<builtin>.slice"], "tests.test_funcmakers.test_str": [], "tests.test_funcmakers.test_dict": ["pytest.raises", "collections.defaultdict"], "collections.defaultdict": [], "tests.test_funcmakers.test_set": ["<builtin>.set"], "tests.test_strings": [], "tests.test_strings.test_re_find": [], "tests.test_strings.test_re_all": [], "tests.test_strings.test_str_join": ["<builtin>.isinstance", "<builtin>.type"], "<builtin>.type": [], "tests.test_strings.test_cut_prefix": [], "tests.test_strings.test_cut_suffix": [], "tests.test_funcs": [], "tests.test_funcs.test_caller": [], "tests.test_funcs.test_constantly": [], "tests.test_funcs.test_partial": [], "tests.test_funcs.test_partial.<lambda1>": [], "tests.test_funcs.test_func_partial": [], "tests.test_funcs.test_func_partial.A.<lambda1>": [], "tests.test_funcs.test_rpartial": [], "tests.test_funcs.test_rpartial.<lambda1>": [], "tests.test_funcs.test_curry": [], "tests.test_funcs.test_curry.<lambda1>": [], "tests.test_funcs.test_curry.<lambda2>": [], "tests.test_funcs.test_curry_funcy": [], "tests.test_funcs.test_rcurry": [], "tests.test_funcs.test_rcurry.<lambda1>": [], "tests.test_funcs.test_autocurry": ["pytest.raises"], "tests.test_funcs.test_autocurry.<lambda1>": [], "tests.test_funcs.test_autocurry_named": ["pytest.raises"], "tests.test_funcs.test_autocurry_named.<lambda1>": [], "tests.test_funcs.test_autocurry_kwargs": ["pytest.raises"], "tests.test_funcs.test_autocurry_kwargs.<lambda1>": [], "tests.test_funcs.test_autocurry_kwargs.<lambda2>": [], "tests.test_funcs.test_autocurry_builtin": [], "tests.test_funcs.test_autocurry_hard": ["pytest.raises", "<builtin>.list"], "tests.test_funcs.test_autocurry_hard.required_star": ["funcy.py2.map"], "tests.test_funcs.test_autocurry_class": [], "tests.test_funcs.test_autocurry_class.A.__init__": [], "tests.test_funcs.test_autocurry_docstring": [], "tests.test_funcs.test_autocurry_docstring.f": [], "tests.test_funcs.test_compose": [], "tests.test_funcs.test_rcompose": [], "tests.test_funcs.test_complement": [], "tests.test_funcs.test_juxt": ["funcy.py2.map"], "tests.test_funcs.test_iffy": ["<builtin>.set", "funcy.py2.map"], "tests.test_colls": [], "tests.test_colls.eq": ["<builtin>.isinstance", "<builtin>.type"], "tests.test_colls.inc": [], "tests.test_colls.hinc": ["<builtin>.map"], "tests.test_colls.test_empty": ["collections.defaultdict", "tests.test_colls.eq"], "tests.test_colls.test_empty_iter": ["<builtin>.iter", "<builtin>.isinstance", "<builtin>.list"], "tests.test_colls.test_empty_quirks": [], "tests.test_colls.test_iteritems": ["<builtin>.list"], "tests.test_colls.test_itervalues": ["<builtin>.list"], "tests.test_colls.test_merge": ["tests.test_colls.eq"], "tests.test_colls.test_join": ["<builtin>.isinstance", "<builtin>.tuple", "<builtin>.list", "pytest.raises", "<builtin>.range", "collections.defaultdict", "tests.test_colls.eq"], "<builtin>.tuple": [], "tests.test_colls.test_join_iter": ["<builtin>.isinstance", "<builtin>.list", "<builtin>.iter", "<builtin>.range", "tests.test_colls.eq"], "tests.test_colls.test_merge_with": [], "tests.test_colls.test_join_with": ["<builtin>.range"], "tests.test_colls.test_walk": ["tests.test_colls.eq"], "tests.test_colls.test_walk_iter": ["<builtin>.isinstance", "itertools.chain", "<builtin>.list"], "itertools.chain": [], "tests.test_colls.test_walk_extended": [], "tests.test_colls.test_walk_keys": [], "tests.test_colls.test_walk_values": [], "tests.test_colls.test_walk_values_defaultdict": ["collections.defaultdict"], "tests.test_colls.test_walk_values_defaultdict.<lambda1>": [], "tests.test_colls.test_select": ["collections.defaultdict", "tests.test_colls.eq"], "tests.test_colls.test_select_extended": [], "tests.test_colls.test_select_keys": [], "tests.test_colls.test_select_values": [], "tests.test_colls.test_compact": ["tests.test_colls.eq"], "tests.test_colls.test_is_distinct": [], "tests.test_colls.test_all": ["<builtin>.all"], "<builtin>.all": [], "tests.test_colls.test_all_extended": ["<builtin>.all"], "tests.test_colls.test_any": ["<builtin>.any"], "<builtin>.any": [], "tests.test_colls.test_one": [], "tests.test_colls.test_none": [], "tests.test_colls.test_some": ["<builtin>.range"], "tests.test_colls.test_zipdict": ["itertools.count"], "itertools.count": [], "tests.test_colls.test_flip": [], "tests.test_colls.test_project": ["collections.defaultdict", "tests.test_colls.eq"], "tests.test_colls.test_omit": ["collections.defaultdict", "tests.test_colls.eq"], "tests.test_colls.test_zip_values": ["pytest.raises", "<builtin>.list"], "tests.test_colls.test_zip_dicts": ["pytest.raises", "<builtin>.list"], "tests.test_colls.test_get_in": [], "tests.test_colls.test_get_in_list": [], "tests.test_colls.test_set_in": [], "tests.test_colls.test_set_in_list": [], "tests.test_colls.test_update_in": [], "tests.test_colls.test_del_in": ["pytest.raises"], "tests.test_colls.test_has_path": [], "tests.test_colls.test_has_path_list": [], "tests.test_colls.test_where": ["<builtin>.isinstance", "<builtin>.list"], "tests.test_colls.test_lwhere": [], "tests.test_colls.test_pluck": [], "tests.test_colls.test_pluck_attr": ["collections.namedtuple"], "collections.namedtuple": [], "tests.test_colls.test_invoke": [], "tests.test_decorators": [], "tests.test_decorators.test_decorator_no_args": ["tests.test_decorators.test_decorator_no_args.inc", "tests.test_decorators.test_decorator_no_args.ten"], "tests.test_decorators.test_decorator_no_args.inc": ["tests.test_decorators.test_decorator_no_args.ten"], "tests.test_decorators.test_decorator_no_args.ten": [], "tests.test_decorators.test_decorator_with_args": ["tests.test_decorators.test_decorator_with_args.ten", "tests.test_decorators.test_decorator_with_args.add", "tests.test_decorators.test_decorator_with_args.add.<RETURN>"], "tests.test_decorators.test_decorator_with_args.add": [], "tests.test_decorators.test_decorator_with_args.add.<RETURN>": [], "tests.test_decorators.test_decorator_with_args.ten": [], "tests.test_decorators.test_decorator_kw_only_args": ["tests.test_decorators.test_decorator_kw_only_args.add"], "tests.test_decorators.test_decorator_kw_only_args.add": ["tests.test_decorators.test_decorator_kw_only_args.ten"], "tests.test_decorators.test_decorator_kw_only_args.ten": [], "tests.test_decorators.test_decorator_access_arg": ["tests.test_decorators.test_decorator_access_arg.multiply", "tests.test_decorators.test_decorator_access_arg.square"], "tests.test_decorators.test_decorator_access_arg.multiply": ["tests.test_decorators.test_decorator_access_arg.square"], "tests.test_decorators.test_decorator_access_arg.square": [], "tests.test_decorators.test_decorator_access_nonexistent_arg": ["tests.test_decorators.test_decorator_access_nonexistent_arg.return_x", "pytest.raises", "tests.test_decorators.test_decorator_access_nonexistent_arg.f"], "tests.test_decorators.test_decorator_access_nonexistent_arg.return_x": [], "tests.test_decorators.test_decorator_access_nonexistent_arg.f": [], "tests.test_decorators.test_decorator_required_arg": ["tests.test_decorators.test_decorator_required_arg.f", "pytest.raises", "tests.test_decorators.test_decorator_required_arg.deco"], "tests.test_decorators.test_decorator_required_arg.deco": [], "tests.test_decorators.test_decorator_required_arg.f": [], "tests.test_decorators.test_double_decorator_defaults": ["tests.test_decorators.test_double_decorator_defaults.noop", "tests.test_decorators.test_double_decorator_defaults.f", "tests.test_decorators.test_double_decorator_defaults.deco"], "tests.test_decorators.test_double_decorator_defaults.deco": [], "tests.test_decorators.test_double_decorator_defaults.noop": ["tests.test_decorators.test_double_decorator_defaults.f"], "tests.test_decorators.test_double_decorator_defaults.f": [], "tests.test_decorators.test_decorator_defaults": ["tests.test_decorators.test_decorator_defaults.f", "tests.test_decorators.test_decorator_defaults.deco"], "tests.test_decorators.test_decorator_defaults.deco": [], "tests.test_decorators.test_decorator_defaults.f": [], "tests.test_decorators.test_decorator_with_method": ["tests.test_decorators.test_decorator_with_method.inc"], "tests.test_decorators.test_decorator_with_method.inc": ["tests.test_decorators.test_decorator_with_method.A.ten_cls", "tests.test_decorators.test_decorator_with_method.A.ten", "tests.test_decorators.test_decorator_with_method.A.ten_static"], "tests.test_decorators.test_decorator_with_method.A.ten_cls": [], "tests.test_decorators.test_decorator_with_method.A.ten": [], "tests.test_decorators.test_decorator_with_method.A.ten_static": [], "tests.test_decorators.test_decorator_with_method_descriptor": ["tests.test_decorators.test_decorator_with_method_descriptor.exclaim"], "tests.test_decorators.test_decorator_with_method_descriptor.exclaim": [], "tests.test_decorators.test_chain_arg_access": ["tests.test_decorators.test_chain_arg_access.func", "tests.test_decorators.test_chain_arg_access.decor"], "tests.test_decorators.test_chain_arg_access.decor": ["tests.test_decorators.test_chain_arg_access.func"], "tests.test_decorators.test_chain_arg_access.func": [], "tests.test_decorators.test_meta_attribtes": ["tests.test_decorators.test_meta_attribtes.decor"], "tests.test_decorators.test_meta_attribtes.decor": ["tests.test_decorators.test_meta_attribtes.func"], "tests.test_decorators.test_meta_attribtes.func": [], "tests.test_decorators.test_decorator_introspection": ["tests.test_decorators.test_decorator_introspection.decor"], "tests.test_decorators.test_decorator_introspection.decor": []}