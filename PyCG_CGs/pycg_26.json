{"tests.test_utils": ["tests.test_utils._network", "pytest.mark.parametrize", "tests.test_utils._network.wrapper", "tests.test_utils._network.<lambda1>", "numpy.random.randn"], "numpy.random.randn": [], "tests.test_utils._network": [], "tests.test_utils._network.<lambda1>": ["tests.test_utils._network"], "tests.test_utils._network.wrapper": ["pytest.skip", "urllib.request.urlopen"], "urllib.request.urlopen": [], "pytest.skip": [], "tests.test_utils.test_ci_to_errsize": ["seaborn.utils.ci_to_errsize", "numpy.testing.assert_array_equal", "numpy.array"], "numpy.array": [], "seaborn.utils.ci_to_errsize": [], "numpy.testing.assert_array_equal": [], "tests.test_utils.test_desaturate": ["seaborn.utils.desaturate"], "seaborn.utils.desaturate": [], "tests.test_utils.test_desaturation_prop": ["pytest.raises", "seaborn.utils.desaturate"], "pytest.raises": [], "tests.test_utils.test_saturate": ["seaborn.utils.saturate"], "seaborn.utils.saturate": [], "pytest.mark.parametrize": [], "tests.test_utils.test_to_utf8": ["<builtin>.type", "seaborn.utils.to_utf8"], "seaborn.utils.to_utf8": [], "<builtin>.type": [], "tests.test_utils.TestSpineUtils.test_despine": ["<builtin>.dict", "<builtin>.zip", "seaborn.utils.despine", "matplotlib.pyplot.subplots"], "matplotlib.pyplot.subplots": [], "seaborn.utils.despine": [], "<builtin>.zip": [], "<builtin>.dict": [], "tests.test_utils.TestSpineUtils.test_despine_specific_axes": ["seaborn.utils.despine", "matplotlib.pyplot.subplots"], "tests.test_utils.TestSpineUtils.test_despine_with_offset": ["seaborn.utils.despine", "matplotlib.pyplot.subplots"], "tests.test_utils.TestSpineUtils.test_despine_side_specific_offset": ["seaborn.utils.despine", "<builtin>.dict", "matplotlib.pyplot.subplots"], "tests.test_utils.TestSpineUtils.test_despine_with_offset_specific_axes": ["seaborn.utils.despine", "matplotlib.pyplot.subplots"], "tests.test_utils.TestSpineUtils.test_despine_trim_spines": ["seaborn.utils.despine", "matplotlib.pyplot.subplots"], "tests.test_utils.TestSpineUtils.test_despine_trim_inverted": ["seaborn.utils.despine", "matplotlib.pyplot.subplots"], "tests.test_utils.TestSpineUtils.test_despine_trim_noticks": ["seaborn.utils.despine", "matplotlib.pyplot.subplots"], "tests.test_utils.TestSpineUtils.test_despine_trim_categorical": ["seaborn.utils.despine", "matplotlib.pyplot.subplots"], "tests.test_utils.TestSpineUtils.test_despine_moved_ticks": ["matplotlib.pyplot.close", "seaborn.utils.despine", "matplotlib.pyplot.subplots"], "matplotlib.pyplot.close": [], "tests.test_utils.test_ticklabels_overlap": ["seaborn.utils.axis_ticklabels_overlap", "seaborn.utils.axes_ticklabels_overlap", "seaborn.rcmod.set", "matplotlib.pyplot.subplots"], "seaborn.rcmod.set": [], "seaborn.utils.axis_ticklabels_overlap": [], "seaborn.utils.axes_ticklabels_overlap": [], "tests.test_utils.test_locator_to_legend_entries": ["seaborn.utils.locator_to_legend_entries", "re.match", "matplotlib.ticker.LogLocator", "<builtin>.enumerate", "matplotlib.ticker.MaxNLocator"], "matplotlib.ticker.MaxNLocator": [], "seaborn.utils.locator_to_legend_entries": [], "matplotlib.ticker.LogLocator": [], "<builtin>.enumerate": [], "re.match": [], "tests.test_utils.test_move_legend_matplotlib_objects": ["seaborn.utils.move_legend", "seaborn.utils._draw_figure", "<builtin>.zip", "matplotlib.pyplot.subplots"], "seaborn.utils._draw_figure": [], "seaborn.utils.move_legend": [], "tests.test_utils.test_move_legend_grid_object": ["<builtin>.enumerate", "seaborn.axisgrid.FacetGrid", "seaborn.utils._draw_figure", "matplotlib.colors.to_rgb", "seaborn.utils.move_legend"], "seaborn.axisgrid.FacetGrid": [], "matplotlib.colors.to_rgb": [], "tests.test_utils.test_move_legend_input_checks": ["matplotlib.pyplot.figure", "pytest.raises", "seaborn.utils.move_legend"], "matplotlib.pyplot.figure": [], "tests.test_utils.check_load_dataset": ["seaborn.utils.load_dataset", "<builtin>.isinstance"], "seaborn.utils.load_dataset": [], "<builtin>.isinstance": [], "tests.test_utils.check_load_cached_dataset": ["seaborn.utils.load_dataset", "pandas.testing.assert_frame_equal", "tempfile.TemporaryDirectory"], "tempfile.TemporaryDirectory": [], "pandas.testing.assert_frame_equal": [], "tests.test_utils.test_get_dataset_names": ["seaborn.utils.get_dataset_names"], "seaborn.utils.get_dataset_names": [], "tests.test_utils.test_load_datasets": ["tests.test_utils.check_load_dataset", "seaborn.utils.get_dataset_names"], "tests.test_utils.test_load_dataset_string_error": ["seaborn.utils.load_dataset", "pytest.raises"], "tests.test_utils.test_load_dataset_passed_data_error": ["pandas.DataFrame", "seaborn.utils.load_dataset", "pytest.raises"], "pandas.DataFrame": [], "tests.test_utils.test_load_cached_datasets": ["tests.test_utils.check_load_cached_dataset", "seaborn.utils.get_dataset_names"], "tests.test_utils.test_relative_luminance": ["matplotlib.cm.RdBu", "numpy.linspace", "pytest.approx", "seaborn.utils.relative_luminance", "<builtin>.zip"], "seaborn.utils.relative_luminance": [], "pytest.approx": [], "numpy.linspace": [], "matplotlib.cm.RdBu": [], "tests.test_utils.test_get_color_cycle": ["seaborn.utils.get_color_cycle", "matplotlib.rc_context"], "matplotlib.rc_context": [], "seaborn.utils.get_color_cycle": [], "tests.test_utils.test_remove_na": ["pandas.testing.assert_series_equal", "numpy.testing.assert_array_equal", "numpy.array", "pandas.Series", "seaborn.utils.remove_na"], "seaborn.utils.remove_na": [], "pandas.Series": [], "pandas.testing.assert_series_equal": [], "tests.test_utils.test_assign_default_kwargs": ["seaborn.utils._assign_default_kwargs"], "tests.test_utils.test_assign_default_kwargs.f": [], "tests.test_utils.test_assign_default_kwargs.g": [], "seaborn.utils._assign_default_kwargs": [], "tests.test_utils.test_draw_figure": ["seaborn.utils._draw_figure", "matplotlib.pyplot.subplots"], "tests.test_utils.test_deprecate_ci": ["seaborn.utils._deprecate_ci", "pytest.warns"], "pytest.warns": [], "seaborn.utils._deprecate_ci": [], "tests.test_utils.test_version_predates": ["seaborn.utils._version_predates", "types.ModuleType"], "types.ModuleType": [], "seaborn.utils._version_predates": [], "tests.test_distributions": [], "tests.test_distributions.get_contour_coords": ["numpy.argmax", "<builtin>.isinstance"], "numpy.argmax": [], "tests.test_distributions.get_contour_color": ["<builtin>.isinstance"], "numpy.random.RandomState": [], "tests.test_distributions.TestDistPlot": ["numpy.random.RandomState"], "tests.test_distributions.TestDistPlot.test_hist_bins": ["pytest.approx", "numpy.histogram_bin_edges", "pytest.warns", "matplotlib.pyplot.close", "seaborn.distributions.distplot", "<builtin>.zip"], "numpy.histogram_bin_edges": [], "seaborn.distributions.distplot": [], "tests.test_distributions.TestDistPlot.test_elements": ["pytest.warns", "seaborn.distributions.distplot", "matplotlib.pyplot.close", "<builtin>.len"], "<builtin>.len": [], "tests.test_distributions.TestDistPlot.test_elements.Norm.fit": [], "tests.test_distributions.TestDistPlot.test_elements.Norm.pdf": ["numpy.zeros_like"], "numpy.zeros_like": [], "tests.test_distributions.TestDistPlot.test_distplot_with_nans": ["matplotlib.pyplot.subplots", "pytest.warns", "numpy.array_equal", "seaborn.distributions.distplot", "<builtin>.zip", "numpy.append"], "numpy.append": [], "numpy.array_equal": [], "tests.test_distributions.SharedAxesLevelTests.test_color": ["matplotlib.pyplot.figure", "seaborn._testing.assert_colors_equal"], "seaborn._testing.assert_colors_equal": [], "<builtin>.staticmethod": [], "tests.test_distributions.TestRugPlot": ["pytest.mark.parametrize", "<builtin>.staticmethod"], "tests.test_distributions.TestRugPlot.get_last_color": [], "tests.test_distributions.TestRugPlot.assert_rug_equal": ["numpy.testing.assert_array_equal"], "tests.test_distributions.TestRugPlot.test_long_data": ["numpy.asarray", "tests.test_distributions.TestRugPlot.assert_rug_equal", "matplotlib.pyplot.subplots", "seaborn.distributions.rugplot", "itertools.product"], "numpy.asarray": [], "seaborn.distributions.rugplot": [], "itertools.product": [], "tests.test_distributions.TestRugPlot.test_bivariate_data": ["seaborn.distributions.rugplot", "tests.test_distributions.TestRugPlot.assert_rug_equal", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestRugPlot.test_wide_vs_long_data": ["numpy.sort", "matplotlib.pyplot.subplots", "seaborn.distributions.rugplot", "numpy.testing.assert_array_equal", "numpy.concatenate", "numpy.array"], "numpy.sort": [], "numpy.concatenate": [], "tests.test_distributions.TestRugPlot.test_flat_vector": ["seaborn.distributions.rugplot", "tests.test_distributions.TestRugPlot.assert_rug_equal", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestRugPlot.test_datetime_data": ["numpy.stack", "seaborn.distributions.rugplot", "numpy.testing.assert_array_equal", "matplotlib.dates.date2num", "numpy.dates.date2num"], "numpy.stack": [], "numpy.dates.date2num": [], "matplotlib.dates.date2num": [], "tests.test_distributions.TestRugPlot.test_empty_data": ["seaborn.distributions.rugplot"], "tests.test_distributions.TestRugPlot.test_a_deprecation": ["seaborn.distributions.rugplot", "pytest.warns", "tests.test_distributions.TestRugPlot.assert_rug_equal", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestRugPlot.test_axis_deprecation": ["seaborn.distributions.rugplot", "pytest.warns", "tests.test_distributions.TestRugPlot.assert_rug_equal", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestRugPlot.test_vertical_deprecation": ["seaborn.distributions.rugplot", "pytest.warns", "tests.test_distributions.TestRugPlot.assert_rug_equal", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestRugPlot.test_rug_data": ["numpy.stack", "seaborn.distributions.rugplot", "numpy.testing.assert_array_equal", "numpy.full", "numpy.zeros"], "numpy.zeros": [], "numpy.full": [], "tests.test_distributions.TestRugPlot.test_rug_colors": ["numpy.ones", "<builtin>.len", "seaborn.distributions.rugplot", "numpy.testing.assert_array_equal", "<builtin>.enumerate", "seaborn.palettes.color_palette", "seaborn._oldcore.categorical_order"], "seaborn._oldcore.categorical_order": [], "seaborn.palettes.color_palette": [], "numpy.ones": [], "tests.test_distributions.TestRugPlot.test_expand_margins": ["seaborn.distributions.rugplot", "pytest.approx", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestRugPlot.test_multiple_rugs": ["seaborn.distributions.rugplot", "numpy.linspace"], "tests.test_distributions.TestRugPlot.test_matplotlib_kwargs": ["seaborn.distributions.rugplot", "numpy.all"], "numpy.all": [], "tests.test_distributions.TestRugPlot.test_axis_labels": ["seaborn.distributions.rugplot"], "tests.test_distributions.TestRugPlot.test_log_scale": ["matplotlib.pyplot.figure", "numpy.stack", "numpy.testing.assert_array_almost_equal", "seaborn.distributions.rugplot"], "numpy.testing.assert_array_almost_equal": [], "tests.test_distributions.TestKDEPlotUnivariate": ["pytest.mark.parametrize", "pytest.mark.skipif", "<builtin>.staticmethod"], "tests.test_distributions.TestKDEPlotUnivariate.get_last_color": [], "tests.test_distributions.TestKDEPlotUnivariate.test_color": ["matplotlib.pyplot.figure", "<builtin>.super", "seaborn._testing.assert_colors_equal", "tests.test_distributions.TestKDEPlotUnivariate.get_last_color"], "<builtin>.super": [], "tests.test_distributions.TestKDEPlotUnivariate.test_long_vectors": ["itertools.product", "numpy.testing.assert_array_equal", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "seaborn.distributions.kdeplot": [], "tests.test_distributions.TestKDEPlotUnivariate.test_wide_vs_long_data": ["numpy.testing.assert_array_equal", "seaborn.distributions.kdeplot", "<builtin>.zip", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_flat_vector": ["numpy.testing.assert_array_equal", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_empty_data": ["seaborn.distributions.kdeplot"], "tests.test_distributions.TestKDEPlotUnivariate.test_singular_data": ["numpy.ones", "warnings.simplefilter", "warnings.catch_warnings", "pytest.warns", "seaborn.distributions.kdeplot"], "warnings.catch_warnings": [], "warnings.simplefilter": [], "tests.test_distributions.TestKDEPlotUnivariate.test_variable_assignment": ["numpy.testing.assert_array_equal", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_vertical_deprecation": ["pytest.warns", "numpy.testing.assert_array_equal", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_bw_deprecation": ["pytest.warns", "numpy.testing.assert_array_equal", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_kernel_deprecation": ["pytest.warns", "numpy.testing.assert_array_equal", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_shade_deprecation": ["pytest.warns", "numpy.testing.assert_array_equal", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_hue_colors": ["seaborn._testing.assert_colors_equal", "seaborn.palettes.color_palette", "<builtin>.zip", "matplotlib.colors.to_rgba", "seaborn.distributions.kdeplot"], "matplotlib.colors.to_rgba": [], "tests.test_distributions.TestKDEPlotUnivariate.test_hue_stacking": ["numpy.stack", "numpy.testing.assert_array_equal", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_hue_filling": ["numpy.stack", "numpy.testing.assert_array_almost_equal", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_fill_default": ["seaborn.distributions.kdeplot", "<builtin>.len"], "tests.test_distributions.TestKDEPlotUnivariate.test_fill_nondefault": ["seaborn.distributions.kdeplot", "<builtin>.len", "<builtin>.dict", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_color_cycle_interaction": ["seaborn._testing.assert_colors_equal", "matplotlib.pyplot.subplots", "matplotlib.pyplot.close", "matplotlib.colors.to_rgba", "seaborn.distributions.kdeplot"], "tests.test_distributions.TestKDEPlotUnivariate.test_artist_color": ["matplotlib.colors.to_rgba", "seaborn._testing.assert_colors_equal", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_datetime_scale": ["seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_multiple_argument_check": ["seaborn.distributions.kdeplot", "pytest.raises"], "tests.test_distributions.TestKDEPlotUnivariate.test_cut": ["seaborn.distributions.kdeplot", "<builtin>.len", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_clip": ["seaborn.distributions.kdeplot"], "tests.test_distributions.TestKDEPlotUnivariate.test_line_is_density": ["tests.test_distributions.integrate", "seaborn.distributions.kdeplot", "pytest.approx"], "tests.test_distributions.integrate": ["numpy.diff", "numpy.asarray"], "pytest.mark.skipif": [], "tests.test_distributions.TestKDEPlotUnivariate.test_cumulative": ["seaborn.distributions.kdeplot", "pytest.approx"], "tests.test_distributions.TestKDEPlotUnivariate.test_cumulative_requires_scipy": ["seaborn.distributions.kdeplot", "pytest.raises"], "tests.test_distributions.TestKDEPlotUnivariate.test_common_norm": ["tests.test_distributions.integrate", "pytest.approx", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_common_grid": ["seaborn.distributions.kdeplot", "<builtin>.zip", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_bw_method": ["numpy.diff", "seaborn.distributions.kdeplot", "numpy.abs", "matplotlib.pyplot.subplots"], "numpy.diff": [], "numpy.abs": [], "tests.test_distributions.TestKDEPlotUnivariate.test_bw_adjust": ["numpy.diff", "seaborn.distributions.kdeplot", "numpy.abs", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_log_scale_implicit": ["matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "numpy.log", "numpy.diff", "numpy.allclose", "seaborn.distributions.kdeplot"], "numpy.log": [], "numpy.allclose": [], "tests.test_distributions.TestKDEPlotUnivariate.test_log_scale_explicit": ["itertools.product", "numpy.testing.assert_array_equal", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_log_scale_with_hue": ["numpy.testing.assert_array_equal", "seaborn.distributions.kdeplot"], "tests.test_distributions.TestKDEPlotUnivariate.test_log_scale_normalization": ["tests.test_distributions.integrate", "numpy.log10", "seaborn.distributions.kdeplot", "pytest.approx"], "numpy.log10": [], "tests.test_distributions.TestKDEPlotUnivariate.test_weights": ["seaborn.distributions.kdeplot", "numpy.abs", "pytest.approx"], "tests.test_distributions.TestKDEPlotUnivariate.test_weight_norm": ["pytest.approx", "numpy.repeat", "numpy.concatenate", "tests.test_distributions.integrate", "seaborn.distributions.kdeplot"], "numpy.repeat": [], "tests.test_distributions.TestKDEPlotUnivariate.test_sticky_edges": ["seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_line_kws": ["seaborn._testing.assert_colors_equal", "seaborn.distributions.kdeplot"], "tests.test_distributions.TestKDEPlotUnivariate.test_input_checking": ["seaborn.distributions.kdeplot", "pytest.raises"], "tests.test_distributions.TestKDEPlotUnivariate.test_axis_labels": ["seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotUnivariate.test_legend": ["seaborn._testing.assert_colors_equal", "seaborn.utils._version_predates", "seaborn.palettes.color_palette", "seaborn._oldcore.categorical_order", "<builtin>.zip", "seaborn.distributions.kdeplot"], "tests.test_distributions.TestKDEPlotBivariate.test_long_vectors": ["numpy.testing.assert_array_equal", "seaborn.distributions.kdeplot", "<builtin>.zip", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotBivariate.test_singular_data": ["numpy.ones", "warnings.catch_warnings", "warnings.simplefilter", "pytest.warns", "numpy.arange", "seaborn.distributions.kdeplot"], "numpy.arange": [], "tests.test_distributions.TestKDEPlotBivariate.test_fill_artists": ["seaborn.utils._version_predates", "<builtin>.isinstance", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestKDEPlotBivariate.test_common_norm": ["tests.test_distributions.get_contour_coords", "<builtin>.len", "<builtin>.sum", "matplotlib.pyplot.subplots", "numpy.repeat", "seaborn.distributions.kdeplot"], "<builtin>.sum": [], "tests.test_distributions.TestKDEPlotBivariate.test_log_scale": ["tests.test_distributions.get_contour_coords", "matplotlib.pyplot.subplots", "seaborn.distributions._DistributionPlotter", "numpy.testing.assert_array_equal", "numpy.log10", "<builtin>.zip", "seaborn._statistics.KDE", "seaborn.distributions.kdeplot"], "seaborn.distributions._DistributionPlotter": [], "seaborn._statistics.KDE": [], "tests.test_distributions.TestKDEPlotBivariate.test_bandwidth": ["tests.test_distributions.get_contour_coords", "matplotlib.pyplot.subplots", "numpy.abs", "<builtin>.zip", "seaborn.distributions.kdeplot"], "tests.test_distributions.TestKDEPlotBivariate.test_weights": ["tests.test_distributions.get_contour_coords", "matplotlib.pyplot.subplots", "warnings.simplefilter", "numpy.repeat", "numpy.array_equal", "numpy.concatenate", "<builtin>.zip", "seaborn.distributions.kdeplot"], "tests.test_distributions.TestKDEPlotBivariate.test_hue_ignores_cmap": ["tests.test_distributions.get_contour_color", "pytest.warns", "seaborn._testing.assert_colors_equal", "seaborn.distributions.kdeplot"], "tests.test_distributions.TestKDEPlotBivariate.test_contour_line_colors": ["tests.test_distributions.get_contour_color", "seaborn._testing.assert_colors_equal", "seaborn.distributions.kdeplot"], "tests.test_distributions.TestKDEPlotBivariate.test_contour_line_cmap": ["matplotlib.colors.to_rgb", "numpy.colors.ListedColormap", "tests.test_distributions.get_contour_color", "seaborn.palettes.color_palette", "seaborn.distributions.kdeplot", "matplotlib.colors.ListedColormap"], "numpy.colors.ListedColormap": [], "matplotlib.colors.ListedColormap": [], "tests.test_distributions.TestKDEPlotBivariate.test_contour_fill_colors": ["seaborn.distributions.kdeplot", "seaborn.palettes.light_palette", "numpy.linspace"], "seaborn.palettes.light_palette": [], "tests.test_distributions.TestKDEPlotBivariate.test_colorbar": ["seaborn.distributions.kdeplot", "<builtin>.len"], "tests.test_distributions.TestKDEPlotBivariate.test_levels_and_thresh": ["numpy.linspace", "tests.test_distributions.get_contour_coords", "pytest.raises", "matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "<builtin>.zip", "<builtin>.dict", "seaborn.distributions.kdeplot"], "tests.test_distributions.TestKDEPlotBivariate.test_quantile_to_level": ["seaborn.distributions._DistributionPlotter", "numpy.linspace", "<builtin>.zip", "pytest.approx"], "tests.test_distributions.TestKDEPlotBivariate.test_input_checking": ["seaborn.distributions.kdeplot", "pytest.raises"], "tests.test_distributions.TestHistPlotUnivariate": ["itertools.product", "pytest.mark.parametrize", "pytest.fixture", "<builtin>.staticmethod"], "tests.test_distributions.TestHistPlotUnivariate.get_last_color": ["seaborn._testing.assert_colors_equal"], "tests.test_distributions.TestHistPlotUnivariate.test_color": ["<builtin>.super"], "tests.test_distributions.TestHistPlotUnivariate.test_long_vectors": ["matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "itertools.product", "<builtin>.zip", "seaborn.distributions.histplot"], "seaborn.distributions.histplot": [], "tests.test_distributions.TestHistPlotUnivariate.test_wide_vs_long_data": ["seaborn.distributions.histplot", "<builtin>.zip", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_flat_vector": ["seaborn.distributions.histplot", "<builtin>.zip", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_empty_data": ["seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotUnivariate.test_variable_assignment": ["seaborn.distributions.histplot", "<builtin>.zip", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_hue_fill_colors": ["seaborn._testing.assert_colors_equal", "seaborn.palettes.color_palette", "<builtin>.zip", "matplotlib.colors.to_rgba", "seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotUnivariate.test_hue_stack": ["matplotlib.pyplot.subplots", "numpy.reshape", "numpy.testing.assert_array_equal", "<builtin>.dict", "seaborn.distributions.histplot"], "numpy.reshape": [], "tests.test_distributions.TestHistPlotUnivariate.test_hue_fill": ["numpy.testing.assert_array_almost_equal", "matplotlib.pyplot.subplots", "numpy.reshape", "<builtin>.dict", "seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotUnivariate.test_hue_dodge": ["numpy.testing.assert_array_almost_equal", "matplotlib.pyplot.subplots", "numpy.reshape", "numpy.testing.assert_array_equal", "<builtin>.dict", "seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotUnivariate.test_hue_as_numpy_dodged": ["seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotUnivariate.test_multiple_input_check": ["seaborn.distributions.histplot", "pytest.raises"], "tests.test_distributions.TestHistPlotUnivariate.test_element_input_check": ["seaborn.distributions.histplot", "pytest.raises"], "tests.test_distributions.TestHistPlotUnivariate.test_count_stat": ["seaborn.distributions.histplot", "<builtin>.len", "<builtin>.sum"], "tests.test_distributions.TestHistPlotUnivariate.test_density_stat": ["seaborn.distributions.histplot", "numpy.multiply", "pytest.approx"], "numpy.multiply": [], "tests.test_distributions.TestHistPlotUnivariate.test_density_stat_common_norm": ["seaborn.distributions.histplot", "numpy.multiply", "pytest.approx"], "tests.test_distributions.TestHistPlotUnivariate.test_density_stat_unique_norm": ["seaborn.distributions.histplot", "numpy.multiply", "pytest.approx"], "pytest.fixture": [], "tests.test_distributions.TestHistPlotUnivariate.height_norm_arg": [], "tests.test_distributions.TestHistPlotUnivariate.test_probability_stat": ["seaborn.distributions.histplot", "<builtin>.sum", "pytest.approx"], "tests.test_distributions.TestHistPlotUnivariate.test_probability_stat_common_norm": ["seaborn.distributions.histplot", "<builtin>.sum", "pytest.approx"], "tests.test_distributions.TestHistPlotUnivariate.test_probability_stat_unique_norm": ["seaborn.distributions.histplot", "<builtin>.sum", "pytest.approx"], "tests.test_distributions.TestHistPlotUnivariate.test_percent_stat": ["seaborn.distributions.histplot", "<builtin>.sum"], "tests.test_distributions.TestHistPlotUnivariate.test_common_bins": ["seaborn.distributions.histplot", "numpy.testing.assert_array_equal"], "tests.test_distributions.TestHistPlotUnivariate.test_unique_bins": ["numpy.split", "numpy.testing.assert_array_almost_equal", "<builtin>.len", "numpy.array", "<builtin>.enumerate", "seaborn.distributions.histplot"], "numpy.split": [], "tests.test_distributions.TestHistPlotUnivariate.test_weights_with_missing": ["seaborn.distributions.histplot", "<builtin>.sum", "pytest.approx"], "tests.test_distributions.TestHistPlotUnivariate.test_weight_norm": ["numpy.repeat", "seaborn.distributions.histplot", "<builtin>.sum", "numpy.concatenate"], "tests.test_distributions.TestHistPlotUnivariate.test_discrete": ["seaborn.distributions.histplot", "<builtin>.len", "<builtin>.enumerate"], "tests.test_distributions.TestHistPlotUnivariate.test_discrete_categorical_default": ["seaborn.distributions.histplot", "<builtin>.enumerate"], "tests.test_distributions.TestHistPlotUnivariate.test_categorical_yaxis_inversion": ["seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotUnivariate.test_datetime_scale": ["seaborn.distributions.histplot", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_kde": ["tests.test_distributions.integrate", "seaborn.distributions.histplot", "numpy.multiply", "pytest.approx"], "tests.test_distributions.TestHistPlotUnivariate.test_kde_with_hue": ["pytest.approx", "<builtin>.enumerate", "numpy.multiply", "tests.test_distributions.integrate", "seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotUnivariate.test_kde_default_cut": ["seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotUnivariate.test_kde_hue": ["seaborn.distributions.histplot", "seaborn._testing.assert_colors_equal", "<builtin>.zip"], "tests.test_distributions.TestHistPlotUnivariate.test_kde_yaxis": ["seaborn.distributions.histplot", "numpy.testing.assert_array_equal", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_kde_line_kws": ["seaborn.distributions.histplot", "<builtin>.dict"], "tests.test_distributions.TestHistPlotUnivariate.test_kde_singular_data": ["warnings.simplefilter", "seaborn.distributions.histplot", "numpy.ones", "warnings.catch_warnings"], "tests.test_distributions.TestHistPlotUnivariate.test_element_default": ["seaborn.distributions.histplot", "<builtin>.len", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_bars_no_fill": ["seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotUnivariate.test_step_fill": ["seaborn.distributions.histplot", "numpy.testing.assert_array_equal", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_poly_fill": ["seaborn.distributions.histplot", "numpy.testing.assert_array_equal", "numpy.array", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_poly_no_fill": ["seaborn.distributions.histplot", "numpy.testing.assert_array_equal", "numpy.array", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_step_no_fill": ["seaborn.distributions.histplot", "numpy.testing.assert_array_equal", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_step_fill_xy": ["seaborn.distributions.histplot", "numpy.testing.assert_array_equal", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_step_no_fill_xy": ["seaborn.distributions.histplot", "numpy.testing.assert_array_equal", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_weighted_histogram": ["seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotUnivariate.test_weights_with_auto_bins": ["pytest.warns", "<builtin>.len", "seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotUnivariate.test_shrink": ["seaborn.distributions.histplot", "pytest.approx", "<builtin>.zip", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_log_scale_explicit": ["seaborn.distributions.histplot", "numpy.divide", "numpy.allclose"], "numpy.divide": [], "tests.test_distributions.TestHistPlotUnivariate.test_log_scale_implicit": ["seaborn.distributions.histplot", "numpy.divide", "numpy.allclose", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestHistPlotUnivariate.test_log_scale_dodge": ["numpy.round", "numpy.repeat", "numpy.log", "numpy.unique", "seaborn.distributions.histplot"], "numpy.round": [], "numpy.unique": [], "tests.test_distributions.TestHistPlotUnivariate.test_log_scale_kde": ["seaborn.distributions.histplot", "<builtin>.max", "pytest.approx"], "<builtin>.max": [], "tests.test_distributions.TestHistPlotUnivariate.test_auto_linewidth": ["pytest.approx", "matplotlib.pyplot.subplots", "<builtin>.dict", "tests.test_distributions.TestHistPlotUnivariate.test_auto_linewidth.<lambda1>", "seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotUnivariate.test_auto_linewidth.<lambda1>": [], "tests.test_distributions.TestHistPlotUnivariate.test_bar_kwargs": ["seaborn.distributions.histplot", "seaborn._testing.assert_colors_equal"], "tests.test_distributions.TestHistPlotUnivariate.test_step_fill_kwargs": ["seaborn.distributions.histplot", "seaborn._testing.assert_colors_equal"], "tests.test_distributions.TestHistPlotUnivariate.test_step_line_kwargs": ["seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotUnivariate.test_label": ["seaborn.distributions.histplot", "<builtin>.len"], "tests.test_distributions.TestHistPlotBivariate.test_mesh": ["numpy.testing.assert_array_equal", "itertools.product", "seaborn._statistics.Histogram", "<builtin>.enumerate", "seaborn.distributions.histplot"], "seaborn._statistics.Histogram": [], "tests.test_distributions.TestHistPlotBivariate.test_mesh_with_hue": ["numpy.testing.assert_array_equal", "itertools.product", "seaborn._statistics.Histogram", "<builtin>.enumerate", "seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotBivariate.test_mesh_with_hue_unique_bins": ["numpy.testing.assert_array_equal", "itertools.product", "seaborn._statistics.Histogram", "<builtin>.enumerate", "seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotBivariate.test_mesh_with_col_unique_bins": ["numpy.testing.assert_array_equal", "itertools.product", "seaborn.distributions.displot", "seaborn._statistics.Histogram", "<builtin>.enumerate"], "seaborn.distributions.displot": [], "tests.test_distributions.TestHistPlotBivariate.test_mesh_log_scale": ["pytest.approx", "numpy.testing.assert_array_equal", "itertools.product", "numpy.log10", "seaborn._statistics.Histogram", "<builtin>.enumerate", "seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotBivariate.test_mesh_thresh": ["seaborn.distributions.histplot", "numpy.testing.assert_array_equal", "seaborn._statistics.Histogram"], "tests.test_distributions.TestHistPlotBivariate.test_mesh_sticky_edges": ["seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotBivariate.test_mesh_common_norm": ["seaborn.distributions.histplot", "numpy.testing.assert_array_equal", "<builtin>.len", "seaborn._statistics.Histogram"], "tests.test_distributions.TestHistPlotBivariate.test_mesh_unique_norm": ["seaborn.distributions.histplot", "numpy.testing.assert_array_equal", "seaborn._statistics.Histogram"], "tests.test_distributions.TestHistPlotBivariate": ["pytest.mark.parametrize"], "tests.test_distributions.TestHistPlotBivariate.test_mesh_normalization": ["seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotBivariate.test_mesh_colors": ["matplotlib.pyplot.subplots", "seaborn.distributions._DistributionPlotter", "numpy.testing.assert_array_equal", "<builtin>.enumerate", "seaborn.palettes.color_palette", "seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotBivariate.test_color_limits": ["matplotlib.pyplot.subplots", "seaborn.distributions._DistributionPlotter", "numpy.testing.assert_array_equal", "seaborn._statistics.Histogram", "<builtin>.dict", "seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotBivariate.test_hue_color_limits": ["matplotlib.pyplot.subplots", "seaborn.distributions._DistributionPlotter", "numpy.testing.assert_array_equal", "seaborn._statistics.Histogram", "<builtin>.enumerate", "<builtin>.dict", "seaborn.distributions.histplot"], "tests.test_distributions.TestHistPlotBivariate.test_colorbar": ["seaborn.distributions.histplot", "<builtin>.len", "matplotlib.pyplot.subplots"], "tests.test_distributions.TestECDFPlotUnivariate": ["pytest.mark.parametrize", "<builtin>.staticmethod"], "tests.test_distributions.TestECDFPlotUnivariate.get_last_color": ["matplotlib.colors.to_rgb"], "tests.test_distributions.TestECDFPlotUnivariate.test_long_vectors": ["seaborn.distributions.ecdfplot", "numpy.testing.assert_array_equal", "itertools.product", "matplotlib.pyplot.subplots"], "seaborn.distributions.ecdfplot": [], "tests.test_distributions.TestECDFPlotUnivariate.test_hue": ["seaborn.distributions.ecdfplot", "seaborn._testing.assert_colors_equal", "seaborn.palettes.color_palette", "<builtin>.zip"], "tests.test_distributions.TestECDFPlotUnivariate.test_line_kwargs": ["seaborn.distributions.ecdfplot", "seaborn._testing.assert_colors_equal"], "tests.test_distributions.TestECDFPlotUnivariate.test_drawstyle": ["seaborn.distributions.ecdfplot", "<builtin>.dict"], "tests.test_distributions.TestECDFPlotUnivariate.test_proportion_limits": ["seaborn.distributions.ecdfplot", "<builtin>.getattr"], "<builtin>.getattr": [], "tests.test_distributions.TestECDFPlotUnivariate.test_proportion_limits_complementary": ["seaborn.distributions.ecdfplot", "<builtin>.getattr"], "tests.test_distributions.TestECDFPlotUnivariate.test_proportion_count": ["seaborn.distributions.ecdfplot", "<builtin>.getattr", "<builtin>.len"], "tests.test_distributions.TestECDFPlotUnivariate.test_weights": ["seaborn.distributions.ecdfplot", "numpy.testing.assert_array_equal"], "tests.test_distributions.TestECDFPlotUnivariate.test_bivariate_error": ["seaborn.distributions.ecdfplot", "pytest.raises"], "tests.test_distributions.TestECDFPlotUnivariate.test_log_scale": ["seaborn.distributions.ecdfplot", "matplotlib.pyplot.figure", "numpy.testing.assert_array_almost_equal"], "tests.test_distributions.TestDisPlot": ["pytest.mark.parametrize"], "tests.test_distributions.TestDisPlot.test_versus_single_histplot": ["seaborn._testing.assert_plots_equal", "seaborn.distributions.histplot", "seaborn._testing.assert_legends_equal", "seaborn.distributions.displot"], "seaborn._testing.assert_plots_equal": [], "seaborn._testing.assert_legends_equal": [], "tests.test_distributions.TestDisPlot.test_versus_single_kdeplot": ["seaborn._testing.assert_plots_equal", "seaborn._testing.assert_legends_equal", "seaborn.distributions.kdeplot", "seaborn.distributions.displot"], "tests.test_distributions.TestDisPlot.test_versus_single_ecdfplot": ["seaborn.distributions.ecdfplot", "seaborn._testing.assert_legends_equal", "seaborn._testing.assert_plots_equal", "seaborn.distributions.displot"], "tests.test_distributions.TestDisPlot.test_with_rug": ["seaborn._testing.assert_plots_equal", "seaborn.distributions.rugplot", "seaborn.distributions.displot", "matplotlib.pyplot.figure", "seaborn.distributions.histplot"], "tests.test_distributions.TestDisPlot.test_facets": ["numpy.testing.assert_array_equal", "seaborn.distributions.kdeplot", "seaborn.distributions.displot", "<builtin>.enumerate"], "tests.test_distributions.TestDisPlot.test_facet_multiple": ["seaborn._testing.assert_plots_equal", "seaborn.distributions.histplot", "numpy.linspace", "seaborn.distributions.displot"], "tests.test_distributions.TestDisPlot.test_ax_warning": ["matplotlib.pyplot.figure", "pytest.warns", "seaborn.distributions.displot"], "tests.test_distributions.TestDisPlot.test_array_faceting": ["seaborn.distributions.displot", "<builtin>.len", "<builtin>.zip", "seaborn._oldcore.categorical_order"], "tests.test_distributions.TestDisPlot.test_legend": ["seaborn.distributions.displot"], "tests.test_distributions.TestDisPlot.test_empty": ["<builtin>.isinstance", "seaborn.distributions.displot"], "tests.test_distributions.TestDisPlot.test_bivariate_ecdf_error": ["seaborn.distributions.displot", "pytest.raises"], "tests.test_distributions.TestDisPlot.test_bivariate_kde_norm": ["<builtin>.sum", "tests.test_distributions.get_contour_coords", "seaborn.distributions.displot", "<builtin>.bool"], "<builtin>.bool": [], "tests.test_distributions.TestDisPlot.test_bivariate_hist_norm": ["seaborn.distributions.displot"], "tests.test_distributions.TestDisPlot.test_facetgrid_data": ["<builtin>.set", "numpy.testing.assert_array_equal", "seaborn.distributions.displot"], "<builtin>.set": [], "tests._core.test_scales": [], "tests._core.test_scales.TestContinuous": ["pytest.fixture"], "tests._core.test_scales.TestContinuous.x": ["pandas.Series"], "tests._core.test_scales.TestContinuous.setup_ticks": ["seaborn._core.scales.PseudoAxis", "seaborn._core.scales.Continuous", "seaborn._core.properties.Coordinate"], "seaborn._core.properties.Coordinate": [], "seaborn._core.scales.Continuous": [], "seaborn._core.scales.PseudoAxis": [], "tests._core.test_scales.TestContinuous.setup_labels": ["seaborn._core.scales.PseudoAxis", "seaborn._core.scales.Continuous", "seaborn._core.properties.Coordinate"], "tests._core.test_scales.TestContinuous.test_coordinate_defaults": ["pandas.testing.assert_series_equal", "seaborn._core.scales.Continuous", "seaborn._core.properties.Coordinate"], "tests._core.test_scales.TestContinuous.test_coordinate_transform": ["pandas.testing.assert_series_equal", "numpy.log10", "seaborn._core.scales.Continuous", "seaborn._core.properties.Coordinate"], "tests._core.test_scales.TestContinuous.test_coordinate_transform_with_parameter": ["pandas.testing.assert_series_equal", "seaborn._core.scales.Continuous", "seaborn._core.properties.Coordinate", "numpy.power"], "numpy.power": [], "tests._core.test_scales.TestContinuous.test_coordinate_transform_error": ["seaborn._core.properties.Coordinate", "seaborn._core.scales.Continuous", "pytest.raises"], "tests._core.test_scales.TestContinuous.test_interval_defaults": ["numpy.testing.assert_array_equal", "seaborn._core.scales.Continuous", "seaborn._core.properties.IntervalProperty"], "seaborn._core.properties.IntervalProperty": [], "tests._core.test_scales.TestContinuous.test_interval_with_range": ["numpy.testing.assert_array_equal", "seaborn._core.scales.Continuous", "seaborn._core.properties.IntervalProperty"], "tests._core.test_scales.TestContinuous.test_interval_with_norm": ["numpy.testing.assert_array_equal", "seaborn._core.scales.Continuous", "seaborn._core.properties.IntervalProperty"], "tests._core.test_scales.TestContinuous.test_interval_with_range_norm_and_transform": ["pandas.Series", "seaborn._core.scales.Continuous", "seaborn._core.properties.IntervalProperty", "numpy.testing.assert_array_equal"], "tests._core.test_scales.TestContinuous.test_interval_with_bools": ["pandas.Series", "seaborn._core.scales.Continuous", "seaborn._core.properties.IntervalProperty", "numpy.testing.assert_array_equal"], "tests._core.test_scales.TestContinuous.test_color_defaults": ["seaborn._core.properties.Color", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette", "seaborn._core.scales.Continuous"], "seaborn._core.properties.Color": [], "tests._core.test_scales.TestContinuous.test_color_named_values": ["seaborn._core.properties.Color", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette", "seaborn._core.scales.Continuous"], "tests._core.test_scales.TestContinuous.test_color_tuple_values": ["seaborn._core.properties.Color", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette", "seaborn._core.scales.Continuous"], "tests._core.test_scales.TestContinuous.test_color_callable_values": ["seaborn._core.properties.Color", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette", "seaborn._core.scales.Continuous"], "tests._core.test_scales.TestContinuous.test_color_with_norm": ["seaborn._core.properties.Color", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette", "seaborn._core.scales.Continuous"], "tests._core.test_scales.TestContinuous.test_color_with_transform": ["numpy.testing.assert_array_equal", "seaborn._core.properties.Color", "pandas.Series", "seaborn.palettes.color_palette", "seaborn._core.scales.Continuous"], "tests._core.test_scales.TestContinuous.test_tick_locator": ["matplotlib.ticker.FixedLocator", "numpy.testing.assert_array_equal", "tests._core.test_scales.TestContinuous.setup_ticks"], "matplotlib.ticker.FixedLocator": [], "tests._core.test_scales.TestContinuous.test_tick_locator_input_check": ["seaborn._core.scales.Continuous", "pytest.raises"], "tests._core.test_scales.TestContinuous.test_tick_upto": ["tests._core.test_scales.TestContinuous.setup_ticks", "<builtin>.len"], "tests._core.test_scales.TestContinuous.test_tick_every": ["numpy.diff", "numpy.allclose", "tests._core.test_scales.TestContinuous.setup_ticks"], "tests._core.test_scales.TestContinuous.test_tick_every_between": ["numpy.testing.assert_array_equal", "tests._core.test_scales.TestContinuous.setup_ticks", "numpy.arange"], "tests._core.test_scales.TestContinuous.test_tick_at": ["numpy.testing.assert_array_equal", "tests._core.test_scales.TestContinuous.setup_ticks"], "tests._core.test_scales.TestContinuous.test_tick_count": ["numpy.testing.assert_array_equal", "tests._core.test_scales.TestContinuous.setup_ticks", "numpy.linspace"], "tests._core.test_scales.TestContinuous.test_tick_count_between": ["numpy.testing.assert_array_equal", "tests._core.test_scales.TestContinuous.setup_ticks", "numpy.linspace"], "tests._core.test_scales.TestContinuous.test_tick_minor": ["numpy.testing.assert_array_equal", "tests._core.test_scales.TestContinuous.setup_ticks", "numpy.linspace"], "tests._core.test_scales.TestContinuous.test_log_tick_default": ["numpy.log10", "numpy.diff", "seaborn._core.properties.Coordinate", "numpy.allclose", "seaborn._core.scales.PseudoAxis", "seaborn._core.scales.Continuous"], "tests._core.test_scales.TestContinuous.test_log_tick_upto": ["seaborn._core.scales.PseudoAxis", "seaborn._core.scales.Continuous", "seaborn._core.properties.Coordinate"], "tests._core.test_scales.TestContinuous.test_log_tick_count": ["pytest.raises", "numpy.testing.assert_array_equal", "seaborn._core.properties.Coordinate", "seaborn._core.scales.PseudoAxis", "seaborn._core.scales.Continuous"], "tests._core.test_scales.TestContinuous.test_log_tick_format_disabled": ["seaborn._core.scales.PseudoAxis", "seaborn._core.scales.Continuous", "seaborn._core.properties.Coordinate", "re.match"], "tests._core.test_scales.TestContinuous.test_log_tick_every": ["seaborn._core.scales.Continuous", "pytest.raises"], "tests._core.test_scales.TestContinuous.test_symlog_tick_default": ["numpy.sort", "numpy.log10", "numpy.abs", "numpy.diff", "seaborn._core.properties.Coordinate", "numpy.unique", "numpy.allclose", "seaborn._core.scales.PseudoAxis", "seaborn._core.scales.Continuous"], "tests._core.test_scales.TestContinuous.test_label_formatter": ["matplotlib.ticker.FormatStrFormatter", "tests._core.test_scales.TestContinuous.setup_labels", "re.match"], "matplotlib.ticker.FormatStrFormatter": [], "tests._core.test_scales.TestContinuous.test_label_like_pattern": ["tests._core.test_scales.TestContinuous.setup_labels", "re.match"], "tests._core.test_scales.TestContinuous.test_label_like_string": ["tests._core.test_scales.TestContinuous.setup_labels", "re.match"], "tests._core.test_scales.TestContinuous.test_label_like_function": ["tests._core.test_scales.TestContinuous.setup_labels", "re.match"], "tests._core.test_scales.TestContinuous.test_label_base": ["tests._core.test_scales.TestContinuous.setup_labels"], "tests._core.test_scales.TestContinuous.test_label_unit": ["tests._core.test_scales.TestContinuous.setup_labels", "re.match"], "tests._core.test_scales.TestContinuous.test_label_unit_with_sep": ["tests._core.test_scales.TestContinuous.setup_labels", "re.match"], "tests._core.test_scales.TestContinuous.test_label_empty_unit": ["tests._core.test_scales.TestContinuous.setup_labels", "re.match"], "tests._core.test_scales.TestContinuous.test_label_base_from_transform": ["seaborn._core.scales.PseudoAxis", "seaborn._core.scales.Continuous", "seaborn._core.properties.Coordinate"], "tests._core.test_scales.TestContinuous.test_label_type_checks": ["seaborn._core.scales.Continuous", "pytest.raises"], "tests._core.test_scales.TestNominal": ["pytest.mark.xfail", "pytest.fixture", "seaborn.utils._version_predates", "pytest.mark.skipif"], "tests._core.test_scales.TestNominal.x": ["pandas.Series"], "tests._core.test_scales.TestNominal.y": ["pandas.Series"], "tests._core.test_scales.TestNominal.test_coordinate_defaults": ["seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "seaborn._core.properties.Coordinate", "numpy.array"], "seaborn._core.scales.Nominal": [], "tests._core.test_scales.TestNominal.test_coordinate_with_order": ["seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "seaborn._core.properties.Coordinate", "numpy.array"], "tests._core.test_scales.TestNominal.test_coordinate_with_subset_order": ["seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "seaborn._core.properties.Coordinate", "numpy.array"], "tests._core.test_scales.TestNominal.test_coordinate_axis": ["matplotlib.figure.Figure", "seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "numpy.array", "seaborn._core.properties.Coordinate"], "matplotlib.figure.Figure": [], "tests._core.test_scales.TestNominal.test_coordinate_axis_with_order": ["matplotlib.figure.Figure", "seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "numpy.array", "seaborn._core.properties.Coordinate"], "tests._core.test_scales.TestNominal.test_coordinate_axis_with_subset_order": ["matplotlib.figure.Figure", "seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "numpy.array", "seaborn._core.properties.Coordinate"], "tests._core.test_scales.TestNominal.test_coordinate_axis_with_category_dtype": ["matplotlib.figure.Figure", "seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "numpy.array", "pandas.CategoricalDtype", "seaborn._core.properties.Coordinate"], "pandas.CategoricalDtype": [], "tests._core.test_scales.TestNominal.test_coordinate_numeric_data": ["matplotlib.figure.Figure", "seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "numpy.array", "seaborn._core.properties.Coordinate"], "tests._core.test_scales.TestNominal.test_coordinate_numeric_data_with_order": ["matplotlib.figure.Figure", "seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "numpy.array", "seaborn._core.properties.Coordinate"], "tests._core.test_scales.TestNominal.test_color_defaults": ["seaborn._core.scales.Nominal", "seaborn._core.properties.Color", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette"], "tests._core.test_scales.TestNominal.test_color_named_palette": ["seaborn._core.scales.Nominal", "seaborn._core.properties.Color", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette"], "tests._core.test_scales.TestNominal.test_color_list_palette": ["seaborn._core.scales.Nominal", "seaborn._core.properties.Color", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette"], "tests._core.test_scales.TestNominal.test_color_dict_palette": ["seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "seaborn._core.properties.Color", "seaborn.palettes.color_palette", "<builtin>.zip", "<builtin>.dict"], "tests._core.test_scales.TestNominal.test_color_numeric_data": ["seaborn._core.scales.Nominal", "seaborn._core.properties.Color", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette"], "tests._core.test_scales.TestNominal.test_color_numeric_with_order_subset": ["seaborn._core.scales.Nominal", "seaborn._core.properties.Color", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette"], "pytest.mark.xfail": [], "tests._core.test_scales.TestNominal.test_color_numeric_int_float_mix": ["seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "seaborn._core.properties.Color", "pandas.Series", "seaborn.palettes.color_palette"], "tests._core.test_scales.TestNominal.test_color_alpha_in_palette": ["seaborn._core.scales.Nominal", "seaborn._core.properties.Color", "numpy.testing.assert_array_equal"], "tests._core.test_scales.TestNominal.test_color_unknown_palette": ["seaborn._core.scales.Nominal", "seaborn._core.properties.Color", "pytest.raises"], "tests._core.test_scales.TestNominal.test_object_defaults": ["seaborn._core.scales.Nominal", "seaborn._core.properties.ObjectProperty.__init__"], "tests._core.test_scales.TestNominal.test_object_defaults.MockProperty._default_values": ["<builtin>.list"], "<builtin>.list": [], "seaborn._core.properties.ObjectProperty.__init__": [], "tests._core.test_scales.TestNominal.test_object_list": ["seaborn._core.scales.Nominal", "seaborn._core.properties.ObjectProperty"], "seaborn._core.properties.ObjectProperty": [], "tests._core.test_scales.TestNominal.test_object_dict": ["seaborn._core.scales.Nominal", "seaborn._core.properties.ObjectProperty"], "tests._core.test_scales.TestNominal.test_object_order": ["seaborn._core.scales.Nominal", "seaborn._core.properties.ObjectProperty"], "tests._core.test_scales.TestNominal.test_object_order_subset": ["seaborn._core.scales.Nominal", "seaborn._core.properties.ObjectProperty"], "tests._core.test_scales.TestNominal.test_objects_that_are_weird": ["seaborn._core.scales.Nominal", "seaborn._core.properties.ObjectProperty"], "tests._core.test_scales.TestNominal.test_alpha_default": ["seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "seaborn._core.properties.Alpha"], "seaborn._core.properties.Alpha": [], "tests._core.test_scales.TestNominal.test_fill": ["seaborn._core.scales.Nominal", "pandas.Series", "numpy.testing.assert_array_equal", "seaborn._core.properties.Fill"], "seaborn._core.properties.Fill": [], "tests._core.test_scales.TestNominal.test_fill_dict": ["seaborn._core.scales.Nominal", "pandas.Series", "numpy.testing.assert_array_equal", "seaborn._core.properties.Fill"], "tests._core.test_scales.TestNominal.test_fill_nunique_warning": ["seaborn._core.properties.Fill", "seaborn._core.scales.Nominal", "pytest.warns", "numpy.testing.assert_array_equal", "pandas.Series"], "tests._core.test_scales.TestNominal.test_interval_defaults": ["seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "seaborn._core.properties.IntervalProperty.__init__"], "seaborn._core.properties.IntervalProperty.__init__": [], "tests._core.test_scales.TestNominal.test_interval_tuple": ["seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "seaborn._core.properties.IntervalProperty"], "tests._core.test_scales.TestNominal.test_interval_tuple_numeric": ["seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "seaborn._core.properties.IntervalProperty"], "tests._core.test_scales.TestNominal.test_interval_list": ["seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "seaborn._core.properties.IntervalProperty"], "tests._core.test_scales.TestNominal.test_interval_dict": ["seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "seaborn._core.properties.IntervalProperty"], "tests._core.test_scales.TestNominal.test_interval_with_transform": ["seaborn._core.scales.Nominal", "numpy.sqrt", "numpy.testing.assert_array_equal", "seaborn._core.properties.IntervalProperty.__init__"], "numpy.sqrt": [], "tests._core.test_scales.TestNominal.test_empty_data": ["seaborn._core.scales.Nominal", "pandas.Series", "numpy.testing.assert_array_equal", "seaborn._core.properties.Coordinate"], "tests._core.test_scales.TestNominal.test_finalize": ["matplotlib.figure.Figure", "<builtin>.len", "seaborn._core.scales.Nominal", "seaborn._core.plot.Plot", "<builtin>.list", "numpy.testing.assert_array_equal", "<builtin>.enumerate", "seaborn._core.properties.Coordinate", "<builtin>.range"], "seaborn._core.plot.Plot": [], "<builtin>.range": [], "tests._core.test_scales.TestTemporal": ["pytest.fixture"], "tests._core.test_scales.TestTemporal.t": ["pandas.Series", "pandas.to_datetime"], "pandas.to_datetime": [], "tests._core.test_scales.TestTemporal.x": ["pandas.Series", "matplotlib.dates.date2num"], "tests._core.test_scales.TestTemporal.test_coordinate_defaults": ["numpy.testing.assert_array_equal", "seaborn._core.properties.Coordinate", "seaborn._core.scales.Temporal"], "seaborn._core.scales.Temporal": [], "tests._core.test_scales.TestTemporal.test_interval_defaults": ["numpy.testing.assert_array_equal", "seaborn._core.properties.IntervalProperty", "seaborn._core.scales.Temporal"], "tests._core.test_scales.TestTemporal.test_interval_with_range": ["numpy.testing.assert_array_equal", "seaborn._core.properties.IntervalProperty", "seaborn._core.scales.Temporal"], "tests._core.test_scales.TestTemporal.test_interval_with_norm": ["matplotlib.dates.date2num", "numpy.testing.assert_array_equal", "seaborn._core.properties.IntervalProperty", "seaborn._core.scales.Temporal"], "tests._core.test_scales.TestTemporal.test_color_defaults": ["seaborn._core.properties.Color", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette", "seaborn._core.scales.Temporal"], "tests._core.test_scales.TestTemporal.test_color_named_values": ["seaborn._core.properties.Color", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette", "seaborn._core.scales.Temporal"], "tests._core.test_scales.TestTemporal.test_coordinate_axis": ["matplotlib.figure.Figure", "numpy.testing.assert_array_equal", "seaborn._core.properties.Coordinate", "<builtin>.isinstance", "seaborn._core.scales.Temporal"], "tests._core.test_scales.TestTemporal.test_tick_locator": ["matplotlib.dates.YearLocator", "seaborn._core.scales.PseudoAxis", "seaborn._core.properties.Coordinate", "seaborn._core.scales.Temporal"], "matplotlib.dates.YearLocator": [], "tests._core.test_scales.TestTemporal.test_tick_upto": ["<builtin>.set", "matplotlib.figure.Figure", "seaborn._core.properties.Coordinate", "seaborn._core.scales.Temporal"], "tests._core.test_scales.TestTemporal.test_label_formatter": ["matplotlib.dates.DateFormatter", "seaborn._core.scales.PseudoAxis", "seaborn._core.properties.Coordinate", "seaborn._core.scales.Temporal"], "matplotlib.dates.DateFormatter": [], "tests._core.test_scales.TestTemporal.test_label_concise": ["<builtin>.isinstance", "matplotlib.figure.Figure", "seaborn._core.properties.Coordinate", "seaborn._core.scales.Temporal"], "tests._core.test_scales.TestBoolean": ["pytest.fixture", "pytest.mark.parametrize"], "tests._core.test_scales.TestBoolean.x": ["pandas.Series"], "tests._core.test_scales.TestBoolean.test_coordinate": ["seaborn._core.scales.Boolean", "numpy.testing.assert_array_equal", "seaborn._core.properties.Coordinate"], "seaborn._core.scales.Boolean": [], "tests._core.test_scales.TestBoolean.test_coordinate_axis": ["seaborn._core.scales.Boolean", "numpy.testing.assert_array_equal", "matplotlib.figure.Figure", "seaborn._core.properties.Coordinate"], "tests._core.test_scales.TestBoolean.test_coordinate_missing": ["seaborn._core.scales.Boolean", "numpy.testing.assert_array_equal", "seaborn._core.properties.Coordinate"], "tests._core.test_scales.TestBoolean.test_color_defaults": ["seaborn._core.scales.Boolean", "numpy.testing.assert_array_equal", "seaborn._core.properties.Color", "seaborn.palettes.color_palette", "<builtin>.int"], "<builtin>.int": [], "tests._core.test_scales.TestBoolean.test_color_list_palette": ["seaborn._core.scales.Boolean", "numpy.testing.assert_array_equal", "seaborn._core.properties.Color", "seaborn.palettes.color_palette", "<builtin>.int"], "tests._core.test_scales.TestBoolean.test_color_tuple_palette": ["seaborn._core.scales.Boolean", "<builtin>.int", "numpy.testing.assert_array_equal", "seaborn._core.properties.Color", "seaborn.palettes.color_palette", "<builtin>.tuple"], "<builtin>.tuple": [], "tests._core.test_scales.TestBoolean.test_color_dict_palette": ["seaborn._core.properties.Color", "seaborn._core.scales.Boolean", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette"], "tests._core.test_scales.TestBoolean.test_object_defaults": ["seaborn._core.scales.Boolean", "<builtin>.int", "seaborn._core.properties.ObjectProperty.__init__"], "tests._core.test_scales.TestBoolean.test_object_defaults.MockProperty._default_values": [], "tests._core.test_scales.TestBoolean.test_object_list": ["seaborn._core.properties.ObjectProperty", "seaborn._core.scales.Boolean", "<builtin>.int"], "tests._core.test_scales.TestBoolean.test_object_dict": ["seaborn._core.properties.ObjectProperty", "seaborn._core.scales.Boolean"], "tests._core.test_scales.TestBoolean.test_fill": ["seaborn._core.scales.Boolean", "seaborn._core.properties.Fill", "numpy.testing.assert_array_equal"], "tests._core.test_scales.TestBoolean.test_interval_defaults": ["seaborn._core.scales.Boolean", "<builtin>.int", "numpy.testing.assert_array_equal", "seaborn._core.properties.IntervalProperty.__init__"], "tests._core.test_scales.TestBoolean.test_interval_tuple": ["seaborn._core.scales.Boolean", "<builtin>.int", "numpy.testing.assert_array_equal", "seaborn._core.properties.IntervalProperty"], "tests._core.test_scales.TestBoolean.test_finalize": ["seaborn._core.scales.Boolean", "matplotlib.figure.Figure", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "seaborn._core.properties.Coordinate"], "tests._core": [], "tests._core.test_plot": ["functools.partial"], "functools.partial": [], "tests._core.test_plot.assert_gridspec_shape": [], "tests._core.test_plot.MockMark.__init__": ["<builtin>.super"], "tests._core.test_plot.MockMark._plot": [], "tests._core.test_plot.MockMark._legend_artist": ["numpy.lines.Line2D", "matplotlib.lines.Line2D"], "numpy.lines.Line2D": [], "matplotlib.lines.Line2D": [], "tests._core.test_plot.TestInit.test_empty": ["seaborn._core.plot.Plot"], "tests._core.test_plot.TestInit.test_data_only": ["seaborn._core.plot.Plot"], "tests._core.test_plot.TestInit.test_df_and_named_variables": ["seaborn._core.plot.Plot"], "tests._core.test_plot.TestInit.test_df_and_mixed_variables": ["seaborn._core.plot.Plot", "<builtin>.isinstance"], "tests._core.test_plot.TestInit.test_vector_variables_only": ["seaborn._core.plot.Plot"], "tests._core.test_plot.TestInit.test_vector_variables_no_index": ["seaborn._core.plot.Plot", "pandas.Series"], "tests._core.test_plot.TestInit.test_data_only_named": ["seaborn._core.plot.Plot"], "tests._core.test_plot.TestInit.test_positional_and_named_data": ["seaborn._core.plot.Plot", "pytest.raises"], "tests._core.test_plot.TestInit": ["pytest.mark.parametrize"], "tests._core.test_plot.TestInit.test_positional_and_named_xy": ["seaborn._core.plot.Plot", "pytest.raises"], "tests._core.test_plot.TestInit.test_positional_data_x_y": ["seaborn._core.plot.Plot", "<builtin>.list"], "tests._core.test_plot.TestInit.test_positional_x_y": ["seaborn._core.plot.Plot", "<builtin>.list"], "tests._core.test_plot.TestInit.test_positional_data_x": ["seaborn._core.plot.Plot", "<builtin>.list"], "tests._core.test_plot.TestInit.test_positional_x": ["seaborn._core.plot.Plot", "<builtin>.list"], "tests._core.test_plot.TestInit.test_positional_too_many": ["seaborn._core.plot.Plot", "pytest.raises"], "tests._core.test_plot.TestInit.test_unknown_keywords": ["seaborn._core.plot.Plot", "pytest.raises"], "tests._core.test_plot.TestLayerAddition.test_without_data": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "pandas.testing.assert_frame_equal"], "tests._core.test_plot.TestLayerAddition.test_with_new_variable_by_name": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestLayerAddition.test_with_new_variable_by_vector": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestLayerAddition.test_with_late_data_definition": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestLayerAddition.test_with_new_data_definition": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestLayerAddition.test_drop_variable": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestLayerAddition": ["pytest.mark.xfail", "pytest.mark.parametrize"], "tests._core.test_plot.TestLayerAddition.test_stat_default": ["seaborn._core.plot.Plot", "seaborn._marks.base.Mark.__init__"], "seaborn._marks.base.Mark.__init__": [], "tests._core.test_plot.TestLayerAddition.test_stat_nondefault": ["seaborn._core.plot.Plot", "seaborn._marks.base.Mark.__init__", "seaborn._stats.base.Stat.__init__"], "seaborn._stats.base.Stat.__init__": [], "tests._core.test_plot.TestLayerAddition.test_orient": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "seaborn._core.moves.Move.__init__", "seaborn._stats.base.Stat.__init__"], "tests._core.test_plot.TestLayerAddition.test_orient.MockStatTrackOrient.__call__": [], "tests._core.test_plot.TestLayerAddition.test_orient.MockMoveTrackOrient.__call__": [], "seaborn._core.moves.Move.__init__": [], "tests._core.test_plot.TestLayerAddition.test_variable_list": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestLayerAddition.test_type_checks": ["pytest.raises", "seaborn._stats.base.Stat.__init__", "seaborn._core.plot.Plot", "tests._core.test_plot.MockMark.__init__", "seaborn._core.moves.Move.__init__"], "tests._core.test_plot.TestScaling.test_inference": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "<builtin>.zip"], "tests._core.test_plot.TestScaling.test_inference_from_layer_data": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestScaling.test_inference_joins": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "pandas.Series"], "tests._core.test_plot.TestScaling.test_inferred_categorical_converter": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestScaling.test_explicit_categorical_converter": ["seaborn._core.scales.Nominal", "tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestScaling": ["pytest.mark.xfail", "seaborn.utils._version_predates"], "tests._core.test_plot.TestScaling.test_categorical_as_datetime": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestScaling.test_faceted_log_scale": ["seaborn._core.plot.Plot", "numpy.testing.assert_array_equal"], "tests._core.test_plot.TestScaling.test_paired_single_log_scale": ["seaborn._core.plot.Plot", "numpy.testing.assert_array_equal"], "tests._core.test_plot.TestScaling.test_log_scale_name": ["seaborn._core.plot.Plot"], "tests._core.test_plot.TestScaling.test_mark_data_log_transform_is_inverted": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestScaling.test_mark_data_log_transfrom_with_stat": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "seaborn._stats.base.Stat.__init__"], "tests._core.test_plot.TestScaling.test_mark_data_log_transfrom_with_stat.Mean.__call__": [], "tests._core.test_plot.TestScaling.test_mark_data_from_categorical": ["<builtin>.float", "seaborn._core.plot.Plot", "seaborn._core.rules.categorical_order", "<builtin>.enumerate", "tests._core.test_plot.MockMark.__init__"], "seaborn._core.rules.categorical_order": [], "<builtin>.float": [], "tests._core.test_plot.TestScaling.test_mark_data_from_datetime": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestScaling.test_computed_var_ticks": ["seaborn._stats.base.Stat.__init__", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "tests._core.test_plot.MockMark.__init__", "seaborn._core.scales.Continuous"], "tests._core.test_plot.TestScaling.test_computed_var_ticks.Identity.__call__": [], "tests._core.test_plot.TestScaling.test_computed_var_transform": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "seaborn._stats.base.Stat.__init__"], "tests._core.test_plot.TestScaling.test_computed_var_transform.Identity.__call__": [], "tests._core.test_plot.TestScaling.test_explicit_range_with_axis_scaling": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "pandas.Series"], "tests._core.test_plot.TestScaling.test_derived_range_with_axis_scaling": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "pandas.Series", "seaborn._stats.base.Stat.__init__"], "tests._core.test_plot.TestScaling.test_derived_range_with_axis_scaling.AddOne.__call__": [], "tests._core.test_plot.TestScaling.test_facet_categories": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "pandas.Series", "<builtin>.len"], "tests._core.test_plot.TestScaling.test_facet_categories_unshared": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "pandas.Series", "<builtin>.len"], "tests._core.test_plot.TestScaling.test_facet_categories_single_dim_shared": ["pandas.DataFrame", "tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "pandas.Series"], "tests._core.test_plot.TestScaling.test_pair_categories": ["pandas.DataFrame", "tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "pandas.Series"], "tests._core.test_plot.TestScaling.test_pair_categories_shared": ["<builtin>.print", "seaborn._core.plot.Plot", "tests._core.test_plot.MockMark.__init__", "pandas.Series", "pandas.DataFrame"], "<builtin>.print": [], "tests._core.test_plot.TestScaling.test_identity_mapping_linewidth": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "pandas.Series"], "tests._core.test_plot.TestScaling.test_pair_single_coordinate_stat_orient": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "seaborn._stats.base.Stat.__init__"], "tests._core.test_plot.TestScaling.test_pair_single_coordinate_stat_orient.MockStat.__call__": [], "tests._core.test_plot.TestScaling.test_inferred_nominal_passed_to_stat": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "seaborn._stats.base.Stat.__init__"], "tests._core.test_plot.TestScaling.test_inferred_nominal_passed_to_stat.MockStat.__call__": [], "tests._core.test_plot.TestScaling.test_identity_mapping_color_strings": ["matplotlib.colors.to_rgba_array", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "tests._core.test_plot.MockMark.__init__", "numpy.colors.to_rgba_array"], "numpy.colors.to_rgba_array": [], "matplotlib.colors.to_rgba_array": [], "tests._core.test_plot.TestScaling.test_identity_mapping_color_tuples": ["matplotlib.colors.to_rgba_array", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "tests._core.test_plot.MockMark.__init__", "numpy.colors.to_rgba_array"], "tests._core.test_plot.TestScaling.test_undefined_variable_raises": ["seaborn._core.plot.Plot", "seaborn._core.scales.Continuous", "pytest.raises"], "tests._core.test_plot.TestScaling.test_nominal_x_axis_tweaks": ["seaborn._core.plot.Plot", "<builtin>.any"], "<builtin>.any": [], "tests._core.test_plot.TestScaling.test_nominal_y_axis_tweaks": ["seaborn._core.plot.Plot", "<builtin>.any"], "tests._core.test_plot.TestPlotting.test_matplotlib_object_creation": ["seaborn._core.plot.Plot", "<builtin>.isinstance"], "tests._core.test_plot.TestPlotting.test_empty": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestPlotting.test_no_orient_variance": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal"], "tests._core.test_plot.TestPlotting.test_single_split_single_layer": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "pandas.testing.assert_series_equal"], "tests._core.test_plot.TestPlotting.test_single_split_multi_layer": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "<builtin>.zip"], "tests._core.test_plot.TestPlotting.check_splits_single_var": ["numpy.testing.assert_array_equal", "<builtin>.len", "<builtin>.enumerate"], "tests._core.test_plot.TestPlotting.check_splits_multi_vars": ["<builtin>.len", "numpy.testing.assert_array_equal", "itertools.product", "<builtin>.enumerate", "pandas.Series", "<builtin>.zip", "<builtin>.dict", "numpy.prod"], "numpy.prod": [], "tests._core.test_plot.TestPlotting": ["pytest.mark.parametrize", "seaborn.utils._version_predates", "pytest.mark.skipif"], "tests._core.test_plot.TestPlotting.test_one_grouping_variable": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "seaborn._core.rules.categorical_order", "tests._core.test_plot.TestPlotting.check_splits_single_var"], "tests._core.test_plot.TestPlotting.test_two_grouping_variables": ["seaborn._core.plot.Plot", "itertools.product", "seaborn._core.rules.categorical_order", "tests._core.test_plot.MockMark.__init__", "<builtin>.zip", "tests._core.test_plot.TestPlotting.check_splits_multi_vars"], "tests._core.test_plot.TestPlotting.test_specified_width": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "numpy.testing.assert_array_almost_equal"], "tests._core.test_plot.TestPlotting.test_facets_no_subgroups": ["seaborn._core.plot.Plot", "<builtin>.list", "seaborn._core.rules.categorical_order", "tests._core.test_plot.MockMark.__init__", "tests._core.test_plot.TestPlotting.check_splits_single_var"], "tests._core.test_plot.TestPlotting.test_facets_one_subgroup": ["seaborn._core.plot.Plot", "<builtin>.list", "seaborn._core.rules.categorical_order", "tests._core.test_plot.MockMark.__init__", "<builtin>.zip", "tests._core.test_plot.TestPlotting.check_splits_multi_vars"], "tests._core.test_plot.TestPlotting.test_layer_specific_facet_disabling": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "seaborn._core.rules.categorical_order", "<builtin>.len"], "tests._core.test_plot.TestPlotting.test_paired_variables": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "itertools.product", "<builtin>.zip"], "tests._core.test_plot.TestPlotting.test_paired_one_dimension": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "<builtin>.zip"], "tests._core.test_plot.TestPlotting.test_paired_variables_one_subset": ["seaborn._core.plot.Plot", "itertools.product", "seaborn._core.rules.categorical_order", "tests._core.test_plot.MockMark.__init__", "<builtin>.zip"], "tests._core.test_plot.TestPlotting.test_paired_and_faceted": ["seaborn._core.plot.Plot", "itertools.product", "seaborn._core.rules.categorical_order", "tests._core.test_plot.MockMark.__init__", "<builtin>.zip"], "tests._core.test_plot.TestPlotting.test_theme_default": ["numpy.colors.same_color", "seaborn._core.plot.Plot", "matplotlib.colors.same_color"], "numpy.colors.same_color": [], "matplotlib.colors.same_color": [], "tests._core.test_plot.TestPlotting.test_theme_params": ["numpy.colors.same_color", "seaborn._core.plot.Plot", "matplotlib.colors.same_color"], "tests._core.test_plot.TestPlotting.test_theme_error": ["seaborn._core.plot.Plot", "pytest.raises"], "tests._core.test_plot.TestPlotting.test_theme_validation": ["seaborn._core.plot.Plot", "pytest.raises"], "tests._core.test_plot.TestPlotting.test_stat": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "seaborn._stats.aggregation.Agg", "pandas.testing.assert_frame_equal"], "seaborn._stats.aggregation.Agg": [], "tests._core.test_plot.TestPlotting.test_move": ["seaborn._core.moves.Shift", "tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "pandas.testing.assert_frame_equal"], "seaborn._core.moves.Shift": [], "tests._core.test_plot.TestPlotting.test_stat_and_move": ["seaborn._core.moves.Shift", "tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "seaborn._stats.aggregation.Agg"], "tests._core.test_plot.TestPlotting.test_stat_log_scale": ["pandas.testing.assert_frame_equal", "seaborn._core.plot.Plot", "numpy.log10", "tests._core.test_plot.MockMark.__init__", "seaborn._stats.aggregation.Agg"], "tests._core.test_plot.TestPlotting.test_move_log_scale": ["seaborn._core.moves.Shift", "tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestPlotting.test_multi_move": ["seaborn._core.moves.Shift", "tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestPlotting.test_multi_move_with_pairing": ["seaborn._core.moves.Shift", "tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestPlotting.test_move_with_range": ["seaborn._core.moves.Dodge", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "tests._core.test_plot.MockMark.__init__", "numpy.arange"], "seaborn._core.moves.Dodge": [], "tests._core.test_plot.TestPlotting.test_methods_clone": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestPlotting.test_default_is_no_pyplot": ["seaborn._core.plot.Plot", "matplotlib.pyplot.get_fignums", "<builtin>.isinstance"], "matplotlib.pyplot.get_fignums": [], "tests._core.test_plot.TestPlotting.test_with_pyplot": ["seaborn._core.plot.Plot", "matplotlib.pyplot.get_fignums", "matplotlib.pyplot.gcf", "<builtin>.len"], "matplotlib.pyplot.gcf": [], "tests._core.test_plot.TestPlotting.test_show": ["matplotlib.pyplot.gcf", "<builtin>.len", "warnings.catch_warnings", "seaborn._core.plot.Plot", "matplotlib.pyplot.get_fignums", "<builtin>.hasattr"], "<builtin>.hasattr": [], "tests._core.test_plot.TestPlotting.test_png_repr": ["PIL.Image.open", "seaborn._core.plot.Plot", "io.BytesIO", "<builtin>.sorted", "<builtin>.hasattr", "<builtin>.isinstance"], "io.BytesIO": [], "PIL.Image.open": [], "<builtin>.sorted": [], "tests._core.test_plot.TestPlotting.test_save": ["PIL.Image.open", "seaborn._core.plot.Plot", "io.BytesIO", "xml.etree.ElementTree.fromstring", "<builtin>.isinstance", "io.StringIO"], "io.StringIO": [], "xml.etree.ElementTree.fromstring": [], "tests._core.test_plot.TestPlotting.test_layout_size": ["seaborn._core.plot.Plot", "<builtin>.tuple"], "tests._core.test_plot.TestPlotting.test_on_axes": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "matplotlib.figure.Figure", "numpy.figure.Figure"], "numpy.figure.Figure": [], "tests._core.test_plot.TestPlotting.test_on_figure": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "matplotlib.figure.Figure", "numpy.figure.Figure"], "tests._core.test_plot.TestPlotting.test_on_subfigure": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "matplotlib.figure.Figure", "numpy.figure.Figure"], "tests._core.test_plot.TestPlotting.test_on_type_check": ["seaborn._core.plot.Plot", "pytest.raises"], "tests._core.test_plot.TestPlotting.test_on_axes_with_subplots_error": ["pytest.raises", "seaborn._core.plot.Plot", "matplotlib.figure.Figure", "numpy.figure.Figure"], "tests._core.test_plot.TestPlotting.test_on_layout_algo_default": ["numpy.layout_engine.ConstrainedLayoutEngine.__init__", "matplotlib.figure.Figure", "numpy.figure.Figure", "seaborn._core.plot.Plot", "matplotlib.layout_engine.ConstrainedLayoutEngine.__init__"], "numpy.layout_engine.ConstrainedLayoutEngine.__init__": [], "matplotlib.layout_engine.ConstrainedLayoutEngine.__init__": [], "tests._core.test_plot.TestPlotting.test_on_layout_algo_spec": ["seaborn._core.plot.Plot", "matplotlib.figure.Figure", "numpy.figure.Figure"], "tests._core.test_plot.TestPlotting.test_axis_labels_from_constructor": ["seaborn._core.plot.Plot"], "tests._core.test_plot.TestPlotting.test_axis_labels_from_layer": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestPlotting.test_axis_labels_are_first_name": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestPlotting.test_limits": ["seaborn._core.plot.Plot", "matplotlib.dates.date2num", "numpy.dates.date2num", "numpy.datetime64", "<builtin>.tuple"], "numpy.datetime64": [], "tests._core.test_plot.TestPlotting.test_labels_axis": ["seaborn._core.plot.Plot"], "tests._core.test_plot.TestPlotting.test_labels_legend": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestPlotting.test_labels_facets": ["numpy.reshape", "seaborn._core.plot.Plot", "numpy.ndenumerate"], "numpy.ndenumerate": [], "tests._core.test_plot.TestPlotting.test_title_single": ["seaborn._core.plot.Plot"], "tests._core.test_plot.TestPlotting.test_title_facet_function": ["seaborn._core.plot.Plot", "<builtin>.enumerate"], "tests._core.test_plot.TestExceptions.test_scale_setup": ["pytest.raises", "<builtin>.str", "seaborn._core.plot.Plot", "tests._core.test_plot.MockMark.__init__", "<builtin>.isinstance"], "<builtin>.str": [], "tests._core.test_plot.TestExceptions.test_coordinate_scaling": ["pytest.raises", "seaborn._core.plot.Plot", "tests._core.test_plot.MockMark.__init__", "<builtin>.hasattr", "seaborn._core.scales.Temporal"], "tests._core.test_plot.TestExceptions.test_semantic_scaling": ["pytest.raises", "seaborn._core.scales.Continuous.__init__", "<builtin>.str", "seaborn._core.plot.Plot", "<builtin>.isinstance", "seaborn._marks.dot.Dot"], "tests._core.test_plot.TestExceptions.test_semantic_scaling.ErrorRaising._setup": ["<builtin>.super"], "tests._core.test_plot.TestExceptions.test_semantic_scaling.ErrorRaising._setup.f": ["<builtin>.ValueError"], "<builtin>.ValueError": [], "seaborn._core.scales.Continuous.__init__": [], "seaborn._marks.dot.Dot": [], "tests._core.test_plot.TestFacetInterface": ["pytest.fixture", "pytest.mark.parametrize"], "tests._core.test_plot.TestFacetInterface.dim": [], "tests._core.test_plot.TestFacetInterface.reorder": [], "tests._core.test_plot.TestFacetInterface.reorder.<dict1>.<lambda1>": [], "tests._core.test_plot.TestFacetInterface.reorder.<dict1>.<lambda2>": [], "tests._core.test_plot.TestFacetInterface.reorder.<dict1>.<lambda3>": [], "tests._core.test_plot.TestFacetInterface.check_facet_results_1d": ["seaborn._core.rules.categorical_order", "<builtin>.len", "<builtin>.zip", "tests._core.test_plot.assert_gridspec_shape"], "tests._core.test_plot.TestFacetInterface.test_1d": ["seaborn._core.plot.Plot", "tests._core.test_plot.TestFacetInterface.check_facet_results_1d"], "tests._core.test_plot.TestFacetInterface.test_1d_as_vector": ["seaborn._core.plot.Plot", "tests._core.test_plot.TestFacetInterface.check_facet_results_1d"], "tests._core.test_plot.TestFacetInterface.test_1d_with_order": ["seaborn._core.plot.Plot", "seaborn._core.rules.categorical_order", "tests._core.test_plot.TestFacetInterface.check_facet_results_1d"], "tests._core.test_plot.TestFacetInterface.check_facet_results_2d": ["<builtin>.len", "tests._core.test_plot.assert_gridspec_shape", "<builtin>.list", "itertools.product", "seaborn._core.rules.categorical_order", "<builtin>.zip"], "tests._core.test_plot.TestFacetInterface.test_2d": ["seaborn._core.plot.Plot", "tests._core.test_plot.TestFacetInterface.check_facet_results_2d"], "tests._core.test_plot.TestFacetInterface.test_2d_with_order": ["seaborn._core.plot.Plot", "seaborn._core.rules.categorical_order", "tests._core.test_plot.TestFacetInterface.check_facet_results_2d"], "tests._core.test_plot.TestFacetInterface.test_layout_algo": ["seaborn._core.plot.Plot", "io.BytesIO"], "tests._core.test_plot.TestFacetInterface.test_axis_sharing": ["<builtin>.len", "numpy.reshape", "seaborn._core.plot.Plot", "<builtin>.getattr", "seaborn._core.rules.categorical_order", "<builtin>.zip", "<builtin>.any", "<builtin>.all"], "<builtin>.all": [], "tests._core.test_plot.TestFacetInterface.test_unshared_spacing": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "numpy.testing.assert_array_almost_equal", "numpy.testing.assert_array_equal"], "tests._core.test_plot.TestFacetInterface.test_col_wrapping": ["<builtin>.list", "<builtin>.len", "tests._core.test_plot.assert_gridspec_shape", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestFacetInterface.test_row_wrapping": ["<builtin>.list", "<builtin>.len", "tests._core.test_plot.assert_gridspec_shape", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestPairInterface.check_pair_grid": ["<builtin>.len", "itertools.product", "<builtin>.zip", "tests._core.test_plot.assert_gridspec_shape"], "tests._core.test_plot.TestPairInterface": ["pytest.mark.parametrize"], "tests._core.test_plot.TestPairInterface.test_all_numeric": ["tests._core.test_plot.TestPairInterface.check_pair_grid", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestPairInterface.test_single_variable_key_raises": ["seaborn._core.plot.Plot", "pytest.raises"], "tests._core.test_plot.TestPairInterface.test_single_dimension": ["tests._core.test_plot.TestPairInterface.check_pair_grid", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestPairInterface.test_non_cross": ["<builtin>.len", "tests._core.test_plot.assert_gridspec_shape", "seaborn._core.plot.Plot", "<builtin>.getattr", "<builtin>.enumerate", "<builtin>.any"], "tests._core.test_plot.TestPairInterface.test_list_of_vectors": ["seaborn._core.plot.Plot", "<builtin>.zip", "<builtin>.len"], "tests._core.test_plot.TestPairInterface.test_with_no_variables": ["seaborn._core.plot.Plot", "<builtin>.len"], "tests._core.test_plot.TestPairInterface.test_with_facets": ["<builtin>.len", "tests._core.test_plot.assert_gridspec_shape", "seaborn._core.plot.Plot", "itertools.product", "seaborn._core.rules.categorical_order", "<builtin>.zip"], "tests._core.test_plot.TestPairInterface.test_error_on_facet_overlap": ["seaborn._core.plot.Plot", "pytest.raises"], "tests._core.test_plot.TestPairInterface.test_error_on_wrap_overlap": ["seaborn._core.plot.Plot", "pytest.raises"], "tests._core.test_plot.TestPairInterface.test_axis_sharing": ["numpy.reshape", "seaborn._core.plot.Plot", "<builtin>.getattr", "<builtin>.any", "<builtin>.all"], "tests._core.test_plot.TestPairInterface.test_axis_sharing_with_facets": ["numpy.reshape", "seaborn._core.plot.Plot", "<builtin>.getattr", "<builtin>.any", "<builtin>.all"], "tests._core.test_plot.TestPairInterface.test_x_wrapping": ["seaborn._core.plot.Plot", "<builtin>.zip", "<builtin>.len", "tests._core.test_plot.assert_gridspec_shape"], "tests._core.test_plot.TestPairInterface.test_y_wrapping": ["<builtin>.len", "tests._core.test_plot.assert_gridspec_shape", "seaborn._core.plot.Plot", "numpy.empty", "<builtin>.enumerate"], "numpy.empty": [], "tests._core.test_plot.TestPairInterface.test_non_cross_wrapping": ["seaborn._core.plot.Plot", "<builtin>.len", "tests._core.test_plot.assert_gridspec_shape"], "tests._core.test_plot.TestPairInterface.test_cross_mismatched_lengths": ["seaborn._core.plot.Plot", "pytest.raises"], "tests._core.test_plot.TestPairInterface.test_orient_inference": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "seaborn._core.moves.Move.__init__"], "tests._core.test_plot.TestPairInterface.test_orient_inference.CaptureOrientMove.__call__": [], "tests._core.test_plot.TestPairInterface.test_computed_coordinate_orient_inference": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "seaborn._stats.base.Stat.__init__"], "tests._core.test_plot.TestPairInterface.test_computed_coordinate_orient_inference.MockComputeStat.__call__": [], "tests._core.test_plot.TestPairInterface.test_two_variables_single_order_error": ["seaborn._core.plot.Plot", "pytest.raises"], "tests._core.test_plot.TestPairInterface.test_limits": ["seaborn._core.plot.Plot"], "tests._core.test_plot.TestPairInterface.test_labels": ["seaborn._core.plot.Plot"], "tests._core.test_plot.TestLabelVisibility.test_single_subplot": ["seaborn._core.plot.Plot", "<builtin>.all"], "tests._core.test_plot.TestLabelVisibility": ["pytest.mark.parametrize"], "tests._core.test_plot.TestLabelVisibility.test_1d_column": ["seaborn._core.plot.Plot", "<builtin>.any", "<builtin>.all"], "tests._core.test_plot.TestLabelVisibility.test_1d_row": ["seaborn._core.plot.Plot", "<builtin>.any", "<builtin>.all"], "tests._core.test_plot.TestLabelVisibility.test_1d_column_wrapped": ["seaborn._core.plot.Plot", "<builtin>.any", "<builtin>.all", "<builtin>.list"], "tests._core.test_plot.TestLabelVisibility.test_1d_row_wrapped": ["seaborn._core.plot.Plot", "<builtin>.any", "<builtin>.all", "<builtin>.list"], "tests._core.test_plot.TestLabelVisibility.test_1d_column_wrapped_non_cross": ["seaborn._core.plot.Plot", "<builtin>.all"], "tests._core.test_plot.TestLabelVisibility.test_2d": ["seaborn._core.plot.Plot", "<builtin>.any", "<builtin>.all", "<builtin>.list"], "tests._core.test_plot.TestLabelVisibility.test_2d_unshared": ["seaborn._core.plot.Plot", "<builtin>.all", "<builtin>.list"], "tests._core.test_plot.TestLegend": ["pytest.fixture"], "tests._core.test_plot.TestLegend.xy": ["<builtin>.dict"], "tests._core.test_plot.TestLegend.test_single_layer_single_variable": ["<builtin>.len", "seaborn._core.plot.Plot", "seaborn._core.rules.categorical_order", "tests._core.test_plot.MockMark.__init__", "pandas.Series", "<builtin>.zip", "<builtin>.isinstance"], "tests._core.test_plot.TestLegend.test_single_layer_common_variable": ["<builtin>.len", "seaborn._core.plot.Plot", "<builtin>.list", "seaborn._core.rules.categorical_order", "tests._core.test_plot.MockMark.__init__", "pandas.Series", "<builtin>.zip", "<builtin>.dict", "<builtin>.isinstance"], "tests._core.test_plot.TestLegend.test_single_layer_common_unnamed_variable": ["<builtin>.id", "<builtin>.len", "seaborn._core.plot.Plot", "<builtin>.list", "numpy.array", "tests._core.test_plot.MockMark.__init__", "<builtin>.zip", "<builtin>.dict", "numpy.unique", "<builtin>.isinstance"], "<builtin>.id": [], "tests._core.test_plot.TestLegend.test_single_layer_multi_variable": ["<builtin>.len", "seaborn._core.plot.Plot", "seaborn._core.rules.categorical_order", "tests._core.test_plot.MockMark.__init__", "pandas.Series", "<builtin>.zip", "<builtin>.dict", "<builtin>.isinstance"], "tests._core.test_plot.TestLegend.test_multi_layer_single_variable": ["<builtin>.len", "seaborn._core.plot.Plot", "seaborn._core.rules.categorical_order", "tests._core.test_plot.MockMark.__init__", "pandas.Series", "<builtin>.zip", "<builtin>.isinstance"], "tests._core.test_plot.TestLegend.test_multi_layer_multi_variable": ["<builtin>.len", "seaborn._core.plot.Plot", "seaborn._core.rules.categorical_order", "tests._core.test_plot.MockMark.__init__", "pandas.Series", "<builtin>.zip", "<builtin>.dict", "<builtin>.isinstance"], "tests._core.test_plot.TestLegend.test_multi_layer_different_artists": ["<builtin>.len", "seaborn._core.plot.Plot", "seaborn.utils._version_predates", "seaborn._core.rules.categorical_order", "tests._core.test_plot.MockMark.__init__", "pandas.Series"], "tests._core.test_plot.TestLegend.test_multi_layer_different_artists.MockMark1._legend_artist": ["numpy.lines.Line2D", "matplotlib.lines.Line2D"], "tests._core.test_plot.TestLegend.test_multi_layer_different_artists.MockMark2._legend_artist": ["numpy.patches.Patch", "matplotlib.patches.Patch"], "numpy.patches.Patch": [], "matplotlib.patches.Patch": [], "tests._core.test_plot.TestLegend.test_three_layers": ["<builtin>.len", "seaborn._core.plot.Plot", "tests._core.test_plot.MockMark.__init__", "pandas.Series", "<builtin>.range"], "tests._core.test_plot.TestLegend.test_three_layers.MockMarkLine._legend_artist": ["numpy.lines.Line2D", "matplotlib.lines.Line2D"], "tests._core.test_plot.TestLegend.test_identity_scale_ignored": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "pandas.Series"], "tests._core.test_plot.TestLegend.test_suppression_in_add_method": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "pandas.Series"], "tests._core.test_plot.TestLegend.test_anonymous_title": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestLegend.test_legendless_mark": ["tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot"], "tests._core.test_plot.TestLegend.test_legendless_mark.NoLegendMark._legend_artist": [], "tests._core.test_plot.TestLegend.test_legend_has_no_offset": ["numpy.add", "tests._core.test_plot.MockMark.__init__", "seaborn._core.plot.Plot", "<builtin>.float"], "numpy.add": [], "tests._core.test_plot.TestDefaultObject.test_default_repr": ["<builtin>.repr", "seaborn._core.plot.Default"], "seaborn._core.plot.Default": [], "<builtin>.repr": [], "tests._core.test_plot.TestThemeConfig": ["pytest.fixture"], "tests._core.test_plot.TestThemeConfig.reset_config": ["seaborn._core.plot.Plot.config.theme.reset"], "seaborn._core.plot.Plot.config.theme.reset": [], "tests._core.test_plot.TestThemeConfig.test_default": ["numpy.colors.same_color", "seaborn._core.plot.Plot", "matplotlib.colors.same_color"], "tests._core.test_plot.TestThemeConfig.test_setitem": ["numpy.colors.same_color", "seaborn._core.plot.Plot", "matplotlib.colors.same_color"], "tests._core.test_plot.TestThemeConfig.test_update": ["numpy.colors.same_color", "seaborn._core.plot.Plot.config.theme.update", "matplotlib.colors.same_color", "seaborn._core.plot.Plot"], "seaborn._core.plot.Plot.config.theme.update": [], "tests._core.test_plot.TestThemeConfig.test_reset": ["seaborn._core.plot.Plot.config.theme.update", "matplotlib.colors.same_color", "numpy.colors.same_color", "seaborn._core.plot.Plot", "seaborn._core.plot.Plot.config.theme.reset"], "tests._core.test_plot.TestThemeConfig.test_copy": ["seaborn._core.plot.Plot.config.theme.copy"], "seaborn._core.plot.Plot.config.theme.copy": [], "tests._core.test_plot.TestThemeConfig.test_html_repr": ["seaborn._core.plot.Plot.config.theme._repr_html_"], "seaborn._core.plot.Plot.config.theme._repr_html_": [], "tests._core.test_rules": [], "tests._core.test_rules.test_vartype_object": ["seaborn._core.rules.VarType", "pytest.raises"], "seaborn._core.rules.VarType": [], "tests._core.test_rules.test_variable_type": ["pandas.Timestamp", "pandas.Series", "seaborn._core.rules.variable_type"], "seaborn._core.rules.variable_type": [], "pandas.Timestamp": [], "tests._core.test_rules.test_categorical_order": ["pandas.Categorical", "<builtin>.list", "pandas.Series", "seaborn._core.rules.categorical_order"], "pandas.Categorical": [], "tests._core.test_data": ["functools.partial"], "tests._core.test_data.TestPlotData": ["pytest.fixture", "pytest.mark.parametrize"], "tests._core.test_data.TestPlotData.long_variables": ["<builtin>.dict"], "tests._core.test_data.TestPlotData.test_named_vectors": ["seaborn._core.data.PlotData"], "seaborn._core.data.PlotData": [], "tests._core.test_data.TestPlotData.test_named_and_given_vectors": ["seaborn._core.data.PlotData", "<builtin>.id"], "tests._core.test_data.TestPlotData.test_index_as_variable": ["seaborn._core.data.PlotData", "<builtin>.len", "pandas.Index", "pandas.Series", "numpy.arange"], "pandas.Index": [], "tests._core.test_data.TestPlotData.test_multiindex_as_variables": ["seaborn._core.data.PlotData", "<builtin>.len", "pandas.MultiIndex.from_arrays", "pandas.Index", "pandas.Series", "numpy.arange"], "pandas.MultiIndex.from_arrays": [], "tests._core.test_data.TestPlotData.test_int_as_variable_key": ["pandas.DataFrame", "<builtin>.str", "seaborn._core.data.PlotData"], "tests._core.test_data.TestPlotData.test_int_as_variable_value": ["seaborn._core.data.PlotData", "<builtin>.id"], "tests._core.test_data.TestPlotData.test_tuple_as_variable_key": ["pandas.DataFrame", "seaborn._core.data.PlotData", "pandas.MultiIndex.from_product", "<builtin>.str"], "pandas.MultiIndex.from_product": [], "tests._core.test_data.TestPlotData.test_dict_as_data": ["seaborn._core.data.PlotData", "pandas.Series"], "tests._core.test_data.TestPlotData.test_vectors_various_types": ["seaborn._core.data.PlotData", "<builtin>.list", "numpy.testing.assert_array_equal", "<builtin>.id"], "tests._core.test_data.TestPlotData.test_none_as_variable_value": ["seaborn._core.data.PlotData", "<builtin>.list"], "tests._core.test_data.TestPlotData.test_frame_and_vector_mismatched_lengths": ["seaborn._core.data.PlotData", "pytest.raises", "numpy.arange", "<builtin>.len"], "tests._core.test_data.TestPlotData.test_empty_data_input": ["seaborn._core.data.PlotData", "<builtin>.isinstance", "<builtin>.dict"], "tests._core.test_data.TestPlotData.test_index_alignment_series_to_dataframe": ["seaborn._core.data.PlotData", "pandas.Index", "pandas.Series", "numpy.arange", "<builtin>.dict", "pandas.DataFrame"], "tests._core.test_data.TestPlotData.test_index_alignment_between_series": ["seaborn._core.data.PlotData", "pandas.Series", "numpy.arange"], "tests._core.test_data.TestPlotData.test_key_not_in_data_raises": ["seaborn._core.data.PlotData", "pytest.raises"], "tests._core.test_data.TestPlotData.test_key_with_no_data_raises": ["seaborn._core.data.PlotData", "pytest.raises"], "tests._core.test_data.TestPlotData.test_data_vector_different_lengths_raises": ["seaborn._core.data.PlotData", "pytest.raises", "numpy.arange", "<builtin>.len"], "tests._core.test_data.TestPlotData.test_undefined_variables_raise": ["seaborn._core.data.PlotData", "pytest.raises", "<builtin>.dict"], "tests._core.test_data.TestPlotData.test_contains_operation": ["seaborn._core.data.PlotData"], "tests._core.test_data.TestPlotData.test_join_add_variable": ["seaborn._core.data.PlotData", "<builtin>.dict"], "tests._core.test_data.TestPlotData.test_join_replace_variable": ["seaborn._core.data.PlotData"], "tests._core.test_data.TestPlotData.test_join_remove_variable": ["seaborn._core.data.PlotData"], "tests._core.test_data.TestPlotData.test_join_all_operations": ["seaborn._core.data.PlotData"], "tests._core.test_data.TestPlotData.test_join_all_operations_same_data": ["seaborn._core.data.PlotData"], "tests._core.test_data.TestPlotData.test_join_add_variable_new_data": ["seaborn._core.data.PlotData", "<builtin>.dict"], "tests._core.test_data.TestPlotData.test_join_replace_variable_new_data": ["seaborn._core.data.PlotData"], "tests._core.test_data.TestPlotData.test_join_add_variable_different_index": ["seaborn._core.data.PlotData"], "tests._core.test_data.TestPlotData.test_join_replace_variable_different_index": ["seaborn._core.data.PlotData"], "tests._core.test_data.TestPlotData.test_join_subset_data_inherit_variables": ["seaborn._core.data.PlotData"], "tests._core.test_data.TestPlotData.test_join_multiple_inherits_from_orig": ["pandas.DataFrame", "seaborn._core.data.PlotData", "<builtin>.dict"], "tests._core.test_subplots": [], "tests._core.test_subplots.TestSpecificationChecks.test_both_facets_and_wrap": ["seaborn._core.subplots.Subplots", "pytest.raises"], "seaborn._core.subplots.Subplots": [], "tests._core.test_subplots.TestSpecificationChecks.test_cross_xy_pairing_and_wrap": ["seaborn._core.subplots.Subplots", "pytest.raises"], "tests._core.test_subplots.TestSpecificationChecks.test_col_facets_and_x_pairing": ["seaborn._core.subplots.Subplots", "pytest.raises"], "tests._core.test_subplots.TestSpecificationChecks.test_wrapped_columns_and_y_pairing": ["seaborn._core.subplots.Subplots", "pytest.raises"], "tests._core.test_subplots.TestSpecificationChecks.test_wrapped_x_pairing_and_facetd_rows": ["seaborn._core.subplots.Subplots", "pytest.raises"], "tests._core.test_subplots.TestSubplotSpec.test_single_subplot": ["seaborn._core.subplots.Subplots"], "tests._core.test_subplots.TestSubplotSpec.test_single_facet": ["<builtin>.list", "seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_two_facets": ["<builtin>.list", "seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_col_facet_wrapped": ["<builtin>.list", "seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_row_facet_wrapped": ["<builtin>.list", "seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_col_facet_wrapped_single_row": ["<builtin>.list", "seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_x_and_y_paired": ["seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_x_paired": ["seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_y_paired": ["seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_x_paired_and_wrapped": ["seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_y_paired_and_wrapped": ["seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_y_paired_and_wrapped_single_row": ["seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_col_faceted_y_paired": ["<builtin>.list", "seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_row_faceted_x_paired": ["<builtin>.list", "seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_x_any_y_paired_non_cross": ["seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_x_any_y_paired_non_cross_wrapped": ["seaborn._core.subplots.Subplots", "<builtin>.len"], "tests._core.test_subplots.TestSubplotSpec.test_forced_unshared_facets": ["seaborn._core.subplots.Subplots"], "tests._core.test_subplots.TestSubplotElements.test_single_subplot": ["seaborn._core.subplots.Subplots", "<builtin>.len", "<builtin>.enumerate"], "tests._core.test_subplots.TestSubplotElements": ["pytest.mark.parametrize"], "tests._core.test_subplots.TestSubplotElements.test_single_facet_dim": ["<builtin>.list", "seaborn._core.subplots.Subplots", "<builtin>.len", "<builtin>.enumerate"], "tests._core.test_subplots.TestSubplotElements.test_single_facet_dim_wrapped": ["seaborn._core.subplots.Subplots", "<builtin>.len", "<builtin>.list", "<builtin>.enumerate", "<builtin>.zip"], "tests._core.test_subplots.TestSubplotElements.test_both_facet_dims": ["seaborn._core.subplots.Subplots", "<builtin>.len", "<builtin>.list", "itertools.product", "<builtin>.zip"], "tests._core.test_subplots.TestSubplotElements.test_single_paired_var": ["seaborn._core.subplots.Subplots", "<builtin>.len", "<builtin>.zip", "<builtin>.enumerate"], "tests._core.test_subplots.TestSubplotElements.test_single_paired_var_wrapped": ["seaborn._core.subplots.Subplots", "<builtin>.len", "<builtin>.zip", "<builtin>.enumerate"], "tests._core.test_subplots.TestSubplotElements.test_both_paired_variables": ["<builtin>.list", "seaborn._core.subplots.Subplots", "<builtin>.len", "<builtin>.range"], "tests._core.test_subplots.TestSubplotElements.test_both_paired_non_cross": ["seaborn._core.subplots.Subplots", "<builtin>.len", "<builtin>.enumerate"], "tests._core.test_subplots.TestSubplotElements.test_one_facet_one_paired": ["seaborn._core.subplots.Subplots", "<builtin>.len", "numpy.reshape", "<builtin>.list", "<builtin>.enumerate"], "tests._core.test_properties": [], "tests._core.test_properties.DataFixtures": ["pytest.fixture"], "tests._core.test_properties.DataFixtures.num_vector": [], "tests._core.test_properties.DataFixtures.num_order": ["seaborn._core.rules.categorical_order"], "tests._core.test_properties.DataFixtures.cat_vector": [], "tests._core.test_properties.DataFixtures.cat_order": ["seaborn._core.rules.categorical_order"], "tests._core.test_properties.DataFixtures.dt_num_vector": [], "tests._core.test_properties.DataFixtures.dt_cat_vector": [], "tests._core.test_properties.DataFixtures.bool_vector": [], "tests._core.test_properties.DataFixtures.vectors": [], "tests._core.test_properties.TestCoordinate.test_bad_scale_arg_str": ["seaborn._core.properties.Coordinate", "pytest.raises"], "tests._core.test_properties.TestCoordinate.test_bad_scale_arg_type": ["seaborn._core.properties.Coordinate", "pytest.raises"], "tests._core.test_properties.TestColor.assert_same_rgb": ["numpy.testing.assert_array_equal"], "tests._core.test_properties.TestColor.test_nominal_default_palette": ["<builtin>.len", "matplotlib.colors.same_color", "seaborn._core.scales.Nominal", "seaborn._core.properties.Color", "numpy.arange", "seaborn.palettes.color_palette", "<builtin>.zip"], "tests._core.test_properties.TestColor.test_nominal_default_palette_large": ["matplotlib.colors.same_color", "seaborn._core.scales.Nominal", "<builtin>.list", "seaborn._core.properties.Color", "pandas.Series", "numpy.arange", "seaborn.palettes.color_palette", "<builtin>.zip"], "tests._core.test_properties.TestColor.test_nominal_named_palette": ["<builtin>.len", "matplotlib.colors.same_color", "seaborn._core.scales.Nominal", "seaborn._core.properties.Color", "numpy.arange", "seaborn.palettes.color_palette", "<builtin>.zip"], "tests._core.test_properties.TestColor.test_nominal_list_palette": ["<builtin>.len", "matplotlib.colors.same_color", "seaborn._core.scales.Nominal", "seaborn._core.properties.Color", "seaborn.palettes.color_palette", "numpy.arange", "<builtin>.zip"], "tests._core.test_properties.TestColor.test_nominal_dict_palette": ["<builtin>.len", "matplotlib.colors.same_color", "seaborn._core.scales.Nominal", "seaborn._core.properties.Color", "seaborn.palettes.color_palette", "<builtin>.zip", "<builtin>.dict", "numpy.arange"], "tests._core.test_properties.TestColor.test_nominal_dict_with_missing_keys": ["pytest.raises", "seaborn._core.scales.Nominal", "seaborn._core.properties.Color", "seaborn.palettes.color_palette", "<builtin>.zip", "<builtin>.dict"], "tests._core.test_properties.TestColor.test_nominal_list_too_short": ["<builtin>.len", "seaborn._core.scales.Nominal", "pytest.warns", "seaborn._core.properties.Color", "seaborn.palettes.color_palette"], "tests._core.test_properties.TestColor.test_nominal_list_too_long": ["<builtin>.len", "seaborn._core.scales.Nominal", "pytest.warns", "seaborn._core.properties.Color", "seaborn.palettes.color_palette"], "tests._core.test_properties.TestColor.test_continuous_default_palette": ["seaborn._core.properties.Color", "tests._core.test_properties.TestColor.assert_same_rgb", "seaborn.palettes.color_palette", "seaborn._core.scales.Continuous"], "tests._core.test_properties.TestColor.test_continuous_named_palette": ["seaborn._core.properties.Color", "tests._core.test_properties.TestColor.assert_same_rgb", "seaborn.palettes.color_palette", "seaborn._core.scales.Continuous"], "tests._core.test_properties.TestColor.test_continuous_tuple_palette": ["seaborn._core.properties.Color", "tests._core.test_properties.TestColor.assert_same_rgb", "seaborn.palettes.color_palette", "seaborn._core.scales.Continuous"], "tests._core.test_properties.TestColor.test_continuous_callable_palette": ["seaborn._core.properties.Color", "tests._core.test_properties.TestColor.assert_same_rgb", "seaborn._core.scales.Continuous", "seaborn._compat.get_colormap"], "seaborn._compat.get_colormap": [], "tests._core.test_properties.TestColor.test_continuous_missing": ["seaborn._core.properties.Color", "numpy.isnan", "pandas.Series", "seaborn._core.scales.Continuous"], "numpy.isnan": [], "tests._core.test_properties.TestColor.test_bad_scale_values_continuous": ["seaborn._core.properties.Color", "seaborn._core.scales.Continuous", "pytest.raises"], "tests._core.test_properties.TestColor.test_bad_scale_values_nominal": ["seaborn._core.scales.Nominal", "seaborn._compat.get_colormap", "seaborn._core.properties.Color", "pytest.raises"], "tests._core.test_properties.TestColor.test_bad_inference_arg": ["seaborn._core.properties.Color", "pytest.raises"], "tests._core.test_properties.TestColor": ["pytest.mark.parametrize"], "tests._core.test_properties.TestColor.test_default": ["seaborn._core.properties.Color", "<builtin>.isinstance"], "tests._core.test_properties.TestColor.test_default_numeric_data_category_dtype": ["seaborn._core.properties.Color", "<builtin>.isinstance"], "tests._core.test_properties.TestColor.test_default_binary_data": ["seaborn._core.properties.Color", "pandas.Series", "<builtin>.isinstance"], "tests._core.test_properties.TestColor.test_inference": ["seaborn._core.properties.Color", "<builtin>.isinstance"], "tests._core.test_properties.TestColor.test_standardization": ["seaborn._core.properties.Color", "seaborn.utils._version_predates", "matplotlib.colors.to_rgb", "matplotlib.colors.to_rgba"], "tests._core.test_properties.ObjectPropertyBase.assert_equal": ["tests._core.test_properties.ObjectPropertyBase.unpack"], "tests._core.test_properties.ObjectPropertyBase.unpack": [], "tests._core.test_properties.ObjectPropertyBase": ["pytest.mark.parametrize"], "tests._core.test_properties.ObjectPropertyBase.test_default": ["<builtin>.isinstance"], "tests._core.test_properties.ObjectPropertyBase.test_inference_list": ["<builtin>.isinstance"], "tests._core.test_properties.ObjectPropertyBase.test_inference_dict": ["<builtin>.isinstance", "seaborn._core.rules.categorical_order", "<builtin>.zip", "<builtin>.dict"], "tests._core.test_properties.ObjectPropertyBase.test_dict_missing": ["<builtin>.repr", "pytest.raises", "seaborn._core.scales.Nominal", "seaborn._core.rules.categorical_order", "<builtin>.zip", "<builtin>.dict"], "tests._core.test_properties.ObjectPropertyBase.test_mapping_default": ["seaborn._core.scales.Nominal", "tests._core.test_properties.ObjectPropertyBase.assert_equal", "<builtin>.enumerate"], "tests._core.test_properties.ObjectPropertyBase.test_mapping_from_list": ["seaborn._core.scales.Nominal", "tests._core.test_properties.ObjectPropertyBase.assert_equal", "<builtin>.enumerate"], "tests._core.test_properties.ObjectPropertyBase.test_mapping_from_dict": ["seaborn._core.scales.Nominal", "seaborn._core.rules.categorical_order", "<builtin>.enumerate", "tests._core.test_properties.ObjectPropertyBase.assert_equal", "<builtin>.zip", "<builtin>.dict"], "tests._core.test_properties.ObjectPropertyBase.test_mapping_with_null_value": ["seaborn._core.scales.Nominal", "tests._core.test_properties.ObjectPropertyBase.assert_equal", "<builtin>.zip", "numpy.array"], "tests._core.test_properties.ObjectPropertyBase.test_unique_default_large_n": ["<builtin>.len", "seaborn._core.scales.Nominal", "tests._core.test_properties.ObjectPropertyBase.unpack", "pandas.Series", "numpy.arange"], "tests._core.test_properties.ObjectPropertyBase.test_bad_scale_values": ["seaborn._core.scales.Nominal", "pytest.raises"], "seaborn._compat.MarkerStyle": [], "tests._core.test_properties.TestMarker": ["seaborn._compat.MarkerStyle"], "tests._core.test_properties.TestMarker.unpack": [], "seaborn._core.properties.LineStyle._get_dash_pattern": [], "tests._core.test_properties.TestLineStyle": ["seaborn._core.properties.LineStyle._get_dash_pattern"], "tests._core.test_properties.TestLineStyle.test_bad_type": ["pytest.raises", "seaborn._core.properties.LineStyle"], "seaborn._core.properties.LineStyle": [], "tests._core.test_properties.TestLineStyle.test_bad_style": ["pytest.raises", "seaborn._core.properties.LineStyle"], "tests._core.test_properties.TestLineStyle.test_bad_dashes": ["pytest.raises", "seaborn._core.properties.LineStyle"], "tests._core.test_properties.TestFill": ["pytest.fixture", "pytest.mark.parametrize"], "tests._core.test_properties.TestFill.vectors": ["pandas.Series"], "tests._core.test_properties.TestFill.cat_vector": [], "tests._core.test_properties.TestFill.num_vector": [], "tests._core.test_properties.TestFill.test_default": ["seaborn._core.properties.Fill", "<builtin>.isinstance"], "tests._core.test_properties.TestFill.test_inference_list": ["seaborn._core.properties.Fill", "<builtin>.isinstance"], "tests._core.test_properties.TestFill.test_inference_dict": ["seaborn._core.properties.Fill", "<builtin>.isinstance", "<builtin>.zip", "<builtin>.dict"], "tests._core.test_properties.TestFill.test_mapping_categorical_data": ["seaborn._core.scales.Nominal", "seaborn._core.properties.Fill", "numpy.testing.assert_array_equal"], "tests._core.test_properties.TestFill.test_mapping_numeric_data": ["seaborn._core.scales.Nominal", "seaborn._core.properties.Fill", "numpy.testing.assert_array_equal"], "tests._core.test_properties.TestFill.test_mapping_list": ["seaborn._core.scales.Nominal", "seaborn._core.properties.Fill", "numpy.testing.assert_array_equal"], "tests._core.test_properties.TestFill.test_mapping_truthy_list": ["seaborn._core.scales.Nominal", "seaborn._core.properties.Fill", "numpy.testing.assert_array_equal"], "tests._core.test_properties.TestFill.test_mapping_dict": ["seaborn._core.properties.Fill", "seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal", "<builtin>.zip", "<builtin>.dict"], "tests._core.test_properties.TestFill.test_cycle_warning": ["seaborn._core.scales.Nominal", "pytest.warns", "pandas.Series", "seaborn._core.properties.Fill"], "tests._core.test_properties.TestFill.test_values_error": ["seaborn._core.scales.Nominal", "pandas.Series", "pytest.raises", "seaborn._core.properties.Fill"], "tests._core.test_properties.IntervalBase.norm": [], "tests._core.test_properties.IntervalBase": ["pytest.mark.parametrize"], "tests._core.test_properties.IntervalBase.test_default": ["<builtin>.isinstance"], "tests._core.test_properties.IntervalBase.test_inference": ["<builtin>.isinstance"], "tests._core.test_properties.IntervalBase.test_mapped_interval_numeric": ["numpy.testing.assert_array_equal", "seaborn._core.scales.Continuous"], "tests._core.test_properties.IntervalBase.test_mapped_interval_categorical": ["seaborn._core.scales.Nominal", "numpy.testing.assert_array_equal"], "tests._core.test_properties.IntervalBase.test_bad_scale_values_numeric_data": ["seaborn._core.scales.Continuous", "pytest.raises"], "tests._core.test_properties.IntervalBase.test_bad_scale_values_categorical_data": ["seaborn._core.scales.Nominal", "pytest.raises"], "tests._core.test_properties.TestLineWidth.test_rcparam_default": ["seaborn._core.properties.LineWidth", "numpy.rc_context", "matplotlib.rc_context"], "numpy.rc_context": [], "seaborn._core.properties.LineWidth": [], "tests._core.test_properties.TestEdgeWidth.test_rcparam_default": ["seaborn._core.properties.EdgeWidth", "numpy.rc_context", "matplotlib.rc_context"], "seaborn._core.properties.EdgeWidth": [], "tests._core.test_properties.TestPointSize.test_areal_scaling_numeric": ["numpy.linspace", "<builtin>.len", "numpy.sqrt", "seaborn._core.properties.PointSize", "numpy.testing.assert_array_equal", "numpy.square", "seaborn._core.scales.Continuous"], "seaborn._core.properties.PointSize": [], "numpy.square": [], "tests._core.test_properties.TestPointSize.test_areal_scaling_categorical": ["seaborn._core.scales.Nominal", "numpy.sqrt", "seaborn._core.properties.PointSize", "numpy.testing.assert_array_equal", "numpy.arange"], "tests._core.test_moves": [], "tests._core.test_moves.MoveFixtures": ["pytest.fixture"], "tests._core.test_moves.MoveFixtures.df": ["pandas.DataFrame"], "tests._core.test_moves.MoveFixtures.toy_df": ["pandas.DataFrame"], "tests._core.test_moves.MoveFixtures.toy_df_widths": [], "tests._core.test_moves.MoveFixtures.toy_df_facets": ["pandas.DataFrame"], "tests._core.test_moves.TestJitter.get_groupby": ["seaborn._core.groupby.GroupBy"], "seaborn._core.groupby.GroupBy": [], "tests._core.test_moves.TestJitter.check_same": ["pandas.testing.assert_series_equal"], "tests._core.test_moves.TestJitter.check_pos": [], "tests._core.test_moves.TestJitter.test_default": ["tests._core.test_moves.TestJitter.check_pos", "tests._core.test_moves.TestJitter.get_groupby", "tests._core.test_moves.TestJitter.check_same", "seaborn._core.moves.Jitter"], "seaborn._core.moves.Jitter": [], "tests._core.test_moves.TestJitter.test_width": ["tests._core.test_moves.TestJitter.check_pos", "tests._core.test_moves.TestJitter.get_groupby", "tests._core.test_moves.TestJitter.check_same", "seaborn._core.moves.Jitter"], "tests._core.test_moves.TestJitter.test_x": ["tests._core.test_moves.TestJitter.check_pos", "tests._core.test_moves.TestJitter.get_groupby", "tests._core.test_moves.TestJitter.check_same", "seaborn._core.moves.Jitter"], "tests._core.test_moves.TestJitter.test_y": ["tests._core.test_moves.TestJitter.check_pos", "tests._core.test_moves.TestJitter.get_groupby", "tests._core.test_moves.TestJitter.check_same", "seaborn._core.moves.Jitter"], "tests._core.test_moves.TestJitter.test_seed": ["tests._core.test_moves.TestJitter.get_groupby", "pandas.testing.assert_series_equal", "<builtin>.dict", "seaborn._core.moves.Jitter"], "tests._core.test_moves.TestDodge.test_default": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "seaborn._core.moves.Dodge", "numpy.testing.assert_array_almost_equal"], "tests._core.test_moves.TestDodge.test_fill": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "seaborn._core.moves.Dodge", "numpy.testing.assert_array_almost_equal"], "tests._core.test_moves.TestDodge.test_drop": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "seaborn._core.moves.Dodge", "numpy.testing.assert_array_almost_equal"], "tests._core.test_moves.TestDodge.test_gap": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "seaborn._core.moves.Dodge", "numpy.testing.assert_array_almost_equal"], "tests._core.test_moves.TestDodge.test_widths_default": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "seaborn._core.moves.Dodge", "numpy.testing.assert_array_almost_equal"], "tests._core.test_moves.TestDodge.test_widths_fill": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "seaborn._core.moves.Dodge", "numpy.testing.assert_array_almost_equal"], "tests._core.test_moves.TestDodge.test_widths_drop": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "seaborn._core.moves.Dodge", "numpy.testing.assert_array_almost_equal"], "tests._core.test_moves.TestDodge.test_faceted_default": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "seaborn._core.moves.Dodge", "numpy.testing.assert_array_almost_equal"], "tests._core.test_moves.TestDodge.test_faceted_fill": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "seaborn._core.moves.Dodge", "numpy.testing.assert_array_almost_equal"], "tests._core.test_moves.TestDodge.test_faceted_drop": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "seaborn._core.moves.Dodge", "numpy.testing.assert_array_almost_equal"], "tests._core.test_moves.TestDodge.test_orient": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "seaborn._core.moves.Dodge", "numpy.testing.assert_array_almost_equal"], "tests._core.test_moves.TestDodge": ["pytest.mark.parametrize"], "tests._core.test_moves.TestDodge.test_single_semantic": ["numpy.linspace", "<builtin>.len", "seaborn._core.moves.Dodge", "pandas.testing.assert_series_equal", "seaborn._core.groupby.GroupBy", "seaborn._core.rules.categorical_order", "<builtin>.zip"], "tests._core.test_moves.TestDodge.test_two_semantics": ["numpy.linspace", "<builtin>.len", "seaborn._core.moves.Dodge", "pandas.testing.assert_series_equal", "seaborn._core.groupby.GroupBy", "seaborn._core.rules.categorical_order", "itertools.product", "<builtin>.zip"], "tests._core.test_moves.TestStack.test_basic": ["seaborn._core.moves.Stack", "seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal"], "seaborn._core.moves.Stack": [], "tests._core.test_moves.TestStack.test_faceted": ["seaborn._core.moves.Stack", "seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal"], "tests._core.test_moves.TestStack.test_misssing_data": ["pandas.DataFrame", "seaborn._core.moves.Stack", "numpy.testing.assert_array_equal"], "tests._core.test_moves.TestStack.test_baseline_homogeneity_check": ["seaborn._core.moves.Stack", "seaborn._core.groupby.GroupBy", "pytest.raises"], "tests._core.test_moves.TestShift.test_default": ["seaborn._core.moves.Shift", "seaborn._core.groupby.GroupBy", "pandas.testing.assert_series_equal"], "tests._core.test_moves.TestShift": ["pytest.mark.parametrize"], "tests._core.test_moves.TestShift.test_moves": ["seaborn._core.moves.Shift", "seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal"], "tests._core.test_moves.TestNorm": ["pytest.mark.parametrize"], "tests._core.test_moves.TestNorm.test_default_no_groups": ["seaborn._core.moves.Norm", "seaborn._core.groupby.GroupBy", "pytest.approx"], "seaborn._core.moves.Norm": [], "tests._core.test_moves.TestNorm.test_default_groups": ["seaborn._core.moves.Norm", "seaborn._core.groupby.GroupBy", "pytest.approx"], "tests._core.test_moves.TestNorm.test_sum": ["seaborn._core.moves.Norm", "seaborn._core.groupby.GroupBy", "pytest.approx"], "tests._core.test_moves.TestNorm.test_where": ["seaborn._core.moves.Norm", "seaborn._core.groupby.GroupBy", "pytest.approx"], "tests._core.test_moves.TestNorm.test_percent": ["seaborn._core.moves.Norm", "seaborn._core.groupby.GroupBy", "pytest.approx"], "tests._core.test_groupby": ["pytest.fixture"], "tests._core.test_groupby.df": ["pandas.DataFrame"], "tests._core.test_groupby.test_init_from_list": ["seaborn._core.groupby.GroupBy"], "tests._core.test_groupby.test_init_from_dict": ["seaborn._core.groupby.GroupBy"], "tests._core.test_groupby.test_init_requires_order": ["seaborn._core.groupby.GroupBy", "pytest.raises"], "tests._core.test_groupby.test_at_least_one_grouping_variable_required": ["seaborn._core.groupby.GroupBy", "pytest.raises"], "tests._core.test_groupby.test_agg_one_grouper": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal"], "tests._core.test_groupby.test_agg_two_groupers": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal"], "tests._core.test_groupby.test_agg_two_groupers_ordered": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal"], "tests._core.test_groupby.test_apply_no_grouper": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "numpy.argsort"], "tests._core.test_groupby.test_apply_no_grouper.<lambda1>": [], "numpy.argsort": [], "tests._core.test_groupby.test_apply_one_grouper": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal"], "tests._core.test_groupby.test_apply_one_grouper.<lambda1>": [], "tests._core.test_groupby.test_apply_mutate_columns": ["seaborn._core.groupby.GroupBy", "numpy.arange", "numpy.concatenate", "numpy.testing.assert_array_equal"], "tests._core.test_groupby.test_apply_mutate_columns.polyfit": ["numpy.polyfit", "numpy.polyval", "<builtin>.dict", "pandas.DataFrame"], "numpy.polyfit": [], "numpy.polyval": [], "tests._core.test_groupby.test_apply_replace_columns": ["seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal"], "tests._core.test_groupby.test_apply_replace_columns.add_sorted_cumsum": ["pandas.DataFrame", "<builtin>.dict"], "tests.test_statistics": [], "tests.test_statistics.DistributionFixtures": ["pytest.fixture"], "tests.test_statistics.DistributionFixtures.x": [], "tests.test_statistics.DistributionFixtures.y": [], "tests.test_statistics.DistributionFixtures.weights": [], "tests.test_statistics.TestKDE.integrate": ["numpy.diff", "numpy.asarray"], "tests.test_statistics.TestKDE.test_gridsize": ["seaborn._statistics.KDE"], "tests.test_statistics.TestKDE.test_cut": ["seaborn._statistics.KDE", "pytest.approx"], "tests.test_statistics.TestKDE.test_clip": ["seaborn._statistics.KDE"], "tests.test_statistics.TestKDE.test_density_normalization": ["seaborn._statistics.KDE", "tests.test_statistics.TestKDE.integrate", "pytest.approx"], "tests.test_statistics.TestKDE": ["pytest.mark.skipif"], "tests.test_statistics.TestKDE.test_cumulative": ["seaborn._statistics.KDE", "pytest.approx"], "tests.test_statistics.TestKDE.test_cached_support": ["seaborn._statistics.KDE", "numpy.testing.assert_array_equal"], "tests.test_statistics.TestKDE.test_bw_method": ["numpy.diff", "seaborn._statistics.KDE", "numpy.abs"], "tests.test_statistics.TestKDE.test_bw_adjust": ["numpy.diff", "seaborn._statistics.KDE", "numpy.abs"], "tests.test_statistics.TestKDE.test_bivariate_grid": ["seaborn._statistics.KDE"], "tests.test_statistics.TestKDE.test_bivariate_normalization": ["seaborn._statistics.KDE", "pytest.approx"], "tests.test_statistics.TestKDE.test_bivariate_cumulative": ["seaborn._statistics.KDE", "pytest.approx"], "tests.test_statistics.TestHistogram.test_string_bins": ["numpy.sqrt", "<builtin>.int", "<builtin>.len", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_int_bins": ["seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_array_bins": ["numpy.testing.assert_array_equal", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_bivariate_string_bins": ["numpy.histogram_bin_edges", "numpy.testing.assert_array_equal", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_bivariate_int_bins": ["<builtin>.len", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_bivariate_array_bins": ["numpy.testing.assert_array_equal", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_binwidth": ["seaborn._statistics.Histogram", "pytest.approx"], "tests.test_statistics.TestHistogram.test_bivariate_binwidth": ["numpy.diff", "numpy.all", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_binrange": ["seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_bivariate_binrange": ["seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_discrete_bins": ["seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_odd_single_observation": ["seaborn._statistics.Histogram", "<builtin>.len", "numpy.array", "pytest.approx"], "tests.test_statistics.TestHistogram.test_binwidth_roundoff": ["seaborn._statistics.Histogram", "numpy.array"], "tests.test_statistics.TestHistogram.test_histogram": ["numpy.histogram", "numpy.testing.assert_array_equal", "seaborn._statistics.Histogram"], "numpy.histogram": [], "tests.test_statistics.TestHistogram.test_count_stat": ["<builtin>.len", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_density_stat": ["numpy.diff", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_probability_stat": ["seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_frequency_stat": ["numpy.diff", "<builtin>.len", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_cumulative_count": ["<builtin>.len", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_cumulative_density": ["seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_cumulative_probability": ["seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_cumulative_frequency": ["<builtin>.len", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_bivariate_histogram": ["numpy.histogram_bin_edges", "numpy.testing.assert_array_equal", "numpy.histogram2d", "seaborn._statistics.Histogram"], "numpy.histogram2d": [], "tests.test_statistics.TestHistogram.test_bivariate_count_stat": ["<builtin>.len", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_bivariate_density_stat": ["numpy.diff", "numpy.outer", "seaborn._statistics.Histogram", "pytest.approx"], "numpy.outer": [], "tests.test_statistics.TestHistogram.test_bivariate_probability_stat": ["seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_bivariate_frequency_stat": ["numpy.diff", "numpy.outer", "<builtin>.len", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_bivariate_cumulative_count": ["<builtin>.len", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_bivariate_cumulative_density": ["seaborn._statistics.Histogram", "pytest.approx"], "tests.test_statistics.TestHistogram.test_bivariate_cumulative_frequency": ["<builtin>.len", "seaborn._statistics.Histogram"], "tests.test_statistics.TestHistogram.test_bivariate_cumulative_probability": ["seaborn._statistics.Histogram", "pytest.approx"], "tests.test_statistics.TestHistogram.test_bad_stat": ["pytest.raises", "seaborn._statistics.Histogram"], "tests.test_statistics.TestECDF.test_univariate_proportion": ["numpy.testing.assert_array_almost_equal", "numpy.linspace", "<builtin>.len", "numpy.sort", "numpy.testing.assert_array_equal", "seaborn._statistics.ECDF"], "seaborn._statistics.ECDF": [], "tests.test_statistics.TestECDF.test_univariate_count": ["numpy.testing.assert_array_almost_equal", "<builtin>.len", "numpy.sort", "numpy.testing.assert_array_equal", "numpy.arange", "seaborn._statistics.ECDF"], "tests.test_statistics.TestECDF.test_univariate_proportion_weights": ["numpy.testing.assert_array_almost_equal", "numpy.testing.assert_array_equal", "seaborn._statistics.ECDF", "numpy.sort"], "tests.test_statistics.TestECDF.test_univariate_count_weights": ["numpy.testing.assert_array_almost_equal", "numpy.testing.assert_array_equal", "seaborn._statistics.ECDF", "numpy.sort"], "tests.test_statistics.TestECDF": ["pytest.mark.skipif"], "tests.test_statistics.TestECDF.test_against_statsmodels": ["statsmodels.distributions.empirical_distribution.ECDF", "numpy.testing.assert_array_equal", "seaborn._statistics.ECDF", "numpy.testing.assert_array_almost_equal"], "statsmodels.distributions.empirical_distribution.ECDF": [], "tests.test_statistics.TestECDF.test_invalid_stat": ["seaborn._statistics.ECDF", "pytest.raises"], "tests.test_statistics.TestECDF.test_bivariate_error": ["seaborn._statistics.ECDF", "pytest.raises"], "tests.test_statistics.TestEstimateAggregator.test_func_estimator": ["seaborn._statistics.EstimateAggregator", "numpy.mean"], "seaborn._statistics.EstimateAggregator": [], "numpy.mean": [], "tests.test_statistics.TestEstimateAggregator.test_name_estimator": ["seaborn._statistics.EstimateAggregator"], "tests.test_statistics.TestEstimateAggregator.test_custom_func_estimator": ["seaborn._statistics.EstimateAggregator", "tests.test_statistics.TestEstimateAggregator.test_custom_func_estimator.func"], "tests.test_statistics.TestEstimateAggregator.test_custom_func_estimator.func": ["numpy.asarray"], "tests.test_statistics.TestEstimateAggregator.test_se_errorbars": ["seaborn._statistics.EstimateAggregator"], "tests.test_statistics.TestEstimateAggregator.test_sd_errorbars": ["seaborn._statistics.EstimateAggregator"], "tests.test_statistics.TestEstimateAggregator.test_pi_errorbars": ["seaborn._statistics.EstimateAggregator", "numpy.percentile"], "numpy.percentile": [], "tests.test_statistics.TestEstimateAggregator.test_ci_errorbars": ["seaborn._statistics.EstimateAggregator", "numpy.testing.assert_array_equal", "pytest.approx"], "tests.test_statistics.TestEstimateAggregator.test_custom_errorbars": ["seaborn._statistics.EstimateAggregator"], "tests.test_statistics.TestEstimateAggregator.test_custom_errorbars.<lambda1>": [], "tests.test_statistics.TestEstimateAggregator.test_singleton_errorbars": ["pandas.DataFrame", "pandas.isna", "seaborn._statistics.EstimateAggregator", "<builtin>.dict"], "pandas.isna": [], "tests.test_statistics.TestEstimateAggregator.test_errorbar_validation": ["seaborn._statistics._validate_errorbar_arg", "pytest.raises"], "seaborn._statistics._validate_errorbar_arg": [], "tests.test_statistics.TestEstimateAggregator.test_errorbar_validation.<lambda1>": [], "tests.test_objects": [], "tests.test_objects.test_objects_namespace": ["<builtin>.issubclass", "<builtin>.getattr", "<builtin>.dir"], "<builtin>.dir": [], "<builtin>.issubclass": [], "tests.test_miscplot": [], "tests.test_miscplot.TestPalPlot.test_palplot_size": ["matplotlib.pyplot.gcf", "seaborn.palettes.color_palette", "<builtin>.tuple", "seaborn.miscplot.palplot"], "seaborn.miscplot.palplot": [], "test_utils._network": [], "tests.test_miscplot.TestDogPlot": ["test_utils._network"], "tests.test_miscplot.TestDogPlot.test_dogplot": ["seaborn.miscplot.dogplot", "<builtin>.len", "matplotlib.pyplot.gca"], "seaborn.miscplot.dogplot": [], "matplotlib.pyplot.gca": [], "tests.test_categorical": [], "tests.test_categorical.TestCategoricalPlotterNew": ["pytest.mark.parametrize", "itertools.product"], "tests.test_categorical.TestCategoricalPlotterNew.test_axis_labels": ["<builtin>.getattr", "matplotlib.pyplot.gca"], "tests.test_categorical.TestCategoricalPlotterNew.test_empty": ["matplotlib.pyplot.gca"], "tests.test_categorical.TestCategoricalPlotterNew.test_redundant_hue_backcompat": ["numpy.testing.assert_array_equal", "seaborn.palettes.color_palette", "<builtin>.zip", "<builtin>.dict", "seaborn.categorical._CategoricalPlotterNew", "<builtin>.isinstance", "<builtin>.all"], "seaborn.categorical._CategoricalPlotterNew": [], "tests.test_categorical.CategoricalFixture": ["numpy.repeat", "numpy.random.RandomState", "<builtin>.list", "numpy.tile", "pandas.Series", "<builtin>.dict", "pandas.DataFrame", "<builtin>.int"], "numpy.tile": [], "tests.test_categorical.CategoricalFixture.get_box_artists": ["seaborn.utils._version_predates"], "tests.test_categorical.TestCategoricalPlotter.test_wide_df_data": ["pytest.raises", "seaborn.categorical._CategoricalPlotter", "numpy.testing.assert_array_equal", "<builtin>.zip"], "seaborn.categorical._CategoricalPlotter": [], "tests.test_categorical.TestCategoricalPlotter.test_1d_input_data": ["<builtin>.int", "seaborn.categorical._CategoricalPlotter", "<builtin>.len", "numpy.array"], "tests.test_categorical.TestCategoricalPlotter.test_2d_input_data": ["seaborn.categorical._CategoricalPlotter", "<builtin>.len"], "tests.test_categorical.TestCategoricalPlotter.test_3d_input_data": ["seaborn.categorical._CategoricalPlotter", "pytest.raises", "numpy.zeros"], "tests.test_categorical.TestCategoricalPlotter.test_list_of_array_input_data": ["seaborn.categorical._CategoricalPlotter", "<builtin>.len"], "tests.test_categorical.TestCategoricalPlotter.test_wide_array_input_data": ["seaborn.categorical._CategoricalPlotter", "numpy.testing.assert_array_equal", "numpy.shape"], "numpy.shape": [], "tests.test_categorical.TestCategoricalPlotter.test_single_long_direct_inputs": ["<builtin>.len", "numpy.array", "pandas.Series", "seaborn.categorical._CategoricalPlotter", "numpy.testing.assert_equal"], "numpy.testing.assert_equal": [], "tests.test_categorical.TestCategoricalPlotter.test_single_long_indirect_inputs": ["numpy.testing.assert_equal", "seaborn.categorical._CategoricalPlotter"], "tests.test_categorical.TestCategoricalPlotter.test_longform_groupby": ["<builtin>.len", "numpy.testing.assert_array_equal", "numpy.array_equal", "<builtin>.enumerate", "seaborn.categorical._CategoricalPlotter", "<builtin>.zip"], "tests.test_categorical.TestCategoricalPlotter.test_input_validation": ["seaborn.categorical._CategoricalPlotter", "pytest.raises", "<builtin>.dict"], "tests.test_categorical.TestCategoricalPlotter.test_order": ["pytest.raises", "seaborn.categorical._CategoricalPlotter", "numpy.testing.assert_array_equal", "<builtin>.zip"], "tests.test_categorical.TestCategoricalPlotter.test_hue_order": ["seaborn.categorical._CategoricalPlotter"], "tests.test_categorical.TestCategoricalPlotter.test_plot_units": ["seaborn.categorical._CategoricalPlotter", "numpy.testing.assert_array_equal", "<builtin>.zip"], "tests.test_categorical.TestCategoricalPlotter.test_default_palettes": ["seaborn.categorical._CategoricalPlotter", "seaborn.palettes.color_palette"], "tests.test_categorical.TestCategoricalPlotter.test_default_palette_with_many_levels": ["seaborn.palettes.husl_palette", "seaborn.categorical._CategoricalPlotter", "seaborn.palettes.color_palette", "numpy.testing.assert_array_equal"], "seaborn.palettes.husl_palette": [], "tests.test_categorical.TestCategoricalPlotter.test_specific_color": ["numpy.testing.assert_array_almost_equal", "numpy.array", "seaborn.categorical._CategoricalPlotter", "seaborn.palettes.light_palette", "matplotlib.colors.colorConverter.to_rgb"], "matplotlib.colors.colorConverter.to_rgb": [], "tests.test_categorical.TestCategoricalPlotter.test_specific_palette": ["seaborn.categorical._CategoricalPlotter", "seaborn.palettes.color_palette"], "tests.test_categorical.TestCategoricalPlotter.test_dict_as_palette": ["seaborn.categorical._CategoricalPlotter"], "tests.test_categorical.TestCategoricalPlotter.test_palette_desaturation": ["seaborn.categorical._CategoricalPlotter"], "tests.test_categorical.TestCategoricalStatPlotter.test_no_bootstrappig": ["seaborn.categorical._CategoricalStatPlotter", "numpy.testing.assert_array_equal", "numpy.array"], "seaborn.categorical._CategoricalStatPlotter": [], "tests.test_categorical.TestCategoricalStatPlotter.test_single_layer_stats": ["numpy.testing.assert_array_almost_equal", "<builtin>.len", "numpy.repeat", "<builtin>.list", "numpy.random.RandomState", "numpy.sqrt", "pandas.Series", "seaborn.utils._normal_quantile_func", "<builtin>.zip", "seaborn.categorical._CategoricalStatPlotter"], "seaborn.utils._normal_quantile_func": [], "tests.test_categorical.TestCategoricalStatPlotter.test_single_layer_stats_with_units": ["numpy.repeat", "<builtin>.list", "numpy.random.RandomState", "numpy.tile", "numpy.testing.assert_array_equal", "pandas.Series", "seaborn.categorical._CategoricalStatPlotter", "numpy.testing.assert_array_less"], "numpy.testing.assert_array_less": [], "tests.test_categorical.TestCategoricalStatPlotter.test_single_layer_stats_with_missing_data": ["numpy.testing.assert_array_almost_equal", "numpy.testing.assert_almost_equal", "numpy.repeat", "<builtin>.list", "numpy.random.RandomState", "numpy.sqrt", "numpy.testing.assert_array_equal", "pandas.Series", "seaborn.utils._normal_quantile_func", "numpy.testing.assert_equal", "seaborn.categorical._CategoricalStatPlotter"], "numpy.testing.assert_almost_equal": [], "tests.test_categorical.TestCategoricalStatPlotter.test_nested_stats": ["numpy.testing.assert_array_almost_equal", "<builtin>.len", "numpy.repeat", "<builtin>.list", "numpy.tile", "numpy.random.RandomState", "numpy.sqrt", "pandas.Series", "seaborn.utils._normal_quantile_func", "<builtin>.zip", "seaborn.categorical._CategoricalStatPlotter"], "tests.test_categorical.TestCategoricalStatPlotter.test_bootstrap_seed": ["numpy.repeat", "<builtin>.list", "numpy.tile", "numpy.random.RandomState", "numpy.testing.assert_array_equal", "pandas.Series", "seaborn.categorical._CategoricalStatPlotter"], "tests.test_categorical.TestCategoricalStatPlotter.test_nested_stats_with_units": ["numpy.repeat", "<builtin>.list", "numpy.tile", "numpy.random.RandomState", "numpy.testing.assert_array_equal", "pandas.Series", "seaborn.categorical._CategoricalStatPlotter", "numpy.testing.assert_array_less"], "tests.test_categorical.TestCategoricalStatPlotter.test_nested_stats_with_missing_data": ["numpy.testing.assert_array_almost_equal", "numpy.testing.assert_almost_equal", "numpy.repeat", "<builtin>.list", "numpy.random.RandomState", "numpy.tile", "numpy.sqrt", "numpy.testing.assert_array_equal", "pandas.Series", "seaborn.utils._normal_quantile_func", "seaborn.categorical._CategoricalStatPlotter", "numpy.zeros"], "tests.test_categorical.TestCategoricalStatPlotter.test_sd_error_bars": ["numpy.testing.assert_array_almost_equal", "numpy.repeat", "<builtin>.list", "numpy.random.RandomState", "pandas.Series", "numpy.std", "<builtin>.zip", "seaborn.categorical._CategoricalStatPlotter"], "numpy.std": [], "tests.test_categorical.TestCategoricalStatPlotter.test_nested_sd_error_bars": ["numpy.testing.assert_array_almost_equal", "numpy.repeat", "<builtin>.list", "numpy.tile", "numpy.random.RandomState", "pandas.Series", "numpy.std", "<builtin>.zip", "seaborn.categorical._CategoricalStatPlotter"], "tests.test_categorical.TestCategoricalStatPlotter.test_draw_cis": ["<builtin>.len", "matplotlib.pyplot.subplots", "pytest.approx", "numpy.testing.assert_array_equal", "matplotlib.pyplot.close", "<builtin>.zip", "seaborn.categorical._CategoricalStatPlotter", "<builtin>.abs"], "<builtin>.abs": [], "tests.test_categorical.TestBoxPlotter": ["<builtin>.dict"], "tests.test_categorical.TestBoxPlotter.test_nested_width": ["seaborn.categorical._BoxPlotter"], "seaborn.categorical._BoxPlotter": [], "tests.test_categorical.TestBoxPlotter.test_hue_offsets": ["seaborn.categorical._BoxPlotter", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_almost_equal"], "tests.test_categorical.TestBoxPlotter.test_axes_data": ["seaborn.categorical.boxplot", "matplotlib.pyplot.close", "<builtin>.len", "tests.test_categorical.CategoricalFixture.get_box_artists"], "seaborn.categorical.boxplot": [], "tests.test_categorical.TestBoxPlotter.test_box_colors": ["matplotlib.colors.same_color", "seaborn.categorical.boxplot", "matplotlib.pyplot.close", "tests.test_categorical.CategoricalFixture.get_box_artists", "seaborn.palettes.color_palette"], "tests.test_categorical.TestBoxPlotter.test_draw_missing_boxes": ["seaborn.categorical.boxplot", "<builtin>.len", "tests.test_categorical.CategoricalFixture.get_box_artists"], "tests.test_categorical.TestBoxPlotter.test_missing_data": ["seaborn.categorical.boxplot", "matplotlib.pyplot.close", "<builtin>.len", "tests.test_categorical.CategoricalFixture.get_box_artists"], "tests.test_categorical.TestBoxPlotter.test_unaligned_index": ["numpy.array_equal", "seaborn.categorical.boxplot", "<builtin>.zip", "matplotlib.pyplot.subplots"], "tests.test_categorical.TestBoxPlotter.test_boxplots": ["<builtin>.list", "seaborn.categorical.boxplot", "matplotlib.pyplot.close"], "tests.test_categorical.TestBoxPlotter.test_axes_annotation": ["seaborn.categorical.boxplot", "numpy.testing.assert_array_equal", "matplotlib.pyplot.close"], "tests.test_categorical.TestViolinPlotter": ["<builtin>.dict"], "tests.test_categorical.TestViolinPlotter.test_split_error": ["seaborn.categorical._ViolinPlotter", "pytest.raises", "<builtin>.dict"], "seaborn.categorical._ViolinPlotter": [], "tests.test_categorical.TestViolinPlotter.test_no_observations": ["seaborn.categorical._ViolinPlotter", "<builtin>.len"], "tests.test_categorical.TestViolinPlotter.test_single_observation": ["seaborn.categorical._ViolinPlotter", "<builtin>.len"], "tests.test_categorical.TestViolinPlotter.test_dwidth": ["seaborn.categorical._ViolinPlotter", "<builtin>.dict"], "tests.test_categorical.TestViolinPlotter.test_scale_area": ["seaborn.categorical._ViolinPlotter", "numpy.array"], "tests.test_categorical.TestViolinPlotter.test_scale_width": ["numpy.testing.assert_array_equal", "seaborn.categorical._ViolinPlotter", "numpy.array"], "tests.test_categorical.TestViolinPlotter.test_scale_count": ["numpy.testing.assert_array_equal", "seaborn.categorical._ViolinPlotter", "numpy.array"], "tests.test_categorical.TestViolinPlotter.test_bad_scale": ["seaborn.categorical._ViolinPlotter", "pytest.raises"], "tests.test_categorical.TestViolinPlotter.test_kde_fit": ["seaborn.categorical._ViolinPlotter"], "tests.test_categorical.TestViolinPlotter.test_draw_to_density": ["matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "matplotlib.pyplot.close", "numpy.array", "seaborn.categorical._ViolinPlotter"], "tests.test_categorical.TestViolinPlotter.test_draw_single_observations": ["numpy.testing.assert_array_equal", "seaborn.categorical._ViolinPlotter", "matplotlib.pyplot.close", "matplotlib.pyplot.subplots"], "tests.test_categorical.TestViolinPlotter.test_draw_box_lines": ["numpy.percentile", "<builtin>.len", "matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "matplotlib.pyplot.close", "seaborn.categorical._ViolinPlotter", "<builtin>.dict"], "tests.test_categorical.TestViolinPlotter.test_draw_quartiles": ["numpy.percentile", "matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "seaborn.categorical._ViolinPlotter", "<builtin>.zip", "<builtin>.dict"], "tests.test_categorical.TestViolinPlotter.test_draw_points": ["matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "matplotlib.pyplot.close", "numpy.zeros_like", "seaborn.categorical._ViolinPlotter"], "tests.test_categorical.TestViolinPlotter.test_draw_sticks": ["matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "matplotlib.pyplot.close", "seaborn.categorical._ViolinPlotter", "<builtin>.zip", "<builtin>.dict"], "tests.test_categorical.TestViolinPlotter.test_validate_inner": ["seaborn.categorical._ViolinPlotter", "pytest.raises", "<builtin>.dict"], "tests.test_categorical.TestViolinPlotter.test_draw_violinplots": ["<builtin>.len", "matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "matplotlib.pyplot.close", "seaborn.categorical._ViolinPlotter", "seaborn.palettes.color_palette", "<builtin>.dict", "<builtin>.zip"], "tests.test_categorical.TestViolinPlotter.test_draw_violinplots_no_observations": ["seaborn.categorical._ViolinPlotter", "<builtin>.len", "matplotlib.pyplot.close", "matplotlib.pyplot.subplots"], "tests.test_categorical.TestViolinPlotter.test_draw_violinplots_single_observations": ["seaborn.categorical._ViolinPlotter", "<builtin>.len", "matplotlib.pyplot.close", "matplotlib.pyplot.subplots"], "tests.test_categorical.TestViolinPlotter.test_violinplots": ["seaborn.categorical.violinplot", "matplotlib.pyplot.close", "<builtin>.list"], "seaborn.categorical.violinplot": [], "tests.test_categorical.TestViolinPlotter.test_split_one_each": ["numpy.repeat", "seaborn.categorical.violinplot", "<builtin>.len"], "tests.test_categorical.SharedAxesLevelTests.test_color": ["matplotlib.pyplot.figure", "matplotlib.colors.to_rgba"], "tests.test_categorical.SharedAxesLevelTests.test_two_calls": ["matplotlib.pyplot.figure"], "tests.test_categorical.SharedScatterTests.get_last_color": ["<builtin>.len", "numpy.unique", "matplotlib.colors.to_rgba"], "tests.test_categorical.SharedScatterTests.test_color": ["matplotlib.pyplot.figure", "<builtin>.super", "tests.test_categorical.SharedScatterTests.get_last_color", "matplotlib.colors.to_rgba"], "tests.test_categorical.SharedScatterTests.test_supplied_color_array": ["seaborn._compat.get_colormap", "numpy.testing.assert_array_equal", "matplotlib.pyplot.figure", "seaborn.utils._draw_figure", "matplotlib.colors.Normalize"], "matplotlib.colors.Normalize": [], "tests.test_categorical.SharedScatterTests": ["pytest.mark.parametrize", "<builtin>.list", "itertools.product"], "tests.test_categorical.SharedScatterTests.test_wide": ["numpy.testing.assert_array_equal", "<builtin>.enumerate", "<builtin>.tuple", "seaborn.palettes.color_palette", "matplotlib.colors.to_rgba", "<builtin>.int", "seaborn.utils._draw_figure"], "tests.test_categorical.SharedScatterTests.test_flat": ["<builtin>.len", "numpy.testing.assert_array_equal", "<builtin>.int", "seaborn.utils._draw_figure", "numpy.zeros"], "tests.test_categorical.SharedScatterTests.test_positions": ["numpy.ptp", "<builtin>.list", "numpy.testing.assert_array_equal", "<builtin>.enumerate", "pandas.Index", "seaborn._oldcore.categorical_order", "seaborn.utils._draw_figure"], "numpy.ptp": [], "tests.test_categorical.SharedScatterTests.test_positions_dodged": ["numpy.linspace", "<builtin>.len", "numpy.ptp", "pandas.api.types.is_datetime64_any_dtype", "<builtin>.list", "numpy.testing.assert_array_equal", "matplotlib.dates.date2num", "<builtin>.enumerate", "seaborn._oldcore.categorical_order"], "pandas.api.types.is_datetime64_any_dtype": [], "tests.test_categorical.SharedScatterTests.test_positions_unfixed": ["numpy.testing.assert_array_equal", "numpy.squeeze", "<builtin>.enumerate", "<builtin>.dict", "<builtin>.str"], "numpy.squeeze": [], "tests.test_categorical.SharedScatterTests.test_order": ["seaborn.utils._draw_figure", "<builtin>.len", "numpy.sort", "<builtin>.enumerate", "<builtin>.str"], "tests.test_categorical.SharedScatterTests.test_hue_categorical": ["matplotlib.colors.to_rgba", "<builtin>.len", "<builtin>.enumerate", "seaborn.palettes.color_palette", "seaborn._oldcore.categorical_order", "<builtin>.dict", "<builtin>.zip", "<builtin>.tuple"], "tests.test_categorical.SharedScatterTests.test_hue_dodged": ["<builtin>.next", "<builtin>.iter", "seaborn.palettes.color_palette", "matplotlib.colors.to_rgba", "<builtin>.tuple"], "<builtin>.iter": [], "<builtin>.next": [], "tests.test_categorical.SharedScatterTests.test_single": ["matplotlib.colors.to_rgba", "<builtin>.len", "numpy.testing.assert_array_equal", "<builtin>.getattr", "<builtin>.enumerate", "<builtin>.tuple", "seaborn.palettes.color_palette", "seaborn._oldcore.categorical_order", "<builtin>.zip", "<builtin>.dict", "<builtin>.int", "seaborn.utils._draw_figure"], "tests.test_categorical.SharedScatterTests.test_attributes": ["<builtin>.tuple", "<builtin>.dict", "matplotlib.colors.to_rgba"], "tests.test_categorical.SharedScatterTests.test_three_points": ["<builtin>.tuple", "numpy.arange", "matplotlib.colors.to_rgba"], "tests.test_categorical.SharedScatterTests.test_legend_categorical": ["seaborn._oldcore.categorical_order"], "tests.test_categorical.SharedScatterTests.test_legend_numeric": ["<builtin>.float", "pytest.approx"], "tests.test_categorical.SharedScatterTests.test_legend_disabled": [], "tests.test_categorical.SharedScatterTests.test_palette_from_color_deprecation": ["matplotlib.colors.to_hex", "pytest.warns", "seaborn.palettes.color_palette", "matplotlib.colors.to_rgb"], "matplotlib.colors.to_hex": [], "tests.test_categorical.SharedScatterTests.test_palette_with_hue_deprecation": ["matplotlib.colors.same_color", "<builtin>.len", "pytest.warns", "seaborn.palettes.color_palette", "<builtin>.zip"], "tests.test_categorical.SharedScatterTests.test_log_scale": ["numpy.ones", "numpy.ptp", "pytest.approx", "numpy.testing.assert_array_equal", "numpy.log10", "<builtin>.enumerate", "matplotlib.pyplot.figure"], "tests.test_categorical.SharedScatterTests.test_vs_catplot": ["seaborn._testing.assert_plots_equal", "numpy.random.seed", "seaborn.categorical.catplot"], "numpy.random.seed": [], "seaborn.categorical.catplot": [], "tests.test_categorical.SharedScatterTests.test_empty_palette": [], "tests.test_categorical.TestStripPlot": ["itertools.product", "pytest.mark.parametrize", "<builtin>.staticmethod"], "tests.test_categorical.TestStripPlot.test_jitter_unfixed": ["matplotlib.pyplot.figure", "numpy.random.seed", "seaborn.categorical.stripplot", "<builtin>.dict"], "seaborn.categorical.stripplot": [], "tests.test_categorical.TestStripPlot.test_jitter": ["numpy.ptp", "numpy.testing.assert_array_equal", "seaborn.categorical.stripplot", "<builtin>.enumerate", "numpy.std", "seaborn._oldcore.categorical_order"], "tests.test_categorical.TestSwarmPlot": ["<builtin>.staticmethod", "functools.partial"], "tests.test_categorical.TestBarPlotter": ["<builtin>.dict"], "tests.test_categorical.TestBarPlotter.test_nested_width": ["pytest.approx", "seaborn.categorical.barplot"], "seaborn.categorical.barplot": [], "tests.test_categorical.TestBarPlotter.test_draw_vertical_bars": ["seaborn.categorical._BarPlotter", "<builtin>.len", "matplotlib.pyplot.subplots", "numpy.arange", "<builtin>.zip"], "seaborn.categorical._BarPlotter": [], "tests.test_categorical.TestBarPlotter.test_draw_horizontal_bars": ["seaborn.categorical._BarPlotter", "<builtin>.len", "matplotlib.pyplot.subplots", "numpy.arange", "<builtin>.zip"], "tests.test_categorical.TestBarPlotter.test_draw_nested_vertical_bars": ["seaborn.categorical._BarPlotter", "<builtin>.len", "matplotlib.pyplot.subplots", "pytest.approx", "numpy.arange", "<builtin>.zip"], "tests.test_categorical.TestBarPlotter.test_draw_nested_horizontal_bars": ["seaborn.categorical._BarPlotter", "<builtin>.len", "matplotlib.pyplot.subplots", "pytest.approx", "numpy.arange", "<builtin>.zip"], "tests.test_categorical.TestBarPlotter.test_draw_missing_bars": ["seaborn.categorical._BarPlotter", "<builtin>.len", "matplotlib.pyplot.subplots", "<builtin>.list", "matplotlib.pyplot.close"], "tests.test_categorical.TestBarPlotter.test_unaligned_index": ["seaborn.categorical.barplot", "pytest.approx", "<builtin>.zip", "matplotlib.pyplot.subplots"], "tests.test_categorical.TestBarPlotter.test_barplot_colors": ["seaborn.categorical._BarPlotter", "<builtin>.len", "matplotlib.pyplot.subplots", "matplotlib.pyplot.close", "seaborn.palettes.color_palette", "<builtin>.zip"], "tests.test_categorical.TestBarPlotter.test_simple_barplots": ["matplotlib.pyplot.close", "<builtin>.len", "seaborn.categorical.barplot"], "tests.test_categorical.TestBarPlotter.test_errorbar": ["<builtin>.enumerate", "numpy.testing.assert_array_equal", "seaborn._oldcore.categorical_order", "seaborn.categorical.barplot"], "tests.test_categorical.TestPointPlotter": ["<builtin>.dict"], "tests.test_categorical.TestPointPlotter.test_different_defualt_colors": ["seaborn.categorical._PointPlotter", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette", "<builtin>.dict"], "seaborn.categorical._PointPlotter": [], "tests.test_categorical.TestPointPlotter.test_hue_offsets": ["seaborn.categorical._PointPlotter", "numpy.testing.assert_array_equal", "<builtin>.dict"], "tests.test_categorical.TestPointPlotter.test_draw_vertical_points": ["seaborn.categorical._PointPlotter", "<builtin>.len", "matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "numpy.arange", "<builtin>.zip"], "tests.test_categorical.TestPointPlotter.test_draw_horizontal_points": ["seaborn.categorical._PointPlotter", "<builtin>.len", "matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "numpy.arange", "<builtin>.zip"], "tests.test_categorical.TestPointPlotter.test_draw_vertical_nested_points": ["seaborn.categorical._PointPlotter", "<builtin>.len", "matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "numpy.arange", "<builtin>.zip"], "tests.test_categorical.TestPointPlotter.test_draw_horizontal_nested_points": ["seaborn.categorical._PointPlotter", "<builtin>.len", "matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "numpy.arange", "<builtin>.zip"], "tests.test_categorical.TestPointPlotter.test_draw_missing_points": ["seaborn.categorical._PointPlotter", "matplotlib.pyplot.subplots"], "tests.test_categorical.TestPointPlotter.test_unaligned_index": ["pytest.approx", "<builtin>.zip", "seaborn.categorical.pointplot", "matplotlib.pyplot.subplots"], "seaborn.categorical.pointplot": [], "tests.test_categorical.TestPointPlotter.test_pointplot_colors": ["seaborn.categorical._PointPlotter", "<builtin>.len", "matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "matplotlib.pyplot.close", "<builtin>.enumerate", "seaborn.palettes.color_palette", "<builtin>.zip", "matplotlib.colors.rgb2hex"], "matplotlib.colors.rgb2hex": [], "tests.test_categorical.TestPointPlotter.test_simple_pointplots": ["<builtin>.len", "matplotlib.pyplot.close", "seaborn.categorical.pointplot"], "tests.test_categorical.TestPointPlotter.test_errorbar": ["numpy.testing.assert_array_equal", "seaborn._oldcore.categorical_order", "seaborn.categorical.pointplot", "<builtin>.enumerate"], "tests.test_categorical.TestPointPlotter.test_on_facetgrid": ["seaborn.axisgrid.FacetGrid", "seaborn._oldcore.categorical_order"], "tests.test_categorical.TestCountPlot.test_plot_elements": ["matplotlib.pyplot.close", "<builtin>.len", "seaborn.categorical.countplot"], "seaborn.categorical.countplot": [], "tests.test_categorical.TestCountPlot.test_input_error": ["pytest.raises", "seaborn.categorical.countplot"], "tests.test_categorical.TestCatPlot.test_facet_organization": ["seaborn.categorical.catplot"], "tests.test_categorical.TestCatPlot.test_plot_elements": ["matplotlib.colors.same_color", "seaborn.categorical.catplot", "<builtin>.len", "tests.test_categorical.CategoricalFixture.get_box_artists"], "tests.test_categorical.TestCatPlot.test_bad_plot_kind_error": ["seaborn.categorical.catplot", "pytest.raises"], "tests.test_categorical.TestCatPlot.test_count_x_and_y": ["seaborn.categorical.catplot", "pytest.raises"], "tests.test_categorical.TestCatPlot.test_plot_colors": ["seaborn.categorical.catplot", "matplotlib.pyplot.close", "<builtin>.zip", "seaborn.categorical.barplot", "seaborn.categorical.pointplot"], "tests.test_categorical.TestCatPlot.test_ax_kwarg_removal": ["pytest.warns", "seaborn.categorical.catplot", "<builtin>.len", "matplotlib.pyplot.subplots"], "tests.test_categorical.TestCatPlot.test_share_xy": ["<builtin>.len", "warnings.simplefilter", "warnings.catch_warnings", "pytest.warns", "seaborn.categorical.catplot"], "tests.test_categorical.TestCatPlot": ["pytest.mark.parametrize"], "tests.test_categorical.TestCatPlot.test_array_faceter": ["seaborn._testing.assert_plots_equal", "seaborn.categorical.catplot", "<builtin>.zip"], "tests.test_categorical.TestBoxenPlotter": ["pytest.mark.parametrize", "seaborn.utils._version_predates", "pytest.mark.skipif", "<builtin>.dict"], "tests.test_categorical.TestBoxenPlotter.ispatch": ["<builtin>.isinstance"], "tests.test_categorical.TestBoxenPlotter.ispath": ["<builtin>.isinstance"], "tests.test_categorical.TestBoxenPlotter.edge_calc": ["numpy.asanyarray", "<builtin>.list", "numpy.percentile", "numpy.unique"], "numpy.asanyarray": [], "tests.test_categorical.TestBoxenPlotter.test_box_ends_finite": ["<builtin>.map", "<builtin>.len", "<builtin>.list", "numpy.sum", "seaborn.categorical._LVPlotter", "<builtin>.zip"], "seaborn.categorical._LVPlotter": [], "tests.test_categorical.TestBoxenPlotter.test_box_ends_finite.<lambda1>": ["numpy.isfinite", "numpy.all"], "numpy.isfinite": [], "<builtin>.map": [], "numpy.sum": [], "tests.test_categorical.TestBoxenPlotter.test_box_ends_finite.within": ["numpy.ravel"], "numpy.ravel": [], "tests.test_categorical.TestBoxenPlotter.test_box_ends_finite.<lambda2>": ["numpy.isfinite"], "tests.test_categorical.TestBoxenPlotter.test_box_ends_correct_tukey": ["tests.test_categorical.TestBoxenPlotter.edge_calc", "<builtin>.max", "numpy.testing.assert_array_equal", "numpy.log2", "seaborn.categorical._LVPlotter", "numpy.arange", "<builtin>.int", "<builtin>.range"], "numpy.log2": [], "tests.test_categorical.TestBoxenPlotter.test_box_ends_correct_proportion": ["tests.test_categorical.TestBoxenPlotter.edge_calc", "numpy.testing.assert_array_equal", "numpy.log2", "seaborn.categorical._LVPlotter", "numpy.arange", "<builtin>.int", "<builtin>.range"], "tests.test_categorical.TestBoxenPlotter.test_box_ends_correct_trustworthy": ["numpy.arange", "seaborn.categorical._LVPlotter"], "tests.test_categorical.TestBoxenPlotter.test_outliers": ["tests.test_categorical.TestBoxenPlotter.edge_calc", "<builtin>.max", "numpy.testing.assert_array_equal", "numpy.log2", "seaborn.categorical._LVPlotter", "numpy.arange", "numpy.testing.assert_equal", "<builtin>.int", "numpy.append", "<builtin>.range"], "tests.test_categorical.TestBoxenPlotter.test_showfliers": ["<builtin>.len", "<builtin>.filter", "<builtin>.list", "matplotlib.pyplot.close", "seaborn.categorical.boxenplot"], "seaborn.categorical.boxenplot": [], "<builtin>.filter": [], "tests.test_categorical.TestBoxenPlotter.test_invalid_depths": ["pytest.raises", "seaborn.categorical._LVPlotter"], "tests.test_categorical.TestBoxenPlotter.test_valid_depths": ["<builtin>.len", "seaborn.categorical._LVPlotter", "numpy.log2", "numpy.random.standard_t", "<builtin>.int"], "numpy.random.standard_t": [], "tests.test_categorical.TestBoxenPlotter.test_valid_scales": ["pytest.raises", "seaborn.categorical._LVPlotter"], "tests.test_categorical.TestBoxenPlotter.test_hue_offsets": ["numpy.testing.assert_array_equal", "seaborn.categorical._LVPlotter", "numpy.testing.assert_array_almost_equal"], "tests.test_categorical.TestBoxenPlotter.test_axes_data": ["<builtin>.len", "<builtin>.filter", "<builtin>.list", "matplotlib.pyplot.close", "seaborn.categorical.boxenplot"], "tests.test_categorical.TestBoxenPlotter.test_box_colors": ["matplotlib.colors.same_color", "matplotlib.pyplot.close", "<builtin>.enumerate", "seaborn.palettes.color_palette", "seaborn.categorical.boxenplot"], "tests.test_categorical.TestBoxenPlotter.test_draw_missing_boxes": ["<builtin>.len", "<builtin>.filter", "<builtin>.list", "matplotlib.pyplot.close", "seaborn.categorical.boxenplot"], "tests.test_categorical.TestBoxenPlotter.test_unaligned_index": ["numpy.array_equal", "seaborn.categorical.boxenplot", "<builtin>.zip", "matplotlib.pyplot.subplots"], "tests.test_categorical.TestBoxenPlotter.test_missing_data": ["seaborn.categorical.boxenplot", "<builtin>.len", "matplotlib.pyplot.close"], "tests.test_categorical.TestBoxenPlotter.test_boxenplots": ["<builtin>.list", "seaborn.categorical.boxenplot", "matplotlib.pyplot.close"], "tests.test_categorical.TestBoxenPlotter.test_axes_annotation": ["numpy.testing.assert_array_equal", "seaborn.categorical.boxenplot", "matplotlib.pyplot.close"], "tests.test_categorical.TestBoxenPlotter.test_legend_titlesize": ["seaborn.categorical.boxenplot", "matplotlib.font_manager.FontProperties", "matplotlib.pyplot.rc_context", "matplotlib.pyplot.close"], "matplotlib.font_manager.FontProperties": [], "matplotlib.pyplot.rc_context": [], "tests.test_categorical.TestBoxenPlotter.test_Float64_input": ["numpy.random.choice", "matplotlib.pyplot.close", "numpy.random.random", "pandas.DataFrame", "seaborn.categorical.boxenplot", "pandas.Float64Dtype"], "numpy.random.choice": [], "numpy.random.random": [], "pandas.Float64Dtype": [], "tests.test_categorical.TestBoxenPlotter.test_line_kws": ["seaborn.categorical.boxenplot", "matplotlib.pyplot.close"], "tests.test_categorical.TestBoxenPlotter.test_flier_kws": ["<builtin>.len", "matplotlib.pyplot.close", "numpy.array", "numpy.unique", "seaborn.categorical.boxenplot"], "tests.test_categorical.TestBoxenPlotter.test_box_kws": ["<builtin>.len", "matplotlib.pyplot.close", "numpy.array", "numpy.unique", "seaborn.categorical.boxenplot"], "tests.test_categorical.TestBeeswarm.test_could_overlap": ["numpy.testing.assert_array_equal", "seaborn.categorical.Beeswarm"], "seaborn.categorical.Beeswarm": [], "tests.test_categorical.TestBeeswarm.test_position_candidates": ["numpy.sqrt", "numpy.testing.assert_array_equal", "seaborn.categorical.Beeswarm"], "tests.test_categorical.TestBeeswarm.test_find_first_non_overlapping_candidate": ["numpy.testing.assert_array_equal", "seaborn.categorical.Beeswarm", "numpy.array"], "tests.test_categorical.TestBeeswarm.test_beeswarm": ["numpy.full_like", "numpy.sort", "numpy.sqrt", "numpy.triu_indices_from", "numpy.sum", "seaborn.categorical.Beeswarm", "numpy.testing.assert_array_equal", "numpy.square", "numpy.testing.assert_array_less", "numpy.zeros"], "numpy.full_like": [], "numpy.triu_indices_from": [], "tests.test_categorical.TestBeeswarm.test_add_gutters": ["pytest.warns", "numpy.testing.assert_array_equal", "seaborn.categorical.Beeswarm", "numpy.array", "numpy.zeros"], "tests.conftest": ["pytest.fixture"], "tests.conftest.close_figs": ["matplotlib.pyplot.close"], "tests.conftest.random_seed": ["numpy.random.seed", "<builtin>.map", "<builtin>.sum"], "tests.conftest.rng": ["numpy.random.RandomState", "<builtin>.map", "<builtin>.sum"], "tests.conftest.wide_df": ["pandas.RangeIndex", "<builtin>.list", "<builtin>.len", "pandas.DataFrame"], "pandas.RangeIndex": [], "tests.conftest.wide_array": [], "tests.conftest.flat_series": ["pandas.RangeIndex", "pandas.Series"], "tests.conftest.flat_array": [], "tests.conftest.flat_list": [], "tests.conftest.flat_data": ["pandas.RangeIndex", "pandas.Series"], "tests.conftest.wide_list_of_series": ["pandas.Series", "numpy.arange"], "tests.conftest.wide_list_of_arrays": [], "tests.conftest.wide_list_of_lists": [], "tests.conftest.wide_dict_of_series": [], "tests.conftest.wide_dict_of_arrays": [], "tests.conftest.wide_dict_of_lists": [], "tests.conftest.long_df": ["<builtin>.list", "numpy.roll", "numpy.arange", "<builtin>.dict", "pandas.DataFrame"], "numpy.roll": [], "tests.conftest.long_dict": [], "tests.conftest.repeated_df": ["numpy.repeat", "<builtin>.list", "numpy.tile", "numpy.arange", "<builtin>.dict", "pandas.DataFrame"], "tests.conftest.missing_df": [], "tests.conftest.object_df": [], "tests.conftest.null_series": ["pandas.Series"], "tests.test_palettes": [], "tests.test_palettes.TestColorPalettes.test_current_palette": ["seaborn.utils.get_color_cycle", "seaborn.rcmod.set", "seaborn.palettes.color_palette", "seaborn.rcmod.set_palette"], "seaborn.rcmod.set_palette": [], "tests.test_palettes.TestColorPalettes.test_palette_context": ["seaborn.utils.get_color_cycle", "seaborn.palettes.color_palette"], "tests.test_palettes.TestColorPalettes.test_big_palette_context": ["seaborn.utils.get_color_cycle", "seaborn.rcmod.set", "seaborn.palettes.color_palette", "seaborn.rcmod.set_palette"], "tests.test_palettes.TestColorPalettes.test_palette_size": ["seaborn.palettes.color_palette", "<builtin>.len"], "tests.test_palettes.TestColorPalettes.test_seaborn_palettes": ["<builtin>.list", "seaborn.palettes.color_palette"], "tests.test_palettes.TestColorPalettes.test_hls_palette": ["seaborn.palettes.hls_palette", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette"], "seaborn.palettes.hls_palette": [], "tests.test_palettes.TestColorPalettes.test_husl_palette": ["numpy.testing.assert_array_equal", "seaborn.palettes.husl_palette", "seaborn.palettes.color_palette"], "tests.test_palettes.TestColorPalettes.test_mpl_palette": ["seaborn.palettes.mpl_palette", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette", "seaborn._compat.get_colormap"], "seaborn.palettes.mpl_palette": [], "tests.test_palettes.TestColorPalettes.test_mpl_dark_palette": ["seaborn.palettes.mpl_palette", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette"], "tests.test_palettes.TestColorPalettes.test_bad_palette_name": ["seaborn.palettes.color_palette", "pytest.raises"], "tests.test_palettes.TestColorPalettes.test_terrible_palette_name": ["seaborn.palettes.color_palette", "pytest.raises"], "tests.test_palettes.TestColorPalettes.test_bad_palette_colors": ["seaborn.palettes.color_palette", "pytest.raises"], "tests.test_palettes.TestColorPalettes.test_palette_desat": ["numpy.testing.assert_array_equal", "seaborn.palettes.husl_palette", "seaborn.utils.desaturate", "seaborn.palettes.color_palette"], "tests.test_palettes.TestColorPalettes.test_palette_is_list_of_tuples": ["<builtin>.isinstance", "seaborn.palettes.color_palette", "<builtin>.len", "numpy.array"], "tests.test_palettes.TestColorPalettes.test_palette_cycles": ["seaborn.palettes.color_palette"], "tests.test_palettes.TestColorPalettes.test_hls_values": ["seaborn.palettes.hls_palette", "<builtin>.map", "numpy.testing.assert_array_almost_equal", "<builtin>.list", "numpy.testing.assert_array_less"], "tests.test_palettes.TestColorPalettes.test_husl_values": ["<builtin>.map", "numpy.testing.assert_array_almost_equal", "<builtin>.list", "seaborn.palettes.husl_palette", "numpy.testing.assert_array_less"], "tests.test_palettes.TestColorPalettes.test_cbrewer_qual": ["seaborn.palettes.mpl_palette"], "tests.test_palettes.TestColorPalettes.test_mpl_reversal": ["seaborn.palettes.mpl_palette", "numpy.testing.assert_array_almost_equal"], "tests.test_palettes.TestColorPalettes.test_rgb_from_hls": ["colorsys.hls_to_rgb", "seaborn.palettes._color_to_rgb"], "seaborn.palettes._color_to_rgb": [], "colorsys.hls_to_rgb": [], "tests.test_palettes.TestColorPalettes.test_rgb_from_husl": ["<builtin>.min", "<builtin>.max", "seaborn.external.husl.husl_to_rgb", "seaborn.palettes._color_to_rgb", "<builtin>.tuple", "<builtin>.range"], "seaborn.external.husl.husl_to_rgb": [], "<builtin>.min": [], "tests.test_palettes.TestColorPalettes.test_rgb_from_xkcd": ["seaborn.palettes._color_to_rgb", "matplotlib.colors.to_rgb"], "tests.test_palettes.TestColorPalettes.test_light_palette": ["<builtin>.isinstance", "seaborn.palettes.light_palette", "seaborn.palettes.color_palette", "numpy.allclose", "matplotlib.colors.colorConverter.to_rgb"], "tests.test_palettes.TestColorPalettes.test_dark_palette": ["matplotlib.colors.colorConverter.to_rgb", "seaborn.palettes.color_palette", "seaborn.palettes.dark_palette", "numpy.allclose", "<builtin>.isinstance"], "seaborn.palettes.dark_palette": [], "tests.test_palettes.TestColorPalettes.test_diverging_palette": ["<builtin>.len", "seaborn.palettes.diverging_palette", "seaborn.palettes.light_palette", "<builtin>.int", "<builtin>.isinstance", "numpy.mean"], "seaborn.palettes.diverging_palette": [], "tests.test_palettes.TestColorPalettes.test_blend_palette": ["<builtin>.isinstance", "seaborn.palettes.blend_palette", "seaborn.palettes.color_palette"], "seaborn.palettes.blend_palette": [], "tests.test_palettes.TestColorPalettes.test_cubehelix_against_matplotlib": ["numpy.linspace", "seaborn.palettes.cubehelix_palette", "matplotlib.cm.cubehelix"], "matplotlib.cm.cubehelix": [], "seaborn.palettes.cubehelix_palette": [], "tests.test_palettes.TestColorPalettes.test_cubehelix_n_colors": ["<builtin>.len", "seaborn.palettes.cubehelix_palette"], "tests.test_palettes.TestColorPalettes.test_cubehelix_reverse": ["seaborn.palettes.cubehelix_palette"], "tests.test_palettes.TestColorPalettes.test_cubehelix_cmap": ["numpy.linspace", "numpy.testing.assert_array_equal", "<builtin>.isinstance", "seaborn.palettes.cubehelix_palette"], "tests.test_palettes.TestColorPalettes.test_cubehelix_code": ["seaborn.palettes.color_palette", "seaborn.palettes.cubehelix_palette"], "tests.test_palettes.TestColorPalettes.test_xkcd_palette": ["<builtin>.list", "seaborn.palettes.xkcd_palette", "seaborn.colors.xkcd_rgb.keys", "<builtin>.zip", "matplotlib.colors.rgb2hex"], "seaborn.colors.xkcd_rgb.keys": [], "seaborn.palettes.xkcd_palette": [], "tests.test_palettes.TestColorPalettes.test_crayon_palette": ["seaborn.palettes.crayon_palette", "<builtin>.list", "seaborn.colors.crayons.keys", "<builtin>.zip", "matplotlib.colors.rgb2hex"], "seaborn.colors.crayons.keys": [], "seaborn.palettes.crayon_palette": [], "tests.test_palettes.TestColorPalettes.test_color_codes": ["seaborn.palettes.set_color_codes", "pytest.raises", "seaborn.palettes.color_palette", "<builtin>.zip", "matplotlib.colors.colorConverter.to_rgb"], "seaborn.palettes.set_color_codes": [], "tests.test_palettes.TestColorPalettes.test_as_hex": ["matplotlib.colors.rgb2hex", "seaborn.palettes.color_palette", "<builtin>.zip"], "tests.test_palettes.TestColorPalettes.test_preserved_palette_length": ["seaborn.palettes.color_palette"], "tests.test_palettes.TestColorPalettes.test_html_repr": ["seaborn.palettes.color_palette"], "tests.test_palettes.TestColorPalettes.test_colormap_display_patch": ["matplotlib.cm.Reds._repr_html_", "seaborn.palettes._patch_colormap_display", "<builtin>.getattr"], "seaborn.palettes._patch_colormap_display": [], "matplotlib.cm.Reds._repr_html_": [], "tests.test_matrix": [], "tests.test_matrix.TestHeatmap": ["pytest.mark.xfail", "<builtin>.map", "<builtin>.sum", "pytest.mark.parametrize", "numpy.random.RandomState", "pandas.Series", "<builtin>.dict", "pandas.DataFrame"], "tests.test_matrix.TestHeatmap.test_ndarray_input": ["pandas.testing.assert_frame_equal", "numpy.testing.assert_array_equal", "pandas.util.testing.assert_frame_equal", "numpy.arange", "pandas.DataFrame", "seaborn.matrix._HeatMapper"], "seaborn.matrix._HeatMapper": [], "pandas.util.testing.assert_frame_equal": [], "tests.test_matrix.TestHeatmap.test_df_input": ["pandas.testing.assert_frame_equal", "numpy.testing.assert_array_equal", "pandas.util.testing.assert_frame_equal", "numpy.arange", "seaborn.matrix._HeatMapper"], "tests.test_matrix.TestHeatmap.test_df_multindex_input": ["pandas.MultiIndex.from_tuples", "numpy.testing.assert_array_equal", "seaborn.matrix._HeatMapper"], "pandas.MultiIndex.from_tuples": [], "tests.test_matrix.TestHeatmap.test_mask_input": ["numpy.testing.assert_array_equal", "seaborn.matrix._HeatMapper", "numpy.ma.masked_where"], "numpy.ma.masked_where": [], "tests.test_matrix.TestHeatmap.test_mask_limits": ["numpy.ma.array", "seaborn.matrix._HeatMapper"], "numpy.ma.array": [], "tests.test_matrix.TestHeatmap.test_default_vlims": ["seaborn.matrix._HeatMapper"], "tests.test_matrix.TestHeatmap.test_robust_vlims": ["numpy.percentile", "seaborn.matrix._HeatMapper"], "tests.test_matrix.TestHeatmap.test_custom_sequential_vlims": ["seaborn.matrix._HeatMapper"], "tests.test_matrix.TestHeatmap.test_custom_diverging_vlims": ["seaborn.matrix._HeatMapper"], "tests.test_matrix.TestHeatmap.test_array_with_nans": ["seaborn.matrix._HeatMapper", "numpy.zeros"], "tests.test_matrix.TestHeatmap.test_mask": ["pandas.DataFrame", "numpy.isnan", "numpy.testing.assert_array_equal", "seaborn.matrix._HeatMapper"], "tests.test_matrix.TestHeatmap.test_custom_cmap": ["seaborn.matrix._HeatMapper"], "tests.test_matrix.TestHeatmap.test_centered_vlims": ["seaborn.matrix._HeatMapper"], "tests.test_matrix.TestHeatmap.test_default_colors": ["seaborn.matrix.heatmap", "numpy.testing.assert_array_almost_equal", "numpy.linspace", "matplotlib.cm.binary"], "seaborn.matrix.heatmap": [], "matplotlib.cm.binary": [], "tests.test_matrix.TestHeatmap.test_custom_vlim_colors": ["seaborn.matrix.heatmap", "numpy.testing.assert_array_almost_equal", "numpy.linspace", "matplotlib.cm.binary"], "tests.test_matrix.TestHeatmap.test_custom_center_colors": ["seaborn.matrix.heatmap", "numpy.testing.assert_array_almost_equal", "numpy.linspace", "matplotlib.cm.binary"], "tests.test_matrix.TestHeatmap.test_cmap_with_properties": ["seaborn._compat.get_colormap", "numpy.testing.assert_array_equal", "copy.copy", "numpy.ma.masked_invalid", "seaborn.matrix._HeatMapper"], "copy.copy": [], "numpy.ma.masked_invalid": [], "tests.test_matrix.TestHeatmap.test_ticklabels_off": ["seaborn.matrix._HeatMapper"], "tests.test_matrix.TestHeatmap.test_custom_ticklabels": ["<builtin>.list", "seaborn.matrix._HeatMapper"], "tests.test_matrix.TestHeatmap.test_custom_ticklabel_interval": ["numpy.testing.assert_array_equal", "seaborn.matrix._HeatMapper", "numpy.arange"], "tests.test_matrix.TestHeatmap.test_heatmap_annotation": ["seaborn.matrix.heatmap", "<builtin>.zip"], "tests.test_matrix.TestHeatmap.test_heatmap_annotation_overwrite_kws": ["seaborn.matrix.heatmap", "<builtin>.dict"], "tests.test_matrix.TestHeatmap.test_heatmap_annotation_with_mask": ["<builtin>.len", "seaborn.matrix.heatmap", "numpy.isnan", "<builtin>.zip", "pandas.DataFrame", "numpy.ma.masked_where"], "tests.test_matrix.TestHeatmap.test_heatmap_annotation_mesh_colors": ["seaborn.matrix.heatmap", "matplotlib.pyplot.close", "<builtin>.len"], "tests.test_matrix.TestHeatmap.test_heatmap_annotation_other_data": ["seaborn.matrix.heatmap", "<builtin>.zip"], "tests.test_matrix.TestHeatmap.test_heatmap_annotation_different_shapes": ["seaborn.matrix.heatmap", "pytest.raises"], "tests.test_matrix.TestHeatmap.test_heatmap_annotation_with_limited_ticklabels": ["seaborn.matrix.heatmap", "<builtin>.zip"], "tests.test_matrix.TestHeatmap.test_heatmap_cbar": ["<builtin>.len", "matplotlib.pyplot.subplots", "seaborn.matrix.heatmap", "matplotlib.pyplot.close", "matplotlib.pyplot.figure"], "tests.test_matrix.TestHeatmap.test_heatmap_axes": ["seaborn.matrix.heatmap", "<builtin>.int", "<builtin>.list"], "tests.test_matrix.TestHeatmap.test_heatmap_ticklabel_rotation": ["seaborn.matrix.heatmap", "matplotlib.pyplot.close", "<builtin>.str", "matplotlib.pyplot.subplots"], "tests.test_matrix.TestHeatmap.test_heatmap_inner_lines": ["seaborn.matrix.heatmap", "<builtin>.tuple"], "tests.test_matrix.TestHeatmap.test_square_aspect": ["seaborn.matrix.heatmap"], "tests.test_matrix.TestHeatmap.test_mask_validation": ["pandas.DataFrame", "seaborn.matrix._matrix_mask", "pytest.raises"], "seaborn.matrix._matrix_mask": [], "tests.test_matrix.TestHeatmap.test_missing_data_mask": ["seaborn.matrix._matrix_mask", "numpy.testing.assert_array_equal", "numpy.array", "numpy.arange", "pandas.DataFrame"], "tests.test_matrix.TestHeatmap.test_cbar_ticks": ["seaborn.matrix.heatmap", "<builtin>.len", "<builtin>.dict", "matplotlib.pyplot.subplots"], "tests.test_matrix.TestDendrogram": ["fastcluster.linkage_vector", "pytest.mark.skipif", "pytest.mark.xfail", "<builtin>.map", "numpy.asarray", "<builtin>.sum", "numpy.random.RandomState", "scipy.cluster.hierarchy.linkage", "pandas.Series", "numpy.arange", "scipy.cluster.hierarchy.dendrogram", "<builtin>.dict", "pandas.DataFrame", "scipy.spatial.distance.pdist"], "scipy.spatial.distance.pdist": [], "scipy.cluster.hierarchy.linkage": [], "fastcluster.linkage_vector": [], "scipy.cluster.hierarchy.dendrogram": [], "tests.test_matrix.TestDendrogram.test_ndarray_input": ["pandas.testing.assert_frame_equal", "numpy.testing.assert_array_equal", "pandas.util.testing.assert_frame_equal", "seaborn.matrix._DendrogramPlotter", "pandas.DataFrame"], "seaborn.matrix._DendrogramPlotter": [], "tests.test_matrix.TestDendrogram.test_df_input": ["pandas.testing.assert_frame_equal", "numpy.asarray", "numpy.testing.assert_array_equal", "pandas.util.testing.assert_frame_equal", "seaborn.matrix._DendrogramPlotter"], "tests.test_matrix.TestDendrogram.test_df_multindex_input": ["pandas.MultiIndex.from_tuples", "numpy.testing.assert_array_equal", "seaborn.matrix._DendrogramPlotter"], "tests.test_matrix.TestDendrogram.test_axis0_input": ["pandas.testing.assert_frame_equal", "numpy.asarray", "numpy.testing.assert_array_equal", "pandas.util.testing.assert_frame_equal", "seaborn.matrix._DendrogramPlotter"], "tests.test_matrix.TestDendrogram.test_rotate_input": ["pandas.testing.assert_frame_equal", "numpy.asarray", "numpy.testing.assert_array_equal", "pandas.util.testing.assert_frame_equal", "seaborn.matrix._DendrogramPlotter"], "tests.test_matrix.TestDendrogram.test_rotate_axis0_input": ["numpy.testing.assert_array_equal", "seaborn.matrix._DendrogramPlotter"], "tests.test_matrix.TestDendrogram.test_custom_linkage": ["fastcluster.linkage_vector", "numpy.testing.assert_array_equal", "scipy.cluster.hierarchy.linkage", "scipy.cluster.hierarchy.dendrogram", "seaborn.matrix._DendrogramPlotter", "scipy.spatial.distance.pdist"], "tests.test_matrix.TestDendrogram.test_label_false": ["seaborn.matrix._DendrogramPlotter"], "tests.test_matrix.TestDendrogram.test_linkage_scipy": ["scipy.cluster.hierarchy.linkage", "numpy.testing.assert_array_equal", "seaborn.matrix._DendrogramPlotter", "scipy.spatial.distance.pdist"], "tests.test_matrix.TestDendrogram.test_fastcluster_other_method": ["numpy.testing.assert_array_equal", "seaborn.matrix._DendrogramPlotter", "fastcluster.linkage"], "fastcluster.linkage": [], "tests.test_matrix.TestDendrogram.test_fastcluster_non_euclidean": ["numpy.testing.assert_array_equal", "seaborn.matrix._DendrogramPlotter", "fastcluster.linkage"], "tests.test_matrix.TestDendrogram.test_dendrogram_plot": ["seaborn.matrix.dendrogram", "<builtin>.len", "matplotlib.pyplot.gca"], "seaborn.matrix.dendrogram": [], "tests.test_matrix.TestDendrogram.test_dendrogram_rotate": ["seaborn.matrix.dendrogram", "<builtin>.len", "matplotlib.pyplot.gca"], "tests.test_matrix.TestDendrogram.test_dendrogram_ticklabel_rotation": ["<builtin>.str", "seaborn.matrix.dendrogram", "matplotlib.pyplot.close", "matplotlib.pyplot.subplots"], "tests.test_matrix.TestClustermap": ["fastcluster.linkage_vector", "<builtin>.map", "numpy.asarray", "<builtin>.sum", "seaborn.color_palette", "numpy.random.RandomState", "scipy.cluster.hierarchy.linkage", "pandas.Series", "numpy.arange", "scipy.cluster.hierarchy.dendrogram", "<builtin>.dict", "pandas.DataFrame", "scipy.spatial.distance.pdist"], "seaborn.color_palette": [], "tests.test_matrix.TestClustermap.test_ndarray_input": ["pandas.testing.assert_frame_equal", "<builtin>.len", "pandas.util.testing.assert_frame_equal", "seaborn.matrix.ClusterGrid", "pandas.DataFrame"], "seaborn.matrix.ClusterGrid": [], "tests.test_matrix.TestClustermap.test_df_input": ["seaborn.matrix.ClusterGrid", "pandas.testing.assert_frame_equal", "pandas.util.testing.assert_frame_equal"], "tests.test_matrix.TestClustermap.test_corr_df_input": ["seaborn.matrix.ClusterGrid", "numpy.ones", "numpy.testing.assert_array_almost_equal", "numpy.diag_indices_from"], "numpy.diag_indices_from": [], "tests.test_matrix.TestClustermap.test_pivot_input": ["pandas.testing.assert_frame_equal", "pandas.melt", "pandas.util.testing.assert_frame_equal", "seaborn.matrix.ClusterGrid", "<builtin>.dict"], "pandas.melt": [], "tests.test_matrix.TestClustermap.test_colors_input": ["seaborn.matrix.ClusterGrid", "numpy.testing.assert_array_equal", "<builtin>.len"], "tests.test_matrix.TestClustermap.test_categorical_colors_input": ["<builtin>.map", "<builtin>.len", "<builtin>.list", "numpy.testing.assert_array_equal", "seaborn.matrix.ClusterGrid", "pandas.Series"], "tests.test_matrix.TestClustermap.test_nested_colors_input": ["seaborn.matrix.ClusterGrid", "numpy.testing.assert_array_equal", "<builtin>.len"], "tests.test_matrix.TestClustermap.test_colors_input_custom_cmap": ["seaborn.matrix.clustermap", "numpy.testing.assert_array_equal", "<builtin>.len"], "seaborn.matrix.clustermap": [], "tests.test_matrix.TestClustermap.test_z_score": ["seaborn.matrix.ClusterGrid", "pandas.testing.assert_frame_equal", "pandas.util.testing.assert_frame_equal"], "tests.test_matrix.TestClustermap.test_z_score_axis0": ["seaborn.matrix.ClusterGrid", "pandas.testing.assert_frame_equal", "pandas.util.testing.assert_frame_equal"], "tests.test_matrix.TestClustermap.test_standard_scale": ["seaborn.matrix.ClusterGrid", "pandas.testing.assert_frame_equal", "pandas.util.testing.assert_frame_equal"], "tests.test_matrix.TestClustermap.test_standard_scale_axis0": ["seaborn.matrix.ClusterGrid", "pandas.testing.assert_frame_equal", "pandas.util.testing.assert_frame_equal"], "tests.test_matrix.TestClustermap.test_z_score_standard_scale": ["seaborn.matrix.ClusterGrid", "pytest.raises"], "tests.test_matrix.TestClustermap.test_color_list_to_matrix_and_cmap": ["seaborn.matrix.ClusterGrid.color_list_to_matrix_and_cmap", "seaborn._testing.assert_colors_equal", "<builtin>.enumerate"], "seaborn.matrix.ClusterGrid.color_list_to_matrix_and_cmap": [], "tests.test_matrix.TestClustermap.test_nested_color_list_to_matrix_and_cmap": ["seaborn.matrix.ClusterGrid.color_list_to_matrix_and_cmap", "seaborn._testing.assert_colors_equal", "<builtin>.enumerate"], "tests.test_matrix.TestClustermap.test_color_list_to_matrix_and_cmap_axis1": ["seaborn.matrix.ClusterGrid.color_list_to_matrix_and_cmap", "seaborn._testing.assert_colors_equal", "<builtin>.enumerate"], "tests.test_matrix.TestClustermap.test_color_list_to_matrix_and_cmap_different_sizes": ["seaborn.matrix.ClusterGrid.color_list_to_matrix_and_cmap", "pytest.raises"], "tests.test_matrix.TestClustermap.test_savefig": ["seaborn.matrix.ClusterGrid", "tempfile.NamedTemporaryFile"], "tempfile.NamedTemporaryFile": [], "tests.test_matrix.TestClustermap.test_plot_dendrograms": ["pandas.testing.assert_frame_equal", "seaborn.matrix.clustermap", "<builtin>.len", "pandas.util.testing.assert_frame_equal"], "tests.test_matrix.TestClustermap.test_cluster_false": ["pandas.testing.assert_frame_equal", "seaborn.matrix.clustermap", "<builtin>.len", "pandas.util.testing.assert_frame_equal"], "tests.test_matrix.TestClustermap.test_row_col_colors": ["seaborn.matrix.clustermap", "<builtin>.len"], "tests.test_matrix.TestClustermap.test_cluster_false_row_col_colors": ["pandas.testing.assert_frame_equal", "seaborn.matrix.clustermap", "<builtin>.len", "pandas.util.testing.assert_frame_equal"], "tests.test_matrix.TestClustermap.test_row_col_colors_df": ["pandas.DataFrame", "<builtin>.list", "seaborn.matrix.clustermap"], "tests.test_matrix.TestClustermap.test_row_col_colors_df_shuffled": ["pandas.DataFrame", "<builtin>.list", "seaborn.matrix.clustermap", "<builtin>.range"], "tests.test_matrix.TestClustermap.test_row_col_colors_df_missing": ["pandas.DataFrame", "<builtin>.list", "seaborn.matrix.clustermap"], "tests.test_matrix.TestClustermap.test_row_col_colors_df_one_axis": ["pandas.DataFrame", "<builtin>.list", "seaborn.matrix.clustermap"], "tests.test_matrix.TestClustermap.test_row_col_colors_series": ["<builtin>.list", "pandas.Series", "seaborn.matrix.clustermap"], "tests.test_matrix.TestClustermap.test_row_col_colors_series_shuffled": ["seaborn.matrix.clustermap", "<builtin>.list", "pandas.Series", "<builtin>.range"], "tests.test_matrix.TestClustermap.test_row_col_colors_series_missing": ["<builtin>.list", "pandas.Series", "seaborn.matrix.clustermap"], "tests.test_matrix.TestClustermap.test_row_col_colors_ignore_heatmap_kwargs": ["matplotlib.colors.LogNorm", "seaborn.matrix.clustermap", "numpy.array_equal", "numpy.array"], "matplotlib.colors.LogNorm": [], "tests.test_matrix.TestClustermap.test_row_col_colors_raise_on_mixed_index_types": ["<builtin>.list", "pandas.Series", "seaborn.matrix.clustermap", "pytest.raises"], "tests.test_matrix.TestClustermap.test_mask_reorganization": ["seaborn.matrix.clustermap", "numpy.testing.assert_array_equal"], "tests.test_matrix.TestClustermap.test_ticklabel_reorganization": ["<builtin>.list", "seaborn.matrix.clustermap", "numpy.arange", "numpy.testing.assert_array_equal"], "tests.test_matrix.TestClustermap.test_noticklabels": ["seaborn.matrix.clustermap"], "tests.test_matrix.TestClustermap.test_size_ratios": ["seaborn.matrix.clustermap"], "tests.test_matrix.TestClustermap.test_cbar_pos": ["<builtin>.tuple", "seaborn.matrix.clustermap", "pytest.approx"], "tests.test_matrix.TestClustermap.test_square_warning": ["pytest.warns", "seaborn.matrix.clustermap", "numpy.array_equal"], "tests.test_matrix.TestClustermap.test_clustermap_annotation": ["numpy.asarray", "seaborn.matrix.clustermap", "<builtin>.zip"], "tests.test_matrix.TestClustermap.test_tree_kws": ["<builtin>.tuple", "seaborn.matrix.clustermap", "<builtin>.dict"], "tests.test_matrix.test_required_scipy_errors": ["seaborn.matrix.clustermap", "pytest.raises", "seaborn.matrix.ClusterGrid", "numpy.random.normal", "seaborn.matrix.dendrogram"], "numpy.random.normal": [], "tests.test_core": ["pytest.fixture"], "tests.test_core.long_variables": [], "tests.test_core.TestSemanticMapping.test_call_lookup": ["seaborn._oldcore.SemanticMapping", "<builtin>.zip", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "seaborn._oldcore.VectorPlotter": [], "seaborn._oldcore.SemanticMapping": [], "tests.test_core.TestHueMapping.test_init_from_map": ["seaborn._oldcore.HueMapping.map", "<builtin>.isinstance", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "seaborn._oldcore.HueMapping.map": [], "tests.test_core.TestHueMapping.test_plotter_default_init": ["<builtin>.isinstance", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestHueMapping.test_plotter_reinit": ["<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestHueMapping.test_hue_map_null": ["seaborn._oldcore.HueMapping", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "seaborn._oldcore.HueMapping": [], "tests.test_core.TestHueMapping.test_hue_map_categorical": ["pytest.raises", "seaborn._oldcore.HueMapping", "<builtin>.len", "pytest.warns", "<builtin>.list", "seaborn._oldcore.VectorPlotter", "pandas.Timestamp", "pandas.Series", "seaborn.palettes.color_palette", "<builtin>.zip", "<builtin>.dict", "seaborn._oldcore.categorical_order", "numpy.arange"], "tests.test_core.TestHueMapping.test_hue_map_numeric": ["numpy.linspace", "seaborn._compat.get_colormap", "numpy.sort", "seaborn._oldcore.HueMapping", "pytest.approx", "<builtin>.len", "<builtin>.list", "numpy.testing.assert_array_equal", "pytest.warns", "pytest.raises", "numpy.concatenate", "seaborn._oldcore.VectorPlotter", "seaborn.palettes.color_palette", "<builtin>.zip", "<builtin>.dict", "matplotlib.colors.PowerNorm", "<builtin>.isinstance"], "matplotlib.colors.PowerNorm": [], "tests.test_core.TestHueMapping.test_hue_map_without_hue_dataa": ["seaborn._oldcore.HueMapping", "pytest.warns", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestSizeMapping.test_init_from_map": ["<builtin>.min", "seaborn._oldcore.SizeMapping.map", "<builtin>.max", "seaborn._oldcore.VectorPlotter", "<builtin>.dict", "<builtin>.isinstance"], "seaborn._oldcore.SizeMapping.map": [], "tests.test_core.TestSizeMapping.test_plotter_default_init": ["<builtin>.isinstance", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestSizeMapping.test_plotter_reinit": ["<builtin>.zip", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestSizeMapping.test_size_map_null": ["seaborn._oldcore.HueMapping", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestSizeMapping.test_map_size_numeric": ["<builtin>.min", "pytest.raises", "<builtin>.max", "seaborn._oldcore.SizeMapping", "seaborn._oldcore.VectorPlotter", "<builtin>.dict", "matplotlib.colors.LogNorm", "matplotlib.colors.Normalize"], "seaborn._oldcore.SizeMapping": [], "tests.test_core.TestSizeMapping.test_map_size_categorical": ["numpy.linspace", "<builtin>.len", "numpy.random.rand", "pytest.raises", "<builtin>.list", "pytest.warns", "seaborn._oldcore.SizeMapping", "seaborn._oldcore.VectorPlotter", "seaborn._oldcore.categorical_order", "<builtin>.zip", "<builtin>.dict"], "numpy.random.rand": [], "tests.test_core.TestStyleMapping.test_init_from_map": ["seaborn._oldcore.StyleMapping.map", "<builtin>.isinstance", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "seaborn._oldcore.StyleMapping.map": [], "tests.test_core.TestStyleMapping.test_plotter_default_init": ["<builtin>.isinstance", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestStyleMapping.test_plotter_reinit": ["<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestStyleMapping.test_style_map_null": ["seaborn._oldcore.HueMapping", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestStyleMapping.test_map_style": ["<builtin>.len", "seaborn._oldcore.StyleMapping", "pytest.raises", "pytest.warns", "numpy.testing.assert_array_equal", "seaborn._oldcore.VectorPlotter", "<builtin>.zip", "<builtin>.dict", "seaborn._oldcore.unique_dashes", "seaborn._oldcore.unique_markers", "matplotlib.markers.MarkerStyle"], "seaborn._oldcore.StyleMapping": [], "seaborn._oldcore.unique_dashes": [], "matplotlib.markers.MarkerStyle": [], "seaborn._oldcore.unique_markers": [], "tests.test_core.TestVectorPlotter.test_flat_variables": ["<builtin>.len", "<builtin>.list", "numpy.testing.assert_array_equal", "<builtin>.getattr", "seaborn._oldcore.VectorPlotter", "numpy.arange"], "tests.test_core.TestVectorPlotter.test_long_df": ["numpy.testing.assert_array_equal", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_long_df_with_index": ["numpy.testing.assert_array_equal", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_long_df_with_multiindex": ["numpy.testing.assert_array_equal", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_long_dict": ["pandas.Series", "numpy.testing.assert_array_equal", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter": ["pytest.mark.parametrize", "pytest.fixture", "itertools.product"], "tests.test_core.TestVectorPlotter.test_long_vectors": ["<builtin>.list", "numpy.testing.assert_array_equal", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_long_undefined_variables": ["pytest.raises", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_empty_data_input": ["<builtin>.isinstance", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_units": ["numpy.testing.assert_array_equal", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_long_numeric_name": ["numpy.testing.assert_array_equal", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_long_hierarchical_index": ["pandas.DataFrame", "numpy.testing.assert_array_equal", "pandas.MultiIndex.from_product", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_long_scalar_and_data": ["seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_wide_semantic_error": ["pytest.raises", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_long_unknown_error": ["pytest.raises", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_long_unmatched_size_error": ["pytest.raises", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_wide_categorical_columns": ["pandas.CategoricalIndex", "numpy.testing.assert_array_equal", "seaborn._oldcore.VectorPlotter"], "pandas.CategoricalIndex": [], "tests.test_core.TestVectorPlotter.test_iter_data_quantitites": ["<builtin>.map", "<builtin>.len", "<builtin>.list", "seaborn._oldcore.VectorPlotter", "<builtin>.dict", "<builtin>.set"], "tests.test_core.TestVectorPlotter.test_iter_data_keys": ["<builtin>.list", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_iter_data_values": ["<builtin>.next", "pandas.testing.assert_frame_equal", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_iter_data_reverse": ["<builtin>.enumerate", "seaborn._oldcore.categorical_order", "<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_iter_data_dropna": ["<builtin>.dict", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_axis_labels": ["seaborn._oldcore.VectorPlotter", "<builtin>.dict", "matplotlib.pyplot.subplots"], "tests.test_core.TestVectorPlotter.test_attach_basics": ["seaborn._oldcore.VectorPlotter", "matplotlib.pyplot.subplots"], "tests.test_core.TestVectorPlotter.test_attach_disallowed": ["seaborn._oldcore.VectorPlotter", "pytest.raises", "matplotlib.pyplot.subplots"], "tests.test_core.TestVectorPlotter.test_attach_log_scale": ["seaborn._oldcore.VectorPlotter", "matplotlib.pyplot.subplots"], "tests.test_core.TestVectorPlotter.test_attach_converters": ["seaborn._oldcore.VectorPlotter", "matplotlib.pyplot.subplots"], "tests.test_core.TestVectorPlotter.test_attach_facets": ["seaborn.axisgrid.FacetGrid", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_attach_shared_axes": ["seaborn.axisgrid.FacetGrid", "<builtin>.len", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_get_axes_single": ["matplotlib.pyplot.figure", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_get_axes_facets": ["seaborn.axisgrid.FacetGrid", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_comp_data": ["numpy.testing.assert_array_equal", "matplotlib.pyplot.subplots", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_comp_data_log": ["numpy.testing.assert_array_equal", "numpy.log10", "matplotlib.pyplot.subplots", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_comp_data_category_order": ["pandas.Series", "numpy.testing.assert_array_equal", "matplotlib.pyplot.subplots", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.comp_data_missing_fixture": ["pytest.skip", "matplotlib.dates.num2date"], "matplotlib.dates.num2date": [], "tests.test_core.TestVectorPlotter.test_comp_data_missing": ["matplotlib.pyplot.figure", "numpy.testing.assert_array_equal", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_comp_data_duplicate_index": ["matplotlib.pyplot.figure", "pandas.Series", "numpy.testing.assert_array_equal", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_var_order": ["<builtin>.getattr", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_scale_native": ["pytest.raises", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_scale_numeric": ["pytest.raises", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_scale_datetime": ["pytest.raises", "seaborn._oldcore.VectorPlotter"], "tests.test_core.TestVectorPlotter.test_scale_categorical": ["numpy.testing.assert_array_equal", "numpy.roll", "seaborn._oldcore.VectorPlotter", "seaborn._oldcore.categorical_order", "<builtin>.hasattr", "<builtin>.all"], "tests.test_core.TestVectorPlotter.test_scale_categorical.<lambda1>": [], "tests.test_core.TestCoreFunc.test_unique_dashes": ["<builtin>.set", "<builtin>.isinstance", "<builtin>.len", "seaborn._oldcore.unique_dashes"], "tests.test_core.TestCoreFunc.test_unique_markers": ["<builtin>.set", "seaborn._oldcore.unique_markers", "matplotlib.markers.MarkerStyle", "<builtin>.len"], "tests.test_core.TestCoreFunc.test_variable_type": ["pandas.Timestamp", "pandas.Series", "seaborn._oldcore.variable_type"], "seaborn._oldcore.variable_type": [], "tests.test_core.TestCoreFunc.test_infer_orient": ["pytest.raises", "seaborn._oldcore.infer_orient", "pytest.warns", "pandas.Series", "numpy.arange", "pandas.date_range"], "pandas.date_range": [], "seaborn._oldcore.infer_orient": [], "tests.test_core.TestCoreFunc.test_categorical_order": ["<builtin>.list", "pandas.Categorical", "numpy.array", "pandas.Series", "seaborn._oldcore.categorical_order"], "tests.test_regression": ["numpy.random.RandomState"], "tests.test_regression.TestLinearPlotter": ["numpy.random.RandomState", "numpy.tile", "<builtin>.list", "<builtin>.dict", "pandas.DataFrame"], "tests.test_regression.TestLinearPlotter.test_establish_variables_from_frame": ["pandas.testing.assert_frame_equal", "pandas.testing.assert_series_equal", "seaborn.regression._LinearPlotter", "pandas.util.testing.assert_series_equal", "pandas.util.testing.assert_frame_equal"], "seaborn.regression._LinearPlotter": [], "pandas.util.testing.assert_series_equal": [], "tests.test_regression.TestLinearPlotter.test_establish_variables_from_series": ["pandas.util.testing.assert_series_equal", "pandas.testing.assert_series_equal", "seaborn.regression._LinearPlotter"], "tests.test_regression.TestLinearPlotter.test_establish_variables_from_array": ["numpy.testing.assert_array_equal", "seaborn.regression._LinearPlotter"], "tests.test_regression.TestLinearPlotter.test_establish_variables_from_lists": ["numpy.testing.assert_array_equal", "seaborn.regression._LinearPlotter"], "tests.test_regression.TestLinearPlotter.test_establish_variables_from_mix": ["pandas.testing.assert_frame_equal", "pandas.testing.assert_series_equal", "seaborn.regression._LinearPlotter", "pandas.util.testing.assert_series_equal", "pandas.util.testing.assert_frame_equal"], "tests.test_regression.TestLinearPlotter.test_establish_variables_from_bad": ["pytest.raises", "seaborn.regression._LinearPlotter"], "tests.test_regression.TestLinearPlotter.test_dropna": ["pandas.util.testing.assert_series_equal", "pandas.testing.assert_series_equal", "seaborn.regression._LinearPlotter"], "tests.test_regression.TestRegressionPlotter": ["pytest.mark.skipif", "numpy.linspace", "numpy.exp", "pytest.mark.parametrize", "numpy.random.RandomState", "numpy.tile", "<builtin>.list", "<builtin>.dict", "pandas.DataFrame", "<builtin>.range"], "numpy.exp": [], "tests.test_regression.TestRegressionPlotter.test_variables_from_frame": ["pandas.testing.assert_frame_equal", "pandas.testing.assert_series_equal", "pandas.util.testing.assert_series_equal", "pandas.util.testing.assert_frame_equal", "seaborn.regression._RegressionPlotter"], "seaborn.regression._RegressionPlotter": [], "tests.test_regression.TestRegressionPlotter.test_variables_from_series": ["seaborn.regression._RegressionPlotter", "numpy.testing.assert_array_equal"], "tests.test_regression.TestRegressionPlotter.test_variables_from_mix": ["pandas.testing.assert_frame_equal", "seaborn.regression._RegressionPlotter", "numpy.testing.assert_array_equal", "pandas.util.testing.assert_frame_equal"], "tests.test_regression.TestRegressionPlotter.test_variables_must_be_1d": ["seaborn.regression._RegressionPlotter", "pytest.raises", "numpy.random.randn"], "tests.test_regression.TestRegressionPlotter.test_dropna": ["pandas.notnull", "seaborn.regression._RegressionPlotter", "<builtin>.len"], "pandas.notnull": [], "tests.test_regression.TestRegressionPlotter.test_singleton": ["seaborn.regression._RegressionPlotter"], "tests.test_regression.TestRegressionPlotter.test_ci": ["seaborn.regression._RegressionPlotter"], "tests.test_regression.TestRegressionPlotter.test_fast_regression": ["seaborn.regression._RegressionPlotter", "numpy.testing.assert_array_almost_equal"], "tests.test_regression.TestRegressionPlotter.test_regress_poly": ["seaborn.regression._RegressionPlotter", "numpy.testing.assert_array_almost_equal"], "tests.test_regression.TestRegressionPlotter.test_regress_logx": ["seaborn.regression._RegressionPlotter", "numpy.arange", "numpy.linspace"], "tests.test_regression.TestRegressionPlotter.test_regress_n_boot": ["numpy.testing.assert_equal", "seaborn.regression._RegressionPlotter"], "tests.test_regression.TestRegressionPlotter.test_regress_without_bootstrap": ["seaborn.regression._RegressionPlotter"], "tests.test_regression.TestRegressionPlotter.test_regress_bootstrap_seed": ["seaborn.regression._RegressionPlotter", "numpy.testing.assert_array_equal"], "tests.test_regression.TestRegressionPlotter.test_numeric_bins": ["<builtin>.len", "numpy.testing.assert_array_equal", "numpy.unique", "numpy.testing.assert_equal", "seaborn.regression._RegressionPlotter"], "tests.test_regression.TestRegressionPlotter.test_provided_bins": ["seaborn.regression._RegressionPlotter", "numpy.testing.assert_array_equal", "numpy.unique"], "tests.test_regression.TestRegressionPlotter.test_bin_results": ["seaborn.regression._RegressionPlotter"], "tests.test_regression.TestRegressionPlotter.test_scatter_data": ["<builtin>.len", "numpy.repeat", "numpy.testing.assert_array_equal", "numpy.abs", "seaborn.regression._RegressionPlotter", "numpy.testing.assert_array_less"], "tests.test_regression.TestRegressionPlotter.test_estimate_data": ["numpy.testing.assert_array_almost_equal", "numpy.sort", "numpy.testing.assert_array_equal", "numpy.array", "numpy.unique", "seaborn.regression._RegressionPlotter", "numpy.testing.assert_array_less"], "tests.test_regression.TestRegressionPlotter.test_estimate_cis": ["<builtin>.len", "numpy.testing.assert_array_equal", "numpy.diff", "seaborn.regression._RegressionPlotter", "numpy.testing.assert_array_less"], "tests.test_regression.TestRegressionPlotter.test_estimate_units": ["numpy.diff", "seaborn.regression._RegressionPlotter", "numpy.testing.assert_array_less"], "tests.test_regression.TestRegressionPlotter.test_partial": ["pandas.Series", "seaborn.regression._RegressionPlotter", "numpy.corrcoef"], "numpy.corrcoef": [], "tests.test_regression.TestRegressionPlotter.test_logistic_regression": ["seaborn.regression._RegressionPlotter", "numpy.testing.assert_array_less"], "tests.test_regression.TestRegressionPlotter.test_logistic_perfect_separation": ["warnings.simplefilter", "numpy.isnan", "seaborn.regression._RegressionPlotter", "warnings.catch_warnings"], "tests.test_regression.TestRegressionPlotter.test_robust_regression": ["seaborn.regression._RegressionPlotter", "<builtin>.len"], "tests.test_regression.TestRegressionPlotter.test_lowess_regression": ["seaborn.regression._RegressionPlotter", "<builtin>.len"], "tests.test_regression.TestRegressionPlotter.test_regression_options": ["seaborn.regression._RegressionPlotter", "pytest.raises"], "tests.test_regression.TestRegressionPlotter.test_regression_limits": ["seaborn.regression._RegressionPlotter", "matplotlib.pyplot.subplots"], "tests.test_regression.TestRegressionPlots": ["pytest.mark.skipif", "numpy.repeat", "numpy.random.RandomState", "numpy.tile", "<builtin>.list", "seaborn.utils._version_predates", "pytest.mark.parametrize", "numpy.arange", "<builtin>.dict", "pandas.DataFrame"], "tests.test_regression.TestRegressionPlots.test_regplot_basic": ["seaborn.regression.regplot", "numpy.testing.assert_array_equal", "<builtin>.len", "matplotlib.pyplot.subplots"], "seaborn.regression.regplot": [], "tests.test_regression.TestRegressionPlots.test_regplot_selective": ["seaborn.regression.regplot", "<builtin>.len", "matplotlib.pyplot.subplots"], "tests.test_regression.TestRegressionPlots.test_regplot_scatter_kws_alpha": ["seaborn.regression.regplot", "numpy.array", "matplotlib.pyplot.subplots"], "tests.test_regression.TestRegressionPlots.test_regplot_binned": ["seaborn.regression.regplot", "<builtin>.len"], "tests.test_regression.TestRegressionPlots.test_lmplot_no_data": ["pytest.raises", "seaborn.regression.lmplot"], "seaborn.regression.lmplot": [], "tests.test_regression.TestRegressionPlots.test_lmplot_basic": ["numpy.testing.assert_array_equal", "<builtin>.len", "seaborn.regression.lmplot"], "tests.test_regression.TestRegressionPlots.test_lmplot_hue": ["<builtin>.len", "seaborn.regression.lmplot"], "tests.test_regression.TestRegressionPlots.test_lmplot_markers": ["pytest.raises", "seaborn.regression.lmplot"], "tests.test_regression.TestRegressionPlots.test_lmplot_marker_linewidths": ["seaborn.regression.lmplot"], "tests.test_regression.TestRegressionPlots.test_lmplot_facets": ["seaborn.regression.lmplot"], "tests.test_regression.TestRegressionPlots.test_lmplot_hue_col_nolegend": ["seaborn.regression.lmplot"], "tests.test_regression.TestRegressionPlots.test_lmplot_scatter_kws": ["numpy.testing.assert_array_equal", "seaborn.palettes.color_palette", "seaborn.regression.lmplot"], "tests.test_regression.TestRegressionPlots.test_lmplot_facet_truncate": ["seaborn.regression.lmplot", "<builtin>.tuple", "<builtin>.dict"], "tests.test_regression.TestRegressionPlots.test_lmplot_sharey": ["pandas.DataFrame", "pytest.warns", "seaborn.regression.lmplot", "<builtin>.dict"], "tests.test_regression.TestRegressionPlots.test_lmplot_facet_kws": ["seaborn.regression.lmplot"], "tests.test_regression.TestRegressionPlots.test_residplot": ["numpy.testing.assert_array_almost_equal", "numpy.testing.assert_array_equal", "numpy.polyval", "numpy.polyfit", "seaborn.regression.residplot"], "seaborn.regression.residplot": [], "tests.test_regression.TestRegressionPlots.test_residplot_lowess": ["numpy.testing.assert_array_equal", "seaborn.regression.residplot", "<builtin>.len", "numpy.sort"], "tests.test_regression.TestRegressionPlots.test_three_point_colors": ["seaborn.regression.regplot", "numpy.testing.assert_almost_equal", "numpy.random.randn"], "tests.test_regression.TestRegressionPlots.test_regplot_xlim": ["seaborn.regression.regplot", "numpy.array_equal", "numpy.random.randn", "matplotlib.pyplot.subplots"], "tests": [], "tests.test_algorithms": ["pytest.fixture"], "tests.test_algorithms.random": ["numpy.random.seed", "<builtin>.map", "<builtin>.sum"], "tests.test_algorithms.test_bootstrap": ["numpy.ones", "numpy.testing.assert_array_equal", "seaborn.algorithms.bootstrap"], "seaborn.algorithms.bootstrap": [], "tests.test_algorithms.test_bootstrap_length": ["seaborn.algorithms.bootstrap", "<builtin>.len", "numpy.random.randn"], "tests.test_algorithms.test_bootstrap_range": ["seaborn.algorithms.bootstrap", "numpy.random.randn"], "tests.test_algorithms.test_bootstrap_multiarg": ["numpy.testing.assert_array_equal", "numpy.array", "seaborn.algorithms.bootstrap", "<builtin>.range", "numpy.vstack"], "numpy.vstack": [], "tests.test_algorithms.test_bootstrap_multiarg.f": ["numpy.vstack"], "tests.test_algorithms.test_bootstrap_axis": ["seaborn.algorithms.bootstrap", "numpy.random.randn"], "tests.test_algorithms.test_bootstrap_seed": ["seaborn.algorithms.bootstrap", "numpy.testing.assert_array_equal", "numpy.random.randn"], "tests.test_algorithms.test_bootstrap_ols": ["numpy.ones", "numpy.dot", "seaborn.algorithms.bootstrap", "numpy.column_stack", "numpy.random.randn"], "tests.test_algorithms.test_bootstrap_ols.ols_fit": ["numpy.dot", "numpy.linalg.inv"], "numpy.dot": [], "numpy.linalg.inv": [], "numpy.column_stack": [], "tests.test_algorithms.test_bootstrap_units": ["numpy.repeat", "seaborn.algorithms.bootstrap", "numpy.random.normal", "<builtin>.range", "numpy.random.randn"], "tests.test_algorithms.test_bootstrap_arglength": ["numpy.arange", "pytest.raises", "seaborn.algorithms.bootstrap"], "tests.test_algorithms.test_bootstrap_string_func": ["seaborn.algorithms.bootstrap", "pytest.raises", "numpy.array_equal", "numpy.random.randn"], "tests.test_algorithms.test_bootstrap_reproducibility": ["numpy.random.RandomState", "numpy.testing.assert_array_equal", "pytest.warns", "seaborn.algorithms.bootstrap", "numpy.random.randn"], "tests.test_algorithms.test_nanaware_func_auto": ["numpy.random.normal", "numpy.isnan", "seaborn.algorithms.bootstrap"], "tests.test_algorithms.test_nanaware_func_warning": ["numpy.random.normal", "pytest.warns", "numpy.isnan", "seaborn.algorithms.bootstrap"], "tests.test_docstrings": ["<builtin>.dict"], "tests.test_docstrings.ExampleClass.example_method": [], "tests.test_docstrings.example_func": [], "tests.test_docstrings.TestDocstringComponents.test_from_dict": ["seaborn._docstrings.DocstringComponents"], "seaborn._docstrings.DocstringComponents": [], "tests.test_docstrings.TestDocstringComponents.test_from_nested_components": ["seaborn._docstrings.DocstringComponents.from_nested_components", "seaborn._docstrings.DocstringComponents"], "seaborn._docstrings.DocstringComponents.from_nested_components": [], "tests.test_docstrings.TestDocstringComponents.test_from_function": ["seaborn._docstrings.DocstringComponents.from_function_params"], "seaborn._docstrings.DocstringComponents.from_function_params": [], "tests.test_docstrings.TestDocstringComponents.test_from_method": ["seaborn._docstrings.DocstringComponents.from_function_params"], "tests.test_relational": ["pytest.fixture"], "tests.test_relational.long_semantics": [], "tests.test_relational.Helpers.scatter_rgbs": ["<builtin>.tuple"], "tests.test_relational.Helpers.paths_equal": ["numpy.array_equal", "<builtin>.zip", "<builtin>.len", "<builtin>.all"], "tests.test_relational.SharedAxesLevelTests.test_color": ["matplotlib.pyplot.figure", "matplotlib.colors.to_rgba"], "tests.test_relational.TestRelationalPlotter.test_wide_df_variables": ["<builtin>.len", "numpy.repeat", "<builtin>.list", "numpy.tile", "numpy.testing.assert_array_equal", "numpy.product", "seaborn.relational._RelationalPlotter"], "seaborn.relational._RelationalPlotter": [], "numpy.product": [], "tests.test_relational.TestRelationalPlotter.test_wide_df_with_nonnumeric_variables": ["<builtin>.len", "numpy.repeat", "<builtin>.list", "numpy.tile", "numpy.testing.assert_array_equal", "numpy.product", "seaborn.relational._RelationalPlotter"], "tests.test_relational.TestRelationalPlotter.test_wide_array_variables": ["<builtin>.len", "numpy.repeat", "<builtin>.list", "numpy.tile", "numpy.testing.assert_array_equal", "numpy.product", "numpy.arange", "seaborn.relational._RelationalPlotter"], "tests.test_relational.TestRelationalPlotter.test_flat_array_variables": ["<builtin>.len", "<builtin>.list", "numpy.testing.assert_array_equal", "numpy.product", "numpy.arange", "seaborn.relational._RelationalPlotter"], "tests.test_relational.TestRelationalPlotter.test_flat_list_variables": ["<builtin>.len", "<builtin>.list", "numpy.testing.assert_array_equal", "numpy.arange", "seaborn.relational._RelationalPlotter"], "tests.test_relational.TestRelationalPlotter.test_flat_series_variables": ["<builtin>.list", "numpy.testing.assert_array_equal", "<builtin>.len", "seaborn.relational._RelationalPlotter"], "tests.test_relational.TestRelationalPlotter.test_wide_list_of_series_variables": ["<builtin>.len", "numpy.repeat", "<builtin>.list", "<builtin>.max", "numpy.tile", "numpy.testing.assert_array_equal", "numpy.concatenate", "numpy.unique", "seaborn.relational._RelationalPlotter"], "tests.test_relational.TestRelationalPlotter.test_wide_list_of_arrays_variables": ["<builtin>.len", "numpy.repeat", "<builtin>.list", "<builtin>.max", "numpy.tile", "numpy.testing.assert_array_equal", "numpy.concatenate", "numpy.arange", "seaborn.relational._RelationalPlotter"], "tests.test_relational.TestRelationalPlotter.test_wide_list_of_list_variables": ["<builtin>.len", "numpy.repeat", "<builtin>.list", "<builtin>.max", "numpy.tile", "numpy.testing.assert_array_equal", "numpy.concatenate", "numpy.arange", "seaborn.relational._RelationalPlotter"], "tests.test_relational.TestRelationalPlotter.test_wide_dict_of_series_variables": ["<builtin>.len", "numpy.repeat", "<builtin>.list", "<builtin>.max", "numpy.tile", "numpy.testing.assert_array_equal", "numpy.concatenate", "numpy.arange", "seaborn.relational._RelationalPlotter"], "tests.test_relational.TestRelationalPlotter.test_wide_dict_of_arrays_variables": ["<builtin>.len", "numpy.repeat", "<builtin>.list", "<builtin>.max", "numpy.tile", "numpy.testing.assert_array_equal", "numpy.concatenate", "numpy.arange", "seaborn.relational._RelationalPlotter"], "tests.test_relational.TestRelationalPlotter.test_wide_dict_of_lists_variables": ["<builtin>.len", "numpy.repeat", "<builtin>.list", "<builtin>.max", "numpy.tile", "numpy.testing.assert_array_equal", "numpy.concatenate", "numpy.arange", "seaborn.relational._RelationalPlotter"], "tests.test_relational.TestRelationalPlotter.test_relplot_simple": ["seaborn.relational.relplot", "numpy.testing.assert_array_equal", "pytest.raises", "pytest.approx"], "seaborn.relational.relplot": [], "tests.test_relational.TestRelationalPlotter.test_relplot_complex": ["seaborn.relational.relplot", "numpy.testing.assert_array_equal", "<builtin>.zip"], "tests.test_relational.TestRelationalPlotter": ["pytest.mark.parametrize"], "tests.test_relational.TestRelationalPlotter.test_relplot_vectors": ["seaborn.relational.relplot", "<builtin>.len", "numpy.testing.assert_array_equal", "<builtin>.zip", "<builtin>.dict"], "tests.test_relational.TestRelationalPlotter.test_relplot_wide": ["seaborn.relational.relplot", "numpy.testing.assert_array_equal"], "tests.test_relational.TestRelationalPlotter.test_relplot_hues": ["matplotlib.colors.same_color", "seaborn.relational.relplot", "<builtin>.zip", "<builtin>.dict"], "tests.test_relational.TestRelationalPlotter.test_relplot_sizes": ["seaborn.relational.relplot", "numpy.testing.assert_array_equal", "<builtin>.zip", "<builtin>.dict"], "tests.test_relational.TestRelationalPlotter.test_relplot_styles": ["tests.test_relational.Helpers.paths_equal", "seaborn.relational.relplot", "<builtin>.zip", "<builtin>.dict", "matplotlib.markers.MarkerStyle"], "tests.test_relational.TestRelationalPlotter.test_relplot_stringy_numerics": ["seaborn.relational.relplot", "numpy.testing.assert_array_equal", "numpy.ma.getmask"], "numpy.ma.getmask": [], "tests.test_relational.TestRelationalPlotter.test_relplot_legend": ["seaborn.relational.relplot", "<builtin>.len", "numpy.sort", "numpy.testing.assert_array_equal", "seaborn.palettes.color_palette", "<builtin>.zip", "<builtin>.dict"], "tests.test_relational.TestRelationalPlotter.test_relplot_unshared_axis_labels": ["seaborn.relational.relplot", "<builtin>.dict"], "tests.test_relational.TestRelationalPlotter.test_relplot_data": ["<builtin>.set", "seaborn.relational.relplot", "numpy.testing.assert_array_equal"], "tests.test_relational.TestRelationalPlotter.test_facet_variable_collision": ["seaborn.relational.relplot", "<builtin>.len"], "tests.test_relational.TestRelationalPlotter.test_ax_kwarg_removal": ["pytest.warns", "seaborn.relational.relplot", "<builtin>.len", "matplotlib.pyplot.subplots"], "tests.test_relational.TestRelationalPlotter.test_legend_has_no_offset": ["<builtin>.float", "seaborn.relational.relplot"], "tests.test_relational.TestLinePlotter": ["<builtin>.staticmethod"], "tests.test_relational.TestLinePlotter.get_last_color": ["matplotlib.colors.to_rgba"], "tests.test_relational.TestLinePlotter.test_legend_data": ["<builtin>.float", "<builtin>.len", "pytest.raises", "matplotlib.pyplot.subplots", "numpy.tile", "numpy.arange", "<builtin>.dict", "seaborn.relational._LinePlotter", "matplotlib.colors.LogNorm", "<builtin>.str", "numpy.random.randn"], "seaborn.relational._LinePlotter": [], "tests.test_relational.TestLinePlotter.test_plot": ["<builtin>.len", "pytest.raises", "matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "itertools.product", "<builtin>.zip", "<builtin>.dict", "seaborn.relational._LinePlotter", "numpy.allclose", "<builtin>.isinstance"], "tests.test_relational.TestLinePlotter.test_non_aggregated_data": ["numpy.testing.assert_array_equal", "seaborn.relational.lineplot"], "seaborn.relational.lineplot": [], "tests.test_relational.TestLinePlotter.test_orient": ["numpy.testing.assert_array_almost_equal", "<builtin>.len", "pytest.raises", "numpy.testing.assert_array_equal", "<builtin>.sorted", "seaborn.relational.lineplot", "<builtin>.enumerate", "numpy.unique", "matplotlib.pyplot.figure"], "tests.test_relational.TestLinePlotter.test_log_scale": ["numpy.testing.assert_array_equal", "seaborn.relational.lineplot", "matplotlib.pyplot.subplots"], "tests.test_relational.TestLinePlotter.test_axis_labels": ["seaborn.relational._LinePlotter", "<builtin>.dict", "matplotlib.pyplot.subplots"], "tests.test_relational.TestLinePlotter.test_matplotlib_kwargs": ["<builtin>.getattr", "seaborn.relational.lineplot"], "tests.test_relational.TestLinePlotter.test_nonmapped_dashes": ["seaborn.relational.lineplot"], "tests.test_relational.TestLinePlotter.test_lineplot_axes": ["seaborn.relational.lineplot", "matplotlib.pyplot.subplots"], "tests.test_relational.TestLinePlotter.test_lineplot_vs_relplot": ["seaborn.relational.relplot", "matplotlib.colors.same_color", "numpy.testing.assert_array_equal", "seaborn.relational.lineplot", "<builtin>.zip"], "tests.test_relational.TestLinePlotter.test_lineplot_smoke": ["seaborn.relational.lineplot", "matplotlib.pyplot.subplots"], "tests.test_relational.TestLinePlotter.test_ci_deprecation": ["seaborn._testing.assert_plots_equal", "matplotlib.pyplot.figure", "pytest.warns", "seaborn.relational.lineplot"], "tests.test_relational.TestScatterPlotter": ["<builtin>.staticmethod"], "tests.test_relational.TestScatterPlotter.get_last_color": ["<builtin>.len", "numpy.unique", "matplotlib.colors.to_rgba"], "tests.test_relational.TestScatterPlotter.test_color": ["matplotlib.pyplot.figure", "<builtin>.super", "tests.test_relational.TestScatterPlotter.get_last_color", "matplotlib.colors.to_rgba"], "tests.test_relational.TestScatterPlotter.test_legend_data": ["tests.test_relational.Helpers.paths_equal", "matplotlib.colors.same_color", "<builtin>.len", "matplotlib.pyplot.subplots", "<builtin>.str", "pytest.raises", "numpy.tile", "numpy.arange", "seaborn.relational._ScatterPlotter", "<builtin>.dict", "matplotlib.markers.MarkerStyle", "numpy.random.randn"], "seaborn.relational._ScatterPlotter": [], "tests.test_relational.TestScatterPlotter.test_plot": ["tests.test_relational.Helpers.paths_equal", "matplotlib.colors.same_color", "matplotlib.pyplot.subplots", "numpy.testing.assert_array_equal", "seaborn.relational._ScatterPlotter", "<builtin>.dict"], "tests.test_relational.TestScatterPlotter.test_axis_labels": ["seaborn.relational._ScatterPlotter", "<builtin>.dict", "matplotlib.pyplot.subplots"], "tests.test_relational.TestScatterPlotter.test_scatterplot_axes": ["seaborn.relational.scatterplot", "matplotlib.pyplot.subplots"], "seaborn.relational.scatterplot": [], "tests.test_relational.TestScatterPlotter.test_literal_attribute_vectors": ["seaborn.relational.scatterplot", "numpy.testing.assert_array_equal", "matplotlib.pyplot.subplots"], "tests.test_relational.TestScatterPlotter.test_supplied_color_array": ["seaborn._compat.get_colormap", "seaborn.relational.scatterplot", "numpy.testing.assert_array_equal", "matplotlib.pyplot.figure", "seaborn.utils._draw_figure", "matplotlib.colors.Normalize"], "tests.test_relational.TestScatterPlotter.test_hue_order": ["seaborn.relational.scatterplot", "seaborn._oldcore.categorical_order"], "tests.test_relational.TestScatterPlotter.test_linewidths": ["seaborn.relational.scatterplot", "matplotlib.pyplot.subplots"], "tests.test_relational.TestScatterPlotter.test_size_norm_extrapolation": ["matplotlib.pyplot.subplots", "seaborn.relational.scatterplot", "numpy.arange", "<builtin>.zip", "<builtin>.dict", "<builtin>.set", "numpy.allclose"], "tests.test_relational.TestScatterPlotter.test_datetime_scale": ["seaborn.relational.scatterplot", "numpy.datetime64"], "tests.test_relational.TestScatterPlotter.test_unfilled_marker_edgecolor_warning": ["warnings.simplefilter", "seaborn.relational.scatterplot", "warnings.catch_warnings"], "tests.test_relational.TestScatterPlotter.test_scatterplot_vs_relplot": ["tests.test_relational.Helpers.paths_equal", "seaborn.relational.relplot", "seaborn.relational.scatterplot", "numpy.testing.assert_array_equal", "<builtin>.zip"], "tests.test_relational.TestScatterPlotter.test_scatterplot_smoke": ["seaborn.relational.scatterplot", "matplotlib.pyplot.subplots"], "tests.test_axisgrid": ["numpy.random.RandomState"], "tests.test_axisgrid.TestFacetGrid": ["numpy.repeat", "<builtin>.list", "numpy.tile", "<builtin>.dict", "pandas.DataFrame"], "tests.test_axisgrid.TestFacetGrid.test_self_data": ["seaborn.axisgrid.FacetGrid"], "tests.test_axisgrid.TestFacetGrid.test_self_figure": ["seaborn.axisgrid.FacetGrid", "<builtin>.isinstance"], "tests.test_axisgrid.TestFacetGrid.test_self_axes": ["seaborn.axisgrid.FacetGrid", "<builtin>.isinstance"], "tests.test_axisgrid.TestFacetGrid.test_axes_array_size": ["seaborn.axisgrid.FacetGrid", "<builtin>.isinstance"], "tests.test_axisgrid.TestFacetGrid.test_single_axes": ["seaborn.axisgrid.FacetGrid", "<builtin>.isinstance", "pytest.raises"], "tests.test_axisgrid.TestFacetGrid.test_col_wrap": ["seaborn.axisgrid.FacetGrid", "<builtin>.list", "pytest.raises", "<builtin>.len"], "tests.test_axisgrid.TestFacetGrid.test_normal_axes": ["seaborn.axisgrid.FacetGrid", "numpy.empty", "numpy.testing.assert_array_equal"], "tests.test_axisgrid.TestFacetGrid.test_wrapped_axes": ["seaborn.axisgrid.FacetGrid", "numpy.empty", "numpy.testing.assert_array_equal", "numpy.array"], "tests.test_axisgrid.TestFacetGrid.test_axes_dict": ["seaborn.axisgrid.FacetGrid", "<builtin>.list", "<builtin>.isinstance", "<builtin>.zip"], "tests.test_axisgrid.TestFacetGrid.test_figure_size": ["seaborn.axisgrid.FacetGrid", "numpy.testing.assert_array_equal"], "tests.test_axisgrid.TestFacetGrid.test_figure_size_with_legend": ["seaborn.axisgrid.FacetGrid", "numpy.testing.assert_array_equal"], "tests.test_axisgrid.TestFacetGrid.test_legend_data": ["seaborn._testing.assert_colors_equal", "<builtin>.len", "<builtin>.sorted", "seaborn.axisgrid.FacetGrid", "seaborn.palettes.color_palette", "<builtin>.zip"], "tests.test_axisgrid.TestFacetGrid.test_legend_data_missing_level": ["seaborn._testing.assert_colors_equal", "<builtin>.len", "<builtin>.list", "<builtin>.sorted", "seaborn.axisgrid.FacetGrid", "seaborn.palettes.color_palette", "<builtin>.zip"], "tests.test_axisgrid.TestFacetGrid.test_get_boolean_legend_data": ["<builtin>.map", "seaborn._testing.assert_colors_equal", "<builtin>.len", "<builtin>.list", "seaborn.axisgrid.FacetGrid", "seaborn.palettes.color_palette", "seaborn._oldcore.categorical_order", "<builtin>.zip"], "tests.test_axisgrid.TestFacetGrid.test_legend_tuples": ["seaborn.axisgrid.FacetGrid", "<builtin>.zip", "<builtin>.dict"], "tests.test_axisgrid.TestFacetGrid.test_legend_options": ["seaborn.axisgrid.FacetGrid"], "tests.test_axisgrid.TestFacetGrid.test_legendout_with_colwrap": ["seaborn.axisgrid.FacetGrid"], "tests.test_axisgrid.TestFacetGrid.test_legend_tight_layout": ["seaborn.axisgrid.FacetGrid"], "tests.test_axisgrid.TestFacetGrid.test_subplot_kws": ["seaborn.axisgrid.FacetGrid", "<builtin>.type", "<builtin>.str", "<builtin>.dict"], "tests.test_axisgrid.TestFacetGrid.test_gridspec_kws": ["seaborn.axisgrid.FacetGrid", "<builtin>.dict"], "tests.test_axisgrid.TestFacetGrid.test_gridspec_kws_col_wrap": ["seaborn.axisgrid.FacetGrid", "pytest.warns", "<builtin>.dict"], "tests.test_axisgrid.TestFacetGrid.test_data_generator": ["seaborn.axisgrid.FacetGrid", "<builtin>.list", "<builtin>.len"], "tests.test_axisgrid.TestFacetGrid.test_map": ["seaborn.axisgrid.FacetGrid", "numpy.testing.assert_array_equal", "<builtin>.len"], "tests.test_axisgrid.TestFacetGrid.test_map_dataframe": ["seaborn.axisgrid.FacetGrid", "numpy.testing.assert_array_equal", "<builtin>.len"], "tests.test_axisgrid.TestFacetGrid.test_map_dataframe.plot": ["matplotlib.pyplot.plot"], "matplotlib.pyplot.plot": [], "tests.test_axisgrid.TestFacetGrid.test_set": ["seaborn.axisgrid.FacetGrid", "numpy.testing.assert_array_equal"], "tests.test_axisgrid.TestFacetGrid.test_set_titles": ["seaborn.axisgrid.FacetGrid"], "tests.test_axisgrid.TestFacetGrid.test_set_titles_margin_titles": ["seaborn.axisgrid.FacetGrid", "<builtin>.len"], "tests.test_axisgrid.TestFacetGrid.test_set_ticklabels": ["numpy.testing.assert_array_equal", "seaborn.axisgrid.FacetGrid", "numpy.arange", "pandas.DataFrame", "<builtin>.int"], "tests.test_axisgrid.TestFacetGrid.test_set_axis_labels": ["seaborn.axisgrid.FacetGrid", "numpy.testing.assert_array_equal"], "tests.test_axisgrid.TestFacetGrid.test_axis_lims": ["seaborn.axisgrid.FacetGrid"], "tests.test_axisgrid.TestFacetGrid.test_data_orders": ["seaborn.axisgrid.FacetGrid", "<builtin>.list"], "tests.test_axisgrid.TestFacetGrid.test_palette": ["seaborn.rcmod.set", "<builtin>.len", "<builtin>.list", "seaborn.axisgrid.FacetGrid", "seaborn.palettes.color_palette", "<builtin>.dict"], "tests.test_axisgrid.TestFacetGrid.test_hue_kws": ["seaborn.axisgrid.FacetGrid", "<builtin>.zip", "<builtin>.dict"], "tests.test_axisgrid.TestFacetGrid.test_dropna": ["pandas.Series", "seaborn.axisgrid.FacetGrid", "numpy.tile", "numpy.arange"], "tests.test_axisgrid.TestFacetGrid.test_categorical_column_missing_categories": ["seaborn.axisgrid.FacetGrid", "<builtin>.len"], "tests.test_axisgrid.TestFacetGrid.test_categorical_warning": ["seaborn.axisgrid.FacetGrid", "pytest.warns"], "tests.test_axisgrid.TestFacetGrid.test_refline": ["seaborn.axisgrid.FacetGrid", "numpy.testing.assert_array_equal", "<builtin>.len", "numpy.array"], "tests.test_axisgrid.TestFacetGrid.test_apply": ["seaborn.axisgrid.FacetGrid"], "tests.test_axisgrid.TestFacetGrid.test_apply.f": [], "tests.test_axisgrid.TestFacetGrid.test_pipe": ["seaborn.axisgrid.FacetGrid"], "tests.test_axisgrid.TestFacetGrid.test_pipe.f": [], "tests.test_axisgrid.TestFacetGrid.test_tick_params": ["seaborn.axisgrid.FacetGrid", "<builtin>.getattr", "matplotlib.colors.same_color"], "tests.test_axisgrid.TestPairGrid": ["<builtin>.map", "<builtin>.sum", "numpy.repeat", "numpy.random.RandomState", "<builtin>.list", "pytest.mark.parametrize", "<builtin>.dict", "pandas.DataFrame"], "tests.test_axisgrid.TestPairGrid.test_self_data": ["seaborn.axisgrid.PairGrid"], "seaborn.axisgrid.PairGrid": [], "tests.test_axisgrid.TestPairGrid.test_ignore_datelike_data": ["pandas.testing.assert_frame_equal", "<builtin>.len", "pandas.util.testing.assert_frame_equal", "pandas.date_range", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_self_figure": ["<builtin>.isinstance", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_self_axes": ["<builtin>.isinstance", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_default_axes": ["seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_specific_square_axes": ["<builtin>.len", "seaborn.axisgrid.PairGrid", "<builtin>.list"], "tests.test_axisgrid.TestPairGrid.test_remove_hue_from_default": ["seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_specific_nonsquare_axes": ["<builtin>.len", "seaborn.axisgrid.PairGrid", "<builtin>.list"], "tests.test_axisgrid.TestPairGrid.test_corner": ["<builtin>.len", "<builtin>.sum", "numpy.diag", "<builtin>.range", "seaborn.axisgrid.PairGrid"], "numpy.diag": [], "tests.test_axisgrid.TestPairGrid.test_size": ["numpy.testing.assert_array_equal", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_empty_grid": ["pytest.raises", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_map": ["numpy.testing.assert_array_equal", "seaborn.axisgrid.PairGrid", "<builtin>.enumerate"], "tests.test_axisgrid.TestPairGrid.test_map_nonsquare": ["numpy.testing.assert_array_equal", "seaborn.axisgrid.PairGrid", "<builtin>.enumerate"], "tests.test_axisgrid.TestPairGrid.test_map_lower": ["<builtin>.len", "numpy.tril_indices_from", "numpy.testing.assert_array_equal", "numpy.triu_indices_from", "<builtin>.zip", "seaborn.axisgrid.PairGrid"], "numpy.tril_indices_from": [], "tests.test_axisgrid.TestPairGrid.test_map_upper": ["<builtin>.len", "numpy.tril_indices_from", "numpy.triu_indices_from", "numpy.testing.assert_array_equal", "<builtin>.zip", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_map_mixed_funcsig": ["numpy.triu_indices_from", "<builtin>.zip", "seaborn.axisgrid.PairGrid", "numpy.testing.assert_array_equal"], "tests.test_axisgrid.TestPairGrid.test_map_diag": ["<builtin>.len", "<builtin>.zip", "seaborn.axisgrid.PairGrid", "pytest.approx"], "tests.test_axisgrid.TestPairGrid.test_map_diag_rectangular": ["<builtin>.len", "pytest.approx", "numpy.testing.assert_array_equal", "<builtin>.enumerate", "<builtin>.zip", "<builtin>.set", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_map_diag_color": ["seaborn._testing.assert_colors_equal", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_map_diag_palette": ["seaborn._testing.assert_colors_equal", "<builtin>.len", "seaborn.palettes.color_palette", "<builtin>.zip", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_map_diag_and_offdiag": ["<builtin>.len", "numpy.tril_indices_from", "numpy.triu_indices_from", "numpy.testing.assert_array_equal", "<builtin>.zip", "seaborn.axisgrid.PairGrid", "numpy.diag_indices_from"], "tests.test_axisgrid.TestPairGrid.test_diag_sharey": ["seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_map_diag_matplotlib": ["<builtin>.len", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_palette": ["seaborn.rcmod.set", "<builtin>.len", "<builtin>.list", "seaborn.palettes.color_palette", "<builtin>.dict", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_hue_kws": ["<builtin>.list", "<builtin>.zip", "seaborn.axisgrid.PairGrid", "<builtin>.dict"], "tests.test_axisgrid.TestPairGrid.test_hue_order": ["<builtin>.list", "numpy.testing.assert_array_equal", "matplotlib.pyplot.close", "<builtin>.zip", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_hue_order_missing_level": ["<builtin>.list", "numpy.testing.assert_array_equal", "matplotlib.pyplot.close", "<builtin>.zip", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_hue_in_map": ["<builtin>.set", "<builtin>.len", "<builtin>.map", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_nondefault_index": ["numpy.testing.assert_array_equal", "seaborn.axisgrid.PairGrid", "<builtin>.enumerate"], "tests.test_axisgrid.TestPairGrid.test_dropna": ["<builtin>.len", "<builtin>.sum", "<builtin>.enumerate", "numpy.arange", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_histplot_legend": ["<builtin>.len", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_pairplot": ["seaborn.axisgrid.pairplot", "<builtin>.len", "numpy.tril_indices_from", "numpy.triu_indices_from", "numpy.testing.assert_array_equal", "<builtin>.zip", "numpy.diag_indices_from"], "seaborn.axisgrid.pairplot": [], "tests.test_axisgrid.TestPairGrid.test_pairplot_reg": ["seaborn.axisgrid.pairplot", "<builtin>.len", "numpy.tril_indices_from", "numpy.triu_indices_from", "numpy.testing.assert_array_equal", "<builtin>.zip", "numpy.diag_indices_from"], "tests.test_axisgrid.TestPairGrid.test_pairplot_reg_hue": ["seaborn.axisgrid.pairplot", "numpy.array_equal"], "tests.test_axisgrid.TestPairGrid.test_pairplot_diag_kde": ["seaborn.axisgrid.pairplot", "<builtin>.len", "numpy.tril_indices_from", "numpy.triu_indices_from", "numpy.testing.assert_array_equal", "<builtin>.zip", "numpy.diag_indices_from"], "tests.test_axisgrid.TestPairGrid.test_pairplot_kde": ["seaborn._testing.assert_plots_equal", "seaborn.axisgrid.pairplot", "seaborn.distributions.kdeplot", "matplotlib.pyplot.subplots"], "tests.test_axisgrid.TestPairGrid.test_pairplot_hist": ["seaborn.axisgrid.pairplot", "seaborn.distributions.histplot", "seaborn._testing.assert_plots_equal", "matplotlib.pyplot.subplots"], "tests.test_axisgrid.TestPairGrid.test_pairplot_markers": ["seaborn.axisgrid.pairplot", "pytest.warns"], "tests.test_axisgrid.TestPairGrid.test_corner_despine": ["seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_corner_set": ["seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestPairGrid.test_legend": ["seaborn.axisgrid.pairplot", "<builtin>.isinstance"], "tests.test_axisgrid.TestPairGrid.test_tick_params": ["matplotlib.colors.same_color", "<builtin>.getattr", "seaborn.axisgrid.PairGrid"], "tests.test_axisgrid.TestJointGrid": ["<builtin>.map", "<builtin>.sum", "pytest.mark.parametrize", "numpy.random.RandomState", "<builtin>.dict", "pandas.DataFrame"], "tests.test_axisgrid.TestJointGrid.test_margin_grid_from_lists": ["numpy.testing.assert_array_equal", "seaborn.axisgrid.JointGrid"], "seaborn.axisgrid.JointGrid": [], "tests.test_axisgrid.TestJointGrid.test_margin_grid_from_arrays": ["numpy.testing.assert_array_equal", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_margin_grid_from_series": ["numpy.testing.assert_array_equal", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_margin_grid_from_dataframe": ["numpy.testing.assert_array_equal", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_margin_grid_from_dataframe_bad_variable": ["seaborn.axisgrid.JointGrid", "pytest.raises"], "tests.test_axisgrid.TestJointGrid.test_margin_grid_axis_labels": ["seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_dropna": ["pandas.notnull", "<builtin>.len", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_axlims": ["seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_marginal_ticks": ["<builtin>.sum", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_bivariate_plot": ["numpy.testing.assert_array_equal", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_univariate_plot": ["numpy.testing.assert_array_equal", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_univariate_plot_distplot": ["pytest.warns", "<builtin>.len", "<builtin>.zip", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_univariate_plot_matplotlib": ["<builtin>.len", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_plot": ["numpy.testing.assert_array_equal", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_space": ["seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_hue": ["seaborn.relational.scatterplot", "seaborn.distributions.histplot", "seaborn._testing.assert_plots_equal", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointGrid.test_refline": ["<builtin>.len", "numpy.testing.assert_array_equal", "seaborn.axisgrid.JointGrid", "numpy.array"], "tests.test_axisgrid.TestJointPlot": ["<builtin>.map", "<builtin>.sum", "numpy.random.RandomState", "<builtin>.dict", "pandas.DataFrame"], "tests.test_axisgrid.TestJointPlot.test_scatter": ["seaborn.axisgrid.jointplot", "numpy.testing.assert_array_almost_equal", "<builtin>.len", "numpy.histogram_bin_edges", "numpy.testing.assert_array_equal"], "seaborn.axisgrid.jointplot": [], "tests.test_axisgrid.TestJointPlot.test_scatter_hue": ["seaborn._testing.assert_plots_equal", "seaborn.axisgrid.jointplot", "seaborn.relational.scatterplot", "seaborn.distributions.kdeplot", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointPlot.test_reg": ["seaborn.axisgrid.jointplot", "numpy.testing.assert_array_equal", "<builtin>.len"], "tests.test_axisgrid.TestJointPlot.test_resid": ["seaborn.axisgrid.jointplot"], "tests.test_axisgrid.TestJointPlot.test_hist": ["seaborn._testing.assert_plots_equal", "seaborn.axisgrid.jointplot", "seaborn.distributions.histplot", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointPlot.test_hex": ["seaborn.axisgrid.jointplot"], "tests.test_axisgrid.TestJointPlot.test_kde": ["seaborn._testing.assert_plots_equal", "seaborn.axisgrid.jointplot", "seaborn.distributions.kdeplot", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointPlot.test_kde_hue": ["seaborn._testing.assert_plots_equal", "seaborn.axisgrid.jointplot", "seaborn.distributions.kdeplot", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointPlot.test_color": ["seaborn.axisgrid.jointplot", "seaborn._testing.assert_colors_equal"], "tests.test_axisgrid.TestJointPlot.test_palette": ["seaborn._testing.assert_plots_equal", "seaborn.axisgrid.jointplot", "seaborn.relational.scatterplot", "<builtin>.dict", "seaborn.distributions.kdeplot", "seaborn.axisgrid.JointGrid"], "tests.test_axisgrid.TestJointPlot.test_hex_customise": ["seaborn.axisgrid.jointplot", "<builtin>.len", "<builtin>.dict"], "tests.test_axisgrid.TestJointPlot.test_bad_kind": ["seaborn.axisgrid.jointplot", "pytest.raises"], "tests.test_axisgrid.TestJointPlot.test_unsupported_hue_kind": ["seaborn.axisgrid.jointplot", "pytest.raises"], "tests.test_axisgrid.TestJointPlot.test_leaky_dict": ["seaborn.axisgrid.jointplot"], "tests.test_axisgrid.TestJointPlot.test_distplot_kwarg_warning": ["pytest.warns", "<builtin>.dict", "seaborn.axisgrid.jointplot"], "tests.test_axisgrid.TestJointPlot.test_ax_warning": ["seaborn.axisgrid.jointplot", "pytest.warns", "matplotlib.pyplot.gca"], "tests._stats.test_regression": [], "tests._stats.test_regression.TestPolyFit": ["pytest.fixture"], "tests._stats.test_regression.TestPolyFit.df": ["pandas.DataFrame", "<builtin>.dict"], "tests._stats.test_regression.TestPolyFit.test_no_grouper": ["numpy.testing.assert_array_almost_equal", "numpy.linspace", "seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "seaborn._stats.regression.PolyFit", "numpy.zeros"], "seaborn._stats.regression.PolyFit": [], "tests._stats.test_regression.TestPolyFit.test_one_grouper": ["numpy.linspace", "seaborn._core.groupby.GroupBy", "numpy.testing.assert_array_equal", "numpy.arange", "seaborn._stats.regression.PolyFit"], "tests._stats.test_regression.TestPolyFit.test_missing_data": ["seaborn._stats.regression.PolyFit", "pandas.testing.assert_frame_equal", "seaborn._core.groupby.GroupBy"], "tests._stats.test_aggregation": [], "tests._stats.test_aggregation.AggregationFixtures": ["pytest.fixture"], "tests._stats.test_aggregation.AggregationFixtures.df": ["pandas.DataFrame", "<builtin>.dict"], "tests._stats.test_aggregation.AggregationFixtures.get_groupby": ["seaborn._core.groupby.GroupBy"], "tests._stats.test_aggregation.TestAgg.test_default": ["pandas.testing.assert_frame_equal", "seaborn._stats.aggregation.Agg", "tests._stats.test_aggregation.AggregationFixtures.get_groupby"], "tests._stats.test_aggregation.TestAgg.test_default_multi": ["pandas.testing.assert_frame_equal", "<builtin>.sorted", "tests._stats.test_aggregation.AggregationFixtures.get_groupby", "seaborn._stats.aggregation.Agg", "pandas.MultiIndex.from_product"], "tests._stats.test_aggregation.TestAgg": ["pytest.mark.parametrize"], "tests._stats.test_aggregation.TestAgg.test_func": ["pandas.testing.assert_frame_equal", "seaborn._stats.aggregation.Agg", "tests._stats.test_aggregation.AggregationFixtures.get_groupby"], "tests._stats.test_aggregation.TestEst": ["pytest.mark.parametrize"], "tests._stats.test_aggregation.TestEst.test_mean_sd": ["pandas.testing.assert_frame_equal", "seaborn._stats.aggregation.Est", "tests._stats.test_aggregation.AggregationFixtures.get_groupby"], "seaborn._stats.aggregation.Est": [], "tests._stats.test_aggregation.TestEst.test_sd_single_obs": ["pandas.DataFrame", "pandas.testing.assert_frame_equal", "seaborn._stats.aggregation.Est", "tests._stats.test_aggregation.AggregationFixtures.get_groupby"], "tests._stats.test_aggregation.TestEst.test_median_pi": ["pandas.testing.assert_frame_equal", "seaborn._stats.aggregation.Est", "tests._stats.test_aggregation.AggregationFixtures.get_groupby"], "tests._stats.test_aggregation.TestEst.test_seed": ["pandas.testing.assert_frame_equal", "seaborn._stats.aggregation.Est", "tests._stats.test_aggregation.AggregationFixtures.get_groupby"], "tests._stats": [], "tests._stats.test_order": [], "tests._stats.test_order.Fixtures": ["pytest.fixture"], "tests._stats.test_order.Fixtures.df": ["pandas.DataFrame", "<builtin>.dict"], "tests._stats.test_order.Fixtures.get_groupby": ["seaborn._core.groupby.GroupBy"], "tests._stats.test_order.TestPerc.test_int_k": ["seaborn._stats.order.Perc", "numpy.percentile", "numpy.testing.assert_array_equal", "tests._stats.test_order.Fixtures.get_groupby", "matplotlib.percentile"], "seaborn._stats.order.Perc": [], "matplotlib.percentile": [], "tests._stats.test_order.TestPerc.test_list_k": ["seaborn._stats.order.Perc", "numpy.percentile", "numpy.testing.assert_array_equal", "tests._stats.test_order.Fixtures.get_groupby", "matplotlib.percentile"], "tests._stats.test_order.TestPerc.test_orientation": ["seaborn._stats.order.Perc", "numpy.percentile", "numpy.testing.assert_array_equal", "tests._stats.test_order.Fixtures.get_groupby", "matplotlib.percentile"], "tests._stats.test_order.TestPerc.test_method": ["seaborn._stats.order.Perc", "numpy.percentile", "seaborn.utils._version_predates", "numpy.testing.assert_array_equal", "tests._stats.test_order.Fixtures.get_groupby", "matplotlib.percentile"], "tests._stats.test_order.TestPerc.test_grouped": ["seaborn._stats.order.Perc", "numpy.percentile", "<builtin>.len", "numpy.testing.assert_array_equal", "tests._stats.test_order.Fixtures.get_groupby", "matplotlib.percentile"], "tests._stats.test_order.TestPerc.test_with_na": ["seaborn._stats.order.Perc", "numpy.percentile", "numpy.testing.assert_array_equal", "tests._stats.test_order.Fixtures.get_groupby", "matplotlib.percentile"], "tests._stats.test_counting": [], "tests._stats.test_counting.TestCount": ["pytest.fixture"], "tests._stats.test_counting.TestCount.df": ["pandas.DataFrame", "<builtin>.dict"], "tests._stats.test_counting.TestCount.get_groupby": ["seaborn._core.groupby.GroupBy"], "tests._stats.test_counting.TestCount.test_single_grouper": ["numpy.testing.assert_array_equal", "seaborn._stats.counting.Count", "tests._stats.test_counting.TestCount.get_groupby"], "seaborn._stats.counting.Count": [], "tests._stats.test_counting.TestCount.test_multiple_groupers": ["numpy.testing.assert_array_equal", "seaborn._stats.counting.Count", "tests._stats.test_counting.TestCount.get_groupby"], "tests._stats.test_counting.TestHist": ["pytest.fixture"], "tests._stats.test_counting.TestHist.single_args": ["seaborn._core.groupby.GroupBy"], "tests._stats.test_counting.TestHist.triple_args": ["seaborn._core.groupby.GroupBy"], "tests._stats.test_counting.TestHist.test_string_bins": ["numpy.sqrt", "<builtin>.int", "seaborn._stats.counting.Hist", "<builtin>.len"], "seaborn._stats.counting.Hist": [], "tests._stats.test_counting.TestHist.test_int_bins": ["seaborn._stats.counting.Hist"], "tests._stats.test_counting.TestHist.test_array_bins": ["numpy.testing.assert_array_equal", "seaborn._stats.counting.Hist"], "tests._stats.test_counting.TestHist.test_binwidth": ["seaborn._stats.counting.Hist", "pytest.approx"], "tests._stats.test_counting.TestHist.test_binrange": ["seaborn._stats.counting.Hist"], "tests._stats.test_counting.TestHist.test_discrete_bins": ["seaborn._stats.counting.Hist"], "tests._stats.test_counting.TestHist.test_discrete_bins_from_nominal_scale": ["pandas.DataFrame", "seaborn._stats.counting.Hist"], "tests._stats.test_counting.TestHist.test_count_stat": ["seaborn._stats.counting.Hist", "<builtin>.len"], "tests._stats.test_counting.TestHist.test_probability_stat": ["seaborn._stats.counting.Hist"], "tests._stats.test_counting.TestHist.test_proportion_stat": ["seaborn._stats.counting.Hist"], "tests._stats.test_counting.TestHist.test_percent_stat": ["seaborn._stats.counting.Hist"], "tests._stats.test_counting.TestHist.test_density_stat": ["seaborn._stats.counting.Hist"], "tests._stats.test_counting.TestHist.test_frequency_stat": ["seaborn._stats.counting.Hist", "<builtin>.len"], "tests._stats.test_counting.TestHist.test_invalid_stat": ["seaborn._stats.counting.Hist", "pytest.raises"], "tests._stats.test_counting.TestHist.test_cumulative_count": ["seaborn._stats.counting.Hist", "<builtin>.len"], "tests._stats.test_counting.TestHist.test_cumulative_proportion": ["seaborn._stats.counting.Hist"], "tests._stats.test_counting.TestHist.test_cumulative_density": ["seaborn._stats.counting.Hist"], "tests._stats.test_counting.TestHist.test_common_norm_default": ["seaborn._stats.counting.Hist", "pytest.approx"], "tests._stats.test_counting.TestHist.test_common_norm_false": ["seaborn._stats.counting.Hist", "pytest.approx"], "tests._stats.test_counting.TestHist.test_common_norm_subset": ["seaborn._stats.counting.Hist", "pytest.approx"], "tests._stats.test_counting.TestHist.test_common_norm_warning": ["pytest.warns", "seaborn._stats.counting.Hist"], "tests._stats.test_counting.TestHist.test_common_bins_default": ["<builtin>.set", "<builtin>.tuple", "seaborn._stats.counting.Hist", "<builtin>.len"], "tests._stats.test_counting.TestHist.test_common_bins_false": ["<builtin>.set", "<builtin>.tuple", "seaborn._stats.counting.Hist", "<builtin>.len"], "tests._stats.test_counting.TestHist.test_common_bins_subset": ["<builtin>.set", "<builtin>.tuple", "seaborn._stats.counting.Hist", "<builtin>.len"], "tests._stats.test_counting.TestHist.test_common_bins_warning": ["pytest.warns", "seaborn._stats.counting.Hist"], "tests._stats.test_counting.TestHist.test_histogram_single": ["numpy.diff", "numpy.histogram", "seaborn._stats.counting.Hist", "numpy.testing.assert_array_equal"], "tests._stats.test_counting.TestHist.test_histogram_multiple": ["seaborn._stats.counting.Hist", "numpy.histogram_bin_edges", "numpy.histogram", "numpy.testing.assert_array_equal", "numpy.diff"], "tests._stats.test_density": [], "tests._stats.test_density.TestKDE": ["pytest.fixture", "pytest.mark.skipif", "pytest.mark.parametrize"], "tests._stats.test_density.TestKDE.df": ["pandas.DataFrame", "<builtin>.dict"], "tests._stats.test_density.TestKDE.get_groupby": ["seaborn._core.groupby.GroupBy"], "tests._stats.test_density.TestKDE.integrate": ["numpy.diff", "numpy.asarray"], "tests._stats.test_density.TestKDE.test_columns": ["tests._stats.test_density.TestKDE.get_groupby", "<builtin>.list", "seaborn._stats.density.KDE"], "seaborn._stats.density.KDE": [], "tests._stats.test_density.TestKDE.test_gridsize": ["tests._stats.test_density.TestKDE.get_groupby", "numpy.testing.assert_array_equal", "<builtin>.len", "seaborn._stats.density.KDE"], "tests._stats.test_density.TestKDE.test_cut": ["tests._stats.test_density.TestKDE.get_groupby", "pytest.approx", "seaborn._stats.density.KDE"], "tests._stats.test_density.TestKDE.test_common_grid": ["tests._stats.test_density.TestKDE.get_groupby", "numpy.testing.assert_array_equal", "numpy.not_equal", "seaborn._stats.density.KDE"], "numpy.not_equal": [], "tests._stats.test_density.TestKDE.test_common_norm": ["tests._stats.test_density.TestKDE.get_groupby", "numpy.testing.assert_array_almost_equal", "pytest.approx", "seaborn._stats.density.KDE"], "tests._stats.test_density.TestKDE.test_common_norm.<lambda1>": ["tests._stats.test_density.TestKDE.integrate"], "tests._stats.test_density.TestKDE.test_common_norm_variables": ["tests._stats.test_density.TestKDE.get_groupby", "numpy.testing.assert_array_almost_equal", "seaborn._stats.density.KDE"], "tests._stats.test_density.TestKDE.test_common_norm_variables.integrate_by_color_and_sum": [], "tests._stats.test_density.TestKDE.test_common_norm_variables.integrate_by_color_and_sum.<lambda1>": ["tests._stats.test_density.TestKDE.integrate"], "tests._stats.test_density.TestKDE.test_common_input_checks": ["tests._stats.test_density.TestKDE.get_groupby", "pytest.warns", "pytest.raises", "seaborn._stats.density.KDE"], "tests._stats.test_density.TestKDE.test_bw_adjust": ["tests._stats.test_density.TestKDE.get_groupby", "seaborn._stats.density.KDE"], "tests._stats.test_density.TestKDE.test_bw_method_scalar": ["tests._stats.test_density.TestKDE.get_groupby", "seaborn._stats.density.KDE"], "tests._stats.test_density.TestKDE.test_cumulative": ["tests._stats.test_density.TestKDE.get_groupby", "pytest.approx", "seaborn._stats.density.KDE"], "tests._stats.test_density.TestKDE.test_cumulative_requires_scipy": ["pytest.raises", "seaborn._stats.density.KDE"], "tests._stats.test_density.TestKDE.test_singular": ["tests._stats.test_density.TestKDE.get_groupby", "<builtin>.len", "<builtin>.set", "pandas.DataFrame", "pandas.concat", "seaborn._stats.density.KDE"], "pandas.concat": [], "tests._stats.test_density.TestKDE.test_missing": ["tests._stats.test_density.TestKDE.get_groupby", "tests._stats.test_density.TestKDE.integrate", "pytest.approx", "seaborn._stats.density.KDE"], "tests.test_rcmod": [], "tests.test_rcmod.has_verdana": ["matplotlib.font_manager.findfont"], "matplotlib.font_manager.findfont": [], "tests.test_rcmod.RCParamFixtures": ["pytest.fixture"], "tests.test_rcmod.RCParamFixtures.reset_params": ["seaborn.rcmod.reset_orig"], "seaborn.rcmod.reset_orig": [], "tests.test_rcmod.RCParamFixtures.flatten_list": ["<builtin>.map"], "tests.test_rcmod.RCParamFixtures.assert_rc_params": ["matplotlib.rcParamsDefault.items", "numpy.testing.assert_array_equal", "<builtin>.isinstance", "matplotlib.rcParamsOrig.items"], "matplotlib.rcParamsDefault.items": [], "matplotlib.rcParamsOrig.items": [], "tests.test_rcmod.RCParamFixtures.assert_rc_params_equal": ["numpy.testing.assert_array_equal", "<builtin>.isinstance"], "tests.test_rcmod.TestAxesStyle.test_default_return": ["seaborn.rcmod.axes_style", "tests.test_rcmod.RCParamFixtures.assert_rc_params"], "seaborn.rcmod.axes_style": [], "tests.test_rcmod.TestAxesStyle.test_key_usage": ["<builtin>.set", "seaborn.rcmod.axes_style"], "tests.test_rcmod.TestAxesStyle.test_bad_style": ["seaborn.rcmod.axes_style", "pytest.raises"], "tests.test_rcmod.TestAxesStyle.test_rc_override": ["seaborn.rcmod.axes_style"], "tests.test_rcmod.TestAxesStyle.test_set_style": ["seaborn.rcmod.axes_style", "seaborn.rcmod.set_style", "tests.test_rcmod.RCParamFixtures.assert_rc_params"], "seaborn.rcmod.set_style": [], "tests.test_rcmod.TestAxesStyle.test_style_context_manager": ["tests.test_rcmod.TestAxesStyle.test_style_context_manager.func", "seaborn.rcmod.axes_style", "seaborn.rcmod.set_style", "tests.test_rcmod.RCParamFixtures.assert_rc_params"], "tests.test_rcmod.TestAxesStyle.test_style_context_manager.func": ["tests.test_rcmod.RCParamFixtures.assert_rc_params"], "tests.test_rcmod.TestAxesStyle.test_style_context_independence": ["<builtin>.set"], "tests.test_rcmod.TestAxesStyle.test_set_rc": ["seaborn.rcmod.set_theme"], "seaborn.rcmod.set_theme": [], "tests.test_rcmod.TestAxesStyle.test_set_with_palette": ["seaborn.rcmod.set_theme", "seaborn.utils.get_color_cycle", "seaborn.palettes.color_palette", "seaborn.rcmod.reset_orig"], "tests.test_rcmod.TestAxesStyle.test_reset_defaults": ["seaborn.rcmod.set_theme", "seaborn.rcmod.reset_defaults", "tests.test_rcmod.RCParamFixtures.assert_rc_params"], "seaborn.rcmod.reset_defaults": [], "tests.test_rcmod.TestAxesStyle.test_reset_orig": ["seaborn.rcmod.set_theme", "seaborn.rcmod.reset_orig", "tests.test_rcmod.RCParamFixtures.assert_rc_params"], "tests.test_rcmod.TestAxesStyle.test_set_is_alias": ["seaborn.rcmod.set_theme", "tests.test_rcmod.RCParamFixtures.assert_rc_params_equal", "seaborn.rcmod.reset_orig", "matplotlib.rcParams.copy"], "matplotlib.rcParams.copy": [], "tests.test_rcmod.TestPlottingContext.test_default_return": ["seaborn.rcmod.plotting_context", "tests.test_rcmod.RCParamFixtures.assert_rc_params"], "seaborn.rcmod.plotting_context": [], "tests.test_rcmod.TestPlottingContext.test_key_usage": ["<builtin>.set", "seaborn.rcmod.plotting_context"], "tests.test_rcmod.TestPlottingContext.test_bad_context": ["seaborn.rcmod.plotting_context", "pytest.raises"], "tests.test_rcmod.TestPlottingContext.test_font_scale": ["seaborn.rcmod.plotting_context"], "tests.test_rcmod.TestPlottingContext.test_rc_override": ["seaborn.rcmod.plotting_context"], "tests.test_rcmod.TestPlottingContext.test_set_context": ["seaborn.rcmod.set_context", "seaborn.rcmod.plotting_context", "tests.test_rcmod.RCParamFixtures.assert_rc_params"], "seaborn.rcmod.set_context": [], "tests.test_rcmod.TestPlottingContext.test_context_context_manager": ["tests.test_rcmod.TestPlottingContext.test_context_context_manager.func", "seaborn.rcmod.set_context", "seaborn.rcmod.plotting_context", "tests.test_rcmod.RCParamFixtures.assert_rc_params"], "tests.test_rcmod.TestPlottingContext.test_context_context_manager.func": ["tests.test_rcmod.RCParamFixtures.assert_rc_params"], "tests.test_rcmod.TestPalette.test_set_palette": ["seaborn.utils.get_color_cycle", "seaborn.palettes.color_palette", "matplotlib.colors.same_color", "seaborn.rcmod.set_palette"], "tests.test_rcmod.TestFonts": ["tests.test_rcmod.has_verdana", "pytest.mark.skipif"], "tests.test_rcmod.TestFonts.test_set_font": ["seaborn.rcmod.set_theme", "matplotlib.pyplot.subplots"], "tests.test_rcmod.TestFonts.test_set_serif_font": ["seaborn.rcmod.set_theme", "matplotlib.pyplot.subplots"], "tests.test_rcmod.TestFonts.test_different_sans_serif": ["seaborn.rcmod.set_theme", "seaborn.rcmod.set_style", "matplotlib.pyplot.subplots"], "tests.test_decorators": [], "tests.test_decorators.test_share_init_params_with_map": ["inspect.signature", "tests.test_decorators.test_share_init_params_with_map.Thingie.map"], "tests.test_decorators.test_share_init_params_with_map.Thingie.map": ["tests.test_decorators.test_share_init_params_with_map.Thingie.__init__"], "tests.test_decorators.test_share_init_params_with_map.Thingie.__init__": [], "inspect.signature": [], "tests._marks.test_area": [], "tests._marks.test_area.TestArea.test_single_defaults": ["seaborn._core.plot.Plot", "seaborn._marks.area.Area", "numpy.testing.assert_array_equal", "matplotlib.colors.to_rgba"], "seaborn._marks.area.Area": [], "tests._marks.test_area.TestArea.test_set_properties": ["seaborn._core.plot.Plot", "seaborn._marks.area.Area", "numpy.testing.assert_array_equal", "matplotlib.colors.to_rgba"], "tests._marks.test_area.TestArea.test_mapped_properties": ["matplotlib.colors.to_rgba_array", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "<builtin>.enumerate", "seaborn._marks.area.Area"], "tests._marks.test_area.TestArea.test_unfilled": ["seaborn._core.plot.Plot", "seaborn._marks.area.Area", "matplotlib.colors.to_rgba"], "tests._marks.test_area.TestBand.test_range": ["seaborn._marks.area.Band", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal"], "seaborn._marks.area.Band": [], "tests._marks.test_area.TestBand.test_auto_range": ["seaborn._marks.area.Band", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal"], "tests._marks.test_text": [], "tests._marks.test_text.TestText.get_texts": ["<builtin>.list", "<builtin>.isinstance"], "tests._marks.test_text.TestText.test_simple": ["seaborn._marks.text.Text", "<builtin>.list", "seaborn._core.plot.Plot", "<builtin>.enumerate", "tests._marks.test_text.TestText.get_texts"], "seaborn._marks.text.Text": [], "tests._marks.test_text.TestText.test_set_properties": ["seaborn._marks.text.Text", "<builtin>.list", "seaborn._core.plot.Plot", "<builtin>.enumerate", "matplotlib.colors.to_rgba", "tests._marks.test_text.TestText.get_texts"], "tests._marks.test_text.TestText.test_mapped_properties": ["<builtin>.list", "tests._marks.test_text.TestText.get_texts", "seaborn._marks.text.Text", "seaborn._core.plot.Plot"], "tests._marks.test_text.TestText.test_mapped_alignment": ["seaborn._core.plot.Plot", "tests._marks.test_text.TestText.get_texts", "seaborn._marks.text.Text"], "tests._marks.test_text.TestText.test_identity_fontsize": ["seaborn._marks.text.Text", "<builtin>.list", "seaborn._core.plot.Plot", "<builtin>.enumerate", "tests._marks.test_text.TestText.get_texts"], "tests._marks.test_text.TestText.test_offset_centered": ["numpy.testing.assert_array_almost_equal", "seaborn._marks.text.Text", "<builtin>.list", "seaborn._core.plot.Plot", "tests._marks.test_text.TestText.get_texts"], "tests._marks.test_text.TestText.test_offset_valign": ["numpy.testing.assert_array_almost_equal", "seaborn._marks.text.Text", "<builtin>.list", "seaborn._core.plot.Plot", "tests._marks.test_text.TestText.get_texts", "numpy.zeros"], "tests._marks.test_text.TestText.test_offset_halign": ["numpy.testing.assert_array_almost_equal", "seaborn._marks.text.Text", "<builtin>.list", "seaborn._core.plot.Plot", "tests._marks.test_text.TestText.get_texts", "numpy.zeros"], "tests._marks.test_dot": ["pytest.fixture"], "tests._marks.test_dot.default_palette": ["seaborn.palettes.color_palette"], "tests._marks.test_dot.DotBase.check_offsets": ["numpy.testing.assert_array_equal"], "tests._marks.test_dot.DotBase.check_colors": ["matplotlib.colors.to_rgba_array", "numpy.testing.assert_array_equal", "<builtin>.getattr"], "tests._marks.test_dot.TestDot.test_simple": ["tests._marks.test_dot.DotBase.check_colors", "tests._marks.test_dot.DotBase.check_offsets", "seaborn._core.plot.Plot", "seaborn._marks.dot.Dot"], "tests._marks.test_dot.TestDot.test_filled_unfilled_mix": ["tests._marks.test_dot.DotBase.check_offsets", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "tests._marks.test_dot.DotBase.check_colors", "matplotlib.colors.to_rgba", "seaborn._marks.dot.Dot"], "tests._marks.test_dot.TestDot.test_missing_coordinate_data": ["<builtin>.float", "tests._marks.test_dot.DotBase.check_offsets", "seaborn._core.plot.Plot", "seaborn._marks.dot.Dot"], "tests._marks.test_dot.TestDot": ["pytest.mark.parametrize"], "tests._marks.test_dot.TestDot.test_missing_semantic_data": ["<builtin>.float", "tests._marks.test_dot.DotBase.check_offsets", "seaborn._core.plot.Plot", "seaborn._marks.dot.Dot"], "tests._marks.test_dot.TestDots.test_simple": ["tests._marks.test_dot.DotBase.check_colors", "tests._marks.test_dot.DotBase.check_offsets", "seaborn._core.plot.Plot", "seaborn._marks.dot.Dots"], "seaborn._marks.dot.Dots": [], "tests._marks.test_dot.TestDots.test_set_color": ["tests._marks.test_dot.DotBase.check_colors", "tests._marks.test_dot.DotBase.check_offsets", "seaborn._core.plot.Plot", "seaborn._marks.dot.Dots"], "tests._marks.test_dot.TestDots.test_map_color": ["tests._marks.test_dot.DotBase.check_colors", "tests._marks.test_dot.DotBase.check_offsets", "seaborn._core.plot.Plot", "seaborn._marks.dot.Dots"], "tests._marks.test_dot.TestDots.test_fill": ["tests._marks.test_dot.DotBase.check_colors", "tests._marks.test_dot.DotBase.check_offsets", "seaborn._core.plot.Plot", "seaborn._marks.dot.Dots"], "tests._marks.test_dot.TestDots.test_pointsize": ["tests._marks.test_dot.DotBase.check_offsets", "seaborn._core.plot.Plot", "seaborn._marks.dot.Dots", "numpy.testing.assert_array_equal"], "tests._marks.test_dot.TestDots.test_stroke": ["tests._marks.test_dot.DotBase.check_offsets", "seaborn._core.plot.Plot", "seaborn._marks.dot.Dots", "numpy.testing.assert_array_equal"], "tests._marks.test_dot.TestDots.test_filled_unfilled_mix": ["tests._marks.test_dot.DotBase.check_offsets", "seaborn._marks.dot.Dots", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "tests._marks.test_dot.DotBase.check_colors", "matplotlib.colors.to_rgba"], "tests._marks": [], "tests._marks.test_base": [], "tests._marks.test_base.TestMappable.mark": ["seaborn._marks.base.Mark.__init__"], "seaborn._marks.base.Mappable": [], "tests._marks.test_base.TestMappable.mark.MockMark": ["seaborn._marks.base.Mappable"], "tests._marks.test_base.TestMappable.test_repr": ["<builtin>.str", "seaborn._marks.base.Mappable"], "tests._marks.test_base.TestMappable.test_input_checks": ["pytest.raises", "seaborn._marks.base.Mappable"], "tests._marks.test_base.TestMappable.test_value": ["pandas.RangeIndex", "tests._marks.test_base.TestMappable.mark", "<builtin>.len", "seaborn._marks.base.Mark._resolve", "numpy.full", "numpy.testing.assert_array_equal", "pandas.DataFrame"], "seaborn._marks.base.Mark._resolve": [], "tests._marks.test_base.TestMappable.test_default": ["pandas.RangeIndex", "tests._marks.test_base.TestMappable.mark", "<builtin>.len", "seaborn._marks.base.Mark._resolve", "numpy.full", "numpy.testing.assert_array_equal", "seaborn._marks.base.Mappable", "pandas.DataFrame"], "tests._marks.test_base.TestMappable.test_rcparam": ["pandas.RangeIndex", "tests._marks.test_base.TestMappable.mark", "<builtin>.len", "seaborn._marks.base.Mark._resolve", "numpy.full", "numpy.testing.assert_array_equal", "seaborn._marks.base.Mappable", "pandas.DataFrame"], "tests._marks.test_base.TestMappable.test_depends": ["pandas.RangeIndex", "tests._marks.test_base.TestMappable.mark", "<builtin>.len", "seaborn._marks.base.Mark._resolve", "numpy.full", "numpy.testing.assert_array_equal", "seaborn._marks.base.Mappable", "pandas.DataFrame"], "tests._marks.test_base.TestMappable.test_mapped": ["tests._marks.test_base.TestMappable.mark", "seaborn._marks.base.Mark._resolve", "numpy.testing.assert_array_equal", "numpy.array", "seaborn._marks.base.Mappable", "pandas.DataFrame"], "tests._marks.test_base.TestMappable.test_mapped.f": ["numpy.array"], "tests._marks.test_base.TestMappable.test_color": ["pandas.RangeIndex", "tests._marks.test_base.TestMappable.mark", "matplotlib.colors.to_rgba_array", "<builtin>.len", "numpy.testing.assert_array_equal", "seaborn._marks.base.resolve_color", "matplotlib.colors.to_rgba", "pandas.DataFrame"], "seaborn._marks.base.resolve_color": [], "tests._marks.test_base.TestMappable.test_color_mapped_alpha": ["tests._marks.test_base.TestMappable.mark", "matplotlib.colors.to_rgba_array", "<builtin>.len", "seaborn._marks.base.Mappable", "<builtin>.list", "numpy.testing.assert_array_equal", "seaborn._marks.base.resolve_color", "matplotlib.colors.to_rgba", "pandas.DataFrame"], "tests._marks.test_base.TestMappable.test_color_mapped_alpha.<dict2>.<lambda1>": [], "tests._marks.test_base.TestMappable.test_color_mapped_alpha.<lambda1>": ["numpy.array"], "tests._marks.test_base.TestMappable.test_color_scaled_as_strings": ["tests._marks.test_base.TestMappable.mark", "matplotlib.colors.to_rgba_array", "numpy.testing.assert_array_equal", "pandas.Series", "seaborn._marks.base.resolve_color"], "tests._marks.test_base.TestMappable.test_color_scaled_as_strings.<dict1>.<lambda1>": [], "tests._marks.test_base.TestMappable.test_fillcolor": ["pandas.RangeIndex", "tests._marks.test_base.TestMappable.mark", "matplotlib.colors.to_rgba_array", "<builtin>.len", "seaborn._marks.base.Mappable", "numpy.testing.assert_array_equal", "seaborn._marks.base.resolve_color", "matplotlib.colors.to_rgba", "pandas.DataFrame"], "tests._marks.test_bar": [], "tests._marks.test_bar.TestBar.plot_bars": ["seaborn._core.plot.Plot", "seaborn._marks.bar.Bar"], "seaborn._marks.bar.Bar": [], "tests._marks.test_bar.TestBar.check_bar": ["pytest.approx"], "tests._marks.test_bar.TestBar.test_categorical_positions_vertical": ["tests._marks.test_bar.TestBar.plot_bars", "tests._marks.test_bar.TestBar.check_bar", "<builtin>.enumerate"], "tests._marks.test_bar.TestBar.test_categorical_positions_horizontal": ["tests._marks.test_bar.TestBar.plot_bars", "tests._marks.test_bar.TestBar.check_bar", "<builtin>.enumerate"], "tests._marks.test_bar.TestBar.test_numeric_positions_vertical": ["tests._marks.test_bar.TestBar.plot_bars", "tests._marks.test_bar.TestBar.check_bar", "<builtin>.enumerate"], "tests._marks.test_bar.TestBar.test_numeric_positions_horizontal": ["tests._marks.test_bar.TestBar.plot_bars", "tests._marks.test_bar.TestBar.check_bar", "<builtin>.enumerate"], "tests._marks.test_bar.TestBar.test_set_properties": ["seaborn._core.plot.Plot", "seaborn._marks.bar.Bar", "matplotlib.colors.to_rgba"], "tests._marks.test_bar.TestBar.test_mapped_properties": ["matplotlib.colors.to_rgba", "seaborn._core.plot.Plot", "seaborn._marks.bar.Bar", "<builtin>.enumerate"], "tests._marks.test_bar.TestBar.test_zero_height_skipped": ["seaborn._core.plot.Plot", "<builtin>.len", "seaborn._marks.bar.Bar"], "tests._marks.test_bar.TestBar.test_artist_kws_clip": ["seaborn._core.plot.Plot", "seaborn._marks.bar.Bar"], "tests._marks.test_bar.TestBars": ["pytest.fixture"], "tests._marks.test_bar.TestBars.x": ["pandas.Series"], "tests._marks.test_bar.TestBars.y": ["pandas.Series"], "tests._marks.test_bar.TestBars.color": ["pandas.Series"], "tests._marks.test_bar.TestBars.test_positions": ["<builtin>.len", "pytest.approx", "seaborn._core.plot.Plot", "seaborn._marks.bar.Bars", "<builtin>.enumerate"], "seaborn._marks.bar.Bars": [], "tests._marks.test_bar.TestBars.test_positions_horizontal": ["<builtin>.len", "pytest.approx", "seaborn._core.plot.Plot", "seaborn._marks.bar.Bars", "<builtin>.enumerate"], "tests._marks.test_bar.TestBars.test_width": ["seaborn._core.plot.Plot", "seaborn._marks.bar.Bars", "pytest.approx", "<builtin>.enumerate"], "tests._marks.test_bar.TestBars.test_mapped_color_direct_alpha": ["matplotlib.colors.to_rgba_array", "seaborn._core.plot.Plot", "seaborn._marks.bar.Bars", "numpy.testing.assert_array_equal"], "tests._marks.test_bar.TestBars.test_mapped_edgewidth": ["seaborn._core.plot.Plot", "seaborn._marks.bar.Bars", "numpy.testing.assert_array_equal", "numpy.argsort"], "tests._marks.test_bar.TestBars.test_auto_edgewidth": ["seaborn._core.plot.Plot", "seaborn._marks.bar.Bars", "numpy.arange"], "tests._marks.test_bar.TestBars.test_unfilled": ["matplotlib.colors.to_rgba_array", "<builtin>.len", "seaborn._core.plot.Plot", "seaborn._marks.bar.Bars", "numpy.testing.assert_array_equal"], "tests._marks.test_line": [], "tests._marks.test_line.TestPath.test_xy_data": ["seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "seaborn._marks.line.Path"], "seaborn._marks.line.Path": [], "tests._marks.test_line.TestPath.test_shared_colors_direct": ["seaborn._core.plot.Plot", "seaborn._marks.line.Path", "matplotlib.colors.same_color"], "tests._marks.test_line.TestPath.test_separate_colors_direct": ["seaborn._core.plot.Plot", "seaborn._marks.line.Path", "matplotlib.colors.same_color"], "tests._marks.test_line.TestPath.test_shared_colors_mapped": ["seaborn._core.plot.Plot", "seaborn._marks.line.Path", "matplotlib.colors.same_color", "<builtin>.enumerate"], "tests._marks.test_line.TestPath.test_separate_colors_mapped": ["seaborn._core.plot.Plot", "seaborn._marks.line.Path", "matplotlib.colors.same_color", "<builtin>.enumerate"], "tests._marks.test_line.TestPath.test_color_with_alpha": ["seaborn._core.plot.Plot", "seaborn._marks.line.Path", "matplotlib.colors.same_color"], "tests._marks.test_line.TestPath.test_color_and_alpha": ["seaborn._core.plot.Plot", "seaborn._marks.line.Path", "matplotlib.colors.same_color", "matplotlib.colors.to_rgba"], "tests._marks.test_line.TestPath.test_other_props_direct": ["seaborn._core.plot.Plot", "seaborn._marks.line.Path"], "tests._marks.test_line.TestPath.test_other_props_mapped": ["seaborn._core.plot.Plot", "seaborn._marks.line.Path"], "tests._marks.test_line.TestPath.test_capstyle": ["seaborn._core.plot.Plot", "seaborn._marks.line.Path"], "tests._marks.test_line.TestLine.test_xy_data": ["seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "seaborn._marks.line.Line"], "seaborn._marks.line.Line": [], "tests._marks.test_line.TestPaths.test_xy_data": ["seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "seaborn._marks.line.Paths"], "seaborn._marks.line.Paths": [], "tests._marks.test_line.TestPaths.test_set_properties": ["seaborn._core.plot.Plot", "<builtin>.list", "matplotlib.colors.same_color", "seaborn._marks.line.Paths"], "tests._marks.test_line.TestPaths.test_mapped_properties": ["seaborn._core.plot.Plot", "numpy.array_equal", "seaborn._marks.line.Paths"], "tests._marks.test_line.TestPaths.test_color_with_alpha": ["seaborn._core.plot.Plot", "matplotlib.colors.same_color", "seaborn._marks.line.Paths"], "tests._marks.test_line.TestPaths.test_color_and_alpha": ["matplotlib.colors.to_rgba", "seaborn._core.plot.Plot", "matplotlib.colors.same_color", "seaborn._marks.line.Paths"], "tests._marks.test_line.TestPaths.test_capstyle": ["seaborn._core.plot.Plot", "matplotlib.rc_context", "seaborn._marks.line.Paths"], "tests._marks.test_line.TestLines.test_xy_data": ["seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "seaborn._marks.line.Lines"], "seaborn._marks.line.Lines": [], "tests._marks.test_line.TestLines.test_single_orient_value": ["seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "seaborn._marks.line.Lines"], "tests._marks.test_line.TestRange.test_xy_data": ["seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "seaborn._marks.line.Range", "<builtin>.enumerate"], "seaborn._marks.line.Range": [], "tests._marks.test_line.TestRange.test_auto_range": ["seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "seaborn._marks.line.Range"], "tests._marks.test_line.TestRange.test_mapped_color": ["matplotlib.colors.same_color", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "seaborn._marks.line.Range", "<builtin>.enumerate"], "tests._marks.test_line.TestRange.test_direct_properties": ["seaborn._core.plot.Plot", "matplotlib.colors.same_color", "seaborn._marks.line.Range", "<builtin>.enumerate"], "tests._marks.test_line.TestDash.test_xy_data": ["numpy.testing.assert_array_almost_equal", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "<builtin>.enumerate", "seaborn._marks.line.Dash"], "seaborn._marks.line.Dash": [], "tests._marks.test_line.TestDash.test_xy_data_grouped": ["numpy.testing.assert_array_almost_equal", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "<builtin>.zip", "seaborn._marks.line.Dash"], "tests._marks.test_line.TestDash.test_set_properties": ["seaborn._core.plot.Plot", "seaborn._marks.line.Dash", "matplotlib.colors.same_color"], "tests._marks.test_line.TestDash.test_mapped_properties": ["matplotlib.colors.same_color", "seaborn._core.plot.Plot", "seaborn._marks.line.Dash", "<builtin>.zip"], "tests._marks.test_line.TestDash.test_width": ["numpy.testing.assert_array_almost_equal", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "<builtin>.enumerate", "seaborn._marks.line.Dash"], "tests._marks.test_line.TestDash.test_dodge": ["numpy.testing.assert_array_almost_equal", "seaborn._core.moves.Dodge", "seaborn._core.plot.Plot", "numpy.testing.assert_array_equal", "seaborn._marks.line.Dash"]}