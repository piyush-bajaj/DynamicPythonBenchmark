{"cerberus.tests.test_rule_allow_unknown": [], "cerberus.tests.test_rule_allow_unknown.test_allow_unknown_in_schema": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.assert_success": ["cerberus.tests.test_customization.test_contextual_data_preservation.InheritedValidator.__init__", "<builtin>.AssertionError", "cerberus.Validator.__init__", "cerberus.Validator", "<builtin>.isinstance"], "cerberus.tests.assert_fail": ["cerberus.tests.test_customization.test_contextual_data_preservation.InheritedValidator.__init__", "cerberus.tests.assert_has_errors", "cerberus.Validator.__init__", "<builtin>.len", "cerberus.tests.assert_has_error", "cerberus.Validator", "<builtin>.isinstance"], "cerberus.tests.test_rule_allow_unknown.test_allow_unknown_with_purge_unknown": ["cerberus.Validator", "cerberus.tests.assert_normalized"], "cerberus.Validator": [], "cerberus.tests.assert_normalized": ["cerberus.Validator", "cerberus.tests.assert_success"], "cerberus.tests.test_rule_allow_unknown.test_allow_unknown_with_purge_unknown_subdocument": ["cerberus.Validator", "cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_allow_unknown.test_allow_unknown_without_schema": ["cerberus.Validator"], "cerberus.tests.test_utils": [], "cerberus.tests.test_utils.test_compare_paths": ["cerberus.utils.compare_paths_lt"], "cerberus.utils.compare_paths_lt": [], "cerberus.tests.test_rule_empty": ["pytest.mark.parametrize"], "pytest.mark.parametrize": [], "cerberus.tests.test_rule_empty.test_empty": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_empty.test_empty_skips_regex": [], "cerberus.tests.test_rule_default\u2026": ["pytest.mark.parametrize"], "cerberus.tests.test_rule_default\u2026.must_not_be_called": ["<builtin>.AssertionError"], "<builtin>.AssertionError": [], "cerberus.tests.test_rule_default\u2026.test_default_in_schema_with_missing_value": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_default\u2026.test_default_setters_with_document_reference": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_default\u2026.test_default_setters_with_document_reference.<dict1>.<dict2>.<lambda1>": [], "cerberus.tests.test_rule_default\u2026.test_default_setters_with_document_reference.<dict1>.<dict3>.<lambda1>": [], "cerberus.tests.test_rule_default\u2026.test_default_setters_with_document_reference.<dict1>.<dict4>.<lambda1>": [], "cerberus.tests.test_rule_default\u2026.test_default_setters_with_circular_document_reference": [], "cerberus.tests.test_rule_default\u2026.test_default_setters_with_circular_document_reference.<dict2>.<dict1>.<lambda1>": [], "cerberus.tests.test_rule_default\u2026.test_default_setters_with_circular_document_reference.<dict2>.<dict2>.<lambda1>": [], "cerberus.tests.test_rule_default\u2026.test_default_with_existing_value": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_default\u2026.test_default_with_missing_value": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_default\u2026.test_default_with_non_nullable_field": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_default\u2026.test_default_with_none_as_value_on_nullable_field": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_default\u2026.test_default_with_nullable_field": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_default\u2026.test_default_in_schema_in_allow_unknown": ["cerberus.Validator", "cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_items": [], "cerberus.tests.test_rule_items.test_items": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_items.test_items_with_extra_item": ["cerberus.tests.assert_fail"], "cerberus.tests.test_zzz_validated_schema_cache": [], "cerberus.tests.test_zzz_validated_schema_cache.test_validated_schema_cache": ["cerberus.Validator", "<builtin>.len"], "<builtin>.len": [], "cerberus.tests.test_assorted": ["pytest.mark.parametrize"], "cerberus.tests.test_assorted.test_pkgresources_version": ["<builtin>.__import__", "importlib.reload"], "cerberus.tests.test_assorted.test_pkgresources_version.create_fake_distribution": ["pkg_resources.Distribution"], "pkg_resources.Distribution": [], "<builtin>.__import__": [], "importlib.reload": [], "cerberus.tests.test_assorted.test_version_not_found": ["<builtin>.__import__", "importlib.reload"], "cerberus.tests.test_assorted.test_version_not_found.raise_distribution_not_found": ["pkg_resources.DistributionNotFound"], "pkg_resources.DistributionNotFound": [], "cerberus.tests.test_assorted.test_clear_cache": ["<builtin>.len"], "cerberus.tests.test_assorted.test_docstring": [], "cerberus.tests.test_assorted.test_that_test_fails": ["<builtin>.AssertionError"], "cerberus.tests.test_assorted.test_dynamic_types": ["cerberus.TypeDefinition", "decimal.Decimal", "cerberus.Validator.__init__", "cerberus.Validator", "cerberus.tests.assert_success"], "cerberus.TypeDefinition": [], "decimal.Decimal": [], "cerberus.Validator.types_mapping.copy": [], "cerberus.tests.test_assorted.test_dynamic_types.MyValidator": ["cerberus.Validator.types_mapping.copy"], "cerberus.Validator.__init__": [], "cerberus.tests.test_assorted.test_mro": [], "cerberus.tests.test_assorted.test_mixin_init": ["cerberus.validator_factory"], "cerberus.tests.test_assorted.test_mixin_init.Mixin.__init__": ["<builtin>.super"], "<builtin>.super": [], "cerberus.validator_factory": [], "cerberus.tests.test_assorted.test_sub_init": ["cerberus.tests.test_assorted.test_sub_init.MyValidator.__init__"], "cerberus.tests.test_assorted.test_sub_init.MyValidator.__init__": ["<builtin>.super"], "cerberus.tests.test_rule_keysrules": [], "cerberus.tests.test_rule_keysrules.test_keysrules": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_excludes": ["pytest.mark.parametrize"], "cerberus.tests.test_rule_excludes.test_excludes": [], "cerberus.tests.test_rule_excludes.test_excludes_basic_error_handler_message": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_excludes.test_excludes_of_multiple_fields": [], "cerberus.tests.test_rule_excludes.test_excludes_of_required_fields": [], "cerberus.tests.test_rule_excludes.test_mutual_excludes": [], "cerberus.tests.test_rule_coerce": [], "cerberus.tests.test_rule_coerce.test_coerce": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_coerce.test_coerce_chain": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_coerce.test_coerce_chain.<lambda1>": [], "cerberus.tests.test_rule_coerce.test_coerce_chain.<lambda2>": [], "cerberus.tests.test_rule_coerce.test_coerce_chain_aborts": [], "cerberus.tests.test_rule_coerce.test_coerce_chain_aborts.dont_do_me": ["<builtin>.AssertionError"], "cerberus.tests.test_rule_coerce.test_coerce_does_not_input_data": ["cerberus.Validator"], "cerberus.tests.test_rule_coerce.test_coerce_in_allow_unknown": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_coerce.test_coerce_in_items": ["cerberus.Validator", "cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_coerce.test_coercion_of_sequence_items_with_float_values": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_coerce.test_coerce_in_itemsrules_with_integer_values": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_coerce.test_coerce_in_itemsrules_fails": [], "cerberus.tests.test_rule_coerce.test_coerce_in_keysrules": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_coerce.test_coerce_in_schema": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_coerce.test_coerce_in_schema_in_itemsrules": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_coerce.test_coerce_in_valuesrules": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_coerce.test_coerce_catches_ValueError": ["cerberus.tests.assert_has_error", "cerberus.tests.assert_fail"], "cerberus.tests.assert_has_error": ["<builtin>.enumerate", "<builtin>.isinstance"], "cerberus.tests.test_rule_coerce.test_coerce_in_listitems_catches_ValueError": ["cerberus.tests.assert_has_error", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_coerce.test_coerce_catches_TypeError": ["cerberus.tests.assert_has_error", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_coerce.test_coerce_in_listitems_catches_TypeError": ["cerberus.tests.assert_has_error", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_coerce.test_custom_coerce_and_rename": ["cerberus.tests.test_rule_coerce.test_custom_coerce_and_rename.MyNormalizer.__init__", "cerberus.Validator.normalized"], "cerberus.tests.test_rule_coerce.test_custom_coerce_and_rename.MyNormalizer.__init__": ["<builtin>.super"], "cerberus.tests.test_rule_coerce.test_custom_coerce_and_rename.MyNormalizer._normalize_coerce_multiply": [], "cerberus.Validator.normalized": [], "cerberus.tests.test_rule_itemsrules": [], "cerberus.tests.test_rule_itemsrules.test_itemsrules": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_itemsrules.test_itemsrules_with_schema": ["cerberus.tests.assert_fail"], "cerberus.tests.test_schema": ["pytest.mark.parametrize"], "cerberus.tests.test_schema.test_empty_schema": ["cerberus.Validator", "pytest.raises"], "pytest.raises": [], "cerberus.tests.test_schema.test_bad_schema_type": ["cerberus.errors.SCHEMA_TYPE.format", "pytest.raises"], "cerberus.errors.SCHEMA_TYPE.format": [], "cerberus.tests.test_schema.test_bad_schema_type_field": ["pytest.raises"], "cerberus.tests.test_schema.test_unknown_rule": ["re.escape", "pytest.raises"], "re.escape": [], "cerberus.tests.test_schema.test_unknown_type": ["re.escape", "pytest.raises", "<builtin>.str"], "<builtin>.str": [], "cerberus.tests.test_schema.test_bad_schema_definition": ["re.escape", "pytest.raises", "<builtin>.str"], "cerberus.tests.test_schema.test_bad_of_rules": ["cerberus.tests.assert_schema_error"], "cerberus.tests.assert_schema_error": ["cerberus.tests.assert_exception"], "cerberus.tests.test_schema.test_normalization_rules_are_invalid_in_of_rules": ["cerberus.tests.assert_schema_error"], "cerberus.tests.test_schema.test_normalization_rules_are_invalid_in_of_rules.<dict1>.<dict1>.<list1>.<dict1>.<lambda1>": [], "cerberus.tests.test_schema.test_anyof_allof_schema_validate": ["cerberus.tests.assert_schema_error"], "cerberus.tests.test_schema.test_repr": ["cerberus.Validator", "<builtin>.repr"], "<builtin>.repr": [], "cerberus.tests.test_schema.test_expansion_in_nested_schema": ["cerberus.Validator"], "cerberus.tests.test_schema.test_shortcut_expansion": ["cerberus.Validator"], "cerberus.tests.test_schema.test_shortcut_expansion.foo": [], "cerberus.tests.test_schema.test_shortcut_expansion.bar": [], "cerberus.tests.test_schema.test_expansion_with_unvalidated_schema": ["cerberus.UnconcernedValidator", "cerberus.tests.assert_success"], "cerberus.UnconcernedValidator": [], "cerberus.tests.test_schema.test_rulename_space_is_normalized": ["cerberus.Validator"], "cerberus.tests.test_schema.test_rulename_space_is_normalized.<dict1>.<dict1>.<lambda1>": [], "cerberus.tests.test_schema.test_schema_normalization_does_not_abort": ["cerberus.Validator", "cerberus.schema_registry.add", "cerberus.schema_registry.clear"], "cerberus.schema_registry.clear": [], "cerberus.schema_registry.add": [], "cerberus.tests.test_normalization": [], "cerberus.tests.test_normalization.test_normalized": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_normalization.test_normalize_complex_objects": ["cerberus.Validator", "tempfile.NamedTemporaryFile"], "tempfile.NamedTemporaryFile": [], "cerberus.tests.test_normalization.test_normalize_does_not_change_input_document": ["cerberus.Validator"], "cerberus.tests.test_normalization.test_normalize_tuples": ["cerberus.Validator", "cerberus.tests.assert_success"], "cerberus.tests.test_normalization.test_purge_readonly": ["cerberus.Validator", "copy.deepcopy", "cerberus.tests.assert_normalized"], "copy.deepcopy": [], "cerberus.tests.test_normalization.test_purge_unknown": ["cerberus.Validator", "cerberus.tests.assert_normalized"], "cerberus.tests.test_normalization.test_purge_unknown_in_subschema": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_\u2026length": [], "cerberus.tests.test_rule_\u2026length.test_minlength_and_maxlength_with_list": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail", "<builtin>.range"], "<builtin>.range": [], "cerberus.tests.test_rule_\u2026length.test_maxlength_fails": ["<builtin>.len", "cerberus.tests.assert_fail", "<builtin>.range", "random.choice"], "random.choice": [], "cerberus.tests.test_rule_\u2026length.test_maxlength_with_bytestring_fails": ["<builtin>.len", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_\u2026length.test_minlength_fails": ["<builtin>.len", "cerberus.tests.assert_fail", "<builtin>.range", "random.choice"], "cerberus.tests.test_rule_\u2026length.test_minlength_with_bytestring_fails": ["<builtin>.len", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_\u2026length.test_minlength_with_dict": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_contains": ["pytest.mark.parametrize"], "cerberus.tests.test_rule_contains.test_contains_succeeds": ["cerberus.tests.assert_success"], "cerberus.tests.test_rule_contains.test_contains_fails": ["cerberus.tests.assert_fail", "<builtin>.any"], "<builtin>.any": [], "cerberus.tests.conftest": ["pytest.fixture"], "pytest.fixture": [], "cerberus.tests.conftest.document": ["copy.deepcopy"], "cerberus.tests.conftest.schema": ["copy.deepcopy"], "cerberus.tests.conftest.validator": ["cerberus.Validator"], "cerberus.tests.test_rule_schema": [], "cerberus.tests.test_rule_schema.test_schema": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_schema.test_options_passed_to_nested_validators": ["cerberus.tests.assert_success"], "cerberus.tests.test_rule_required": [], "cerberus.tests.test_rule_required.test_required": ["cerberus.tests.assert_fail"], "cerberus.tests.test_errors": [], "cerberus.tests.test_errors.test__error_1": ["cerberus.Validator"], "cerberus.tests.test_errors.test__error_2": ["cerberus.Validator"], "cerberus.tests.test_errors.test__error_3": ["cerberus.Validator"], "cerberus.tests.test_errors.test_error_tree_from_subschema": ["cerberus.Validator.schema_error_tree.fetch_errors_from", "<builtin>.len", "cerberus.Validator.document_error_tree.fetch_errors_from", "cerberus.tests.assert_fail"], "cerberus.Validator.document_error_tree.fetch_errors_from": [], "cerberus.Validator.schema_error_tree.fetch_errors_from": [], "cerberus.tests.test_errors.test_error_tree_from_anyof": ["cerberus.tests.assert_fail"], "cerberus.tests.test_errors.test_nested_error_paths": ["<builtin>.len", "cerberus.tests.assert_fail", "cerberus.tests.test_errors.test_nested_error_paths.assert_has_all_errors", "cerberus.errors.ValidationError"], "cerberus.tests.test_errors.test_nested_error_paths.assert_has_all_errors": [], "cerberus.errors.ValidationError": [], "cerberus.tests.test_errors.test_queries": ["cerberus.Validator"], "cerberus.tests.test_errors.test_basic_error_handler": ["cerberus.errors.BasicErrorHandler", "cerberus.errors.ValidationError"], "cerberus.errors.BasicErrorHandler": [], "cerberus.tests.test_errors.test_basic_error_of_errors": ["cerberus.tests.assert_fail"], "cerberus.tests.test_errors.test_wrong_amount_of_items": [], "cerberus.tests.test_legacy": [], "cerberus.tests.test_customization": ["cerberus.validator_factory", "pytest.mark.parametrize"], "cerberus.tests.test_customization.test_contextual_data_preservation": ["cerberus.tests.test_customization.test_contextual_data_preservation.InheritedValidator.__init__", "cerberus.tests.assert_success"], "cerberus.tests.test_customization.test_contextual_data_preservation.InheritedValidator.__init__": ["<builtin>.super"], "cerberus.tests.test_customization.test_contextual_data_preservation.InheritedValidator._check_with_test": [], "cerberus.tests.test_customization.test_docstring_parsing": [], "cerberus.tests.test_customization.test_docstring_parsing.CustomValidator._validate_foo": [], "cerberus.tests.test_customization.test_docstring_parsing.CustomValidator._validate_bar": [], "cerberus.tests.test_customization.test_check_with_method": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail", "cerberus.Validator.__init__"], "cerberus.tests.test_customization.test_check_with_method.MyValidator._check_with_oddity": ["cerberus.Validator._error"], "cerberus.Validator._error": [], "cerberus.tests.test_customization.test_schema_validation_can_be_disabled": ["pytest.raises"], "cerberus.tests.test_customization.test_custom_datatype_rule": ["cerberus.tests.assert_fail", "cerberus.Validator.__init__"], "cerberus.tests.test_customization.test_custom_datatype_rule.MyValidator": ["cerberus.Validator.types_mapping.copy", "cerberus.TypeDefinition"], "cerberus.tests.test_customization.test_custom_datatype_rule.MyValidator._validate_min_number": ["cerberus.Validator._error"], "cerberus.tests.test_rule_allowed": [], "cerberus.tests.test_rule_allowed.test_allowed_with_integer_value_fail": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_allowed.test_allowed_with_integer_value_succeed": ["cerberus.tests.assert_success"], "cerberus.tests.test_rule_allowed.test_allowed_with_list_value": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_allowed.test_allowed_with_set_value": ["cerberus.tests.assert_success"], "cerberus.tests.test_rule_allowed.test_allowed_with_string_value": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_allowed.test_allowed_with_unicode_chars": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_allowed.test_allowed_when_passing_list_of_dicts": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_rename\u2026": [], "cerberus.tests.test_rule_rename\u2026.test_rename": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_rename\u2026.test_rename_handler_in_allow_unknown": ["cerberus.Validator", "cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_regex": [], "cerberus.tests.test_rule_regex.test_regex": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_regex.test_regex_with_flag": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests": [], "cerberus.tests.assert_exception": ["re.escape", "cerberus.Validator", "pytest.raises"], "cerberus.tests.assert_document_error": ["cerberus.tests.assert_exception"], "<builtin>.isinstance": [], "cerberus.tests.assert_has_errors": ["cerberus.tests.assert_has_error", "<builtin>.isinstance"], "<builtin>.enumerate": [], "cerberus.tests.assert_not_has_error": ["cerberus.tests.assert_has_error", "<builtin>.AssertionError"], "cerberus.tests.test_rule_type": ["pytest.mark.parametrize"], "cerberus.tests.test_rule_type.SelfDefinedContainer.__contains__": [], "cerberus.tests.test_rule_type.test_type_fails": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_type.test_type_succeeds": ["cerberus.tests.assert_success"], "cerberus.tests.test_rule_type.test_type_skips_allowed": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_type.test_type_skips_anyof": ["<builtin>.len", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_type.test_type_with_class_as_constraint": [], "cerberus.tests.test_rule_type.test_boolean_is_not_a_number": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_type.test_normalization_of_generic_type_aliasses": ["cerberus.base.normalize_rulesset"], "cerberus.base.normalize_rulesset": [], "cerberus.tests.test_rule_type.test_compound_type_and_anyof_is_invalid": ["pytest.raises"], "cerberus.tests.test_rule_max_min": ["pytest.mark.parametrize"], "cerberus.tests.test_rule_max_min.test_max": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_max_min.test_min": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_max_min.test_min_and_max_with_date": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_\u2026of": ["pytest.mark.parametrize"], "cerberus.tests.test_rule_\u2026of.test_allof": [], "cerberus.tests.test_rule_\u2026of.test_anyof_fails": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_\u2026of.test_anyof_succeeds": ["cerberus.tests.assert_success"], "cerberus.tests.test_rule_\u2026of.test_anyof_in_allof": [], "cerberus.tests.test_rule_\u2026of.test_anyof_in_itemsrules": ["cerberus.tests.assert_not_has_error", "cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_\u2026of.test_anyof_with_semantically_equal_schemas": [], "cerberus.tests.test_rule_\u2026of.test_noneof": [], "cerberus.tests.test_rule_\u2026of.test_oneof": [], "cerberus.tests.test_rule_\u2026of.test_schema_is_not_spoiled": [], "cerberus.tests.test_rule_\u2026of.test_anyof_type": ["cerberus.tests.assert_success"], "cerberus.tests.test_rule_\u2026of.test_oneof_schema": [], "cerberus.tests.test_rule_\u2026of.test_oneof_type_in_valuesrules": ["cerberus.tests.assert_success"], "cerberus.tests.test_rule_\u2026of.test_oneof_type_in_oneof_schema": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_\u2026of.test_allow_unknown_in_oneof": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_check_with": [], "cerberus.tests.test_rule_check_with.test_check_with_rule": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_check_with.test_check_with_rule.check_with_name": [], "cerberus.tests.test_rule_dependencies": ["pytest.mark.parametrize"], "cerberus.tests.test_rule_dependencies.test_dependencies_basic_error_handler_representation": [], "cerberus.tests.test_rule_dependencies.test_dependencies_errors": ["cerberus.Validator", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_dependencies.test_dependencies_in_oneof": [], "cerberus.tests.test_rule_dependencies.test_dependencies_of_multiple_fields": [], "cerberus.tests.test_rule_dependencies.test_dependencies_of_multiple_fields_with_required_field_fails": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_dependencies.test_dependencies_of_multiple_fields_with_required_field_succeeds": ["cerberus.tests.assert_success"], "cerberus.tests.test_rule_dependencies.test_dependencies_of_nullable_field_succeeds": [], "cerberus.tests.test_rule_dependencies.test_dependencies_of_single_field": [], "cerberus.tests.test_rule_dependencies.test_dependencies_relative_to_document_root": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_dependencies.test_dependencies_with_mutually_dependent_nullable_fields": [], "cerberus.tests.test_rule_dependencies.test_dependencies_with_required_boolean_value": [], "cerberus.tests.test_rule_dependencies.test_dependencies_with_required_boolean_value_defined_in_list": [], "cerberus.tests.test_rule_dependencies.test_dependencies_with_required_rule_and_required_value_fails": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_dependencies.test_dependencies_with_required_rule_and_required_value_succeeds": ["cerberus.tests.assert_success"], "cerberus.tests.test_rule_dependencies.test_dependencies_with_required_value_fails": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_dependencies.test_dependencies_with_required_value_succeeds": ["cerberus.tests.assert_success"], "cerberus.tests.test_rule_dependencies.test_nested_dependencies": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_dependencies.test_nested_dependencies_with_required_values": [], "cerberus.tests.test_rule_valuesrules": [], "cerberus.tests.test_rule_valuesrules.test_valuesrules_succeds": ["cerberus.tests.assert_success"], "cerberus.tests.test_rule_valuesrules.test_valuesrules_fails": ["<builtin>.len", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_forbidden": ["pytest.mark.parametrize"], "cerberus.tests.test_rule_forbidden.test_forbidden": [], "cerberus.tests.test_rule_forbidden.test_forbidden_number": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_readonly": [], "cerberus.tests.test_rule_readonly.test_nested_readonly_with_defaults": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_readonly.test_nested_readonly_with_defaults.<dict1>.<dict1>.<dict1>.<dict2>.<lambda1>": [], "cerberus.tests.test_rule_readonly.test_readonly": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_readonly.test_readonly_skips_further_validation": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_readonly.test_readonly_with_defaults": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_rule_readonly.test_readonly_with_defaults.<dict1>.<dict2>.<lambda1>": [], "cerberus.tests.test_rule_readonly.test_repeated_readonly": ["cerberus.tests.assert_fail"], "cerberus.tests.test_rule_nullable": ["pytest.mark.parametrize"], "cerberus.tests.test_rule_nullable.test_nullable": [], "cerberus.tests.test_rule_nullable.test_nullable_does_not_fail_coerce": ["cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_nullable.test_nullables_fail_coerce_on_non_null_values": ["cerberus.tests.assert_fail", "cerberus.tests.assert_normalized"], "cerberus.tests.test_rule_nullable.test_nullables_fail_coerce_on_non_null_values.failing_coercion": ["<builtin>.Exception"], "<builtin>.Exception": [], "cerberus.tests.test_rule_nullable.test_nullable_skips_allowed": ["cerberus.tests.assert_success"], "cerberus.tests.test_rule_nullable.test_nullable_skips_type": ["cerberus.tests.assert_fail"], "cerberus.tests.test_validation": ["<builtin>.list", "pytest.mark.parametrize", "itertools.product"], "cerberus.tests.test_validation.test_empty_document": ["cerberus.tests.assert_document_error"], "cerberus.tests.test_validation.test_bad_document_type": ["cerberus.errors.DOCUMENT_FORMAT.format", "cerberus.tests.assert_document_error"], "cerberus.errors.DOCUMENT_FORMAT.format": [], "cerberus.tests.test_validation.test_unknown_field": ["cerberus.tests.assert_fail"], "cerberus.tests.test_validation.test_empty_field_definition": ["cerberus.tests.assert_success"], "cerberus.tests.test_validation.test_bad_valuesrules": ["cerberus.tests.assert_fail"], "cerberus.tests.test_validation.test_validate_update": ["cerberus.tests.assert_success"], "cerberus.tests.test_validation.test_success_with_multiple_rules": ["cerberus.tests.assert_success"], "cerberus.tests.test_validation.test_one_of_two_types": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_validation.test_custom_validator": ["cerberus.tests.assert_success", "cerberus.tests.assert_fail", "cerberus.Validator.__init__"], "cerberus.tests.test_validation.test_custom_validator.MyValidator._validate_isodd": ["cerberus.Validator._error", "<builtin>.bool"], "<builtin>.bool": [], "cerberus.tests.test_validation.test_ignore_none_values": ["cerberus.tests.assert_fail", "cerberus.tests.assert_not_has_error", "cerberus.tests.assert_has_error", "cerberus.Validator", "cerberus.tests.assert_success"], "cerberus.tests.test_validation.test_unknown_keys": ["cerberus.Validator", "cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_validation.test_unknown_key_dict": ["cerberus.tests.assert_success"], "cerberus.tests.test_validation.test_unknown_key_list": ["cerberus.tests.assert_success"], "cerberus.tests.test_validation.test_unknown_keys_list_of_dicts": ["cerberus.tests.assert_success"], "cerberus.tests.test_validation.test_unknown_keys_retain_custom_rules": ["cerberus.tests.assert_success", "cerberus.Validator.__init__"], "cerberus.tests.test_validation.test_unknown_keys_retain_custom_rules.CustomValidator._check_with_foo": [], "cerberus.tests.test_validation.test_callable_validator": ["cerberus.Validator"], "cerberus.tests.test_validation.test_self_root_document": ["cerberus.tests.assert_success", "cerberus.Validator.__init__"], "cerberus.tests.test_validation.test_self_root_document.MyValidator._validate_root_doc": ["cerberus.Validator._error", "<builtin>.len"], "cerberus.tests.test_validation.test_validated": [], "cerberus.tests.test_validation.test_issue_107": ["cerberus.Validator", "cerberus.tests.assert_success"], "cerberus.tests.test_validation.test_document_path": ["cerberus.tests.assert_success", "cerberus.Validator.__init__"], "cerberus.tests.test_validation.test_document_path.DocumentPathTester._validate_trail": [], "cerberus.tests.test_validation.test_require_all_simple": ["cerberus.Validator", "cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_validation.test_require_all_override_by_required": ["cerberus.Validator", "cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "itertools.product": [], "<builtin>.list": [], "cerberus.tests.test_validation.test_require_all_override_by_subdoc_require_all": ["cerberus.Validator", "cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_validation.test_require_all_and_exclude": ["cerberus.Validator", "cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_validation.test_novalidate_noerrors": [], "cerberus.tests.test_registries": [], "cerberus.tests.test_registries.test_schema_registry_simple": ["cerberus.schema_registry.add", "cerberus.tests.assert_success"], "cerberus.tests.test_registries.test_top_level_reference": ["cerberus.schema_registry.add", "cerberus.tests.assert_success"], "cerberus.tests.test_registries.test_rules_set_simple": ["cerberus.rules_set_registry.add", "cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.rules_set_registry.add": [], "cerberus.tests.test_registries.test_allow_unknown_as_reference": ["cerberus.rules_set_registry.add", "cerberus.Validator", "cerberus.tests.assert_success", "cerberus.tests.assert_fail"], "cerberus.tests.test_registries.test_recursion": ["cerberus.rules_set_registry.add", "cerberus.Validator", "cerberus.tests.assert_success"], "cerberus.tests.test_registries.test_references_remain_unresolved": ["cerberus.rules_set_registry.extend"], "cerberus.rules_set_registry.extend": [], "cerberus.tests.test_registries.test_rules_registry_with_anyof_type": ["cerberus.rules_set_registry.add", "cerberus.tests.assert_success"], "cerberus.tests.test_registries.test_schema_registry_with_anyof_type": ["cerberus.schema_registry.add", "cerberus.tests.assert_success"], "cerberus.tests.test_registries.test_normalization_with_rules_set": ["cerberus.rules_set_registry.add", "cerberus.tests.assert_success", "cerberus.tests.assert_normalized"], "cerberus.tests.test_registries.test_normalization_with_rules_set.<dict5>.<lambda1>": [], "cerberus.tests.test_registries.test_rules_set_with_dict_field": ["cerberus.rules_set_registry.add", "cerberus.tests.assert_success", "cerberus.tests.assert_schema_error"]}