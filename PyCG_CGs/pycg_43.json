{"testing.test_stepwise": ["pytest.mark.parametrize", "pytest.fixture"], "pytest.fixture": [], "testing.test_stepwise.stepwise_pytester": [], "testing.test_stepwise.error_pytester": [], "testing.test_stepwise.broken_pytester": [], "testing.test_stepwise._strip_resource_warnings": [], "testing.test_stepwise.test_run_without_stepwise": [], "testing.test_stepwise.test_stepwise_output_summary": [], "testing.test_stepwise.test_fail_and_continue_with_stepwise": ["testing.test_stepwise._strip_resource_warnings"], "pytest.mark.parametrize": [], "testing.test_stepwise.test_run_with_skip_option": ["testing.test_stepwise._strip_resource_warnings"], "testing.test_stepwise.test_fail_on_errors": ["testing.test_stepwise._strip_resource_warnings"], "testing.test_stepwise.test_change_testfile": ["testing.test_stepwise._strip_resource_warnings"], "testing.test_stepwise.test_stop_on_collection_errors": [], "testing.test_stepwise.test_xfail_handling": [], "testing.test_stepwise.test_stepwise_skip_is_independent": [], "testing.test_stepwise.test_sw_skip_help": [], "testing.test_stepwise.test_stepwise_xdist_dont_store_lastfailed": ["pathlib.Path"], "pathlib.Path": [], "testing.test_stepwise.test_disabled_stepwise_xdist_dont_clear_cache": ["pathlib.Path"], "testing.test_config": ["pytest.mark.parametrize"], "testing.test_config.TestParseIni": ["pytest.mark.xfail", "pytest.mark.filterwarnings", "pytest.mark.parametrize"], "testing.test_config.TestParseIni.test_getcfg_and_config": ["_pytest.config.findpaths.locate_config", "textwrap.dedent", "<builtin>.str"], "textwrap.dedent": [], "_pytest.config.findpaths.locate_config": [], "<builtin>.str": [], "testing.test_config.TestParseIni.test_setupcfg_uses_toolpytest_with_pytest": [], "testing.test_config.TestParseIni.test_append_parse_args": ["textwrap.dedent"], "testing.test_config.TestParseIni.test_tox_ini_wrong_version": [], "testing.test_config.TestParseIni.test_ini_names": ["textwrap.dedent"], "testing.test_config.TestParseIni.test_pyproject_toml": [], "testing.test_config.TestParseIni.test_toxini_before_lower_pytestini": ["textwrap.dedent"], "testing.test_config.TestParseIni.test_ini_parse_error": [], "testing.test_config.TestParseIni.test_toml_parse_error": [], "pytest.mark.xfail": [], "testing.test_config.TestParseIni.test_confcutdir": ["os.chdir"], "os.chdir": [], "pytest.mark.filterwarnings": [], "testing.test_config.TestParseIni.test_invalid_config_options": ["<builtin>.sorted"], "<builtin>.sorted": [], "testing.test_config.TestParseIni.test_silence_unknown_key_warning": [], "testing.test_config.TestParseIni.test_disable_warnings_plugin_disables_config_warnings": [], "testing.test_config.TestParseIni.test_missing_required_plugins": ["pytest.raises"], "attr.ib": [], "testing.test_config.TestParseIni.test_missing_required_plugins.DummyEntryPoint": ["attr.ib"], "testing.test_config.TestParseIni.test_missing_required_plugins.DummyEntryPoint.load": ["<builtin>.__import__"], "<builtin>.__import__": [], "testing.test_config.TestParseIni.test_missing_required_plugins.DummyDist": ["attr.ib"], "testing.test_config.TestParseIni.test_missing_required_plugins.DummyDist.metadata": [], "testing.test_config.TestParseIni.test_missing_required_plugins.my_dists": [], "pytest.raises": [], "testing.test_config.TestParseIni.test_early_config_cmdline": [], "testing.test_config.TestConfigCmdlineParsing.test_parsing_again_fails": ["pytest.raises"], "testing.test_config.TestConfigCmdlineParsing.test_parsing_again_fails.<lambda1>": [], "testing.test_config.TestConfigCmdlineParsing.test_explicitly_specified_config_file_is_loaded": [], "testing.test_config.TestConfigCmdlineParsing.test_absolute_win32_path": ["pytest.main", "os.path.normpath", "<builtin>.str"], "os.path.normpath": [], "pytest.main": [], "testing.test_config.TestConfigAPI.test_config_trace": ["<builtin>.len"], "<builtin>.len": [], "testing.test_config.TestConfigAPI.test_config_getoption": ["pytest.raises"], "testing.test_config.TestConfigAPI.test_config_getoption_unicode": [], "testing.test_config.TestConfigAPI.test_config_getvalueorskip": ["pytest.raises"], "testing.test_config.TestConfigAPI.test_config_getvalueorskip_None": ["pytest.raises"], "testing.test_config.TestConfigAPI.test_getoption": ["pytest.raises"], "testing.test_config.TestConfigAPI.test_getconftest_pathlist": ["<builtin>.print", "<builtin>.len", "<builtin>.str"], "<builtin>.print": [], "testing.test_config.TestConfigAPI": ["pytest.mark.parametrize"], "testing.test_config.TestConfigAPI.test_addini": ["pytest.raises"], "testing.test_config.TestConfigAPI.test_addini_paths": ["<builtin>.len", "pytest.raises"], "testing.test_config.TestConfigAPI.make_conftest_for_args": [], "testing.test_config.TestConfigAPI.test_addini_args_ini_files": ["testing.test_config.TestConfigAPI.make_conftest_for_args", "testing.test_config.TestConfigAPI.check_config_args"], "testing.test_config.TestConfigAPI.check_config_args": ["<builtin>.list"], "testing.test_config.TestConfigAPI.test_addini_args_pyproject_toml": ["testing.test_config.TestConfigAPI.make_conftest_for_args", "testing.test_config.TestConfigAPI.check_config_args"], "<builtin>.list": [], "testing.test_config.TestConfigAPI.make_conftest_for_linelist": [], "testing.test_config.TestConfigAPI.test_addini_linelist_ini_files": ["testing.test_config.TestConfigAPI.check_config_linelist", "testing.test_config.TestConfigAPI.make_conftest_for_linelist"], "testing.test_config.TestConfigAPI.check_config_linelist": ["<builtin>.len"], "testing.test_config.TestConfigAPI.test_addini_linelist_pprojecttoml": ["testing.test_config.TestConfigAPI.check_config_linelist", "testing.test_config.TestConfigAPI.make_conftest_for_linelist"], "testing.test_config.TestConfigAPI.test_addini_bool": [], "testing.test_config.TestConfigAPI.test_addinivalue_line_existing": ["<builtin>.len"], "testing.test_config.TestConfigAPI.test_addinivalue_line_new": ["<builtin>.len"], "testing.test_config.TestConfigAPI.test_confcutdir_check_isdir": ["pytest.raises", "<builtin>.str"], "testing.test_config.TestConfigAPI.test_iter_rewritable_modules": ["_pytest.config._iter_rewritable_modules", "<builtin>.list"], "_pytest.config._iter_rewritable_modules": [], "testing.test_config.TestConfigFromdictargs.test_basic_behavior": ["pytest.raises", "_pytest.config.Config.fromdictargs"], "_pytest.config.Config.fromdictargs": [], "testing.test_config.TestConfigFromdictargs.test_invocation_params_args": ["<builtin>.tuple", "_pytest.config.Config.fromdictargs"], "<builtin>.tuple": [], "testing.test_config.TestConfigFromdictargs.test_inifilename": ["_pytest.pathlib.absolutepath", "textwrap.dedent", "_pytest.monkeypatch.MonkeyPatch.context", "<builtin>.str", "_pytest.config.Config.fromdictargs"], "_pytest.monkeypatch.MonkeyPatch.context": [], "_pytest.pathlib.absolutepath": [], "testing.test_config.test_options_on_small_file_do_not_blow_up": ["testing.test_config.test_options_on_small_file_do_not_blow_up.runfiletest", "<builtin>.str"], "testing.test_config.test_options_on_small_file_do_not_blow_up.runfiletest": [], "testing.test_config.test_preparse_ordering_with_setuptools": [], "testing.test_config.test_preparse_ordering_with_setuptools.EntryPoint.load": [], "testing.test_config.test_preparse_ordering_with_setuptools.my_dists": [], "testing.test_config.test_setuptools_importerror_issue1479": ["pytest.raises"], "testing.test_config.test_setuptools_importerror_issue1479.DummyEntryPoint.load": ["<builtin>.ImportError"], "<builtin>.ImportError": [], "testing.test_config.test_setuptools_importerror_issue1479.distributions": [], "testing.test_config.test_importlib_metadata_broken_distribution": [], "testing.test_config.test_importlib_metadata_broken_distribution.DummyEntryPoint.load": ["<builtin>.object"], "<builtin>.object": [], "testing.test_config.test_importlib_metadata_broken_distribution.distributions": [], "testing.test_config.test_plugin_preparse_prevents_setuptools_loading": ["<builtin>.object"], "testing.test_config.test_plugin_preparse_prevents_setuptools_loading.DummyEntryPoint.load": [], "testing.test_config.test_plugin_preparse_prevents_setuptools_loading.distributions": [], "testing.test_config.test_disable_plugin_autoload": [], "testing.test_config.test_disable_plugin_autoload.DummyEntryPoint.load": [], "testing.test_config.test_disable_plugin_autoload.PseudoPlugin.__getattr__": ["<builtin>.object"], "testing.test_config.test_disable_plugin_autoload.distributions": [], "testing.test_config.test_plugin_loading_order": ["<builtin>.str"], "testing.test_config.test_cmdline_processargs_simple": [], "testing.test_config.test_invalid_options_show_extra_information": [], "testing.test_config.test_consider_args_after_options_for_rootdir": ["<builtin>.enumerate", "_pytest.monkeypatch.MonkeyPatch.context", "<builtin>.str"], "<builtin>.enumerate": [], "testing.test_config.test_toolongargs_issue224": [], "testing.test_config.test_config_in_subdirectory_colon_command_line_issue2148": [], "testing.test_config.test_notify_exception": ["<builtin>.ValueError", "pytest.raises"], "<builtin>.ValueError": [], "testing.test_config.test_notify_exception.A.pytest_internalerror": [], "testing.test_config.test_no_terminal_discovery_error": [], "testing.test_config.test_load_initial_conftest_last_ordering": [], "testing.test_config.test_load_initial_conftest_last_ordering.My.pytest_load_initial_conftests": [], "testing.test_config.test_get_plugin_specs_as_list": ["_pytest.config._get_plugin_specs_as_list", "testing.test_config.test_get_plugin_specs_as_list.exp_match", "pytest.raises", "<builtin>.dict"], "testing.test_config.test_get_plugin_specs_as_list.exp_match": ["<builtin>.repr", "re.escape"], "<builtin>.repr": [], "re.escape": [], "_pytest.config._get_plugin_specs_as_list": [], "<builtin>.dict": [], "testing.test_config.test_collect_pytest_prefix_bug_integration": [], "testing.test_config.test_collect_pytest_prefix_bug": [], "testing.test_config.TestRootdir.test_simple_noini": ["_pytest.config.findpaths.get_common_ancestor"], "_pytest.config.findpaths.get_common_ancestor": [], "testing.test_config.TestRootdir": ["pytest.mark.parametrize"], "testing.test_config.TestRootdir.test_with_ini": ["_pytest.config.findpaths.determine_setup", "<builtin>.str"], "_pytest.config.findpaths.determine_setup": [], "testing.test_config.TestRootdir.test_pytestini_overrides_empty_other": ["_pytest.config.findpaths.determine_setup", "<builtin>.str"], "testing.test_config.TestRootdir.test_setuppy_fallback": ["_pytest.config.findpaths.determine_setup", "<builtin>.str"], "testing.test_config.TestRootdir.test_nothing": ["_pytest.config.findpaths.determine_setup", "<builtin>.str"], "testing.test_config.TestRootdir.test_with_specific_inifile": ["_pytest.config.findpaths.determine_setup", "<builtin>.str"], "testing.test_config.TestRootdir.test_explicit_config_file_sets_rootdir": ["_pytest.config.findpaths.determine_setup", "<builtin>.str"], "testing.test_config.TestRootdir.test_with_arg_outside_cwd_without_inifile": ["_pytest.config.findpaths.determine_setup", "<builtin>.str"], "testing.test_config.TestRootdir.test_with_arg_outside_cwd_with_inifile": ["_pytest.config.findpaths.determine_setup", "<builtin>.str"], "testing.test_config.TestRootdir.test_with_non_dir_arg": ["_pytest.config.findpaths.determine_setup"], "testing.test_config.TestRootdir.test_with_existing_file_in_subdir": ["_pytest.config.findpaths.determine_setup"], "testing.test_config.TestRootdir.test_with_config_also_in_parent_directory": ["_pytest.config.findpaths.determine_setup"], "testing.test_config.TestOverrideIniArgs": ["pytest.mark.parametrize"], "testing.test_config.TestOverrideIniArgs.test_override_ini_names": ["textwrap.dedent"], "testing.test_config.TestOverrideIniArgs.test_override_ini_paths": [], "testing.test_config.TestOverrideIniArgs.test_override_multiple_and_default": [], "testing.test_config.TestOverrideIniArgs.test_override_ini_usage_error_bad_style": [], "testing.test_config.TestOverrideIniArgs.test_override_ini_handled_asap": [], "testing.test_config.TestOverrideIniArgs.test_addopts_before_initini": [], "testing.test_config.TestOverrideIniArgs.test_addopts_from_env_not_concatenated": ["pytest.raises"], "testing.test_config.TestOverrideIniArgs.test_addopts_from_ini_not_concatenated": [], "testing.test_config.TestOverrideIniArgs.test_override_ini_does_not_contain_paths": [], "testing.test_config.TestOverrideIniArgs.test_multiple_override_ini_options": [], "testing.test_config.test_help_via_addopts": [], "testing.test_config.test_help_and_version_after_argument_error": [], "testing.test_config.test_help_formatter_uses_py_get_terminal_width": ["_pytest.config.argparsing.DropShorterLongHelpFormatter"], "_pytest.config.argparsing.DropShorterLongHelpFormatter": [], "testing.test_config.test_help_formatter_uses_py_get_terminal_width.<lambda1>": [], "testing.test_config.test_config_does_not_load_blocked_plugin_from_args": ["<builtin>.str"], "testing.test_config.test_invocation_args": ["<builtin>.len", "pathlib.Path", "pytest.raises", "<builtin>.str", "<builtin>.type", "_pytest.config.Config.InvocationParams"], "<builtin>.type": [], "_pytest.config.Config.InvocationParams": [], "testing.test_config.test_config_blocked_default_plugins": ["pytest.skip", "<builtin>.str"], "pytest.skip": [], "testing.test_config.TestSetupCfg.test_pytest_setup_cfg_unsupported": ["pytest.raises"], "testing.test_config.TestSetupCfg.test_pytest_custom_cfg_unsupported": ["pytest.raises"], "testing.test_config.TestPytestPluginsVariable.test_pytest_plugins_in_non_top_level_conftest_unsupported": [], "testing.test_config.TestPytestPluginsVariable": ["pytest.mark.parametrize"], "testing.test_config.TestPytestPluginsVariable.test_pytest_plugins_in_non_top_level_conftest_unsupported_pyargs": [], "testing.test_config.TestPytestPluginsVariable.test_pytest_plugins_in_non_top_level_conftest_unsupported_no_top_level_conftest": [], "testing.test_config.TestPytestPluginsVariable.test_pytest_plugins_in_non_top_level_conftest_unsupported_no_false_positives": [], "testing.test_config.test_conftest_import_error_repr": ["<builtin>.RuntimeError", "re.escape", "_pytest.config.ConftestImportFailure", "pytest.raises", "<builtin>.type"], "<builtin>.RuntimeError": [], "_pytest.config.ConftestImportFailure": [], "testing.test_config.test_strtobool": ["_pytest.config._strtobool", "pytest.raises"], "_pytest.config._strtobool": [], "testing.test_config.test_parse_warning_filter": ["_pytest.config.parse_warning_filter"], "_pytest.config.parse_warning_filter": [], "testing.test_config.test_parse_warning_filter_failure": ["_pytest.config.parse_warning_filter", "pytest.raises"], "testing.test_config.TestDebugOptions.test_without_debug_does_not_write_log": [], "testing.test_config.TestDebugOptions.test_with_only_debug_writes_pytestdebug_log": [], "testing.test_config.TestDebugOptions.test_multiple_custom_debug_logs": [], "testing.test_config.TestDebugOptions.test_debug_help": [], "testing.test_pluginmanager": ["pytest.fixture"], "testing.test_pluginmanager.pytestpm": ["_pytest.config.PytestPluginManager"], "_pytest.config.PytestPluginManager": [], "testing.test_pluginmanager.TestPytestPluginInteractions.test_addhooks_conftestplugin": ["<builtin>.dict"], "testing.test_pluginmanager.TestPytestPluginInteractions.test_addhooks_nohooks": [], "testing.test_pluginmanager.TestPytestPluginInteractions.test_do_option_postinitialize": ["<builtin>.hasattr"], "<builtin>.hasattr": [], "testing.test_pluginmanager.TestPytestPluginInteractions.test_configure": ["<builtin>.len"], "testing.test_pluginmanager.TestPytestPluginInteractions.test_configure.A.pytest_configure": [], "testing.test_pluginmanager.TestPytestPluginInteractions.test_hook_tracing": ["<builtin>.len", "pytest.raises"], "testing.test_pluginmanager.TestPytestPluginInteractions.test_hook_tracing.api1.pytest_plugin_registered": [], "testing.test_pluginmanager.TestPytestPluginInteractions.test_hook_tracing.api2.pytest_plugin_registered": ["<builtin>.ValueError"], "testing.test_pluginmanager.TestPytestPluginInteractions.test_hook_proxy": ["_pytest.main.Session.from_config"], "_pytest.main.Session.from_config": [], "testing.test_pluginmanager.TestPytestPluginInteractions.test_hook_with_addoption": [], "testing.test_pluginmanager.test_default_markers": [], "testing.test_pluginmanager.test_importplugin_error_message": ["pytest.raises", "<builtin>.str"], "testing.test_pluginmanager.TestPytestPluginManager.test_register_imported_modules": ["types.ModuleType", "_pytest.config.PytestPluginManager", "pytest.raises"], "types.ModuleType": [], "testing.test_pluginmanager.TestPytestPluginManager.test_register_imported_modules.<lambda1>": [], "testing.test_pluginmanager.TestPytestPluginManager.test_canonical_import": ["types.ModuleType", "_pytest.config.PytestPluginManager"], "testing.test_pluginmanager.TestPytestPluginManager.test_consider_module": ["types.ModuleType"], "testing.test_pluginmanager.TestPytestPluginManager.test_consider_module_import_module": ["<builtin>.len", "types.ModuleType"], "testing.test_pluginmanager.TestPytestPluginManager.test_consider_env_fails_to_import": ["pytest.raises"], "testing.test_pluginmanager.TestPytestPluginManager": ["pytest.mark.filterwarnings"], "testing.test_pluginmanager.TestPytestPluginManager.test_plugin_skip": ["shutil.copy"], "shutil.copy": [], "testing.test_pluginmanager.TestPytestPluginManager.test_consider_env_plugin_instantiation": ["<builtin>.len"], "testing.test_pluginmanager.TestPytestPluginManager.test_pluginmanager_ENV_startup": [], "testing.test_pluginmanager.TestPytestPluginManager.test_import_plugin_importname": ["<builtin>.len", "pytest.raises"], "testing.test_pluginmanager.TestPytestPluginManager.test_import_plugin_dotted_name": ["pytest.raises"], "testing.test_pluginmanager.TestPytestPluginManager.test_consider_conftest_deps": ["pytest.raises", "_pytest.pathlib.import_path"], "_pytest.pathlib.import_path": [], "testing.test_pluginmanager.TestPytestPluginManagerBootstrapming.test_preparse_args": ["pytest.raises"], "testing.test_pluginmanager.TestPytestPluginManagerBootstrapming.test_preparse_args.<lambda1>": [], "testing.test_pluginmanager.TestPytestPluginManagerBootstrapming.test_plugin_prevent_register": ["<builtin>.len"], "testing.test_pluginmanager.TestPytestPluginManagerBootstrapming.test_plugin_prevent_register_unregistered_alredy_registered": [], "testing.test_pluginmanager.TestPytestPluginManagerBootstrapming.test_plugin_prevent_register_stepwise_on_cacheprovider_unregister": [], "testing.test_pluginmanager.TestPytestPluginManagerBootstrapming.test_blocked_plugin_can_be_used": [], "testing.test_conftest": ["pytest.mark.skipif", "pytest.mark.parametrize", "os.path.normcase"], "testing.test_conftest.ConftestWithSetinitial": ["_pytest.config.PytestPluginManager", "testing.test_conftest.conftest_setinitial"], "testing.test_conftest.conftest_setinitial": ["pathlib.Path", "_pytest.reports.BaseReport.__init__", "testing.test_conftest.conftest_setinitial.Namespace.__init__", "typing.cast"], "testing.test_conftest.conftest_setinitial.Namespace.__init__": ["os.fspath"], "os.fspath": [], "_pytest.reports.BaseReport.__init__": [], "typing.cast": [], "testing.test_conftest.TestConftestValueAccessGlobal": ["pytest.fixture"], "testing.test_conftest.TestConftestValueAccessGlobal.basedir": [], "testing.test_conftest.TestConftestValueAccessGlobal.test_basic_init": ["_pytest.config.PytestPluginManager"], "testing.test_conftest.TestConftestValueAccessGlobal.test_immediate_initialiation_and_incremental_are_the_same": ["<builtin>.len", "_pytest.config.PytestPluginManager", "pathlib.Path"], "testing.test_conftest.TestConftestValueAccessGlobal.test_value_access_not_existing": ["pathlib.Path", "pytest.raises", "testing.test_conftest.ConftestWithSetinitial"], "testing.test_conftest.TestConftestValueAccessGlobal.test_value_access_by_path": ["testing.test_conftest.ConftestWithSetinitial"], "testing.test_conftest.TestConftestValueAccessGlobal.test_value_access_with_confmod": ["pathlib.Path", "testing.test_conftest.ConftestWithSetinitial"], "testing.test_conftest.test_conftest_in_nonpkg_with_init": ["testing.test_conftest.ConftestWithSetinitial"], "testing.test_conftest.test_doubledash_considered": ["<builtin>.len", "_pytest.config.PytestPluginManager", "testing.test_conftest.conftest_setinitial"], "testing.test_conftest.test_issue151_load_all_conftests": ["<builtin>.set", "<builtin>.len", "_pytest.config.PytestPluginManager", "testing.test_conftest.conftest_setinitial"], "<builtin>.set": [], "testing.test_conftest.test_conftest_global_import": [], "testing.test_conftest.test_conftestcutdir": ["<builtin>.len", "_pytest.config.PytestPluginManager", "testing.test_conftest.conftest_setinitial", "<builtin>.str"], "testing.test_conftest.test_conftestcutdir_inplace_considered": ["<builtin>.len", "_pytest.config.PytestPluginManager", "testing.test_conftest.conftest_setinitial", "<builtin>.str"], "testing.test_conftest.test_setinitial_conftest_subdirs": ["<builtin>.len", "_pytest.config.PytestPluginManager", "<builtin>.set", "<builtin>.str", "testing.test_conftest.conftest_setinitial"], "testing.test_conftest.test_conftest_confcutdir": ["textwrap.dedent"], "testing.test_conftest.test_installed_conftest_is_picked_up": ["textwrap.dedent"], "testing.test_conftest.test_conftest_symlink": ["_pytest.pathlib.symlink_or_skip"], "_pytest.pathlib.symlink_or_skip": [], "testing.test_conftest.test_conftest_symlink_files": ["_pytest.pathlib.symlink_or_skip", "textwrap.dedent", "os.chdir"], "os.path.normcase": [], "pytest.mark.skipif": [], "testing.test_conftest.test_conftest_badcase": ["os.chdir"], "testing.test_conftest.test_conftest_uppercase": ["os.chdir"], "testing.test_conftest.test_no_conftest": [], "testing.test_conftest.test_conftest_existing_junitxml": ["textwrap.dedent"], "testing.test_conftest.test_conftest_import_order": ["typing.cast", "_pytest.config.PytestPluginManager"], "testing.test_conftest.test_conftest_import_order.impct": [], "testing.test_conftest.test_fixture_dependency": ["textwrap.dedent"], "testing.test_conftest.test_conftest_found_with_double_dash": ["textwrap.dedent", "<builtin>.str"], "testing.test_conftest.TestConftestVisibility._setup_tree": ["<builtin>.print", "textwrap.dedent", "<builtin>.str"], "testing.test_conftest.TestConftestVisibility": ["pytest.mark.parametrize"], "testing.test_conftest.TestConftestVisibility.test_parsefactories_relative_node_ids": ["<builtin>.print", "os.chdir", "testing.test_conftest.TestConftestVisibility._setup_tree"], "testing.test_conftest.test_search_conftest_up_to_inifile": ["textwrap.dedent", "<builtin>.str"], "testing.test_conftest.test_issue1073_conftest_special_objects": [], "testing.test_conftest.test_conftest_exception_handling": [], "testing.test_conftest.test_hook_proxy": [], "testing.test_conftest.test_required_option_help": ["textwrap.dedent"], "testing.test_setupplan": [], "testing.test_setupplan.test_show_fixtures_and_test": [], "testing.test_setupplan.test_show_multi_test_fixture_setup_and_teardown_correctly_simple": [], "testing.test_setupplan.test_show_multi_test_fixture_setup_and_teardown_same_as_setup_show": [], "testing.test_mark_expression": ["pytest.mark.parametrize"], "testing.test_mark_expression.evaluate": ["_pytest.mark.expression.Expression.compile"], "_pytest.mark.expression.Expression.compile": [], "testing.test_mark_expression.test_empty_is_false": ["testing.test_mark_expression.evaluate"], "testing.test_mark_expression.test_empty_is_false.<lambda1>": [], "testing.test_mark_expression.test_empty_is_false.<lambda2>": [], "testing.test_mark_expression.test_empty_is_false.<lambda3>": [], "testing.test_mark_expression.test_empty_is_false.<lambda4>": [], "testing.test_mark_expression.test_basic": ["testing.test_mark_expression.evaluate"], "testing.test_mark_expression.test_syntax_oddeties": ["testing.test_mark_expression.evaluate"], "testing.test_mark_expression.test_backslash_not_treated_specially": ["testing.test_mark_expression.evaluate", "pytest.raises"], "testing.test_mark_expression.test_syntax_errors": ["testing.test_mark_expression.evaluate", "pytest.raises"], "testing.test_mark_expression.test_syntax_errors.<lambda1>": [], "testing.test_mark_expression.test_valid_idents": ["testing.test_mark_expression.evaluate"], "testing.test_mark_expression.test_invalid_idents": ["testing.test_mark_expression.evaluate", "pytest.raises"], "testing.test_mark_expression.test_invalid_idents.<lambda1>": [], "testing.test_unraisableexception": ["pytest.skip", "pytest.mark.filterwarnings"], "testing.test_unraisableexception.test_unraisable": [], "testing.test_unraisableexception.test_unraisable_in_setup": [], "testing.test_unraisableexception.test_unraisable_in_teardown": [], "testing.test_unraisableexception.test_unraisable_warning_error": [], "testing.test_meta": ["testing.test_meta._modules", "pytest.mark.parametrize", "pytest.mark.slow"], "testing.test_meta._modules": ["<builtin>.sorted", "pkgutil.walk_packages"], "pkgutil.walk_packages": [], "pytest.mark.slow": [], "testing.test_meta.test_no_warnings": ["subprocess.check_call"], "subprocess.check_call": [], "testing.typing_checks": ["pytest.mark.xfail", "pytest.mark.parametrize", "pytest.fixture"], "testing.typing_checks.check_mark_xfail_raises": [], "testing.typing_checks.<lambda1>": ["<builtin>.str"], "testing.typing_checks.check_fixture_ids_callable": [], "testing.typing_checks.<lambda2>": ["<builtin>.str"], "testing.typing_checks.check_parametrize_ids_callable": [], "testing.typing_checks.check_raises_is_a_context_manager": ["typing_extensions.assert_type", "contextlib.nullcontext", "pytest.raises"], "contextlib.nullcontext": [], "typing_extensions.assert_type": [], "testing.freeze.create_executable": ["subprocess.check_call", "pytest.freeze_includes"], "pytest.freeze_includes": [], "testing.freeze.tox_run": ["os.path.join", "sys.exit", "os.getcwd", "sys.platform.startswith", "os.system"], "os.getcwd": [], "os.path.join": [], "sys.platform.startswith": [], "os.system": [], "sys.exit": [], "testing.freeze.tests.test_trivial": [], "testing.freeze.tests.test_trivial.test_upper": [], "testing.freeze.tests.test_trivial.test_lower": [], "testing.freeze.runtests_script": ["pytest.main", "sys.exit"], "testing.code.test_excinfo": ["pytest.mark.parametrize", "pytest.mark.usefixtures", "pytest.mark.skipif", "pytest.fixture"], "testing.code.test_excinfo.limited_recursion_depth": ["sys.setrecursionlimit", "sys.getrecursionlimit"], "sys.getrecursionlimit": [], "sys.setrecursionlimit": [], "testing.code.test_excinfo.test_excinfo_simple": ["_pytest._code.ExceptionInfo.from_current"], "_pytest._code.ExceptionInfo.from_current": [], "testing.code.test_excinfo.test_excinfo_from_exc_info_simple": ["_pytest._code.ExceptionInfo.from_exc_info", "<builtin>.type"], "_pytest._code.ExceptionInfo.from_exc_info": [], "testing.code.test_excinfo.test_excinfo_getstatement": ["_pytest._code.ExceptionInfo.from_current", "testing.code.test_excinfo.test_excinfo_getstatement.f", "<builtin>.list"], "testing.code.test_excinfo.test_excinfo_getstatement.g": [], "testing.code.test_excinfo.test_excinfo_getstatement.f": ["testing.code.test_excinfo.test_excinfo_getstatement.g"], "testing.code.test_excinfo.f": [], "testing.code.test_excinfo.g": ["testing.code.test_excinfo.f"], "testing.code.test_excinfo.h": ["testing.code.test_excinfo.g"], "testing.code.test_excinfo.TestTraceback_f_g_h.setup_method": ["_pytest._code.ExceptionInfo.from_current", "testing.code.test_excinfo.h"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_entries": ["<builtin>.len", "<builtin>.list"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_entry_getsource": ["<builtin>.str"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_entry_getsource_in_construct": ["_pytest._code.ExceptionInfo.from_current", "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_entry_getsource_in_construct.xyz"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_entry_getsource_in_construct.xyz": [], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_cut": ["<builtin>.len", "_pytest._code.Code.from_function", "<builtin>.isinstance"], "_pytest._code.Code.from_function": [], "<builtin>.isinstance": [], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_cut_excludepath": ["pathlib.Path", "<builtin>.isinstance", "pytest.raises", "_pytest.pathlib.import_path"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_filter": ["<builtin>.len"], "testing.code.test_excinfo.TestTraceback_f_g_h": ["pytest.mark.parametrize"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_filter_selective": ["<builtin>.print", "<builtin>.len", "pytest.raises"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_filter_selective.f": [], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_filter_selective.g": ["testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_filter_selective.f"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_filter_selective.h": ["testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_filter_selective.g"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_recursion_index": ["pytest.raises"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_recursion_index.f": ["testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_recursion_index.f"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_only_specific_recursion_errors": ["pytest.raises", "<builtin>.str"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_only_specific_recursion_errors.f": ["testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_only_specific_recursion_errors.f", "<builtin>.RuntimeError"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_no_recursion_index": ["pytest.raises"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_no_recursion_index.do_stuff": [], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_no_recursion_index.reraise_me": ["sys.exc_info"], "sys.exc_info": [], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_no_recursion_index.f": ["testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_no_recursion_index.reraise_me", "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_no_recursion_index.do_stuff"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_messy_recursion": ["testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_messy_recursion.log", "pytest.raises", "pytest.importorskip"], "pytest.importorskip": [], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_messy_recursion.log": ["<builtin>.print"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_messy_recursion.fail": ["<builtin>.ValueError"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_getcrashentry": ["_pytest._code.Code.from_function", "pytest.raises"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_getcrashentry.i": [], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_getcrashentry.h": ["testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_getcrashentry.i"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_getcrashentry.g": ["testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_getcrashentry.h"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_getcrashentry.f": ["testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_getcrashentry.g"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_getcrashentry_empty": ["_pytest._code.Code.from_function", "pytest.raises"], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_getcrashentry_empty.g": [], "testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_getcrashentry_empty.f": ["testing.code.test_excinfo.TestTraceback_f_g_h.test_traceback_getcrashentry_empty.g"], "testing.code.test_excinfo.test_excinfo_exconly": ["<builtin>.ValueError", "pytest.raises"], "testing.code.test_excinfo.test_excinfo_repr_str": ["<builtin>.repr", "pytest.raises", "<builtin>.str"], "testing.code.test_excinfo.test_excinfo_repr_str.CustomException.__repr__": [], "testing.code.test_excinfo.test_excinfo_repr_str.raises": [], "testing.code.test_excinfo.test_excinfo_for_later": ["<builtin>.repr", "<builtin>.str"], "testing.code.test_excinfo.test_excinfo_errisinstance": ["pytest.raises"], "testing.code.test_excinfo.test_excinfo_no_sourcecode": ["<builtin>.exec", "_pytest._code.ExceptionInfo.from_current", "<builtin>.str"], "<builtin>.exec": [], "testing.code.test_excinfo.test_excinfo_no_python_sourcecode": ["<builtin>.print", "<builtin>.isinstance", "pytest.raises", "<builtin>.str", "pytest.importorskip"], "testing.code.test_excinfo.test_entrysource_Queue_example": ["_pytest._code.ExceptionInfo.from_current", "queue.Queue", "<builtin>.str"], "queue.Queue": [], "testing.code.test_excinfo.test_codepath_Queue_example": ["<builtin>.isinstance", "_pytest._code.ExceptionInfo.from_current", "queue.Queue"], "testing.code.test_excinfo.test_match_succeeds": ["pytest.raises"], "testing.code.test_excinfo.test_match_raises_error": [], "testing.code.test_excinfo.TestFormattedExcinfo": ["pytest.param", "pytest.fixture", "pytest.mark.parametrize"], "testing.code.test_excinfo.TestFormattedExcinfo.importasmod": [], "testing.code.test_excinfo.TestFormattedExcinfo.importasmod.importasmod": ["importlib.invalidate_caches", "textwrap.dedent", "_pytest.pathlib.import_path"], "importlib.invalidate_caches": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source": ["<builtin>.len", "_pytest._code.Source", "_pytest._code.code.FormattedExcinfo"], "_pytest._code.code.FormattedExcinfo": [], "_pytest._code.Source": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_excinfo": ["<builtin>.print", "_pytest._code.ExceptionInfo.from_current", "_pytest._code.code.FormattedExcinfo", "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_excinfo.f"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_excinfo.f": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_not_existing": ["<builtin>.exec", "_pytest._code.ExceptionInfo.from_current", "<builtin>.compile", "_pytest._code.code.FormattedExcinfo"], "<builtin>.compile": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_many_line_source_not_existing": ["<builtin>.exec", "_pytest._code.ExceptionInfo.from_current", "<builtin>.compile", "_pytest._code.code.FormattedExcinfo"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_failing_fullsource": ["<builtin>.property", "_pytest._code.code.FormattedExcinfo", "_pytest._code.code.ExceptionInfo.from_current"], "_pytest._code.code.ExceptionInfo.from_current": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_failing_fullsource.<lambda1>": [], "<builtin>.property": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_local": ["_pytest._code.code.FormattedExcinfo"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_local_with_error": ["_pytest._code.code.FormattedExcinfo"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_local_with_error.ObjWithErrorInRepr.__repr__": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_local_with_exception_in_class_property": ["_pytest._code.code.FormattedExcinfo"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_local_with_exception_in_class_property.ExceptionWithBrokenClass.__class__": ["<builtin>.TypeError"], "<builtin>.TypeError": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_local_with_exception_in_class_property.ObjWithErrorInRepr.__repr__": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_local_truncated": ["<builtin>.range", "_pytest._code.code.FormattedExcinfo"], "<builtin>.range": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_tracebackentry_lines": ["_pytest._code.code.FormattedExcinfo", "pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_tracebackentry_lines2": ["<builtin>.repr", "_pytest._code.code.FormattedExcinfo", "pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_tracebackentry_lines_var_kw_args": ["<builtin>.repr", "_pytest._code.code.FormattedExcinfo", "pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_tracebackentry_short": ["pathlib.Path", "_pytest._code.code.FormattedExcinfo", "pytest.raises", "<builtin>.str"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_tracebackentry_no": ["_pytest._code.code.FormattedExcinfo", "pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_traceback_tbfilter": ["<builtin>.len", "_pytest._code.code.FormattedExcinfo", "pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_traceback_short_no_source": ["_pytest._code.code.FormattedExcinfo", "pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_traceback_and_excinfo": ["<builtin>.len", "_pytest._code.code.FormattedExcinfo", "pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_traceback_with_invalid_cwd": ["pathlib.Path", "_pytest.pytester.LineMatcher", "pytest.raises", "<builtin>.str", "_pytest._code.code.FormattedExcinfo"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_traceback_with_invalid_cwd.raiseos": ["<builtin>.OSError", "sys._getframe", "pathlib.Path.cwd"], "sys._getframe": [], "<builtin>.OSError": [], "pathlib.Path.cwd": [], "_pytest.pytester.LineMatcher": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_excinfo_addouterr": ["pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_excinfo_reprcrash": ["pytest.raises", "<builtin>.str"], "testing.code.test_excinfo.TestFormattedExcinfo.test_repr_traceback_recursion": ["_pytest._code.code.FormattedExcinfo", "pytest.raises", "<builtin>.str"], "testing.code.test_excinfo.TestFormattedExcinfo.test_reprexcinfo_getrepr": ["<builtin>.isinstance", "pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_reprexcinfo_unicode": ["<builtin>.str", "_pytest._code.code.TerminalRepr.__init__"], "testing.code.test_excinfo.TestFormattedExcinfo.test_reprexcinfo_unicode.MyRepr.toterminal": [], "_pytest._code.code.TerminalRepr.__init__": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_toterminal_long": ["pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_toterminal_long_missing_source": ["pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_toterminal_long_incomplete_source": ["pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_toterminal_long_filenames": ["<builtin>.len", "pathlib.Path", "pathlib.Path.cwd", "_pytest.pathlib.bestrelpath", "pytest.raises", "<builtin>.str"], "_pytest.pathlib.bestrelpath": [], "pytest.param": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_format_excinfo": ["io.StringIO", "_pytest._io.TerminalWriter", "pytest.raises", "testing.code.test_excinfo.TestFormattedExcinfo.test_format_excinfo.foo"], "testing.code.test_excinfo.TestFormattedExcinfo.test_format_excinfo.bar": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_format_excinfo.foo": ["testing.code.test_excinfo.TestFormattedExcinfo.test_format_excinfo.bar"], "io.StringIO": [], "_pytest._io.TerminalWriter": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_traceback_repr_style": ["<builtin>.print", "pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_exc_chain_repr": ["<builtin>.print", "pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_exc_repr_chain_suppression": ["<builtin>.print", "<builtin>.len", "pytest.raises"], "testing.code.test_excinfo.TestFormattedExcinfo.test_exc_chain_repr_without_traceback": ["_pytest.pytester.LineMatcher", "pytest.raises", "io.StringIO", "_pytest._io.TerminalWriter", "<builtin>.getattr"], "<builtin>.getattr": [], "testing.code.test_excinfo.TestFormattedExcinfo.test_exc_chain_repr_cycle": ["<builtin>.isinstance", "pytest.raises", "textwrap.dedent"], "testing.code.test_excinfo.TestFormattedExcinfo.test_exec_type_error_filter": ["pytest.raises"], "testing.code.test_excinfo.test_repr_traceback_with_unicode": ["_pytest._code.code.FormattedExcinfo", "<builtin>.RuntimeError", "_pytest._code.code.ExceptionInfo.from_current"], "testing.code.test_excinfo.test_cwd_deleted": [], "testing.code.test_excinfo.test_regression_nagative_line_index": [], "pytest.mark.usefixtures": [], "testing.code.test_excinfo.test_exception_repr_extraction_error_on_recursion": ["testing.code.test_excinfo.test_exception_repr_extraction_error_on_recursion.a", "_pytest.pytester.LineMatcher", "pytest.raises", "<builtin>.str"], "testing.code.test_excinfo.test_exception_repr_extraction_error_on_recursion.numpy_like.__eq__": ["<builtin>.ValueError", "<builtin>.type"], "testing.code.test_excinfo.test_exception_repr_extraction_error_on_recursion.a": ["testing.code.test_excinfo.test_exception_repr_extraction_error_on_recursion.b"], "testing.code.test_excinfo.test_exception_repr_extraction_error_on_recursion.b": ["testing.code.test_excinfo.test_exception_repr_extraction_error_on_recursion.a"], "testing.code.test_excinfo.test_no_recursion_index_on_recursion_error": ["pytest.raises", "<builtin>.str"], "testing.code.test_excinfo.test_no_recursion_index_on_recursion_error.RecursionDepthError.__getattr__": ["<builtin>.getattr"], "testing.code.test_excinfo._exceptiongroup_common": [], "testing.code.test_excinfo.test_native_exceptiongroup": ["testing.code.test_excinfo._exceptiongroup_common"], "testing.code.test_excinfo.test_exceptiongroup": ["testing.code.test_excinfo._exceptiongroup_common", "pytest.importorskip"], "testing.code.test_source": [], "testing.code.test_source.test_source_str_function": ["_pytest._code.Source", "<builtin>.str"], "testing.code.test_source.test_source_from_function": ["_pytest._code.Source", "<builtin>.str"], "testing.code.test_source.test_source_from_method": ["_pytest._code.Source"], "testing.code.test_source.test_source_from_method.TestClass.test_method": [], "testing.code.test_source.test_source_from_lines": ["_pytest._code.Source"], "testing.code.test_source.test_source_from_inner_function": ["_pytest._code.Source", "<builtin>.str"], "testing.code.test_source.test_source_from_inner_function.f": ["<builtin>.NotImplementedError"], "<builtin>.NotImplementedError": [], "testing.code.test_source.test_source_strips": ["_pytest._code.Source", "<builtin>.str"], "testing.code.test_source.test_source_strip_multiline": ["_pytest._code.Source"], "testing.code.test_source.TestAccesses.setup_class": ["_pytest._code.Source"], "testing.code.test_source.TestAccesses.test_getrange": ["<builtin>.len", "<builtin>.str"], "testing.code.test_source.TestAccesses.test_getrange_step_not_supported": ["pytest.raises"], "testing.code.test_source.TestAccesses.test_getline": [], "testing.code.test_source.TestAccesses.test_len": ["<builtin>.len"], "testing.code.test_source.TestAccesses.test_iter": ["<builtin>.len"], "testing.code.test_source.TestSourceParsing.setup_class": ["_pytest._code.Source"], "testing.code.test_source.TestSourceParsing.test_getstatement": ["<builtin>.range", "<builtin>.str"], "testing.code.test_source.TestSourceParsing.test_getstatementrange_triple_quoted": ["_pytest._code.Source"], "testing.code.test_source.TestSourceParsing.test_getstatementrange_within_constructs": ["<builtin>.len", "_pytest._code.Source"], "testing.code.test_source.TestSourceParsing.test_getstatementrange_bug": ["<builtin>.len", "_pytest._code.Source"], "testing.code.test_source.TestSourceParsing.test_getstatementrange_bug2": ["<builtin>.len", "_pytest._code.Source"], "testing.code.test_source.TestSourceParsing.test_getstatementrange_ast_issue58": ["_pytest._code.Source", "testing.code.test_source.getstatement"], "testing.code.test_source.getstatement": ["_pytest._code.source.getstatementrange_ast", "_pytest._code.Source"], "testing.code.test_source.TestSourceParsing.test_getstatementrange_out_of_bounds_py3": ["_pytest._code.Source"], "testing.code.test_source.TestSourceParsing.test_getstatementrange_with_syntaxerror_issue7": ["_pytest._code.Source", "pytest.raises"], "testing.code.test_source.TestSourceParsing.test_getstatementrange_with_syntaxerror_issue7.<lambda1>": [], "testing.code.test_source.test_getstartingblock_singleline": ["<builtin>.len", "testing.code.test_source.test_getstartingblock_singleline.A.__init__"], "testing.code.test_source.test_getstartingblock_singleline.A.__init__": ["_pytest._code.Frame", "sys._getframe"], "_pytest._code.Frame": [], "testing.code.test_source.test_getline_finally": ["testing.code.test_source.test_getline_finally.c", "pytest.raises", "<builtin>.str"], "testing.code.test_source.test_getline_finally.c": [], "testing.code.test_source.test_getfuncsource_dynamic": ["_pytest._code.Source", "<builtin>.str"], "testing.code.test_source.test_getfuncsource_dynamic.f": ["<builtin>.NotImplementedError"], "testing.code.test_source.test_getfuncsource_dynamic.g": [], "testing.code.test_source.test_getfuncsource_with_multine_string": ["_pytest._code.Source", "<builtin>.str"], "testing.code.test_source.test_getfuncsource_with_multine_string.f": [], "testing.code.test_source.test_deindent": ["_pytest._code.source.deindent"], "_pytest._code.source.deindent": [], "testing.code.test_source.test_source_of_class_at_eof_without_newline": ["_pytest.pathlib.import_path", "_pytest._code.Source", "<builtin>.str"], "testing.code.test_source.x": [], "testing.code.test_source.test_source_fallback": ["_pytest._code.Source", "<builtin>.str"], "testing.code.test_source.test_findsource_fallback": ["_pytest._code.source.findsource", "<builtin>.str"], "_pytest._code.source.findsource": [], "testing.code.test_source.test_findsource": ["_pytest._code.source.findsource", "<builtin>.compile", "<builtin>.eval", "<builtin>.str"], "<builtin>.eval": [], "testing.code.test_source.test_getfslineno": ["inspect.findsource", "_pytest._code.getfslineno", "<builtin>.isinstance"], "testing.code.test_source.test_getfslineno.f": ["<builtin>.NotImplementedError"], "_pytest._code.getfslineno": [], "inspect.findsource": [], "testing.code.test_source.test_code_of_object_instance_with_call": ["_pytest._code.Code.from_function", "pytest.raises", "<builtin>.str"], "testing.code.test_source.test_code_of_object_instance_with_call.<lambda1>": ["_pytest._code.Source", "testing.code.test_source.test_source_from_inner_function.f"], "testing.code.test_source.test_code_of_object_instance_with_call.WithCall.__call__": [], "testing.code.test_source.test_code_of_object_instance_with_call.Hello.__call__": [], "testing.code.test_source.test_code_of_object_instance_with_call.<lambda2>": ["_pytest._code.Code.from_function"], "_pytest._code.source.getstatementrange_ast": [], "testing.code.test_source.test_oneline": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.test_comment_and_no_newline_at_end": ["_pytest._code.source.getstatementrange_ast", "_pytest._code.Source"], "testing.code.test_source.test_oneline_and_comment": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.test_comments": ["<builtin>.hasattr", "<builtin>.range", "testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.test_comment_in_statement": ["<builtin>.range", "testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.test_source_with_decorator": ["inspect.getsource", "pytest.fixture", "<builtin>.str", "_pytest._code.Source", "pytest.mark.foo", "_pytest.compat.get_real_func", "textwrap.indent"], "pytest.mark.foo": [], "testing.code.test_source.test_source_with_decorator.deco_mark": [], "inspect.getsource": [], "textwrap.indent": [], "testing.code.test_source.test_source_with_decorator.deco_fixture": [], "_pytest.compat.get_real_func": [], "testing.code.test_source.test_single_line_else": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.test_single_line_finally": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.test_issue55": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.test_multiline": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.TestTry.setup_class": [], "testing.code.test_source.TestTry.test_body": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.TestTry.test_except_line": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.TestTry.test_except_body": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.TestTry.test_else": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.TestTryFinally.setup_class": [], "testing.code.test_source.TestTryFinally.test_body": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.TestTryFinally.test_finally": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.TestIf.setup_class": [], "testing.code.test_source.TestIf.test_body": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.TestIf.test_elif_clause": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.TestIf.test_elif": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.TestIf.test_else": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.test_semicolon": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.test_def_online": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.test_decorator": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.XXX_test_expression_multiline": ["testing.code.test_source.getstatement", "<builtin>.str"], "testing.code.test_source.test_getstartingblock_multiline": ["<builtin>.len", "testing.code.test_source.test_getstartingblock_multiline.A.__init__"], "testing.code.test_source.test_getstartingblock_multiline.A.__init__": ["_pytest._code.Frame", "sys._getframe"], "testing.code.test_code": [], "testing.code.test_code.test_ne": ["<builtin>.compile", "_pytest._code.Code"], "_pytest._code.Code": [], "testing.code.test_code.test_code_gives_back_name_for_not_existing_file": ["<builtin>.str", "<builtin>.compile", "_pytest._code.Code"], "testing.code.test_code.test_code_from_function_with_class": ["_pytest._code.Code.from_function", "pytest.raises"], "testing.code.test_code.x": ["<builtin>.NotImplementedError"], "testing.code.test_code.test_code_fullsource": ["_pytest._code.Code.from_function", "<builtin>.str"], "testing.code.test_code.test_code_source": ["_pytest._code.Code.from_function", "<builtin>.str"], "testing.code.test_code.test_frame_getsourcelineno_myself": ["_pytest._code.Frame", "testing.code.test_code.test_frame_getsourcelineno_myself.func"], "testing.code.test_code.test_frame_getsourcelineno_myself.func": ["sys._getframe"], "testing.code.test_code.test_getstatement_empty_fullsource": ["testing.code.test_code.test_getstatement_empty_fullsource.func", "unittest.mock.patch.object", "_pytest._code.Source", "_pytest._code.Frame"], "testing.code.test_code.test_getstatement_empty_fullsource.func": ["sys._getframe"], "unittest.mock.patch.object": [], "testing.code.test_code.test_code_from_func": ["_pytest._code.Code.from_function"], "testing.code.test_code.test_unicode_handling": ["pytest.raises", "<builtin>.str"], "testing.code.test_code.test_unicode_handling.f": ["<builtin>.Exception"], "<builtin>.Exception": [], "testing.code.test_code.test_code_getargs": ["_pytest._code.Code.from_function"], "testing.code.test_code.test_code_getargs.f1": ["<builtin>.NotImplementedError"], "testing.code.test_code.test_code_getargs.f2": ["<builtin>.NotImplementedError"], "testing.code.test_code.test_code_getargs.f3": ["<builtin>.NotImplementedError"], "testing.code.test_code.test_code_getargs.f4": ["<builtin>.NotImplementedError"], "testing.code.test_code.test_frame_getargs": ["testing.code.test_code.test_frame_getargs.f1", "testing.code.test_code.test_frame_getargs.f3", "testing.code.test_code.test_frame_getargs.f4", "_pytest._code.Frame", "testing.code.test_code.test_frame_getargs.f2"], "testing.code.test_code.test_frame_getargs.f1": ["sys._getframe"], "testing.code.test_code.test_frame_getargs.f2": ["sys._getframe"], "testing.code.test_code.test_frame_getargs.f3": ["sys._getframe"], "testing.code.test_code.test_frame_getargs.f4": ["sys._getframe"], "testing.code.test_code.TestExceptionInfo.test_bad_getsource": ["_pytest._code.ExceptionInfo.from_current"], "testing.code.test_code.TestExceptionInfo.test_from_current_with_missing": ["_pytest._code.ExceptionInfo.from_current", "pytest.raises"], "testing.code.test_code.TestTracebackEntry.test_getsource": ["<builtin>.len", "_pytest._code.ExceptionInfo.from_current"], "testing.code.test_code.TestTracebackEntry.test_tb_entry_str": ["_pytest._code.ExceptionInfo.from_current", "re.match", "<builtin>.str"], "re.match": [], "testing.code.test_code.TestReprFuncArgs.test_not_raise_exception_with_mixed_encoding": ["_pytest._code.code.ReprFuncArgs"], "_pytest._code.code.ReprFuncArgs": [], "testing.code.test_code.test_ExceptionChainRepr": ["_pytest._code.ExceptionInfo.from_current", "<builtin>.hash", "<builtin>.isinstance", "<builtin>.ValueError"], "<builtin>.hash": [], "testing.test_mark": ["pytest.mark.filterwarnings", "pytest.mark.parametrize"], "testing.test_mark.TestMark": ["pytest.mark.parametrize"], "testing.test_mark.TestMark.test_pytest_exists_in_namespace_all": [], "testing.test_mark.TestMark.test_pytest_mark_notcallable": ["_pytest.mark.MarkGenerator", "pytest.raises"], "_pytest.mark.MarkGenerator": [], "testing.test_mark.TestMark.test_mark_with_param": ["pytest.mark.foo.with_args", "pytest.mark.foo"], "testing.test_mark.TestMark.test_mark_with_param.some_function": [], "pytest.mark.foo.with_args": [], "testing.test_mark.TestMark.test_pytest_mark_name_starts_with_underscore": ["_pytest.mark.MarkGenerator", "pytest.raises"], "testing.test_mark.test_marked_class_run_twice": ["os.path.basename"], "os.path.basename": [], "testing.test_mark.test_ini_markers": [], "testing.test_mark.test_markers_option": [], "testing.test_mark.test_ini_markers_whitespace": [], "testing.test_mark.test_marker_without_description": [], "testing.test_mark.test_markers_option_with_plugin_in_current_dir": [], "testing.test_mark.test_mark_on_pseudo_function": [], "testing.test_mark.test_strict_prohibits_unregistered_markers": [], "testing.test_mark.test_mark_option": [], "testing.test_mark.test_mark_option_custom": [], "testing.test_mark.test_keyword_option_custom": [], "testing.test_mark.test_keyword_option_considers_mark": ["<builtin>.len"], "testing.test_mark.test_keyword_option_parametrize": [], "testing.test_mark.test_parametrize_with_module": [], "testing.test_mark.test_keyword_option_wrong_arguments": [], "testing.test_mark.test_parametrized_collected_from_command_line": ["os.path.basename"], "testing.test_mark.test_parametrized_collect_with_wrong_args": [], "testing.test_mark.test_parametrized_with_kwargs": [], "testing.test_mark.test_parametrize_iterator": [], "testing.test_mark.TestFunctional.test_merging_markers_deep": ["<builtin>.print"], "testing.test_mark.TestFunctional.test_mark_decorator_subclass_does_not_propagate_to_base": ["testing.test_mark.TestFunctional.assert_markers"], "testing.test_mark.TestFunctional.assert_markers": ["<builtin>.set"], "testing.test_mark.TestFunctional.test_mark_should_not_pass_to_siebling_class": ["<builtin>.print", "<builtin>.list"], "testing.test_mark.TestFunctional.test_mark_decorator_baseclasses_merged": ["testing.test_mark.TestFunctional.assert_markers"], "testing.test_mark.TestFunctional.test_mark_closest": [], "testing.test_mark.TestFunctional.test_mark_with_wrong_marker": ["<builtin>.len", "<builtin>.str"], "testing.test_mark.TestFunctional.test_mark_dynamically_in_funcarg": [], "testing.test_mark.TestFunctional.test_no_marker_match_on_unmarked_names": ["<builtin>.len"], "testing.test_mark.TestFunctional.test_keywords_at_node_level": [], "testing.test_mark.TestFunctional.test_keyword_added_for_session": [], "testing.test_mark.TestFunctional": ["pytest.mark.filterwarnings"], "testing.test_mark.TestFunctional.test_mark_from_parameters": [], "testing.test_mark.TestFunctional.test_reevaluate_dynamic_expr": ["os.path.basename"], "testing.test_mark.TestKeywordSelection.test_select_simple": ["testing.test_mark.TestKeywordSelection.test_select_simple.check"], "testing.test_mark.TestKeywordSelection.test_select_simple.check": ["<builtin>.len"], "testing.test_mark.TestKeywordSelection": ["pytest.mark.xfail", "pytest.mark.parametrize"], "testing.test_mark.TestKeywordSelection.test_select_extra_keywords": ["<builtin>.repr", "<builtin>.len", "<builtin>.print"], "testing.test_mark.TestKeywordSelection.test_keyword_extra": [], "testing.test_mark.TestKeywordSelection.test_keyword_extra_dash": [], "testing.test_mark.TestKeywordSelection.test_no_magic_values": ["<builtin>.len"], "testing.test_mark.TestKeywordSelection.test_no_match_directories_outside_the_suite": ["testing.test_mark.TestKeywordSelection.test_no_match_directories_outside_the_suite.get_collected_names"], "testing.test_mark.TestKeywordSelection.test_no_match_directories_outside_the_suite.get_collected_names": ["<builtin>.len"], "testing.test_mark.TestMarkDecorator": ["pytest.mark.parametrize"], "testing.test_mark.TestMarkDecorator.test__eq__": [], "testing.test_mark.TestMarkDecorator.test_aliases": ["pytest.mark.foo"], "testing.test_mark.test_parameterset_for_parametrize_marks": ["_pytest.mark.get_empty_parameterset_mark", "_pytest.mark.pytest_configure"], "_pytest.mark.pytest_configure": [], "_pytest.mark.get_empty_parameterset_mark": [], "testing.test_mark.test_parameterset_for_fail_at_collect": ["_pytest.mark.get_empty_parameterset_mark", "_pytest.mark.pytest_configure", "pytest.raises", "<builtin>.str"], "testing.test_mark.test_parameterset_for_parametrize_bad_markname": ["testing.test_mark.test_parameterset_for_parametrize_marks", "pytest.raises"], "testing.test_mark.test_mark_expressions_no_smear": ["<builtin>.len"], "testing.test_mark.test_addmarker_order": ["unittest.mock.Mock", "_pytest.nodes.Node.from_parent"], "unittest.mock.Mock": [], "_pytest.nodes.Node.from_parent": [], "testing.test_mark.test_markers_from_parametrize": [], "testing.test_mark.test_pytest_param_id_requires_string": ["pytest.param", "pytest.raises"], "testing.test_mark.test_pytest_param_id_allows_none_or_string": ["pytest.param"], "testing.test_mark.test_marker_expr_eval_failure_handling": [], "testing.test_mark.test_mark_mro": ["_pytest.mark.structures.get_unpacked_marks", "pytest.mark.xfail"], "_pytest.mark.structures.get_unpacked_marks": [], "testing.test_scope": [], "testing.test_scope.test_ordering": [], "testing.test_scope.test_next_lower": ["_pytest.scope.Scope.Module.next_lower", "pytest.raises", "_pytest.scope.Scope.Function.next_lower", "_pytest.scope.Scope.Session.next_lower", "_pytest.scope.Scope.Class.next_lower", "_pytest.scope.Scope.Package.next_lower"], "_pytest.scope.Scope.Session.next_lower": [], "_pytest.scope.Scope.Package.next_lower": [], "_pytest.scope.Scope.Module.next_lower": [], "_pytest.scope.Scope.Class.next_lower": [], "_pytest.scope.Scope.Function.next_lower": [], "testing.test_scope.test_next_higher": ["pytest.raises", "_pytest.scope.Scope.Session.next_higher", "_pytest.scope.Scope.Package.next_higher", "_pytest.scope.Scope.Class.next_higher", "_pytest.scope.Scope.Function.next_higher", "_pytest.scope.Scope.Module.next_higher"], "_pytest.scope.Scope.Function.next_higher": [], "_pytest.scope.Scope.Class.next_higher": [], "_pytest.scope.Scope.Module.next_higher": [], "_pytest.scope.Scope.Package.next_higher": [], "_pytest.scope.Scope.Session.next_higher": [], "testing.test_scope.test_from_user": ["re.escape", "_pytest.scope.Scope.from_user", "pytest.raises"], "_pytest.scope.Scope.from_user": [], "testing.test_faulthandler": ["pytest.mark.parametrize"], "testing.test_faulthandler.test_enabled": [], "testing.test_faulthandler.setup_crashing_test": [], "testing.test_faulthandler.test_crash_during_shutdown_captured": ["testing.test_faulthandler.setup_crashing_test"], "testing.test_faulthandler.test_crash_during_shutdown_not_captured": ["testing.test_faulthandler.setup_crashing_test"], "testing.test_faulthandler.test_disabled": [], "testing.test_faulthandler.test_timeout": [], "testing.test_faulthandler.test_cancel_timeout_on_hook": ["<builtin>.getattr"], "testing.test_faulthandler.test_cancel_timeout_on_hook.<lambda1>": [], "testing.test_faulthandler.test_already_initialized_crash": [], "testing.test_faulthandler.test_get_stderr_fileno_invalid_fd": ["testing.test_capture.TextIO.__init__", "testing.test_junitxml.TestReport.__init__", "_pytest.faulthandler.get_stderr_fileno", "testing.logging.test_reporting.TerminalReporter.__init__", "testing.test_tmpdir.Config.__init__", "pytest.MonkeyPatch.context"], "testing.test_faulthandler.test_get_stderr_fileno_invalid_fd.StdErrWrapper.fileno": [], "testing.test_junitxml.TestReport.__init__": [], "testing.test_capture.TextIO.__init__": [], "testing.test_tmpdir.Config.__init__": [], "testing.logging.test_reporting.TerminalReporter.__init__": [], "pytest.MonkeyPatch.context": [], "_pytest.faulthandler.get_stderr_fileno": [], "testing.test_doctest": ["pytest.mark.parametrize"], "testing.test_doctest.TestDoctests.test_collect_testtextfile": ["<builtin>.len", "<builtin>.isinstance"], "testing.test_doctest.TestDoctests.test_collect_module_empty": ["<builtin>.len"], "testing.test_doctest.TestDoctests.test_collect_module_single_modulelevel_doctest": ["<builtin>.len", "<builtin>.isinstance"], "testing.test_doctest.TestDoctests.test_collect_module_two_doctest_one_modulelevel": ["<builtin>.len", "<builtin>.isinstance"], "testing.test_doctest.TestDoctests": ["pytest.mark.parametrize"], "testing.test_doctest.TestDoctests.test_collect_module_two_doctest_no_modulelevel": ["<builtin>.len", "<builtin>.isinstance"], "testing.test_doctest.TestDoctests.test_simple_doctestfile": [], "testing.test_doctest.TestDoctests.test_importmode": [], "testing.test_doctest.TestDoctests.test_new_pattern": [], "testing.test_doctest.TestDoctests.test_multiple_patterns": [], "testing.test_doctest.TestDoctests.test_encoding": ["<builtin>.repr"], "testing.test_doctest.TestDoctests.test_doctest_unexpected_exception": [], "testing.test_doctest.TestDoctests.test_doctest_outcomes": [], "testing.test_doctest.TestDoctests.test_docstring_partial_context_around_error": [], "testing.test_doctest.TestDoctests.test_docstring_full_context_around_error": [], "testing.test_doctest.TestDoctests.test_doctest_linedata_missing": ["textwrap.dedent"], "testing.test_doctest.TestDoctests.test_doctest_linedata_on_property": [], "testing.test_doctest.TestDoctests.test_doctest_no_linedata_on_overriden_property": [], "testing.test_doctest.TestDoctests.test_doctest_unex_importerror_only_txt": [], "testing.test_doctest.TestDoctests.test_doctest_unex_importerror_with_module": ["textwrap.dedent"], "testing.test_doctest.TestDoctests.test_doctestmodule": [], "testing.test_doctest.TestDoctests.test_doctestmodule_external_and_issue116": ["textwrap.dedent"], "testing.test_doctest.TestDoctests.test_txtfile_failing": [], "testing.test_doctest.TestDoctests.test_txtfile_with_fixtures": [], "testing.test_doctest.TestDoctests.test_txtfile_with_usefixtures_in_ini": [], "testing.test_doctest.TestDoctests.test_doctestmodule_with_fixtures": [], "testing.test_doctest.TestDoctests.test_doctestmodule_three_tests": [], "testing.test_doctest.TestDoctests.test_doctestmodule_two_tests_one_fail": [], "testing.test_doctest.TestDoctests.test_ignored_whitespace": [], "testing.test_doctest.TestDoctests.test_non_ignored_whitespace": [], "testing.test_doctest.TestDoctests.test_ignored_whitespace_glob": [], "testing.test_doctest.TestDoctests.test_non_ignored_whitespace_glob": [], "testing.test_doctest.TestDoctests.test_contains_unicode": [], "testing.test_doctest.TestDoctests.test_ignore_import_errors_on_doctest": [], "testing.test_doctest.TestDoctests.test_junit_report_for_doctest": [], "testing.test_doctest.TestDoctests.test_unicode_doctest": [], "testing.test_doctest.TestDoctests.test_unicode_doctest_module": [], "testing.test_doctest.TestDoctests.test_print_unicode_value": [], "testing.test_doctest.TestDoctests.test_reportinfo": [], "testing.test_doctest.TestDoctests.test_valid_setup_py": [], "testing.test_doctest.TestDoctests.test_main_py_does_not_cause_import_errors": [], "testing.test_doctest.TestDoctests.test_invalid_setup_py": [], "testing.test_doctest.TestLiterals": ["pytest.mark.parametrize"], "testing.test_doctest.TestLiterals.test_allow_unicode": [], "testing.test_doctest.TestLiterals.test_allow_bytes": [], "testing.test_doctest.TestLiterals.test_unicode_string": [], "testing.test_doctest.TestLiterals.test_bytes_literal": [], "testing.test_doctest.TestLiterals.test_number_re": ["<builtin>.print", "_pytest.doctest._get_checker", "<builtin>.float", "pytest.approx"], "_pytest.doctest._get_checker": [], "<builtin>.float": [], "pytest.approx": [], "testing.test_doctest.TestLiterals.test_number_precision": [], "testing.test_doctest.TestLiterals.test_number_non_matches": [], "testing.test_doctest.TestLiterals.test_number_and_allow_unicode": [], "testing.test_doctest.TestDoctestSkips": ["pytest.fixture"], "testing.test_doctest.TestDoctestSkips.makedoctest": [], "testing.test_doctest.TestDoctestSkips.makedoctest.makeit": [], "testing.test_doctest.TestDoctestSkips.test_one_skipped": [], "testing.test_doctest.TestDoctestSkips.test_one_skipped_failed": [], "testing.test_doctest.TestDoctestSkips.test_all_skipped": [], "testing.test_doctest.TestDoctestSkips.test_vacuous_all_skipped": [], "testing.test_doctest.TestDoctestSkips.test_continue_on_failure": [], "testing.test_doctest.TestDoctestSkips.test_skipping_wrapped_test": [], "testing.test_doctest.TestDoctestAutoUseFixtures.test_doctest_module_session_fixture": [], "testing.test_doctest.TestDoctestAutoUseFixtures": ["pytest.mark.parametrize"], "testing.test_doctest.TestDoctestAutoUseFixtures.test_fixture_scopes": [], "testing.test_doctest.TestDoctestAutoUseFixtures.test_fixture_module_doctest_scopes": [], "testing.test_doctest.TestDoctestAutoUseFixtures.test_auto_use_request_attributes": ["<builtin>.str"], "testing.test_doctest.TestDoctestNamespaceFixture": ["pytest.mark.parametrize"], "testing.test_doctest.TestDoctestNamespaceFixture.test_namespace_doctestfile": [], "testing.test_doctest.TestDoctestNamespaceFixture.test_namespace_pyfile": [], "testing.test_doctest.TestDoctestReportingOption._run_doctest_report": [], "testing.test_doctest.TestDoctestReportingOption": ["pytest.mark.parametrize"], "testing.test_doctest.TestDoctestReportingOption.test_doctest_report_udiff": ["testing.test_doctest.TestDoctestReportingOption._run_doctest_report"], "testing.test_doctest.TestDoctestReportingOption.test_doctest_report_cdiff": ["testing.test_doctest.TestDoctestReportingOption._run_doctest_report"], "testing.test_doctest.TestDoctestReportingOption.test_doctest_report_ndiff": ["testing.test_doctest.TestDoctestReportingOption._run_doctest_report"], "testing.test_doctest.TestDoctestReportingOption.test_doctest_report_none_or_only_first_failure": ["testing.test_doctest.TestDoctestReportingOption._run_doctest_report"], "testing.test_doctest.TestDoctestReportingOption.test_doctest_report_invalid": ["testing.test_doctest.TestDoctestReportingOption._run_doctest_report"], "testing.test_doctest.test_doctest_mock_objects_dont_recurse_missbehaved": ["pytest.importorskip"], "testing.test_doctest.Broken.__getattr__": ["<builtin>.KeyError"], "<builtin>.KeyError": [], "testing.test_doctest.test_warning_on_unwrap_of_broken_object": ["pytest.warns", "inspect.unwrap", "pytest.raises", "_pytest.doctest._patch_unwrap_mock_aware"], "_pytest.doctest._patch_unwrap_mock_aware": [], "pytest.warns": [], "inspect.unwrap": [], "testing.test_doctest.test_is_setup_py_not_named_setup_py": ["_pytest.doctest._is_setup_py"], "_pytest.doctest._is_setup_py": [], "testing.test_doctest.test_is_setup_py_is_a_setup_py": ["_pytest.doctest._is_setup_py"], "testing.test_doctest.test_is_setup_py_different_encoding": ["_pytest.doctest._is_setup_py"], "testing.test_doctest.test_is_main_py": ["_pytest.doctest._is_main_py"], "_pytest.doctest._is_main_py": [], "testing.test_setuponly": ["pytest.fixture"], "testing.test_setuponly.mode": [], "testing.test_setuponly.test_show_only_active_fixtures": [], "testing.test_setuponly.test_show_different_scopes": [], "testing.test_setuponly.test_show_nested_fixtures": [], "testing.test_setuponly.test_show_fixtures_with_autouse": [], "testing.test_setuponly.test_show_fixtures_with_parameters": [], "testing.test_setuponly.test_show_fixtures_with_parameter_ids": [], "testing.test_setuponly.test_show_fixtures_with_parameter_ids_function": [], "testing.test_setuponly.test_dynamic_fixture_request": [], "testing.test_setuponly.test_capturing": [], "testing.test_setuponly.test_show_fixtures_and_execute_test": [], "testing.test_setuponly.test_setup_show_with_KeyboardInterrupt_in_test": [], "testing.test_setuponly.test_show_fixture_action_with_bytes": ["<builtin>.str"], "testing.test_unittest": ["pytest.mark.skipif", "pytest.mark.parametrize"], "testing.test_unittest.test_simple_unittest": [], "testing.test_unittest.test_runTest_method": [], "testing.test_unittest.test_isclasscheck_issue53": [], "testing.test_unittest.test_setup": ["<builtin>.str"], "testing.test_unittest.test_setUpModule": [], "testing.test_unittest.test_setUpModule_failing_no_teardown": [], "testing.test_unittest.test_new_instances": [], "testing.test_unittest.test_function_item_obj_is_instance": [], "testing.test_unittest.test_teardown": [], "testing.test_unittest.test_teardown_issue1649": ["gc.collect", "gc.get_objects", "<builtin>.type"], "gc.collect": [], "gc.get_objects": [], "testing.test_unittest.test_unittest_skip_issue148": [], "testing.test_unittest.test_method_and_teardown_failing_reporting": [], "testing.test_unittest.test_setup_failure_is_shown": [], "testing.test_unittest.test_setup_setUpClass": [], "testing.test_unittest.test_fixtures_setup_setUpClass_issue8394": [], "testing.test_unittest.test_setup_class": [], "testing.test_unittest.test_testcase_adderrorandfailure_defers": [], "testing.test_unittest.test_testcase_custom_exception_info": ["<builtin>.locals"], "<builtin>.locals": [], "testing.test_unittest.test_testcase_totally_incompatible_exception_info": ["<builtin>.isinstance", "<builtin>.str"], "testing.test_unittest.test_module_level_pytestmark": [], "testing.test_unittest.TestTrialUnittest.setup_class": ["pytest.importorskip"], "testing.test_unittest.TestTrialUnittest.test_trial_testcase_runtest_not_collected": [], "testing.test_unittest.TestTrialUnittest.test_trial_exceptions_with_skips": [], "testing.test_unittest.TestTrialUnittest.test_trial_error": [], "testing.test_unittest.TestTrialUnittest.test_trial_pdb": ["<builtin>.str"], "testing.test_unittest.TestTrialUnittest.test_trial_testcase_skip_property": [], "testing.test_unittest.TestTrialUnittest.test_trial_testfunction_skip_property": [], "testing.test_unittest.TestTrialUnittest.test_trial_testcase_todo_property": [], "testing.test_unittest.TestTrialUnittest.test_trial_testfunction_todo_property": [], "testing.test_unittest.test_djangolike_testcase": [], "testing.test_unittest.test_unittest_not_shown_in_traceback": [], "testing.test_unittest.test_unorderable_types": [], "testing.test_unittest.test_unittest_typerror_traceback": [], "testing.test_unittest.test_unittest_expected_failure_for_failing_test_is_xfail": [], "testing.test_unittest.test_unittest_expected_failure_for_passing_test_is_fail": [], "testing.test_unittest.test_unittest_setup_interaction": [], "testing.test_unittest.test_non_unittest_no_setupclass_support": [], "testing.test_unittest.test_no_teardown_if_setupclass_failed": [], "testing.test_unittest.test_cleanup_functions": [], "testing.test_unittest.test_issue333_result_clearing": [], "testing.test_unittest.test_unittest_raise_skip_issue748": [], "testing.test_unittest.test_unittest_skip_issue1169": [], "testing.test_unittest.test_class_method_containing_test_issue1558": [], "testing.test_unittest.test_usefixtures_marker_on_unittest": ["pytest.importorskip"], "testing.test_unittest.test_testcase_handles_init_exceptions": [], "testing.test_unittest.test_error_message_with_parametrized_fixtures": [], "testing.test_unittest.test_setup_inheritance_skipping": [], "testing.test_unittest.test_BdbQuit": [], "testing.test_unittest.test_exit_outcome": [], "testing.test_unittest.test_trace": ["<builtin>.len", "<builtin>.str"], "testing.test_unittest.test_trace.check_call": [], "testing.test_unittest.test_trace.check_call._pdb.runcall": [], "testing.test_unittest.test_pdb_teardown_called": [], "testing.test_unittest.test_pdb_teardown_skipped_for_functions": [], "testing.test_unittest.test_pdb_teardown_skipped_for_classes": [], "testing.test_unittest.test_async_support": ["pytest.importorskip"], "testing.test_unittest.test_asynctest_support": ["pytest.importorskip"], "testing.test_unittest.test_plain_unittest_does_not_support_async": ["<builtin>.hasattr"], "testing.test_unittest.test_do_class_cleanups_on_success": [], "testing.test_unittest.test_do_class_cleanups_on_setupclass_failure": [], "testing.test_unittest.test_do_class_cleanups_on_teardownclass_failure": [], "testing.test_unittest.test_do_cleanups_on_success": [], "testing.test_unittest.test_do_cleanups_on_setup_failure": [], "testing.test_unittest.test_do_cleanups_on_teardown_failure": [], "testing.test_unittest.test_traceback_pruning": [], "testing.test_unittest.test_raising_unittest_skiptest_during_collection": [], "testing.test_debugging": ["pytest.mark.xfail", "os.environ.get", "pytest.mark.parametrize", "pytest.fixture"], "os.environ.get": [], "testing.test_debugging.pdb_env": [], "testing.test_debugging.runpdb": [], "testing.test_debugging.runpdb_and_get_stdout": ["testing.test_debugging.runpdb"], "testing.test_debugging.runpdb_and_get_report": ["<builtin>.len", "testing.test_debugging.runpdb"], "testing.test_debugging.custom_pdb_calls": [], "testing.test_debugging.custom_pdb_calls._CustomPdb.__init__": [], "testing.test_debugging.custom_pdb_calls._CustomPdb.reset": [], "testing.test_debugging.custom_pdb_calls._CustomPdb.interaction": [], "testing.test_debugging.custom_debugger_hook": [], "testing.test_debugging.custom_debugger_hook._CustomDebugger.__init__": [], "testing.test_debugging.custom_debugger_hook._CustomDebugger.reset": [], "testing.test_debugging.custom_debugger_hook._CustomDebugger.interaction": [], "testing.test_debugging.custom_debugger_hook._CustomDebugger.set_trace": ["<builtin>.print"], "testing.test_debugging.TestPDB": ["pytest.mark.xfail", "pytest.mark.parametrize", "pytest.fixture"], "testing.test_debugging.TestPDB.pdblist": [], "testing.test_debugging.TestPDB.pdblist.mypdb": [], "testing.test_debugging.TestPDB.test_pdb_on_fail": ["<builtin>.len", "testing.test_debugging.runpdb_and_get_report"], "testing.test_debugging.TestPDB.test_pdb_on_xfail": ["testing.test_debugging.runpdb_and_get_report"], "testing.test_debugging.TestPDB.test_pdb_on_skip": ["<builtin>.len", "testing.test_debugging.runpdb_and_get_report"], "testing.test_debugging.TestPDB.test_pdb_on_top_level_raise_skiptest": ["testing.test_debugging.runpdb_and_get_stdout"], "testing.test_debugging.TestPDB.test_pdb_on_BdbQuit": ["<builtin>.len", "testing.test_debugging.runpdb_and_get_report"], "testing.test_debugging.TestPDB.test_pdb_on_KeyboardInterrupt": ["<builtin>.len", "testing.test_debugging.runpdb_and_get_report"], "testing.test_debugging.TestPDB.flush": [], "testing.test_debugging.TestPDB.test_pdb_unittest_postmortem": ["testing.test_debugging.TestPDB.flush"], "testing.test_debugging.TestPDB.test_pdb_unittest_skip": ["testing.test_debugging.TestPDB.flush"], "testing.test_debugging.TestPDB.test_pdb_print_captured_stdout_and_stderr": ["testing.test_debugging.TestPDB.flush"], "testing.test_debugging.TestPDB.test_pdb_dont_print_empty_captured_stdout_and_stderr": ["testing.test_debugging.TestPDB.flush"], "testing.test_debugging.TestPDB.test_pdb_print_captured_logs": ["testing.test_debugging.TestPDB.flush"], "testing.test_debugging.TestPDB.test_pdb_print_captured_logs_nologging": ["testing.test_debugging.TestPDB.flush"], "testing.test_debugging.TestPDB.test_pdb_interaction_exception": ["testing.test_debugging.TestPDB.flush"], "testing.test_debugging.TestPDB.test_pdb_interaction_on_collection_issue181": ["testing.test_debugging.TestPDB.flush"], "testing.test_debugging.TestPDB.test_pdb_interaction_on_internal_error": ["<builtin>.len", "testing.test_debugging.TestPDB.flush"], "testing.test_debugging.TestPDB.test_pdb_prevent_ConftestImportFailure_hiding_exception": [], "testing.test_debugging.TestPDB.test_pdb_interaction_capturing_simple": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestPDB.test_pdb_set_trace_kwargs": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestPDB.test_pdb_set_trace_interception": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestPDB.test_pdb_and_capsys": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestPDB.test_pdb_with_caplog_on_pdb_invocation": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestPDB.test_set_trace_capturing_afterwards": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestPDB.test_pdb_interaction_doctest": ["testing.test_debugging.TestPDB.flush"], "testing.test_debugging.TestPDB.test_doctest_set_trace_quit": [], "testing.test_debugging.TestPDB.test_pdb_interaction_capturing_twice": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestPDB.test_pdb_with_injected_do_debug": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestPDB.test_pdb_without_capture": ["testing.test_debugging.TestPDB.flush"], "testing.test_debugging.TestPDB.test_pdb_continue_with_recursive_debug": [], "testing.test_debugging.TestPDB.test_pdb_used_outside_test": ["testing.test_debugging.TestPDB.flush"], "testing.test_debugging.TestPDB.test_pdb_used_in_generate_tests": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestPDB.test_pdb_collection_failure_is_shown": [], "testing.test_debugging.TestPDB.test_enter_leave_pdb_hooks_are_called": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestPDB.test_pdb_custom_cls": [], "testing.test_debugging.TestPDB.test_pdb_custom_cls_invalid": [], "testing.test_debugging.TestPDB.test_pdb_validate_usepdb_cls": ["_pytest.debugging._validate_usepdb_cls"], "_pytest.debugging._validate_usepdb_cls": [], "testing.test_debugging.TestPDB.test_pdb_custom_cls_without_pdb": [], "testing.test_debugging.TestPDB.test_pdb_custom_cls_with_set_trace": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestDebuggingBreakpoints": ["pytest.mark.xfail", "pytest.mark.skipif", "pytest.mark.parametrize"], "testing.test_debugging.TestDebuggingBreakpoints.test_sys_breakpointhook_configure_and_unconfigure": [], "testing.test_debugging.TestDebuggingBreakpoints.test_pdb_custom_cls": [], "testing.test_debugging.TestDebuggingBreakpoints.test_environ_custom_class": [], "testing.test_debugging.TestDebuggingBreakpoints.test_sys_breakpoint_interception": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestDebuggingBreakpoints.test_pdb_not_altered": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestTraceOption.test_trace_sets_breakpoint": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.TestTraceOption.test_trace_with_parametrize_handles_shared_fixtureinfo": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.test_trace_after_runpytest": ["<builtin>.str"], "testing.test_debugging.test_quit_with_swallowed_SystemExit": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.test_pdb_suspends_fixture_capturing": ["testing.test_debugging.TestPDB.flush", "<builtin>.str"], "testing.test_debugging.test_pdbcls_via_local_module": ["<builtin>.str"], "testing.test_debugging.test_raises_bdbquit_with_eoferror": ["<builtin>.str"], "testing.test_debugging.test_pdb_wrapper_class_is_reused": ["<builtin>.str"], "testing.test_legacypath": ["pytest.mark.parametrize"], "testing.test_legacypath.test_item_fspath": ["<builtin>.len"], "testing.test_legacypath.test_testdir_testtmproot": [], "testing.test_legacypath.test_testdir_makefile_dot_prefixes_extension_silently": ["<builtin>.str"], "testing.test_legacypath.test_testdir_makefile_ext_none_raises_type_error": ["pytest.raises"], "testing.test_legacypath.test_testdir_makefile_ext_empty_string_makes_file": ["<builtin>.str"], "testing.test_legacypath.attempt_symlink_to": ["pytest.skip", "pathlib.Path"], "testing.test_legacypath.test_tmpdir_factory": ["<builtin>.str"], "testing.test_legacypath.test_tmpdir_equals_tmp_path": ["pathlib.Path"], "testing.test_legacypath.test_tmpdir_always_is_realpath": ["testing.test_legacypath.attempt_symlink_to", "<builtin>.str"], "testing.test_legacypath.test_cache_makedir": [], "testing.test_legacypath.test_fixturerequest_getmodulepath": ["pytest.FixtureRequest"], "pytest.FixtureRequest": [], "testing.test_legacypath.TestFixtureRequestSessionScoped": ["pytest.fixture"], "testing.test_legacypath.TestFixtureRequestSessionScoped.session_request": [], "testing.test_legacypath.TestFixtureRequestSessionScoped.test_session_scoped_unavailable_attributes": ["pytest.raises"], "testing.test_legacypath.test_addini_paths": ["<builtin>.len", "pytest.raises"], "testing.test_legacypath.test_override_ini_paths": [], "testing.test_legacypath.test_inifile_from_cmdline_main_hook": [], "testing.test_monkeypatch": ["pytest.mark.parametrize", "pytest.fixture"], "testing.test_monkeypatch.mp": ["os.getcwd", "_pytest.monkeypatch.MonkeyPatch", "<builtin>.list", "os.chdir"], "_pytest.monkeypatch.MonkeyPatch": [], "testing.test_monkeypatch.test_setattr": ["<builtin>.hasattr", "_pytest.monkeypatch.MonkeyPatch", "pytest.raises"], "testing.test_monkeypatch.TestSetattrWithImportPath.test_string_expression": ["os.path.abspath"], "testing.test_monkeypatch.TestSetattrWithImportPath.test_string_expression.<lambda1>": [], "os.path.abspath": [], "testing.test_monkeypatch.TestSetattrWithImportPath.test_string_expression_class": [], "testing.test_monkeypatch.TestSetattrWithImportPath.test_unicode_string": [], "testing.test_monkeypatch.TestSetattrWithImportPath.test_wrong_target": ["pytest.raises"], "testing.test_monkeypatch.TestSetattrWithImportPath.test_unknown_import": ["pytest.raises"], "testing.test_monkeypatch.TestSetattrWithImportPath.test_unknown_attr": ["pytest.raises"], "testing.test_monkeypatch.TestSetattrWithImportPath.test_unknown_attr_non_raising": [], "testing.test_monkeypatch.TestSetattrWithImportPath.test_delattr": ["<builtin>.hasattr"], "testing.test_monkeypatch.test_delattr": ["<builtin>.hasattr", "_pytest.monkeypatch.MonkeyPatch", "pytest.raises"], "testing.test_monkeypatch.test_setitem": ["_pytest.monkeypatch.MonkeyPatch"], "testing.test_monkeypatch.test_setitem_deleted_meanwhile": ["_pytest.monkeypatch.MonkeyPatch"], "testing.test_monkeypatch.test_setenv_deleted_meanwhile": ["_pytest.monkeypatch.MonkeyPatch"], "testing.test_monkeypatch.test_delitem": ["_pytest.monkeypatch.MonkeyPatch", "pytest.raises"], "testing.test_monkeypatch.test_setenv": ["_pytest.monkeypatch.MonkeyPatch", "pytest.warns"], "testing.test_monkeypatch.test_delenv": ["_pytest.monkeypatch.MonkeyPatch", "pytest.raises"], "testing.test_monkeypatch.TestEnvironWarnings.test_setenv_non_str_warning": ["re.escape", "<builtin>.str", "pytest.warns"], "testing.test_monkeypatch.test_setenv_prepend": ["_pytest.monkeypatch.MonkeyPatch"], "testing.test_monkeypatch.test_monkeypatch_plugin": ["<builtin>.tuple"], "testing.test_monkeypatch.test_syspath_prepend": ["<builtin>.list"], "testing.test_monkeypatch.test_syspath_prepend_double_undo": ["sys.path.append"], "sys.path.append": [], "testing.test_monkeypatch.test_chdir_with_path_local": ["os.getcwd", "<builtin>.str"], "testing.test_monkeypatch.test_chdir_with_str": ["os.getcwd", "<builtin>.str"], "testing.test_monkeypatch.test_chdir_undo": ["os.getcwd"], "testing.test_monkeypatch.test_chdir_double_undo": ["os.chdir", "os.getcwd", "<builtin>.str"], "testing.test_monkeypatch.test_issue185_time_breaks": [], "testing.test_monkeypatch.test_importerror": ["textwrap.dedent"], "testing.test_monkeypatch.Sample.hello": [], "testing.test_monkeypatch.test_issue156_undo_staticmethod": ["_pytest.monkeypatch.MonkeyPatch"], "testing.test_monkeypatch.test_undo_class_descriptors_delattr": ["_pytest.monkeypatch.MonkeyPatch", "<builtin>.getattr"], "testing.test_monkeypatch.test_undo_class_descriptors_delattr.SampleParent.hello": [], "testing.test_monkeypatch.test_undo_class_descriptors_delattr.SampleParent.world": [], "testing.test_monkeypatch.test_issue1338_name_resolving": ["_pytest.monkeypatch.MonkeyPatch", "pytest.importorskip"], "testing.test_monkeypatch.test_context": ["_pytest.monkeypatch.MonkeyPatch", "inspect.isclass"], "inspect.isclass": [], "testing.test_monkeypatch.test_context_classmethod": ["_pytest.monkeypatch.MonkeyPatch.context"], "testing.test_monkeypatch.test_syspath_prepend_with_namespace_packages": ["pytest.raises", "<builtin>.str"], "testing._py.test_local": ["<builtin>.hasattr", "pytest.mark.skipif", "pytest.fixture"], "testing._py.test_local.CommonFSTests.test_constructor_equality": [], "testing._py.test_local.CommonFSTests.test_eq_nonstring": [], "testing._py.test_local.CommonFSTests.test_new_identical": [], "testing._py.test_local.CommonFSTests.test_join": ["<builtin>.str"], "testing._py.test_local.CommonFSTests.test_join_normalized": ["<builtin>.str"], "testing._py.test_local.CommonFSTests.test_join_noargs": [], "testing._py.test_local.CommonFSTests.test_add_something": [], "testing._py.test_local.CommonFSTests.test_parts": [], "testing._py.test_local.CommonFSTests.test_common": [], "testing._py.test_local.CommonFSTests.test_basename_checks": [], "testing._py.test_local.CommonFSTests.test_basename": [], "testing._py.test_local.CommonFSTests.test_dirname": ["<builtin>.str"], "testing._py.test_local.CommonFSTests.test_dirpath": [], "testing._py.test_local.CommonFSTests.test_dirpath_with_args": [], "testing._py.test_local.CommonFSTests.test_newbasename": [], "testing._py.test_local.CommonFSTests.test_not_exists": [], "testing._py.test_local.CommonFSTests.test_exists": [], "testing._py.test_local.CommonFSTests.test_dir": [], "testing._py.test_local.CommonFSTests.test_fnmatch_file": [], "testing._py.test_local.CommonFSTests.test_relto": [], "testing._py.test_local.CommonFSTests.test_bestrelpath": [], "testing._py.test_local.CommonFSTests.test_relto_not_relative": [], "testing._py.test_local.CommonFSTests.test_listdir": ["pytest.raises"], "testing._py.test_local.CommonFSTests.test_listdir_fnmatchstring": ["<builtin>.len"], "testing._py.test_local.CommonFSTests.test_listdir_filter": [], "testing._py.test_local.CommonFSTests.test_listdir_filter.<lambda1>": [], "testing._py.test_local.CommonFSTests.test_listdir_sorted": [], "testing._py.test_local.CommonFSTests.test_listdir_sorted.<lambda1>": [], "testing._py.test_local.CommonFSTests.test_visit_nofilter": [], "testing._py.test_local.CommonFSTests.test_visit_norecurse": [], "testing._py.test_local.CommonFSTests.test_visit_norecurse.<lambda1>": [], "testing._py.test_local.CommonFSTests": ["pytest.mark.skip", "pytest.mark.parametrize"], "testing._py.test_local.CommonFSTests.test_visit_filterfunc_is_string": ["<builtin>.len"], "testing._py.test_local.CommonFSTests.test_visit_ignore": ["<builtin>.list"], "testing._py.test_local.CommonFSTests.test_visit_endswith": [], "testing._py.test_local.CommonFSTests.test_visit_endswith.<lambda1>": [], "testing._py.test_local.CommonFSTests.test_cmp": [], "testing._py.test_local.CommonFSTests.test_simple_read": [], "testing._py.test_local.CommonFSTests.test_join_div_operator": [], "testing._py.test_local.CommonFSTests.test_ext": [], "testing._py.test_local.CommonFSTests.test_purebasename": [], "testing._py.test_local.CommonFSTests.test_multiple_parts": ["<builtin>.str"], "testing._py.test_local.CommonFSTests.test_dotted_name_ext": [], "testing._py.test_local.CommonFSTests.test_newext": [], "testing._py.test_local.CommonFSTests.test_readlines": [], "testing._py.test_local.CommonFSTests.test_readlines_nocr": [], "testing._py.test_local.CommonFSTests.test_file": [], "testing._py.test_local.CommonFSTests.test_not_file": [], "testing._py.test_local.CommonFSTests.test_non_existent": [], "testing._py.test_local.CommonFSTests.test_size": ["<builtin>.len"], "testing._py.test_local.CommonFSTests.test_mtime": [], "testing._py.test_local.CommonFSTests.test_relto_wrong_type": ["pytest.raises"], "testing._py.test_local.CommonFSTests.test_load": ["<builtin>.type"], "testing._py.test_local.CommonFSTests.test_visit_filesonly": [], "testing._py.test_local.CommonFSTests.test_visit_filesonly.<lambda1>": [], "testing._py.test_local.CommonFSTests.test_visit_nodotfiles": [], "testing._py.test_local.CommonFSTests.test_visit_nodotfiles.<lambda1>": [], "testing._py.test_local.CommonFSTests.test_visit_breadthfirst": ["<builtin>.len", "<builtin>.range", "<builtin>.enumerate"], "testing._py.test_local.CommonFSTests.test_visit_sort": ["<builtin>.sorted", "<builtin>.enumerate"], "testing._py.test_local.CommonFSTests.test_endswith": ["testing._py.test_local.CommonFSTests.test_endswith.chk"], "testing._py.test_local.CommonFSTests.test_endswith.chk": [], "testing._py.test_local.CommonFSTests.test_copy_file": [], "testing._py.test_local.CommonFSTests.test_copy_dir": [], "testing._py.test_local.CommonFSTests.test_remove_file": [], "testing._py.test_local.CommonFSTests.test_remove_dir_recursive_by_default": [], "testing._py.test_local.CommonFSTests.test_ensure_dir": [], "testing._py.test_local.CommonFSTests.test_mkdir_and_remove": ["pytest.raises"], "testing._py.test_local.CommonFSTests.test_move_file": ["<builtin>.hasattr"], "testing._py.test_local.CommonFSTests.test_move_dir": [], "testing._py.test_local.CommonFSTests.test_fspath_protocol_match_strpath": [], "testing._py.test_local.CommonFSTests.test_fspath_func_match_strpath": ["os.fspath"], "pytest.mark.skip": [], "testing._py.test_local.CommonFSTests.test_fspath_open": ["<builtin>.open"], "<builtin>.open": [], "testing._py.test_local.CommonFSTests.test_fspath_fsencode": ["os.fsencode"], "os.fsencode": [], "testing._py.test_local.setuptestfs": [], "testing._py.test_local.path1": ["testing._py.test_local.setuptestfs"], "testing._py.test_local.fake_fspath_obj": ["os.path.join", "testing._py.test_local.fake_fspath_obj.FakeFSPathClass.__init__"], "testing._py.test_local.fake_fspath_obj.FakeFSPathClass.__init__": [], "testing._py.test_local.fake_fspath_obj.FakeFSPathClass.__fspath__": [], "testing._py.test_local.batch_make_numbered_dirs": ["<builtin>.int", "<builtin>.range", "py.path.local.make_numbered_dir"], "py.path.local.make_numbered_dir": [], "<builtin>.int": [], "testing._py.test_local.TestLocalPath.test_join_normpath": [], "testing._py.test_local.TestLocalPath": ["testing._py.test_local.skiponwin32", "pytest.mark.xfail", "pytest.mark.skipif", "sys.platform.startswith", "pytest.mark.parametrize"], "testing._py.test_local.skiponwin32": [], "testing._py.test_local.TestLocalPath.test_dirpath_abs_no_abs": ["py.path.local"], "py.path.local": [], "testing._py.test_local.TestLocalPath.test_gethash": ["hashlib.md5", "pytest.raises", "hashlib.sha1"], "hashlib.md5": [], "hashlib.sha1": [], "testing._py.test_local.TestLocalPath.test_remove_removes_readonly_file": [], "testing._py.test_local.TestLocalPath.test_remove_removes_readonly_dir": ["<builtin>.int"], "testing._py.test_local.TestLocalPath.test_remove_removes_dir_and_readonly_file": [], "testing._py.test_local.TestLocalPath.test_remove_routes_ignore_errors": [], "testing._py.test_local.TestLocalPath.test_remove_routes_ignore_errors.<lambda1>": [], "testing._py.test_local.TestLocalPath.test_initialize_curdir": ["os.getcwd", "py.path.local", "<builtin>.str"], "testing._py.test_local.TestLocalPath.test_chdir_gone": ["os.getcwd", "pytest.raises", "<builtin>.str"], "testing._py.test_local.TestLocalPath.test_chdir_gone_in_as_cwd": [], "testing._py.test_local.TestLocalPath.test_as_cwd": ["os.getcwd", "py.path.local", "<builtin>.str"], "testing._py.test_local.TestLocalPath.test_as_cwd_exception": ["py.path.local", "<builtin>.ValueError", "pytest.raises"], "testing._py.test_local.TestLocalPath.test_initialize_reldir": ["py.path.local"], "testing._py.test_local.TestLocalPath.test_tilde_expansion": ["py.path.local", "os.path.expanduser", "<builtin>.str"], "os.path.expanduser": [], "testing._py.test_local.TestLocalPath.test_eq_hash_are_case_insensitive_on_windows": ["<builtin>.hash", "py.path.local"], "testing._py.test_local.TestLocalPath.test_eq_with_strings": ["<builtin>.str"], "testing._py.test_local.TestLocalPath.test_eq_with_none": [], "testing._py.test_local.TestLocalPath.test_eq_non_ascii_unicode": [], "testing._py.test_local.TestLocalPath.test_gt_with_strings": ["<builtin>.sorted", "<builtin>.str"], "testing._py.test_local.TestLocalPath.test_open_and_ensure": [], "testing._py.test_local.TestLocalPath.test_write_and_ensure": [], "testing._py.test_local.TestLocalPath.test_dump": ["<builtin>.int", "pickle.load"], "pickle.load": [], "testing._py.test_local.TestLocalPath.test_setmtime": ["<builtin>.int", "<builtin>.open", "os.close", "tempfile.mkstemp", "py.path.local", "os.remove", "tempfile.mktemp", "time.time"], "tempfile.mkstemp": [], "os.close": [], "tempfile.mktemp": [], "time.time": [], "os.remove": [], "testing._py.test_local.TestLocalPath.test_normpath": ["<builtin>.str"], "testing._py.test_local.TestLocalPath.test_mkdtemp_creation": ["py.path.local.mkdtemp"], "py.path.local.mkdtemp": [], "testing._py.test_local.TestLocalPath.test_tmproot": ["py.path.local.get_temproot", "py.path.local.mkdtemp"], "py.path.local.get_temproot": [], "testing._py.test_local.TestLocalPath.test_chdir": ["os.getcwd", "py.path.local", "<builtin>.str"], "testing._py.test_local.TestLocalPath.test_ensure_filepath_withdir": [], "testing._py.test_local.TestLocalPath.test_ensure_filepath_withoutdir": [], "testing._py.test_local.TestLocalPath.test_ensure_dirpath": [], "testing._py.test_local.TestLocalPath.test_ensure_non_ascii_unicode": [], "testing._py.test_local.TestLocalPath.test_long_filenames": ["pytest.skip"], "testing._py.test_local.TestLocalPath.test_visit_depth_first": ["<builtin>.len", "<builtin>.list"], "testing._py.test_local.TestLocalPath.test_visit_depth_first.<lambda1>": [], "testing._py.test_local.TestLocalPath.test_visit_rec_fnmatch": ["<builtin>.len", "<builtin>.list"], "testing._py.test_local.TestLocalPath.test_fnmatch_file_abspath": ["os.sep.join", "<builtin>.str"], "os.sep.join": [], "testing._py.test_local.TestLocalPath.test_sysfind": ["py.path.local.sysfind"], "py.path.local.sysfind": [], "testing._py.test_local.TestLocalPath.test_fspath_protocol_other_class": ["os.path.join", "py.path.local"], "testing._py.test_local.TestLocalPath.test_make_numbered_dir_multiprocess_safe": ["<builtin>.range", "multiprocessing.Pool"], "multiprocessing.Pool": [], "testing._py.test_local.TestExecutionOnWindows.test_sysfind_bat_exe_before": ["py.path.local.sysfind", "<builtin>.str"], "testing._py.test_local.TestExecution.test_sysfind_no_permisson_ignored": ["py.path.local.sysfind", "<builtin>.str"], "testing._py.test_local.TestExecution.test_sysfind_absolute": ["py.path.local.sysfind", "<builtin>.str"], "testing._py.test_local.TestExecution.test_sysfind_multiple": ["py.path.local.sysfind"], "testing._py.test_local.TestExecution.test_sysfind_multiple.<lambda1>": [], "testing._py.test_local.TestExecution.test_sysfind_multiple.<lambda2>": [], "testing._py.test_local.TestExecution.test_sysexec": ["py.path.local.sysfind", "py.path.local"], "testing._py.test_local.TestExecution.test_sysexec_failing": ["py.path.local.sysfind", "pytest.raises"], "testing._py.test_local.TestExecution.test_make_numbered_dir": ["<builtin>.range", "py.path.local.make_numbered_dir", "<builtin>.str"], "testing._py.test_local.TestExecution.test_make_numbered_dir_case": ["py.path.local.make_numbered_dir", "<builtin>.str"], "testing._py.test_local.TestExecution.test_make_numbered_dir_NotImplemented_Error": [], "testing._py.test_local.TestExecution.test_make_numbered_dir_NotImplemented_Error.notimpl": ["<builtin>.NotImplementedError"], "testing._py.test_local.TestExecution.test_locked_make_numbered_dir": ["<builtin>.range", "py.path.local.make_numbered_dir", "<builtin>.str"], "testing._py.test_local.TestExecution.test_error_preservation": ["pytest.raises"], "testing._py.test_local.TestImport": ["pytest.fixture"], "testing._py.test_local.TestImport.preserve_sys": ["unittest.mock.patch.object", "unittest.mock.patch.dict", "<builtin>.list"], "unittest.mock.patch.dict": [], "testing._py.test_local.TestImport.test_pyimport": [], "testing._py.test_local.TestImport.test_pyimport_renamed_dir_creates_mismatch": ["pytest.raises"], "testing._py.test_local.TestImport.test_pyimport_messy_name": [], "testing._py.test_local.TestImport.test_pyimport_dir": [], "testing._py.test_local.TestImport.test_pyimport_execfile_different_name": [], "testing._py.test_local.TestImport.test_pyimport_a": [], "testing._py.test_local.TestImport.test_pyimport_b": [], "testing._py.test_local.TestImport.test_pyimport_c": [], "testing._py.test_local.TestImport.test_pyimport_d": [], "testing._py.test_local.TestImport.test_pyimport_and_import": [], "testing._py.test_local.TestImport.test_pyimport_check_filepath_consistency": ["<builtin>.issubclass", "<builtin>.type", "pytest.raises", "<builtin>.str"], "<builtin>.issubclass": [], "testing._py.test_local.TestImport.test_issue131_pyimport_on__init__": [], "testing._py.test_local.TestImport.test_ensuresyspath_append": ["<builtin>.str"], "testing._py.test_local.TestImportlibImport.test_pyimport": [], "testing._py.test_local.TestImportlibImport.test_pyimport_dir_fails": ["pytest.raises"], "testing._py.test_local.TestImportlibImport.test_pyimport_execfile_different_name": [], "testing._py.test_local.TestImportlibImport.test_pyimport_relative_import_fails": ["pytest.raises"], "testing._py.test_local.TestImportlibImport.test_pyimport_doesnt_use_sys_modules": [], "testing._py.test_local.test_pypkgdir": [], "testing._py.test_local.test_pypkgdir_unimportable": [], "testing._py.test_local.test_isimportable": ["py.path.isimportable", "py._path.local.isimportable"], "py.path.isimportable": [], "py._path.local.isimportable": [], "testing._py.test_local.test_homedir_from_HOME": ["os.getcwd", "py.path.local._gethomedir", "py.path.local"], "py.path.local._gethomedir": [], "testing._py.test_local.test_homedir_not_exists": ["py.path.local._gethomedir"], "testing._py.test_local.test_samefile": ["<builtin>.str"], "testing._py.test_local.test_samefile_symlink": ["pytest.skip", "os.symlink", "<builtin>.str"], "os.symlink": [], "testing._py.test_local.test_listdir_single_arg": [], "testing._py.test_local.test_mkdtemp_rootdir": ["py.path.local.mkdtemp"], "testing._py.test_local.TestWINLocalPath.test_owner_group_not_implemented": ["pytest.raises"], "testing._py.test_local.TestWINLocalPath.test_chmod_simple_int": ["<builtin>.print"], "testing._py.test_local.TestWINLocalPath.test_path_comparison_lowercase_mixed": [], "testing._py.test_local.TestWINLocalPath.test_relto_with_mixed_case": [], "testing._py.test_local.TestWINLocalPath.test_allow_unix_style_paths": ["<builtin>.str"], "testing._py.test_local.TestWINLocalPath.test_sysfind_in_currentdir": ["py.path.local.sysfind"], "testing._py.test_local.TestWINLocalPath.test_fnmatch_file_abspath_posix_pattern_on_win32": ["posixpath.sep.join", "<builtin>.str"], "posixpath.sep.join": [], "testing._py.test_local.TestPOSIXLocalPath.test_hardlink": [], "testing._py.test_local.TestPOSIXLocalPath.test_symlink_are_identical": ["<builtin>.str"], "testing._py.test_local.TestPOSIXLocalPath.test_symlink_isfile": [], "testing._py.test_local.TestPOSIXLocalPath.test_symlink_relative": [], "testing._py.test_local.TestPOSIXLocalPath.test_symlink_not_existing": [], "testing._py.test_local.TestPOSIXLocalPath.test_relto_with_root": ["py.path.local", "<builtin>.str"], "testing._py.test_local.TestPOSIXLocalPath.test_visit_recursive_symlink": ["<builtin>.list"], "testing._py.test_local.TestPOSIXLocalPath.test_visit_recursive_symlink.<lambda1>": [], "testing._py.test_local.TestPOSIXLocalPath.test_symlink_isdir": [], "testing._py.test_local.TestPOSIXLocalPath.test_symlink_remove": [], "testing._py.test_local.TestPOSIXLocalPath.test_realpath_file": [], "testing._py.test_local.TestPOSIXLocalPath.test_owner": ["pwd.getpwuid", "grp.getgrgid"], "pwd.getpwuid": [], "grp.getgrgid": [], "testing._py.test_local.TestPOSIXLocalPath.test_stat_helpers": [], "testing._py.test_local.TestPOSIXLocalPath.test_stat_non_raising": ["pytest.raises"], "testing._py.test_local.TestPOSIXLocalPath.test_stat_non_raising.<lambda1>": [], "testing._py.test_local.TestPOSIXLocalPath.test_atime": ["time.time", "time.sleep"], "time.sleep": [], "testing._py.test_local.TestPOSIXLocalPath.test_commondir": [], "testing._py.test_local.TestPOSIXLocalPath.test_commondir_nocommon": ["py.path.local"], "testing._py.test_local.TestPOSIXLocalPath.test_join_to_root": ["<builtin>.len", "<builtin>.str"], "testing._py.test_local.TestPOSIXLocalPath.test_join_root_to_root_with_no_abs": ["<builtin>.str"], "testing._py.test_local.TestPOSIXLocalPath.test_chmod_simple_int": ["<builtin>.int"], "testing._py.test_local.TestPOSIXLocalPath.test_chmod_rec_int": ["<builtin>.int"], "testing._py.test_local.TestPOSIXLocalPath.test_chmod_rec_int.recfilter": [], "testing._py.test_local.TestPOSIXLocalPath.test_copy_archiving": [], "testing._py.test_local.TestPOSIXLocalPath.test_copy_stat_file": ["time.sleep"], "testing._py.test_local.TestPOSIXLocalPath.test_copy_stat_dir": ["time.sleep"], "testing._py.test_local.TestPOSIXLocalPath.test_chown_identity": [], "testing._py.test_local.TestPOSIXLocalPath.test_chown_dangling_link": [], "testing._py.test_local.TestPOSIXLocalPath.test_chown_identity_rec_mayfail": [], "testing._py.test_local.TestUnicodePy2Py3.test_join_ensure": ["pytest.skip", "py.path.local"], "testing._py.test_local.TestUnicodePy2Py3.test_listdir": ["pytest.skip", "py.path.local"], "testing._py.test_local.TestUnicodePy2Py3": ["pytest.mark.xfail"], "testing._py.test_local.TestUnicodePy2Py3.test_read_write": ["sys.getdefaultencoding"], "sys.getdefaultencoding": [], "testing._py.test_local.TestBinaryAndTextMethods.test_read_binwrite": ["<builtin>.isinstance"], "testing._py.test_local.TestBinaryAndTextMethods.test_read_textwrite": [], "testing._py.test_local.TestBinaryAndTextMethods.test_default_encoding": ["<builtin>.type"], "testing.test_cacheprovider": ["pytest.mark.parametrize"], "testing.test_cacheprovider.TestNewAPI.test_config_cache_mkdir": ["pytest.raises"], "testing.test_cacheprovider.TestNewAPI.test_config_cache_dataerror": ["pytest.raises"], "testing.test_cacheprovider.TestNewAPI.test_config_cache_dataerror.<lambda1>": [], "testing.test_cacheprovider.TestNewAPI": ["pytest.mark.filterwarnings", "pytest.fixture"], "testing.test_cacheprovider.TestNewAPI.test_cache_writefail_cachfile_silent": [], "testing.test_cacheprovider.TestNewAPI.unwritable_cache_dir": ["os.access", "pytest.skip"], "os.access": [], "testing.test_cacheprovider.TestNewAPI.test_cache_writefail_permissions": [], "testing.test_cacheprovider.TestNewAPI.test_cache_failure_warns": [], "testing.test_cacheprovider.TestNewAPI.test_config_cache": [], "testing.test_cacheprovider.TestNewAPI.test_cachefuncarg": [], "testing.test_cacheprovider.TestNewAPI.test_custom_rel_cache_dir": ["os.path.join"], "testing.test_cacheprovider.TestNewAPI.test_custom_abs_cache_dir": [], "testing.test_cacheprovider.TestNewAPI.test_custom_cache_dir_with_env_var": [], "testing.test_cacheprovider.test_cache_reportheader": ["os.path.join"], "testing.test_cacheprovider.test_cache_reportheader_external_abspath": [], "testing.test_cacheprovider.test_cache_show": [], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_usecase": ["os.path.isdir", "shutil.rmtree", "<builtin>.str"], "os.path.isdir": [], "shutil.rmtree": [], "testing.test_cacheprovider.TestLastFailed.test_failedfirst_order": [], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_failedfirst_order": [], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_difference_invocations": [], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_usecase_splice": [], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_xpass": [], "testing.test_cacheprovider.TestLastFailed.test_non_serializable_parametrize": [], "testing.test_cacheprovider.TestLastFailed.test_terminal_report_lastfailed": [], "testing.test_cacheprovider.TestLastFailed.test_terminal_report_failedfirst": [], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_collectfailure": ["<builtin>.list", "testing.test_cacheprovider.TestLastFailed.test_lastfailed_collectfailure.rlf"], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_collectfailure.rlf": ["<builtin>.str"], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_failure_subset": ["<builtin>.sorted", "testing.test_cacheprovider.TestLastFailed.test_lastfailed_failure_subset.rlf", "<builtin>.list"], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_failure_subset.rlf": ["<builtin>.str"], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_creates_cache_when_needed": ["os.path.exists"], "os.path.exists": [], "testing.test_cacheprovider.TestLastFailed.test_xfail_not_considered_failure": ["testing.test_cacheprovider.TestLastFailed.get_cached_last_failed"], "testing.test_cacheprovider.TestLastFailed.get_cached_last_failed": ["<builtin>.sorted"], "testing.test_cacheprovider.TestLastFailed.test_xfail_strict_considered_failure": ["testing.test_cacheprovider.TestLastFailed.get_cached_last_failed"], "testing.test_cacheprovider.TestLastFailed": ["pytest.mark.parametrize"], "testing.test_cacheprovider.TestLastFailed.test_failed_changed_to_xfail_or_skip": ["testing.test_cacheprovider.TestLastFailed.get_cached_last_failed"], "testing.test_cacheprovider.TestLastFailed.test_lf_and_ff_prints_no_needless_message": [], "testing.test_cacheprovider.TestLastFailed.test_cache_cumulative": ["testing.test_cacheprovider.TestLastFailed.get_cached_last_failed"], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_no_failures_behavior_all_passed": [], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_no_failures_behavior_empty_cache": [], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_skip_collection": [], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_with_known_failures_not_being_selected": ["pathlib.Path"], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_args_with_deselected": [], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_with_class_items": [], "testing.test_cacheprovider.TestLastFailed.test_lastfailed_with_all_filtered": [], "testing.test_cacheprovider.TestLastFailed.test_packages": [], "testing.test_cacheprovider.TestNewFirst.test_newfirst_usecase": ["<builtin>.int", "os.utime"], "os.utime": [], "testing.test_cacheprovider.TestNewFirst.test_newfirst_parametrize": ["<builtin>.int", "os.utime"], "testing.test_cacheprovider.TestReadme.check_readme": [], "testing.test_cacheprovider.TestReadme.test_readme_passed": ["testing.test_cacheprovider.TestReadme.check_readme"], "testing.test_cacheprovider.TestReadme.test_readme_failed": ["testing.test_cacheprovider.TestReadme.check_readme"], "testing.test_cacheprovider.test_gitignore": ["_pytest.cacheprovider.Cache.for_config"], "_pytest.cacheprovider.Cache.for_config": [], "testing.test_cacheprovider.test_preserve_keys_order": ["_pytest.cacheprovider.Cache.for_config", "<builtin>.list"], "testing.test_cacheprovider.test_does_not_create_boilerplate_in_existing_dirs": ["_pytest.cacheprovider.Cache.for_config", "os.path.exists", "os.path.isdir"], "testing.test_cacheprovider.test_cachedir_tag": ["_pytest.cacheprovider.Cache.for_config"], "testing.test_nodes": ["pytest.mark.parametrize"], "testing.test_nodes.test_iterparentnodeids": ["_pytest.nodes.iterparentnodeids", "<builtin>.list"], "_pytest.nodes.iterparentnodeids": [], "testing.test_nodes.test_node_from_parent_disallowed_arguments": ["_pytest.nodes.Node.from_parent", "pytest.raises"], "testing.test_nodes.test_node_direct_construction_deprecated": ["_pytest.nodes.Node", "pytest.raises"], "_pytest.nodes.Node": [], "testing.test_nodes.test_subclassing_both_item_and_collector_deprecated": ["re.search", "<builtin>.any", "warnings.simplefilter", "_pytest.nodes.Item.from_parent", "warnings.catch_warnings", "<builtin>.str", "pytest.warns", "_pytest.compat.legacy_path"], "warnings.catch_warnings": [], "warnings.simplefilter": [], "testing.test_nodes.test_subclassing_both_item_and_collector_deprecated.SoWrong.__init__": ["<builtin>.super"], "<builtin>.super": [], "_pytest.compat.legacy_path": [], "_pytest.nodes.Item.from_parent": [], "re.search": [], "<builtin>.any": [], "testing.test_nodes.test_node_warn_is_no_longer_only_pytest_warnings": ["pytest.warns"], "testing.test_nodes.test_node_warning_enforces_warning_types": ["<builtin>.Exception", "pytest.raises"], "testing.test_nodes.test__check_initialpaths_for_relpath": ["pathlib.Path", "typing.cast", "_pytest.nodes._check_initialpaths_for_relpath", "pathlib.Path.cwd"], "<builtin>.frozenset": [], "testing.test_nodes.test__check_initialpaths_for_relpath.FakeSession1": ["<builtin>.frozenset"], "_pytest.nodes._check_initialpaths_for_relpath": [], "testing.test_nodes.test__check_initialpaths_for_relpath.FakeSession2": ["<builtin>.frozenset"], "testing.test_nodes.test_failure_with_changed_cwd": [], "testing.test_assertion": ["pytest.mark.filterwarnings", "pytest.mark.skipif", "pytest.mark.parametrize"], "testing.test_assertion.mock_config": [], "testing.test_assertion.mock_config.Config.getoption": ["<builtin>.KeyError"], "testing.test_assertion.TestImportHookInstallation": ["pytest.mark.parametrize"], "testing.test_assertion.TestImportHookInstallation.test_conftest_assertion_rewrite": [], "testing.test_assertion.TestImportHookInstallation.test_rewrite_assertions_pytester_plugin": [], "testing.test_assertion.TestImportHookInstallation.test_pytest_plugins_rewrite": [], "testing.test_assertion.TestImportHookInstallation.test_pytest_plugins_rewrite_module_names": [], "testing.test_assertion.TestImportHookInstallation.test_pytest_plugins_rewrite_module_names_correctly": [], "testing.test_assertion.TestImportHookInstallation.test_installed_plugin_rewrite": [], "testing.test_assertion.TestImportHookInstallation.test_rewrite_ast": [], "testing.test_assertion.TestImportHookInstallation.test_register_assert_rewrite_checks_types": ["pytest.raises", "pytest.register_assert_rewrite"], "pytest.register_assert_rewrite": [], "testing.test_assertion.TestBinReprIntegration.test_pytest_assertrepr_compare_called": [], "testing.test_assertion.callop": ["_pytest.assertion.pytest_assertrepr_compare", "testing.test_assertion.mock_config"], "_pytest.assertion.pytest_assertrepr_compare": [], "testing.test_assertion.callequal": ["testing.test_assertion.callop"], "testing.test_assertion.TestAssert_reprcompare.test_different_types": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_summary": ["<builtin>.len", "testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_text_diff": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_text_skipping": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_text_skipping_verbose": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_multiline_text_diff": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_bytes_diff_normal": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_bytes_diff_verbose": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_list": ["<builtin>.len", "testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare": ["pytest.mark.parametrize"], "testing.test_assertion.TestAssert_reprcompare.test_iterable_full_diff": ["testing.test_assertion.callequal", "textwrap.dedent"], "testing.test_assertion.TestAssert_reprcompare.test_iterable_quiet": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_iterable_full_diff_ci": [], "testing.test_assertion.TestAssert_reprcompare.test_list_different_lengths": ["<builtin>.len", "testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_list_wrap_for_multiple_lines": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_list_wrap_for_width_rewrap_same_length": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_list_dont_wrap_strings": ["<builtin>.range", "testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_dict_wrap": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_dict": ["<builtin>.len", "testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_dict_omitting": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_dict_omitting_with_verbosity_1": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_dict_omitting_with_verbosity_2": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_dict_different_items": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_sequence_different_items": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_set": ["<builtin>.len", "testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_frozenzet": ["<builtin>.len", "<builtin>.frozenset", "testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_Sequence": ["<builtin>.len", "testing.test_assertion.callequal", "testing.test_assertion.TestAssert_reprcompare.test_Sequence.TestSequence.__init__", "<builtin>.list"], "testing.test_assertion.TestAssert_reprcompare.test_Sequence.TestSequence.__init__": ["<builtin>.list"], "testing.test_assertion.TestAssert_reprcompare.test_Sequence.TestSequence.__getitem__": [], "testing.test_assertion.TestAssert_reprcompare.test_Sequence.TestSequence.__len__": ["<builtin>.len"], "testing.test_assertion.TestAssert_reprcompare.test_Sequence.TestSequence.__setitem__": [], "testing.test_assertion.TestAssert_reprcompare.test_Sequence.TestSequence.__delitem__": [], "testing.test_assertion.TestAssert_reprcompare.test_Sequence.TestSequence.insert": [], "testing.test_assertion.TestAssert_reprcompare.test_list_tuples": ["<builtin>.len", "testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_list_bad_repr": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_list_bad_repr.A.__repr__": ["<builtin>.ValueError"], "testing.test_assertion.TestAssert_reprcompare.test_one_repr_empty": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_one_repr_empty.A.__repr__": [], "testing.test_assertion.TestAssert_reprcompare.test_repr_no_exc": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_unicode": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_nonascii_text": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_nonascii_text.A.__repr__": [], "testing.test_assertion.TestAssert_reprcompare.test_format_nonascii_explanation": ["_pytest.assertion.util.format_explanation"], "_pytest.assertion.util.format_explanation": [], "testing.test_assertion.TestAssert_reprcompare.test_mojibake": ["<builtin>.isinstance", "testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare.test_nfc_nfd_same_string": ["testing.test_assertion.callequal", "<builtin>.str"], "testing.test_assertion.TestAssert_reprcompare_dataclass.test_dataclasses": [], "testing.test_assertion.TestAssert_reprcompare_dataclass.test_recursive_dataclasses": [], "testing.test_assertion.TestAssert_reprcompare_dataclass.test_recursive_dataclasses_verbose": [], "testing.test_assertion.TestAssert_reprcompare_dataclass.test_dataclasses_verbose": [], "testing.test_assertion.TestAssert_reprcompare_dataclass.test_dataclasses_with_attribute_comparison_off": [], "testing.test_assertion.TestAssert_reprcompare_dataclass.test_comparing_two_different_data_classes": [], "testing.test_assertion.TestAssert_reprcompare_dataclass.test_data_classes_with_custom_eq": [], "testing.test_assertion.TestAssert_reprcompare_dataclass.test_data_classes_with_initvar": [], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs.SimpleDataObject": ["attr.ib"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_recursive": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_recursive.OtherDataObject": ["attr.ib"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_recursive.SimpleDataObject": ["attr.ib"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_recursive_verbose": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_recursive_verbose.OtherDataObject": ["attr.ib"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_recursive_verbose.SimpleDataObject": ["attr.ib"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_verbose": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_verbose.SimpleDataObject": ["attr.ib"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_with_attribute_comparison_off": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_with_attribute_comparison_off.SimpleDataObject": ["attr.ib"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_comparing_two_different_attrs_classes": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_comparing_two_different_attrs_classes.SimpleDataObjectOne": ["attr.ib"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_comparing_two_different_attrs_classes.SimpleDataObjectTwo": ["attr.ib"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_with_auto_detect_and_custom_eq": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_with_auto_detect_and_custom_eq.SimpleDataObject": ["attr.ib"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_with_auto_detect_and_custom_eq.SimpleDataObject.__eq__": ["<builtin>.super"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_with_custom_eq": ["testing.test_assertion.callequal"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_with_custom_eq.SimpleDataObject": ["attr.ib"], "testing.test_assertion.TestAssert_reprcompare_attrsclass.test_attrs_with_custom_eq.SimpleDataObject.__eq__": ["<builtin>.super"], "testing.test_assertion.TestAssert_reprcompare_namedtuple.test_namedtuple": ["collections.namedtuple", "testing.test_assertion.callequal"], "collections.namedtuple": [], "testing.test_assertion.TestAssert_reprcompare_namedtuple.test_comparing_two_different_namedtuple": ["collections.namedtuple", "testing.test_assertion.callequal"], "testing.test_assertion.TestFormatExplanation.test_special_chars_full": [], "testing.test_assertion.TestFormatExplanation.test_fmt_simple": ["_pytest.assertion.util.format_explanation"], "testing.test_assertion.TestFormatExplanation.test_fmt_where": ["_pytest.assertion.util.format_explanation"], "testing.test_assertion.TestFormatExplanation.test_fmt_and": ["_pytest.assertion.util.format_explanation"], "testing.test_assertion.TestFormatExplanation.test_fmt_where_nested": ["_pytest.assertion.util.format_explanation"], "testing.test_assertion.TestFormatExplanation.test_fmt_newline": ["_pytest.assertion.util.format_explanation"], "testing.test_assertion.TestFormatExplanation.test_fmt_newline_escaped": ["_pytest.assertion.util.format_explanation"], "testing.test_assertion.TestFormatExplanation.test_fmt_newline_before_where": ["_pytest.assertion.util.format_explanation"], "testing.test_assertion.TestFormatExplanation.test_fmt_multi_newline_before_where": ["_pytest.assertion.util.format_explanation"], "testing.test_assertion.TestTruncateExplanation.test_doesnt_truncate_when_input_is_empty_list": ["_pytest.assertion.truncate._truncate_explanation"], "_pytest.assertion.truncate._truncate_explanation": [], "testing.test_assertion.TestTruncateExplanation.test_doesnt_truncate_at_when_input_is_5_lines_and_LT_max_chars": ["<builtin>.range", "_pytest.assertion.truncate._truncate_explanation"], "testing.test_assertion.TestTruncateExplanation.test_truncates_at_8_lines_when_given_list_of_empty_strings": ["<builtin>.len", "<builtin>.range", "_pytest.assertion.truncate._truncate_explanation"], "testing.test_assertion.TestTruncateExplanation.test_truncates_at_8_lines_when_first_8_lines_are_LT_max_chars": ["<builtin>.len", "<builtin>.range", "_pytest.assertion.truncate._truncate_explanation"], "testing.test_assertion.TestTruncateExplanation.test_truncates_at_8_lines_when_there_is_one_line_to_remove": ["<builtin>.range", "_pytest.assertion.truncate._truncate_explanation"], "testing.test_assertion.TestTruncateExplanation.test_truncates_edgecase_when_truncation_message_makes_the_result_longer_for_chars": ["_pytest.assertion.truncate._truncate_explanation"], "testing.test_assertion.TestTruncateExplanation.test_truncates_edgecase_when_truncation_message_makes_the_result_longer_for_lines": ["_pytest.assertion.truncate._truncate_explanation"], "testing.test_assertion.TestTruncateExplanation.test_truncates_at_8_lines_when_first_8_lines_are_EQ_max_chars": ["<builtin>.len", "<builtin>.range", "_pytest.assertion.truncate._truncate_explanation", "<builtin>.chr"], "<builtin>.chr": [], "testing.test_assertion.TestTruncateExplanation.test_truncates_at_4_lines_when_first_4_lines_are_GT_max_chars": ["<builtin>.len", "<builtin>.range", "_pytest.assertion.truncate._truncate_explanation"], "testing.test_assertion.TestTruncateExplanation.test_truncates_at_1_line_when_first_line_is_GT_max_chars": ["<builtin>.len", "<builtin>.range", "_pytest.assertion.truncate._truncate_explanation"], "testing.test_assertion.TestTruncateExplanation.test_full_output_truncated": [], "testing.test_assertion.test_python25_compile_issue257": [], "testing.test_assertion.test_rewritten": [], "testing.test_assertion.test_reprcompare_notin": ["testing.test_assertion.callop"], "testing.test_assertion.test_reprcompare_whitespaces": ["testing.test_assertion.callequal"], "testing.test_assertion.test_pytest_assertrepr_compare_integration": [], "testing.test_assertion.test_sequence_comparison_uses_repr": [], "testing.test_assertion.test_assertrepr_loaded_per_dir": [], "testing.test_assertion.test_assertion_options": [], "testing.test_assertion.test_triple_quoted_string_issue113": [], "testing.test_assertion.test_traceback_failure": [], "testing.test_assertion.test_exception_handling_no_traceback": [], "testing.test_assertion.test_warn_missing": [], "testing.test_assertion.test_recursion_source_decode": [], "testing.test_assertion.test_AssertionError_message": [], "testing.test_assertion.test_diff_newline_at_end": [], "testing.test_assertion.test_assert_tuple_warning": [], "testing.test_assertion.test_assert_indirect_tuple_no_warning": [], "testing.test_assertion.test_assert_with_unicode": [], "testing.test_assertion.test_raise_unprintable_assertion_error": [], "testing.test_assertion.test_raise_assertion_error_raising_repr": [], "testing.test_assertion.test_issue_1944": [], "testing.test_assertion.test_exit_from_assertrepr_compare": ["testing.test_assertion.callequal", "pytest.raises"], "testing.test_assertion.test_exit_from_assertrepr_compare.raise_exit": ["_pytest.outcomes.exit"], "_pytest.outcomes.exit": [], "testing.test_assertion.test_assertion_location_with_coverage": ["<builtin>.str"], "testing.test_assertion.test_reprcompare_verbose_long": ["<builtin>.range", "testing.test_assertion.callop"], "testing.test_compat": ["pytest.mark.skipif"], "testing.test_compat.test_is_generator": ["_pytest.compat.is_generator"], "testing.test_compat.test_is_generator.zap": [], "testing.test_compat.test_is_generator.foo": [], "_pytest.compat.is_generator": [], "testing.test_compat.test_real_func_loop_limit": ["testing.test_compat.test_real_func_loop_limit.Evil.__init__", "_pytest.compat.get_real_func", "pytest.raises"], "testing.test_compat.test_real_func_loop_limit.Evil.__init__": [], "testing.test_compat.test_real_func_loop_limit.Evil.__repr__": [], "testing.test_compat.test_real_func_loop_limit.Evil.__getattr__": ["<builtin>.RuntimeError"], "testing.test_compat.test_get_real_func": ["testing.test_compat.test_get_real_func.decorator", "_pytest.compat._PytestWrapper", "_pytest.compat.get_real_func"], "testing.test_compat.test_get_real_func.decorator": ["functools.wraps"], "functools.wraps": [], "testing.test_compat.test_get_real_func.decorator.inner": [], "testing.test_compat.test_get_real_func.func": [], "_pytest.compat._PytestWrapper": [], "testing.test_compat.test_get_real_func_partial": ["functools.partial", "_pytest.compat.get_real_func"], "testing.test_compat.test_get_real_func_partial.foo": [], "functools.partial": [], "testing.test_compat.test_is_generator_asyncio": [], "testing.test_compat.test_is_generator_async_syntax": [], "testing.test_compat.test_is_generator_async_gen_syntax": [], "testing.test_compat.ErrorsHelper.raise_baseexception": ["<builtin>.BaseException"], "<builtin>.BaseException": [], "testing.test_compat.ErrorsHelper.raise_exception": ["<builtin>.Exception"], "testing.test_compat.ErrorsHelper.raise_fail_outcome": ["pytest.fail"], "pytest.fail": [], "testing.test_compat.test_helper_failures": ["pytest.raises"], "testing.test_compat.test_safe_getattr": ["_pytest.compat.safe_getattr", "pytest.raises"], "_pytest.compat.safe_getattr": [], "testing.test_compat.test_safe_isclass": ["_pytest.compat.safe_isclass"], "_pytest.compat.safe_isclass": [], "testing.test_compat.test_safe_isclass.CrappyClass.__class__": [], "testing.test_compat.test_cached_property": [], "testing.test_compat.test_cached_property.Class": ["_pytest.compat.cached_property"], "_pytest.compat.cached_property": [], "testing.test_compat.test_cached_property.Class.prop": [], "testing.test_compat.test_assert_never_union": ["<builtin>.isinstance", "_pytest.compat.assert_never", "pytest.raises"], "_pytest.compat.assert_never": [], "testing.test_compat.test_assert_never_enum": ["pytest.raises", "_pytest.compat.assert_never", "enum.Enum"], "enum.Enum": [], "testing.test_compat.test_assert_never_literal": ["_pytest.compat.assert_never", "pytest.raises"], "testing.plugins_integration.pytest_trio_integration": ["pytest.mark.trio"], "pytest.mark.trio": [], "testing.plugins_integration.pytest_trio_integration.test_sleep": ["trio.sleep"], "trio.sleep": [], "testing.plugins_integration.pytest_anyio_integration": ["pytest.mark.anyio"], "pytest.mark.anyio": [], "testing.plugins_integration.pytest_anyio_integration.test_sleep": ["anyio.sleep"], "anyio.sleep": [], "testing.plugins_integration.simple_integration": ["<builtin>.range", "pytest.mark.parametrize"], "testing.plugins_integration.simple_integration.test_foo": [], "testing.plugins_integration.simple_integration.test_bar": [], "testing.plugins_integration.pytest_mock_integration": [], "testing.plugins_integration.pytest_mock_integration.test_mocker": [], "testing.plugins_integration.django_settings": [], "testing.plugins_integration.pytest_twisted_integration": ["pytest_twisted.inlineCallbacks", "pytest_twisted.ensureDeferred"], "testing.plugins_integration.pytest_twisted_integration.sleep": ["twisted.internet.task.deferLater"], "twisted.internet.task.deferLater": [], "pytest_twisted.inlineCallbacks": [], "testing.plugins_integration.pytest_twisted_integration.test_inlineCallbacks": ["testing.plugins_integration.pytest_twisted_integration.sleep"], "pytest_twisted.ensureDeferred": [], "testing.plugins_integration.pytest_twisted_integration.test_inlineCallbacks_async": ["testing.plugins_integration.pytest_twisted_integration.sleep"], "testing.plugins_integration.pytest_asyncio_integration": ["pytest.mark.asyncio"], "pytest.mark.asyncio": [], "testing.plugins_integration.pytest_asyncio_integration.test_sleep": ["asyncio.sleep"], "asyncio.sleep": [], "testing.plugins_integration.bdd_wallet": ["pytest_bdd.then", "pytest_bdd.scenario", "pytest_bdd.given", "pytest.fixture", "pytest_bdd.when"], "pytest_bdd.scenario": [], "testing.plugins_integration.bdd_wallet.test_publish": [], "testing.plugins_integration.bdd_wallet.wallet": [], "pytest_bdd.given": [], "testing.plugins_integration.bdd_wallet.fill_wallet": [], "pytest_bdd.when": [], "testing.plugins_integration.bdd_wallet.buy_apples": [], "testing.plugins_integration.bdd_wallet.buy_bananas": [], "pytest_bdd.then": [], "testing.plugins_integration.bdd_wallet.check": [], "testing.conftest": ["pytest.hookimpl", "sys.gettrace", "pytest.fixture"], "sys.gettrace": [], "testing.conftest.restore_tracing": ["sys.settrace", "sys.gettrace"], "sys.settrace": [], "pytest.hookimpl": [], "testing.conftest.pytest_collection_modifyitems": [], "testing.conftest.tw_mock": ["testing.conftest.tw_mock.TWMock.__init__"], "testing.conftest.tw_mock.TWMock": ["<builtin>.object"], "testing.conftest.tw_mock.TWMock.__init__": [], "testing.conftest.tw_mock.TWMock.sep": [], "testing.conftest.tw_mock.TWMock.write": [], "testing.conftest.tw_mock.TWMock._write_source": ["<builtin>.len", "<builtin>.zip", "testing.conftest.tw_mock.TWMock.line"], "<builtin>.zip": [], "testing.conftest.tw_mock.TWMock.line": [], "testing.conftest.tw_mock.TWMock.markup": [], "testing.conftest.tw_mock.TWMock.get_write_msg": [], "testing.conftest.dummy_yaml_custom_test": [], "testing.conftest.pytester": [], "testing.conftest.color_mapping": [], "testing.conftest.color_mapping.ColorMapping": ["re.escape"], "testing.conftest.color_mapping.ColorMapping.format": [], "testing.conftest.color_mapping.ColorMapping.format_for_fnmatch": [], "testing.conftest.color_mapping.ColorMapping.format_for_rematch": [], "testing.conftest.mock_timing": ["testing.conftest.mock_timing.MockTiming.patch"], "testing.conftest.mock_timing.MockTiming": ["attr.ib"], "testing.conftest.mock_timing.MockTiming.sleep": [], "testing.conftest.mock_timing.MockTiming.time": [], "testing.conftest.mock_timing.MockTiming.patch": [], "testing.acceptance_test": ["pytest.mark.filterwarnings", "pytest.mark.skipif"], "testing.acceptance_test.prepend_pythonpath": ["os.pathsep.join", "os.getenv", "<builtin>.str"], "os.getenv": [], "os.pathsep.join": [], "testing.acceptance_test.TestGeneralUsage.test_config_error": [], "testing.acceptance_test.TestGeneralUsage.test_root_conftest_syntax_error": [], "testing.acceptance_test.TestGeneralUsage.test_early_hook_error_issue38_1": [], "testing.acceptance_test.TestGeneralUsage.test_early_hook_configure_error_issue38": [], "testing.acceptance_test.TestGeneralUsage.test_file_not_found": [], "testing.acceptance_test.TestGeneralUsage.test_file_not_found_unconfigure_issue143": [], "testing.acceptance_test.TestGeneralUsage.test_config_preparse_plugin_option": [], "testing.acceptance_test.TestGeneralUsage": ["pytest.mark.filterwarnings", "pytest.mark.parametrize"], "testing.acceptance_test.TestGeneralUsage.test_early_load_setuptools_name": [], "testing.acceptance_test.TestGeneralUsage.test_early_load_setuptools_name.DummyEntryPoint": ["attr.ib"], "testing.acceptance_test.TestGeneralUsage.test_early_load_setuptools_name.DummyEntryPoint.load": ["<builtin>.__import__"], "testing.acceptance_test.TestGeneralUsage.test_early_load_setuptools_name.DummyDist": ["attr.ib"], "testing.acceptance_test.TestGeneralUsage.test_early_load_setuptools_name.my_dists": [], "testing.acceptance_test.TestGeneralUsage.test_assertion_rewrite": [], "testing.acceptance_test.TestGeneralUsage.test_nested_import_error": [], "testing.acceptance_test.TestGeneralUsage.test_not_collectable_arguments": [], "testing.acceptance_test.TestGeneralUsage.test_better_reporting_on_conftest_load_failure": [], "testing.acceptance_test.TestGeneralUsage.test_early_skip": [], "testing.acceptance_test.TestGeneralUsage.test_issue88_initial_file_multinodes": [], "testing.acceptance_test.TestGeneralUsage.test_issue93_initialnode_importing_capturing": [], "testing.acceptance_test.TestGeneralUsage.test_conftest_printing_shows_if_error": [], "testing.acceptance_test.TestGeneralUsage.test_issue109_sibling_conftests_not_loaded": [], "testing.acceptance_test.TestGeneralUsage.test_directory_skipped": [], "testing.acceptance_test.TestGeneralUsage.test_multiple_items_per_collector_byid": [], "testing.acceptance_test.TestGeneralUsage.test_skip_on_generated_funcarg_id": [], "testing.acceptance_test.TestGeneralUsage.test_direct_addressing_selects": [], "testing.acceptance_test.TestGeneralUsage.test_direct_addressing_notfound": [], "testing.acceptance_test.TestGeneralUsage.test_docstring_on_hookspec": ["<builtin>.vars"], "<builtin>.vars": [], "testing.acceptance_test.TestGeneralUsage.test_initialization_error_issue49": [], "testing.acceptance_test.TestGeneralUsage.test_issue134_report_error_when_collecting_member": [], "testing.acceptance_test.TestGeneralUsage.test_report_all_failed_collections_initargs": [], "testing.acceptance_test.TestGeneralUsage.test_namespace_import_doesnt_confuse_import_hook": [], "testing.acceptance_test.TestGeneralUsage.test_unknown_option": [], "testing.acceptance_test.TestGeneralUsage.test_getsourcelines_error_issue553": [], "testing.acceptance_test.TestGeneralUsage.test_plugins_given_as_strings": ["pytest.main", "types.ModuleType", "pytest.raises", "<builtin>.str"], "testing.acceptance_test.TestGeneralUsage.test_parametrized_with_bytes_regex": [], "testing.acceptance_test.TestGeneralUsage.test_parametrized_with_null_bytes": [], "testing.acceptance_test.TestInvocationVariants.test_earlyinit": [], "testing.acceptance_test.TestInvocationVariants.test_pydoc": [], "testing.acceptance_test.TestInvocationVariants.test_import_star_pytest": [], "testing.acceptance_test.TestInvocationVariants.test_double_pytestcmdline": [], "testing.acceptance_test.TestInvocationVariants.test_python_minus_m_invocation_ok": ["<builtin>.str"], "testing.acceptance_test.TestInvocationVariants.test_python_minus_m_invocation_fail": ["<builtin>.str"], "testing.acceptance_test.TestInvocationVariants.test_python_pytest_package": ["<builtin>.str"], "testing.acceptance_test.TestInvocationVariants.test_invoke_with_invalid_type": ["pytest.main", "pytest.raises"], "testing.acceptance_test.TestInvocationVariants.test_invoke_with_path": ["pytest.main", "<builtin>.str"], "testing.acceptance_test.TestInvocationVariants.test_invoke_plugin_api": ["pytest.main"], "testing.acceptance_test.TestInvocationVariants.test_invoke_plugin_api.MyPlugin.pytest_addoption": [], "testing.acceptance_test.TestInvocationVariants.test_pyargs_importerror": [], "testing.acceptance_test.TestInvocationVariants.test_pyargs_only_imported_once": [], "testing.acceptance_test.TestInvocationVariants.test_pyargs_filename_looks_like_module": [], "testing.acceptance_test.TestInvocationVariants.test_cmdline_python_package": ["warnings.simplefilter", "warnings.catch_warnings", "<builtin>.str"], "testing.acceptance_test.TestInvocationVariants.test_cmdline_python_namespace_package": ["testing.acceptance_test.prepend_pythonpath"], "testing.acceptance_test.TestInvocationVariants.test_invoke_test_and_doctestmodules": ["<builtin>.str"], "testing.acceptance_test.TestInvocationVariants.test_cmdline_python_package_symlink": ["testing.acceptance_test.prepend_pythonpath", "os.path.join", "_pytest.pathlib.symlink_or_skip"], "testing.acceptance_test.TestInvocationVariants.test_cmdline_python_package_not_exists": [], "testing.acceptance_test.TestInvocationVariants": ["pytest.mark.xfail"], "testing.acceptance_test.TestInvocationVariants.test_noclass_discovery_if_not_testcase": [], "testing.acceptance_test.TestInvocationVariants.test_doctest_id": [], "testing.acceptance_test.TestInvocationVariants.test_core_backward_compatibility": ["<builtin>.type"], "testing.acceptance_test.TestInvocationVariants.test_has_plugin": [], "testing.acceptance_test.TestDurations.test_calls": [], "testing.acceptance_test.TestDurations.test_calls_show_2": [], "testing.acceptance_test.TestDurations.test_calls_showall": [], "testing.acceptance_test.TestDurations.test_calls_showall_verbose": [], "testing.acceptance_test.TestDurations.test_with_deselected": [], "testing.acceptance_test.TestDurations.test_with_failing_collection": [], "testing.acceptance_test.TestDurations.test_with_not": [], "testing.acceptance_test.TestDurationsWithFixture.test_setup_function": [], "testing.acceptance_test.test_zipimport_hook": ["<builtin>.str", "pytest.importorskip"], "testing.acceptance_test.test_import_plugin_unicode_name": [], "testing.acceptance_test.test_pytest_plugins_as_module": [], "testing.acceptance_test.test_deferred_hook_checking": [], "testing.acceptance_test.test_fixture_values_leak": [], "testing.acceptance_test.test_fixture_order_respects_scope": [], "testing.acceptance_test.test_frame_leak_on_failing_test": [], "testing.acceptance_test.test_fixture_mock_integration": [], "testing.acceptance_test.test_usage_error_code": [], "testing.acceptance_test.test_warn_on_async_function": [], "testing.acceptance_test.test_warn_on_async_gen_function": [], "testing.acceptance_test.test_pdb_can_be_rewritten": [], "testing.acceptance_test.test_tee_stdio_captures_and_live_prints": ["<builtin>.open"], "testing.acceptance_test.test_no_brokenpipeerror_message": [], "testing.acceptance_test.test_function_return_non_none_warning": [], "testing.python.raises": [], "testing.python.raises.TestRaises.test_check_callable": ["pytest.raises"], "testing.python.raises.TestRaises.test_raises": ["pytest.raises", "<builtin>.str"], "testing.python.raises.TestRaises.test_raises_function": ["pytest.raises", "<builtin>.str"], "testing.python.raises.TestRaises.test_raises_does_not_allow_none": ["pytest.raises"], "testing.python.raises.TestRaises.test_raises_does_not_allow_empty_tuple": ["pytest.raises"], "testing.python.raises.TestRaises.test_raises_callable_no_exception": ["pytest.raises"], "testing.python.raises.TestRaises.test_raises_callable_no_exception.A.__call__": [], "testing.python.raises.TestRaises.test_raises_falsey_type_error": ["<builtin>.AssertionError", "pytest.raises"], "<builtin>.AssertionError": [], "testing.python.raises.TestRaises.test_raises_repr_inflight": ["<builtin>.print", "pprint.pprint", "pytest.raises", "<builtin>.str", "<builtin>.repr"], "pprint.pprint": [], "testing.python.raises.TestRaises.test_raises_as_contextmanager": [], "testing.python.raises.TestRaises.test_does_not_raise": [], "testing.python.raises.TestRaises.test_does_not_raise_does_raise": [], "testing.python.raises.TestRaises.test_noclass": ["pytest.raises"], "testing.python.raises.TestRaises.test_noclass.<lambda1>": [], "testing.python.raises.TestRaises.test_invalid_arguments_to_raises": ["<builtin>.ValueError", "pytest.raises"], "testing.python.raises.TestRaises.test_tuple": ["<builtin>.KeyError", "pytest.raises"], "testing.python.raises.TestRaises.test_no_raise_message": ["<builtin>.repr", "pytest.raises"], "testing.python.raises.TestRaises": ["pytest.mark.parametrize"], "testing.python.raises.TestRaises.test_raises_cyclic_reference": ["<builtin>.len", "sys.exc_info", "gc.get_referrers", "pytest.raises"], "testing.python.raises.TestRaises.test_raises_cyclic_reference.T.__call__": [], "gc.get_referrers": [], "testing.python.raises.TestRaises.test_raises_match": ["<builtin>.int", "re.escape", "pytest.raises", "<builtin>.str"], "testing.python.raises.TestRaises.test_raises_match.tfunc": ["<builtin>.ValueError"], "testing.python.raises.TestRaises.test_match_failure_string_quoting": ["<builtin>.AssertionError", "pytest.raises"], "testing.python.raises.TestRaises.test_match_failure_exact_string_message": ["<builtin>.AssertionError", "pytest.raises"], "testing.python.raises.TestRaises.test_raises_match_wrong_type": ["<builtin>.int", "pytest.raises"], "testing.python.raises.TestRaises.test_raises_exception_looks_iterable": ["pytest.raises"], "testing.python.raises.TestRaises.test_raises_exception_looks_iterable.Meta.__getitem__": [], "testing.python.raises.TestRaises.test_raises_exception_looks_iterable.Meta.__len__": [], "testing.python.raises.TestRaises.test_raises_exception_looks_iterable.<lambda1>": [], "testing.python.raises.TestRaises.test_raises_with_raising_dunder_class": ["pytest.raises"], "testing.python.raises.TestRaises.test_raises_with_raising_dunder_class.CrappyClass.__class__": [], "testing.python.raises.TestRaises.test_raises_context_manager_with_kwargs": ["pytest.raises", "<builtin>.str"], "testing.python.raises.TestRaises.test_expected_exception_is_not_a_baseexception": ["pytest.raises", "<builtin>.str"], "testing.python.approx": ["contextlib.contextmanager", "<builtin>.float", "pytest.fixture"], "testing.python.approx.mocked_doctest_runner": ["doctest.DocTestRunner.__init__"], "testing.python.approx.mocked_doctest_runner.MockedPdb.__init__": [], "testing.python.approx.mocked_doctest_runner.MockedPdb.set_trace": ["<builtin>.NotImplementedError"], "testing.python.approx.mocked_doctest_runner.MockedPdb.reset": [], "testing.python.approx.mocked_doctest_runner.MockedPdb.set_continue": [], "testing.python.approx.mocked_doctest_runner.MyDocTestRunner.report_failure": ["<builtin>.AssertionError"], "doctest.DocTestRunner.__init__": [], "contextlib.contextmanager": [], "testing.python.approx.temporary_verbosity": [], "testing.python.approx.assert_approx_raises_regex": [], "testing.python.approx.assert_approx_raises_regex.do_assert": ["<builtin>.len", "<builtin>.enumerate", "pytest.approx", "<builtin>.zip", "re.compile", "pytest.raises", "<builtin>.str", "testing.python.approx.temporary_verbosity"], "re.compile": [], "testing.python.approx.TestApprox.test_error_messages_native_dtypes": [], "testing.python.approx.TestApprox.test_error_messages_numpy_dtypes": ["pytest.importorskip"], "testing.python.approx.TestApprox.test_error_messages_invalid_args": ["<builtin>.str", "pytest.approx", "pytest.raises", "pytest.importorskip"], "testing.python.approx.TestApprox.test_error_messages_with_different_verbosity": ["<builtin>.range", "pytest.importorskip"], "testing.python.approx.TestApprox.test_repr_string": ["<builtin>.repr", "pytest.approx"], "testing.python.approx.TestApprox.test_repr_complex_numbers": ["<builtin>.repr", "pytest.approx"], "testing.python.approx.TestApprox": ["pytest.mark.parametrize"], "testing.python.approx.TestApprox.test_repr_nd_array": ["<builtin>.repr", "pytest.approx", "pytest.importorskip"], "testing.python.approx.TestApprox.test_bool": ["pytest.approx", "pytest.raises"], "testing.python.approx.TestApprox.test_operator_overloading": ["pytest.approx"], "testing.python.approx.TestApprox.test_exactly_equal": ["fractions.Fraction", "decimal.Decimal", "pytest.approx"], "decimal.Decimal": [], "fractions.Fraction": [], "testing.python.approx.TestApprox.test_opposite_sign": ["pytest.approx"], "testing.python.approx.TestApprox.test_zero_tolerance": ["pytest.approx"], "testing.python.approx.TestApprox.test_negative_tolerance": ["pytest.approx", "pytest.raises"], "testing.python.approx.TestApprox.test_negative_tolerance_message": ["pytest.approx", "pytest.raises"], "testing.python.approx.TestApprox.test_inf_tolerance": ["pytest.approx"], "testing.python.approx.TestApprox.test_inf_tolerance_expecting_zero": ["pytest.approx", "pytest.raises"], "testing.python.approx.TestApprox.test_nan_tolerance": ["pytest.approx", "pytest.raises"], "testing.python.approx.TestApprox.test_reasonable_defaults": ["pytest.approx"], "testing.python.approx.TestApprox.test_default_tolerances": ["pytest.approx"], "testing.python.approx.TestApprox.test_custom_tolerances": ["pytest.approx"], "testing.python.approx.TestApprox.test_relative_tolerance": ["pytest.approx"], "testing.python.approx.TestApprox.test_absolute_tolerance": ["pytest.approx"], "testing.python.approx.TestApprox.test_expecting_zero": ["pytest.approx"], "testing.python.approx.TestApprox.test_expecting_inf": ["pytest.approx"], "testing.python.approx.TestApprox.test_expecting_nan": ["pytest.approx"], "testing.python.approx.TestApprox.test_int": ["pytest.approx"], "testing.python.approx.TestApprox.test_decimal": ["decimal.Decimal", "pytest.approx"], "testing.python.approx.TestApprox.test_fraction": ["fractions.Fraction", "pytest.approx"], "testing.python.approx.TestApprox.test_complex": ["pytest.approx"], "testing.python.approx.TestApprox.test_list": ["pytest.approx"], "testing.python.approx.TestApprox.test_list_decimal": ["decimal.Decimal", "pytest.approx"], "testing.python.approx.TestApprox.test_list_wrong_len": ["pytest.approx"], "testing.python.approx.TestApprox.test_tuple": ["pytest.approx"], "testing.python.approx.TestApprox.test_tuple_wrong_len": ["pytest.approx"], "testing.python.approx.TestApprox.test_tuple_vs_other": ["pytest.approx"], "testing.python.approx.TestApprox.test_dict": ["pytest.approx"], "testing.python.approx.TestApprox.test_dict_decimal": ["decimal.Decimal", "pytest.approx"], "testing.python.approx.TestApprox.test_dict_wrong_len": ["pytest.approx"], "testing.python.approx.TestApprox.test_dict_nonnumeric": ["pytest.approx"], "testing.python.approx.TestApprox.test_dict_vs_other": ["pytest.approx"], "testing.python.approx.TestApprox.test_numpy_array": ["pytest.approx", "<builtin>.list", "pytest.importorskip"], "testing.python.approx.TestApprox.test_numpy_tolerance_args": ["pytest.approx", "pytest.importorskip"], "testing.python.approx.TestApprox.test_numpy_expecting_nan": ["pytest.approx", "pytest.importorskip"], "testing.python.approx.TestApprox.test_numpy_expecting_inf": ["pytest.approx", "pytest.importorskip"], "testing.python.approx.TestApprox.test_numpy_array_wrong_shape": ["pytest.approx", "pytest.importorskip"], "testing.python.approx.TestApprox.test_numpy_array_protocol": ["testing.python.approx.TestApprox.test_numpy_array_protocol.DeviceArray.__init__", "pytest.approx", "pytest.importorskip"], "testing.python.approx.TestApprox.test_numpy_array_protocol.DeviceArray.__init__": [], "testing.python.approx.TestApprox.test_numpy_array_protocol.DeviceArray.__array__": [], "testing.python.approx.TestApprox.test_numpy_array_protocol.DeviceScalar.__init__": [], "testing.python.approx.TestApprox.test_numpy_array_protocol.DeviceScalar.__array__": [], "testing.python.approx.TestApprox.test_doctests": ["doctest.DocTestParser"], "doctest.DocTestParser": [], "testing.python.approx.TestApprox.test_unicode_plus_minus": [], "testing.python.approx.TestApprox.test_expected_value_type_error": ["pytest.approx", "pytest.raises"], "testing.python.approx.TestApprox.test_nonnumeric_okay_if_equal": ["pytest.approx"], "testing.python.approx.TestApprox.test_nonnumeric_false_if_unequal": ["pytest.approx"], "testing.python.approx.TestApprox.test_nonnumeric_dict_repr": ["<builtin>.repr", "pytest.approx"], "testing.python.approx.TestApprox.test_nonnumeric_list_repr": ["<builtin>.repr", "pytest.approx"], "testing.python.approx.TestApprox.test_comparison_operator_type_error": ["pytest.approx", "pytest.raises"], "testing.python.approx.TestApprox.test_numpy_array_with_scalar": ["pytest.approx", "pytest.importorskip"], "testing.python.approx.TestApprox.test_numpy_scalar_with_array": ["pytest.approx", "pytest.importorskip"], "testing.python.approx.TestApprox.test_generic_ordered_sequence": ["<builtin>.repr", "pytest.approx"], "testing.python.approx.TestApprox.test_generic_ordered_sequence.MySequence.__getitem__": [], "testing.python.approx.TestApprox.test_generic_ordered_sequence.MySequence.__len__": [], "testing.python.approx.TestApprox.test_allow_ordered_sequences_only": ["pytest.approx", "pytest.raises"], "testing.python.approx.TestRecursiveSequenceMap.test_map_over_scalar": ["_pytest.python_api._recursive_sequence_map"], "_pytest.python_api._recursive_sequence_map": [], "testing.python.approx.TestRecursiveSequenceMap.test_map_over_empty_list": ["_pytest.python_api._recursive_sequence_map"], "testing.python.approx.TestRecursiveSequenceMap.test_map_over_list": ["_pytest.python_api._recursive_sequence_map"], "testing.python.approx.TestRecursiveSequenceMap.test_map_over_tuple": ["_pytest.python_api._recursive_sequence_map"], "testing.python.approx.TestRecursiveSequenceMap.test_map_over_nested_lists": ["_pytest.python_api._recursive_sequence_map"], "testing.python.approx.TestRecursiveSequenceMap.test_map_over_mixed_sequence": ["_pytest.python_api._recursive_sequence_map"], "testing.python.metafunc": [], "testing.python.metafunc.TestMetafunc.Metafunc": ["_pytest.python.Metafunc", "_pytest.compat.getfuncargnames", "_pytest.python.FunctionDefinition._create", "testing.python.metafunc.TestMetafunc.Metafunc.FuncFixtureInfoMock.__init__"], "testing.python.metafunc.TestMetafunc.Metafunc.FuncFixtureInfoMock.__init__": [], "testing.python.metafunc.TestMetafunc.Metafunc.DefinitionMock": ["attr.ib"], "_pytest.compat.getfuncargnames": [], "_pytest.python.FunctionDefinition._create": [], "_pytest.python.Metafunc": [], "testing.python.metafunc.TestMetafunc.test_no_funcargs": ["<builtin>.repr", "testing.python.metafunc.TestMetafunc.Metafunc"], "testing.python.metafunc.TestMetafunc.test_no_funcargs.function": [], "testing.python.metafunc.TestMetafunc.test_function_basic": ["<builtin>.len", "testing.python.metafunc.TestMetafunc.Metafunc"], "testing.python.metafunc.TestMetafunc.test_function_basic.func": [], "testing.python.metafunc.TestMetafunc.test_parametrize_error": ["pytest.raises", "testing.python.metafunc.TestMetafunc.Metafunc"], "testing.python.metafunc.TestMetafunc.test_parametrize_error.func": [], "testing.python.metafunc.TestMetafunc.test_parametrize_error.<lambda1>": [], "testing.python.metafunc.TestMetafunc.test_parametrize_error.<lambda2>": [], "testing.python.metafunc.TestMetafunc.test_parametrize_error.<lambda3>": [], "testing.python.metafunc.TestMetafunc.test_parametrize_error.<lambda4>": [], "testing.python.metafunc.TestMetafunc.test_parametrize_error_iterator": ["testing.python.metafunc.TestMetafunc.test_parametrize_error_iterator.gen", "pytest.raises", "testing.python.metafunc.TestMetafunc.Metafunc"], "testing.python.metafunc.TestMetafunc.test_parametrize_error_iterator.func": ["<builtin>.NotImplementedError"], "testing.python.metafunc.TestMetafunc.test_parametrize_error_iterator.Exc.__repr__": [], "testing.python.metafunc.TestMetafunc.test_parametrize_error_iterator.gen": [], "testing.python.metafunc.TestMetafunc.test_parametrize_bad_scope": ["pytest.raises", "testing.python.metafunc.TestMetafunc.Metafunc"], "testing.python.metafunc.TestMetafunc.test_parametrize_bad_scope.func": [], "testing.python.metafunc.TestMetafunc.test_parametrize_request_name": ["pytest.raises", "testing.python.metafunc.TestMetafunc.Metafunc"], "testing.python.metafunc.TestMetafunc.test_parametrize_request_name.func": ["<builtin>.NotImplementedError"], "testing.python.metafunc.TestMetafunc.test_find_parametrized_scope": ["testing.python.metafunc.TestMetafunc.test_find_parametrized_scope.find_scope", "typing.cast", "<builtin>.dict"], "testing.python.metafunc.TestMetafunc.test_find_parametrized_scope.DummyFixtureDef": ["attr.ib"], "testing.python.metafunc.TestMetafunc.test_find_parametrized_scope.find_scope": ["_pytest.python._find_parametrized_scope"], "_pytest.python._find_parametrized_scope": [], "testing.python.metafunc.TestMetafunc.test_parametrize_and_id": ["testing.python.metafunc.TestMetafunc.Metafunc"], "testing.python.metafunc.TestMetafunc.test_parametrize_and_id.func": [], "testing.python.metafunc.TestMetafunc.test_parametrize_and_id_unicode": ["testing.python.metafunc.TestMetafunc.Metafunc"], "testing.python.metafunc.TestMetafunc.test_parametrize_and_id_unicode.func": [], "testing.python.metafunc.TestMetafunc.test_parametrize_with_wrong_number_of_ids": ["pytest.raises", "testing.python.metafunc.TestMetafunc.Metafunc"], "testing.python.metafunc.TestMetafunc.test_parametrize_with_wrong_number_of_ids.func": [], "testing.python.metafunc.TestMetafunc.test_parametrize_ids_iterator_without_mark": ["testing.python.metafunc.TestMetafunc.Metafunc", "itertools.count"], "testing.python.metafunc.TestMetafunc.test_parametrize_ids_iterator_without_mark.func": [], "itertools.count": [], "testing.python.metafunc.TestMetafunc.test_parametrize_empty_list": ["testing.python.metafunc.TestMetafunc.Metafunc"], "testing.python.metafunc.TestMetafunc.test_parametrize_empty_list.func": [], "testing.python.metafunc.TestMetafunc.test_parametrize_empty_list.MockConfig.getini": [], "testing.python.metafunc.TestMetafunc.test_parametrize_empty_list.MockConfig.hook": [], "testing.python.metafunc.TestMetafunc.test_parametrize_empty_list.MockConfig.pytest_make_parametrize_id": [], "testing.python.metafunc.TestMetafunc.test_parametrize_with_userobjects": ["<builtin>.list", "testing.python.metafunc.TestMetafunc.Metafunc"], "testing.python.metafunc.TestMetafunc.test_parametrize_with_userobjects.func": [], "hypothesis.strategies.text": [], "testing.python.metafunc.TestMetafunc": ["hypothesis.strategies.text", "hypothesis.strategies.binary", "hypothesis.given", "hypothesis.settings"], "hypothesis.strategies.binary": [], "hypothesis.given": [], "hypothesis.settings": [], "testing.python.metafunc.TestMetafunc.test_idval_hypothesis": ["<builtin>.isinstance", "_pytest.python.IdMaker"], "_pytest.python.IdMaker": [], "testing.python.metafunc.TestMetafunc.test_unicode_idval": ["_pytest.python.IdMaker"], "testing.python.metafunc.TestMetafunc.test_unicode_idval_with_config": ["_pytest.python.IdMaker", "testing.python.metafunc.TestMetafunc.test_unicode_idval_with_config.MockConfig.__init__"], "testing.python.metafunc.TestMetafunc.test_unicode_idval_with_config.MockConfig.__init__": [], "testing.python.metafunc.TestMetafunc.test_unicode_idval_with_config.MockConfig.hook": [], "testing.python.metafunc.TestMetafunc.test_unicode_idval_with_config.MockConfig.pytest_make_parametrize_id": [], "testing.python.metafunc.TestMetafunc.test_unicode_idval_with_config.MockConfig.getini": [], "testing.python.metafunc.TestMetafunc.test_bytes_idval": ["_pytest.python.IdMaker"], "testing.python.metafunc.TestMetafunc.test_class_or_function_idval": ["_pytest.python.IdMaker"], "testing.python.metafunc.TestMetafunc.test_class_or_function_idval.test_function": [], "testing.python.metafunc.TestMetafunc.test_notset_idval": ["_pytest.python.IdMaker"], "testing.python.metafunc.TestMetafunc.test_idmaker_autoname": ["pytest.param", "_pytest.python.IdMaker", "<builtin>.object"], "testing.python.metafunc.TestMetafunc.test_idmaker_with_bytes_regex": ["pytest.param", "re.compile", "_pytest.python.IdMaker"], "testing.python.metafunc.TestMetafunc.test_idmaker_native_strings": ["pytest.param", "<builtin>.set", "<builtin>.tuple", "re.compile", "<builtin>.list", "_pytest.python.IdMaker"], "testing.python.metafunc.TestMetafunc.test_idmaker_non_printable_characters": ["pytest.param", "_pytest.python.IdMaker"], "testing.python.metafunc.TestMetafunc.test_idmaker_manual_ids_must_be_printable": ["pytest.param", "_pytest.python.IdMaker"], "testing.python.metafunc.TestMetafunc.test_idmaker_enum": ["pytest.param", "_pytest.python.IdMaker", "pytest.importorskip"], "testing.python.metafunc.TestMetafunc.test_idmaker_idfn": ["<builtin>.IndexError", "pytest.param", "<builtin>.KeyError", "_pytest.python.IdMaker"], "testing.python.metafunc.TestMetafunc.test_idmaker_idfn.ids": ["<builtin>.repr", "<builtin>.isinstance"], "<builtin>.IndexError": [], "testing.python.metafunc.TestMetafunc.test_idmaker_idfn_unique_names": ["<builtin>.IndexError", "pytest.param", "<builtin>.KeyError", "_pytest.python.IdMaker"], "testing.python.metafunc.TestMetafunc.test_idmaker_idfn_unique_names.ids": [], "testing.python.metafunc.TestMetafunc.test_idmaker_with_idfn_and_config": ["testing.python.metafunc.TestMetafunc.test_idmaker_with_idfn_and_config.MockConfig.__init__", "pytest.param", "_pytest.python.IdMaker"], "testing.python.metafunc.TestMetafunc.test_idmaker_with_idfn_and_config.MockConfig.__init__": [], "testing.python.metafunc.TestMetafunc.test_idmaker_with_idfn_and_config.MockConfig.hook": [], "testing.python.metafunc.TestMetafunc.test_idmaker_with_idfn_and_config.MockConfig.pytest_make_parametrize_id": [], "testing.python.metafunc.TestMetafunc.test_idmaker_with_idfn_and_config.MockConfig.getini": [], "testing.python.metafunc.TestMetafunc.test_idmaker_with_idfn_and_config.<lambda1>": [], "testing.python.metafunc.TestMetafunc.test_idmaker_with_ids_and_config": ["_pytest.python.IdMaker", "pytest.param", "testing.python.metafunc.TestMetafunc.test_idmaker_with_ids_and_config.MockConfig.__init__"], "testing.python.metafunc.TestMetafunc.test_idmaker_with_ids_and_config.MockConfig.__init__": [], "testing.python.metafunc.TestMetafunc.test_idmaker_with_ids_and_config.MockConfig.hook": [], "testing.python.metafunc.TestMetafunc.test_idmaker_with_ids_and_config.MockConfig.pytest_make_parametrize_id": [], "testing.python.metafunc.TestMetafunc.test_idmaker_with_ids_and_config.MockConfig.getini": [], "testing.python.metafunc.TestMetafunc.test_parametrize_ids_exception": [], "testing.python.metafunc.TestMetafunc.test_parametrize_ids_returns_non_string": [], "testing.python.metafunc.TestMetafunc.test_idmaker_with_ids": ["pytest.param", "_pytest.python.IdMaker"], "testing.python.metafunc.TestMetafunc.test_idmaker_with_paramset_id": ["pytest.param", "_pytest.python.IdMaker"], "testing.python.metafunc.TestMetafunc.test_idmaker_with_ids_unique_names": ["_pytest.python.IdMaker", "<builtin>.map", "<builtin>.list"], "<builtin>.map": [], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect": ["<builtin>.len", "testing.python.metafunc.TestMetafunc.Metafunc", "<builtin>.dict"], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect.func": [], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect_list": ["testing.python.metafunc.TestMetafunc.Metafunc", "<builtin>.dict"], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect_list.func": [], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect_list_all": ["testing.python.metafunc.TestMetafunc.Metafunc", "<builtin>.dict"], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect_list_all.func": [], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect_list_empty": ["testing.python.metafunc.TestMetafunc.Metafunc", "<builtin>.dict"], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect_list_empty.func": [], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect_wrong_type": ["pytest.raises", "testing.python.metafunc.TestMetafunc.Metafunc"], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect_wrong_type.func": [], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect_list_functional": [], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect_list_error": ["pytest.raises", "testing.python.metafunc.TestMetafunc.Metafunc"], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect_list_error.func": [], "testing.python.metafunc.TestMetafunc.test_parametrize_uses_no_fixture_error_indirect_false": [], "testing.python.metafunc.TestMetafunc.test_parametrize_uses_no_fixture_error_indirect_true": [], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect_uses_no_fixture_error_indirect_string": [], "testing.python.metafunc.TestMetafunc.test_parametrize_indirect_uses_no_fixture_error_indirect_list": [], "testing.python.metafunc.TestMetafunc.test_parametrize_argument_not_in_indirect_list": [], "testing.python.metafunc.TestMetafunc.test_parametrize_gives_indicative_error_on_function_with_default_argument": [], "testing.python.metafunc.TestMetafunc.test_parametrize_functional": [], "testing.python.metafunc.TestMetafunc.test_parametrize_onearg": ["<builtin>.len", "testing.python.metafunc.TestMetafunc.Metafunc", "<builtin>.dict"], "testing.python.metafunc.TestMetafunc.test_parametrize_onearg.<lambda1>": [], "testing.python.metafunc.TestMetafunc.test_parametrize_onearg_indirect": ["testing.python.metafunc.TestMetafunc.Metafunc", "<builtin>.dict"], "testing.python.metafunc.TestMetafunc.test_parametrize_onearg_indirect.<lambda1>": [], "testing.python.metafunc.TestMetafunc.test_parametrize_twoargs": ["<builtin>.len", "testing.python.metafunc.TestMetafunc.Metafunc", "<builtin>.dict"], "testing.python.metafunc.TestMetafunc.test_parametrize_twoargs.<lambda1>": [], "testing.python.metafunc.TestMetafunc.test_parametrize_multiple_times": [], "testing.python.metafunc.TestMetafunc.test_parametrize_CSV": [], "testing.python.metafunc.TestMetafunc.test_parametrize_class_scenarios": [], "testing.python.metafunc.TestMetafunc.test_format_args": ["_pytest.compat._format_args"], "testing.python.metafunc.TestMetafunc.test_format_args.function1": [], "_pytest.compat._format_args": [], "testing.python.metafunc.TestMetafunc.test_format_args.function2": [], "testing.python.metafunc.TestMetafunc.test_format_args.function3": [], "testing.python.metafunc.TestMetafunc.test_format_args.function4": [], "testing.python.metafunc.TestMetafuncFunctional.test_attributes": [], "testing.python.metafunc.TestMetafuncFunctional.test_two_functions": [], "testing.python.metafunc.TestMetafuncFunctional.test_noself_in_method": [], "testing.python.metafunc.TestMetafuncFunctional.test_generate_tests_in_class": [], "testing.python.metafunc.TestMetafuncFunctional.test_two_functions_not_same_instance": [], "testing.python.metafunc.TestMetafuncFunctional.test_issue28_setup_method_in_generate_tests": [], "testing.python.metafunc.TestMetafuncFunctional.test_parametrize_functional2": [], "testing.python.metafunc.TestMetafuncFunctional.test_parametrize_and_inner_getfixturevalue": [], "testing.python.metafunc.TestMetafuncFunctional.test_parametrize_on_setup_arg": [], "testing.python.metafunc.TestMetafuncFunctional.test_parametrize_with_ids": [], "testing.python.metafunc.TestMetafuncFunctional.test_parametrize_without_ids": [], "testing.python.metafunc.TestMetafuncFunctional.test_parametrize_with_None_in_ids": [], "testing.python.metafunc.TestMetafuncFunctional.test_fixture_parametrized_empty_ids": [], "testing.python.metafunc.TestMetafuncFunctional.test_parametrized_empty_ids": [], "testing.python.metafunc.TestMetafuncFunctional.test_parametrized_ids_invalid_type": [], "testing.python.metafunc.TestMetafuncFunctional.test_parametrize_with_identical_ids_get_unique_names": [], "testing.python.metafunc.TestMetafuncFunctional": ["pytest.mark.parametrize"], "testing.python.metafunc.TestMetafuncFunctional.test_parametrize_scope_overrides": [], "testing.python.metafunc.TestMetafuncFunctional.test_parametrize_issue323": [], "testing.python.metafunc.TestMetafuncFunctional.test_usefixtures_seen_in_generate_tests": [], "testing.python.metafunc.TestMetafuncFunctional.test_generate_tests_only_done_in_subdir": ["textwrap.dedent"], "testing.python.metafunc.TestMetafuncFunctional.test_generate_same_function_names_issue403": [], "testing.python.metafunc.TestMetafuncFunctional.test_parametrize_misspelling": [], "testing.python.metafunc.TestMetafuncFunctionalAuto.test_parametrize_auto_scope": [], "testing.python.metafunc.TestMetafuncFunctionalAuto.test_parametrize_auto_scope_indirect": [], "testing.python.metafunc.TestMetafuncFunctionalAuto.test_parametrize_auto_scope_override_fixture": [], "testing.python.metafunc.TestMetafuncFunctionalAuto.test_parametrize_all_indirects": [], "testing.python.metafunc.TestMetafuncFunctionalAuto.test_parametrize_some_arguments_auto_scope": [], "testing.python.metafunc.TestMetafuncFunctionalAuto.test_parametrize_issue634": [], "testing.python.metafunc.TestMarkersWithParametrization.test_simple_mark": ["<builtin>.len"], "testing.python.metafunc.TestMarkersWithParametrization.test_select_based_on_mark": ["<builtin>.len"], "testing.python.metafunc.TestMarkersWithParametrization.test_simple_xfail": [], "testing.python.metafunc.TestMarkersWithParametrization.test_simple_xfail_single_argname": [], "testing.python.metafunc.TestMarkersWithParametrization.test_xfail_with_arg": [], "testing.python.metafunc.TestMarkersWithParametrization.test_xfail_with_kwarg": [], "testing.python.metafunc.TestMarkersWithParametrization.test_xfail_with_arg_and_kwarg": [], "testing.python.metafunc.TestMarkersWithParametrization": ["pytest.mark.parametrize"], "testing.python.metafunc.TestMarkersWithParametrization.test_xfail_passing_is_xpass": [], "testing.python.metafunc.TestMarkersWithParametrization.test_parametrize_called_in_generate_tests": [], "testing.python.metafunc.TestMarkersWithParametrization.test_parametrize_ID_generation_string_int_works": [], "testing.python.metafunc.TestMarkersWithParametrization.test_parametrize_marked_value": [], "testing.python.metafunc.TestMarkersWithParametrization.test_pytest_make_parametrize_id": [], "testing.python.metafunc.TestMarkersWithParametrization.test_pytest_make_parametrize_id_with_argname": [], "testing.python.metafunc.TestMarkersWithParametrization.test_parametrize_positional_args": [], "testing.python.metafunc.TestMarkersWithParametrization.test_parametrize_iterator": [], "testing.python.fixtures": [], "testing.python.fixtures.test_getfuncargnames_functions": ["_pytest.compat.getfuncargnames"], "testing.python.fixtures.test_getfuncargnames_functions.f": ["<builtin>.NotImplementedError"], "testing.python.fixtures.test_getfuncargnames_functions.g": ["<builtin>.NotImplementedError"], "testing.python.fixtures.test_getfuncargnames_functions.h": ["<builtin>.NotImplementedError"], "testing.python.fixtures.test_getfuncargnames_functions.j": ["<builtin>.NotImplementedError"], "testing.python.fixtures.test_getfuncargnames_methods": ["_pytest.compat.getfuncargnames"], "testing.python.fixtures.test_getfuncargnames_methods.A.f": ["<builtin>.NotImplementedError"], "testing.python.fixtures.test_getfuncargnames_staticmethod": ["_pytest.compat.getfuncargnames"], "testing.python.fixtures.test_getfuncargnames_staticmethod.A.static": ["<builtin>.NotImplementedError"], "testing.python.fixtures.test_getfuncargnames_staticmethod_inherited": ["_pytest.compat.getfuncargnames"], "testing.python.fixtures.test_getfuncargnames_staticmethod_inherited.A.static": ["<builtin>.NotImplementedError"], "testing.python.fixtures.test_getfuncargnames_partial": ["_pytest.compat.getfuncargnames"], "testing.python.fixtures.test_getfuncargnames_partial.check": ["<builtin>.NotImplementedError"], "testing.python.fixtures.test_getfuncargnames_partial.T": ["functools.partial"], "testing.python.fixtures.test_getfuncargnames_staticmethod_partial": ["_pytest.compat.getfuncargnames"], "testing.python.fixtures.test_getfuncargnames_staticmethod_partial.check": ["<builtin>.NotImplementedError"], "testing.python.fixtures.test_getfuncargnames_staticmethod_partial.T": ["functools.partial", "<builtin>.staticmethod"], "<builtin>.staticmethod": [], "testing.python.fixtures.TestFillFixtures.test_funcarg_lookupfails": [], "testing.python.fixtures.TestFillFixtures.test_detect_recursive_dependency_error": [], "testing.python.fixtures.TestFillFixtures.test_funcarg_basic": ["<builtin>.len", "_pytest.pytester.get_public_names", "<builtin>.isinstance", "pathlib.Path"], "_pytest.pytester.get_public_names": [], "testing.python.fixtures.TestFillFixtures.test_funcarg_lookup_modulelevel": [], "testing.python.fixtures.TestFillFixtures.test_funcarg_lookup_classlevel": [], "testing.python.fixtures.TestFillFixtures.test_conftest_funcargs_only_available_in_subdir": [], "testing.python.fixtures.TestFillFixtures.test_extend_fixture_module_class": [], "testing.python.fixtures.TestFillFixtures.test_extend_fixture_conftest_module": ["<builtin>.next", "pathlib.Path", "<builtin>.str"], "<builtin>.next": [], "testing.python.fixtures.TestFillFixtures.test_extend_fixture_conftest_conftest": ["<builtin>.next", "pathlib.Path", "<builtin>.str"], "testing.python.fixtures.TestFillFixtures.test_extend_fixture_conftest_plugin": [], "testing.python.fixtures.TestFillFixtures.test_extend_fixture_plugin_plugin": [], "testing.python.fixtures.TestFillFixtures.test_override_parametrized_fixture_conftest_module": [], "testing.python.fixtures.TestFillFixtures.test_override_parametrized_fixture_conftest_conftest": ["textwrap.dedent"], "testing.python.fixtures.TestFillFixtures.test_override_non_parametrized_fixture_conftest_module": [], "testing.python.fixtures.TestFillFixtures.test_override_non_parametrized_fixture_conftest_conftest": ["textwrap.dedent"], "testing.python.fixtures.TestFillFixtures.test_override_autouse_fixture_with_parametrized_fixture_conftest_conftest": ["textwrap.dedent"], "testing.python.fixtures.TestFillFixtures.test_override_fixture_reusing_super_fixture_parametrization": [], "testing.python.fixtures.TestFillFixtures.test_override_parametrize_fixture_and_indirect": [], "testing.python.fixtures.TestFillFixtures.test_override_top_level_fixture_reusing_super_fixture_parametrization": [], "testing.python.fixtures.TestFillFixtures.test_override_parametrized_fixture_with_new_parametrized_fixture": [], "testing.python.fixtures.TestFillFixtures.test_autouse_fixture_plugin": [], "testing.python.fixtures.TestFillFixtures.test_funcarg_lookup_error": [], "testing.python.fixtures.TestFillFixtures.test_fixture_excinfo_leak": [], "testing.python.fixtures.TestRequestBasic.test_request_attributes": ["<builtin>.hasattr", "<builtin>.repr", "<builtin>.isinstance", "_pytest.fixtures.FixtureRequest"], "_pytest.fixtures.FixtureRequest": [], "testing.python.fixtures.TestRequestBasic.test_request_attributes_method": ["<builtin>.isinstance"], "testing.python.fixtures.TestRequestBasic.test_request_contains_funcarg_arg2fixturedefs": ["<builtin>.len", "_pytest.fixtures.FixtureRequest"], "testing.python.fixtures.TestRequestBasic": ["<builtin>.hasattr", "pytest.mark.skipif"], "testing.python.fixtures.TestRequestBasic.test_request_garbage": ["pytest.xfail"], "pytest.xfail": [], "testing.python.fixtures.TestRequestBasic.test_getfixturevalue_recursive": [], "testing.python.fixtures.TestRequestBasic.test_getfixturevalue_teardown": [], "testing.python.fixtures.TestRequestBasic.test_getfixturevalue": ["<builtin>.len", "_pytest.pytester.get_public_names", "<builtin>.isinstance", "pytest.raises"], "testing.python.fixtures.TestRequestBasic.test_request_addfinalizer": ["<builtin>.print", "<builtin>.isinstance"], "testing.python.fixtures.TestRequestBasic.test_request_addfinalizer_failing_setup": [], "testing.python.fixtures.TestRequestBasic.test_request_addfinalizer_failing_setup_module": [], "testing.python.fixtures.TestRequestBasic.test_request_addfinalizer_partial_setup_failure": [], "testing.python.fixtures.TestRequestBasic.test_request_subrequest_addfinalizer_exceptions": [], "testing.python.fixtures.TestRequestBasic.test_request_getmodulepath": ["_pytest.fixtures.FixtureRequest"], "testing.python.fixtures.TestRequestBasic.test_request_fixturenames": [], "testing.python.fixtures.TestRequestBasic.test_request_fixturenames_dynamic_fixture": [], "testing.python.fixtures.TestRequestBasic.test_setupdecorator_and_xunit": [], "testing.python.fixtures.TestRequestBasic.test_fixtures_sub_subdir_normalize_sep": ["textwrap.dedent"], "testing.python.fixtures.TestRequestBasic.test_show_fixtures_color_yes": [], "testing.python.fixtures.TestRequestBasic.test_newstyle_with_request": [], "testing.python.fixtures.TestRequestBasic.test_setupcontext_no_param": [], "testing.python.fixtures.TestRequestSessionScoped": ["pytest.mark.parametrize", "pytest.fixture"], "testing.python.fixtures.TestRequestSessionScoped.session_request": [], "testing.python.fixtures.TestRequestSessionScoped.test_session_scoped_unavailable_attributes": ["pytest.raises", "<builtin>.getattr"], "testing.python.fixtures.TestRequestMarking.test_applymarker": ["_pytest.fixtures.FixtureRequest", "pytest.raises"], "testing.python.fixtures.TestRequestMarking.test_accesskeywords": [], "testing.python.fixtures.TestRequestMarking.test_accessmarker_dynamic": [], "testing.python.fixtures.TestFixtureUsages.test_noargfixturedec": [], "testing.python.fixtures.TestFixtureUsages.test_receives_funcargs": [], "testing.python.fixtures.TestFixtureUsages.test_receives_funcargs_scope_mismatch": [], "testing.python.fixtures.TestFixtureUsages.test_receives_funcargs_scope_mismatch_issue660": [], "testing.python.fixtures.TestFixtureUsages.test_invalid_scope": [], "testing.python.fixtures.TestFixtureUsages": ["pytest.mark.parametrize"], "testing.python.fixtures.TestFixtureUsages.test_parameters_without_eq_semantics": [], "testing.python.fixtures.TestFixtureUsages.test_funcarg_parametrized_and_used_twice": [], "testing.python.fixtures.TestFixtureUsages.test_factory_uses_unknown_funcarg_as_dependency_error": [], "testing.python.fixtures.TestFixtureUsages.test_factory_setup_as_classes_fails": ["<builtin>.len"], "testing.python.fixtures.TestFixtureUsages.test_usefixtures_marker": [], "testing.python.fixtures.TestFixtureUsages.test_usefixtures_ini": [], "testing.python.fixtures.TestFixtureUsages.test_usefixtures_seen_in_showmarkers": [], "testing.python.fixtures.TestFixtureUsages.test_request_instance_issue203": [], "testing.python.fixtures.TestFixtureUsages.test_fixture_parametrized_with_iterator": [], "testing.python.fixtures.TestFixtureUsages.test_setup_functions_as_fixtures": [], "testing.python.fixtures.TestFixtureManagerParseFactories": ["pytest.fixture"], "testing.python.fixtures.TestFixtureManagerParseFactories.pytester": [], "testing.python.fixtures.TestFixtureManagerParseFactories.test_parsefactories_evil_objects_issue214": [], "testing.python.fixtures.TestFixtureManagerParseFactories.test_parsefactories_conftest": [], "testing.python.fixtures.TestFixtureManagerParseFactories.test_parsefactories_conftest_and_module_and_class": [], "testing.python.fixtures.TestFixtureManagerParseFactories.test_parsefactories_relative_node_ids": ["textwrap.dedent"], "testing.python.fixtures.TestFixtureManagerParseFactories.test_package_xunit_fixture": ["textwrap.dedent"], "testing.python.fixtures.TestFixtureManagerParseFactories.test_package_fixture_complex": ["textwrap.dedent"], "testing.python.fixtures.TestFixtureManagerParseFactories.test_collect_custom_items": [], "testing.python.fixtures.TestAutouseDiscovery": ["pytest.mark.xfail", "pytest.fixture"], "testing.python.fixtures.TestAutouseDiscovery.pytester": [], "testing.python.fixtures.TestAutouseDiscovery.test_parsefactories_conftest": [], "testing.python.fixtures.TestAutouseDiscovery.test_two_classes_separated_autouse": [], "testing.python.fixtures.TestAutouseDiscovery.test_setup_at_classlevel": [], "testing.python.fixtures.TestAutouseDiscovery.test_setup_enabled_functionnode": [], "testing.python.fixtures.TestAutouseDiscovery.test_callables_nocode": [], "testing.python.fixtures.TestAutouseDiscovery.test_autouse_in_conftests": [], "testing.python.fixtures.TestAutouseDiscovery.test_autouse_in_module_and_two_classes": [], "testing.python.fixtures.TestAutouseManagement.test_autouse_conftest_mid_directory": ["textwrap.dedent"], "testing.python.fixtures.TestAutouseManagement.test_funcarg_and_setup": [], "testing.python.fixtures.TestAutouseManagement.test_uses_parametrized_resource": [], "testing.python.fixtures.TestAutouseManagement.test_session_parametrized_function": [], "testing.python.fixtures.TestAutouseManagement.test_class_function_parametrization_finalization": [], "testing.python.fixtures.TestAutouseManagement.test_scope_ordering": [], "testing.python.fixtures.TestAutouseManagement.test_parametrization_setup_teardown_ordering": [], "testing.python.fixtures.TestAutouseManagement.test_ordering_autouse_before_explicit": [], "testing.python.fixtures.TestAutouseManagement": ["pytest.mark.parametrize"], "testing.python.fixtures.TestAutouseManagement.test_ordering_dependencies_torndown_first": ["<builtin>.locals"], "testing.python.fixtures.TestFixtureMarker.test_parametrize": [], "testing.python.fixtures.TestFixtureMarker.test_multiple_parametrization_issue_736": [], "testing.python.fixtures.TestFixtureMarker": ["pytest.mark.parametrize"], "testing.python.fixtures.TestFixtureMarker.test_override_parametrized_fixture_issue_979": [], "testing.python.fixtures.TestFixtureMarker.test_scope_session": [], "testing.python.fixtures.TestFixtureMarker.test_scope_session_exc": [], "testing.python.fixtures.TestFixtureMarker.test_scope_session_exc_two_fix": [], "testing.python.fixtures.TestFixtureMarker.test_scope_exc": [], "testing.python.fixtures.TestFixtureMarker.test_scope_module_uses_session": [], "testing.python.fixtures.TestFixtureMarker.test_scope_module_and_finalizer": [], "testing.python.fixtures.TestFixtureMarker.test_scope_mismatch_various": [], "testing.python.fixtures.TestFixtureMarker.test_dynamic_scope": [], "testing.python.fixtures.TestFixtureMarker.test_dynamic_scope_bad_return": [], "testing.python.fixtures.TestFixtureMarker.test_register_only_with_mark": [], "testing.python.fixtures.TestFixtureMarker.test_parametrize_and_scope": ["<builtin>.len"], "testing.python.fixtures.TestFixtureMarker.test_scope_mismatch": [], "testing.python.fixtures.TestFixtureMarker.test_parametrize_separated_order": [], "testing.python.fixtures.TestFixtureMarker.test_module_parametrized_ordering": [], "testing.python.fixtures.TestFixtureMarker.test_dynamic_parametrized_ordering": [], "testing.python.fixtures.TestFixtureMarker.test_class_ordering": [], "testing.python.fixtures.TestFixtureMarker.test_parametrize_separated_order_higher_scope_first": ["pprint.pprint", "<builtin>.zip", "<builtin>.list"], "testing.python.fixtures.TestFixtureMarker.test_parametrized_fixture_teardown_order": [], "testing.python.fixtures.TestFixtureMarker.test_fixture_finalizer": ["textwrap.dedent"], "testing.python.fixtures.TestFixtureMarker.test_class_scope_with_normal_tests": [], "testing.python.fixtures.TestFixtureMarker.test_request_is_clean": [], "testing.python.fixtures.TestFixtureMarker.test_parametrize_separated_lifecycle": ["pprint.pprint"], "testing.python.fixtures.TestFixtureMarker.test_parametrize_function_scoped_finalizers_called": [], "testing.python.fixtures.TestFixtureMarker.test_finalizer_order_on_parametrization": [], "testing.python.fixtures.TestFixtureMarker.test_class_scope_parametrization_ordering": [], "testing.python.fixtures.TestFixtureMarker.test_parametrize_setup_function": [], "testing.python.fixtures.TestFixtureMarker.test_fixture_marked_function_not_collected_as_test": [], "testing.python.fixtures.TestFixtureMarker.test_params_and_ids": [], "testing.python.fixtures.TestFixtureMarker.test_params_and_ids_yieldfixture": [], "testing.python.fixtures.TestFixtureMarker.test_deterministic_fixture_collection": ["<builtin>.len"], "testing.python.fixtures.TestRequestScopeAccess": ["pytest.mark.parametrize"], "testing.python.fixtures.TestRequestScopeAccess.test_setup": [], "testing.python.fixtures.TestRequestScopeAccess.test_funcarg": [], "testing.python.fixtures.TestErrors.test_subfactory_missing_funcarg": [], "testing.python.fixtures.TestErrors.test_issue498_fixture_finalizer_failing": [], "testing.python.fixtures.TestErrors.test_setupfunc_missing_funcarg": [], "testing.python.fixtures.TestShowFixtures.test_funcarg_compat": [], "testing.python.fixtures.TestShowFixtures.test_show_fixtures": [], "testing.python.fixtures.TestShowFixtures.test_show_fixtures_verbose": [], "testing.python.fixtures.TestShowFixtures.test_show_fixtures_testmodule": [], "testing.python.fixtures.TestShowFixtures": ["pytest.mark.parametrize"], "testing.python.fixtures.TestShowFixtures.test_show_fixtures_conftest": [], "testing.python.fixtures.TestShowFixtures.test_show_fixtures_trimmed_doc": ["textwrap.dedent"], "testing.python.fixtures.TestShowFixtures.test_show_fixtures_indented_doc": ["textwrap.dedent"], "testing.python.fixtures.TestShowFixtures.test_show_fixtures_indented_doc_first_line_unindented": ["textwrap.dedent"], "testing.python.fixtures.TestShowFixtures.test_show_fixtures_indented_in_class": ["textwrap.dedent"], "testing.python.fixtures.TestShowFixtures.test_show_fixtures_different_files": [], "testing.python.fixtures.TestShowFixtures.test_show_fixtures_with_same_name": [], "testing.python.fixtures.TestShowFixtures.test_fixture_disallow_twice": ["pytest.raises", "pytest.fixture"], "testing.python.fixtures.TestShowFixtures.test_fixture_disallow_twice.foo": ["<builtin>.NotImplementedError"], "testing.python.fixtures.TestContextManagerFixtureFuncs.test_simple": [], "testing.python.fixtures.TestContextManagerFixtureFuncs.test_scoped": [], "testing.python.fixtures.TestContextManagerFixtureFuncs.test_setup_exception": [], "testing.python.fixtures.TestContextManagerFixtureFuncs.test_teardown_exception": [], "testing.python.fixtures.TestContextManagerFixtureFuncs.test_yields_more_than_one": [], "testing.python.fixtures.TestContextManagerFixtureFuncs.test_custom_name": [], "testing.python.fixtures.TestParameterizedSubRequest.test_call_from_fixture": [], "testing.python.fixtures.TestParameterizedSubRequest.test_call_from_test": [], "testing.python.fixtures.TestParameterizedSubRequest.test_external_fixture": [], "testing.python.fixtures.TestParameterizedSubRequest.test_non_relative_path": ["textwrap.dedent", "os.chdir"], "testing.python.fixtures.test_pytest_fixture_setup_and_post_finalizer_hook": [], "testing.python.fixtures.TestScopeOrdering": ["pytest.mark.parametrize"], "testing.python.fixtures.TestScopeOrdering.test_func_closure_module_auto": ["_pytest.fixtures.FixtureRequest"], "testing.python.fixtures.TestScopeOrdering.test_func_closure_with_native_fixtures": ["_pytest.fixtures.FixtureRequest"], "testing.python.fixtures.TestScopeOrdering.test_func_closure_module": ["_pytest.fixtures.FixtureRequest"], "testing.python.fixtures.TestScopeOrdering.test_func_closure_scopes_reordered": ["_pytest.fixtures.FixtureRequest"], "testing.python.fixtures.TestScopeOrdering.test_func_closure_same_scope_closer_root_first": ["_pytest.fixtures.FixtureRequest"], "testing.python.fixtures.TestScopeOrdering.test_func_closure_all_scopes_complex": ["_pytest.fixtures.FixtureRequest"], "testing.python.fixtures.TestScopeOrdering.test_multiple_packages": ["textwrap.dedent"], "testing.python.fixtures.TestScopeOrdering.test_class_fixture_self_instance": [], "testing.python.fixtures.test_call_fixture_function_error": ["testing.python.fixtures.test_call_fixture_function_error.fix", "pytest.raises", "pytest.fixture"], "testing.python.fixtures.test_call_fixture_function_error.fix": ["<builtin>.NotImplementedError"], "testing.python.fixtures.test_fixture_param_shadowing": [], "testing.python.fixtures.test_fixture_named_request": [], "testing.python.fixtures.test_indirect_fixture_does_not_break_scope": [], "testing.python.fixtures.test_fixture_parametrization_nparray": ["pytest.importorskip"], "testing.python.fixtures.test_fixture_arg_ordering": ["<builtin>.str"], "testing.python.fixtures.test_yield_fixture_with_no_value": [], "testing.python.collect": ["pytest.mark.filterwarnings"], "testing.python.collect.TestModule.test_failing_import": ["pytest.raises"], "testing.python.collect.TestModule.test_import_duplicate": ["sys.modules.pop"], "sys.modules.pop": [], "testing.python.collect.TestModule.test_import_prepend_append": ["textwrap.dedent", "<builtin>.str"], "testing.python.collect.TestModule.test_syntax_error_in_module": ["pytest.raises"], "testing.python.collect.TestModule.test_module_considers_pluginmanager_at_import": ["pytest.raises"], "testing.python.collect.TestModule.test_module_considers_pluginmanager_at_import.<lambda1>": [], "testing.python.collect.TestModule.test_invalid_test_module_name": [], "testing.python.collect.TestModule": ["pytest.mark.parametrize"], "testing.python.collect.TestModule.test_show_traceback_import_error": [], "testing.python.collect.TestModule.test_show_traceback_import_error_unicode": [], "testing.python.collect.TestClass.test_class_with_init_warning": [], "testing.python.collect.TestClass.test_class_with_new_warning": [], "testing.python.collect.TestClass.test_class_subclassobject": [], "testing.python.collect.TestClass.test_static_method": [], "testing.python.collect.TestClass.test_setup_teardown_class_as_classmethod": [], "testing.python.collect.TestClass.test_issue1035_obj_has_getattr": ["<builtin>.len"], "testing.python.collect.TestClass.test_issue1579_namedtuple": [], "testing.python.collect.TestClass.test_issue2234_property": [], "testing.python.collect.TestFunction.test_getmodulecollector": ["<builtin>.hasattr", "<builtin>.isinstance"], "testing.python.collect.TestFunction": ["pytest.mark.filterwarnings"], "testing.python.collect.TestFunction.test_function_as_object_instance_ignored": [], "testing.python.collect.TestFunction.make_function": ["pytest.Function.from_parent", "_pytest.fixtures.FixtureManager", "_pytest.main.Session.from_config"], "_pytest.fixtures.FixtureManager": [], "pytest.Function.from_parent": [], "testing.python.collect.TestFunction.test_function_equality": ["testing.python.collect.TestFunction.make_function"], "testing.python.collect.TestFunction.test_function_equality.func1": [], "testing.python.collect.TestFunction.test_function_equality.func2": [], "testing.python.collect.TestFunction.test_repr_produces_actual_test_id": ["<builtin>.repr", "testing.python.collect.TestFunction.make_function"], "testing.python.collect.TestFunction.test_issue197_parametrize_emptyset": [], "testing.python.collect.TestFunction.test_single_tuple_unwraps_values": [], "testing.python.collect.TestFunction.test_issue213_parametrize_value_no_equal": [], "testing.python.collect.TestFunction.test_parametrize_with_non_hashable_values": [], "testing.python.collect.TestFunction.test_parametrize_with_non_hashable_values_indirect": [], "testing.python.collect.TestFunction.test_parametrize_overrides_fixture": [], "testing.python.collect.TestFunction.test_parametrize_overrides_parametrized_fixture": [], "testing.python.collect.TestFunction.test_parametrize_overrides_indirect_dependency_fixture": [], "testing.python.collect.TestFunction.test_parametrize_with_mark": [], "testing.python.collect.TestFunction.test_parametrize_with_empty_string_arguments": [], "testing.python.collect.TestFunction.test_function_equality_with_callspec": [], "testing.python.collect.TestFunction.test_pyfunc_call": [], "testing.python.collect.TestFunction.test_pyfunc_call.MyPlugin1.pytest_pyfunc_call": [], "testing.python.collect.TestFunction.test_pyfunc_call.MyPlugin2.pytest_pyfunc_call": [], "testing.python.collect.TestFunction.test_multiple_parametrize": [], "testing.python.collect.TestFunction.test_issue751_multiple_parametrize_with_ids": [], "testing.python.collect.TestFunction.test_parametrize_skipif": [], "testing.python.collect.TestFunction.test_parametrize_skip": [], "testing.python.collect.TestFunction.test_parametrize_skipif_no_skip": [], "testing.python.collect.TestFunction.test_parametrize_xfail": [], "testing.python.collect.TestFunction.test_parametrize_passed": [], "testing.python.collect.TestFunction.test_parametrize_xfail_passed": [], "testing.python.collect.TestFunction.test_function_originalname": ["<builtin>.isinstance"], "testing.python.collect.TestFunction.test_function_with_square_brackets": ["<builtin>.str"], "testing.python.collect.TestSorting.test_check_equality": ["<builtin>.hash", "<builtin>.isinstance"], "testing.python.collect.TestSorting.test_allow_sane_sorting_for_decorators": ["<builtin>.len"], "testing.python.collect.TestSorting.test_ordered_by_definition_order": [], "testing.python.collect.TestConftestCustomization.test_pytest_pycollect_module": [], "testing.python.collect.TestConftestCustomization.test_customized_pymakemodule_issue205_subdir": ["textwrap.dedent"], "testing.python.collect.TestConftestCustomization.test_customized_pymakeitem": ["textwrap.dedent"], "testing.python.collect.TestConftestCustomization.test_pytest_pycollect_makeitem": [], "testing.python.collect.TestConftestCustomization.test_issue2369_collect_module_fileext": [], "testing.python.collect.TestConftestCustomization.test_early_ignored_attributes": ["<builtin>.len"], "testing.python.collect.test_setup_only_available_in_subdir": ["textwrap.dedent"], "testing.python.collect.test_modulecol_roundtrip": [], "testing.python.collect.TestTracebackCutting.test_skip_simple": ["pytest.skip", "pytest.raises"], "testing.python.collect.TestTracebackCutting.test_traceback_argsetup": [], "testing.python.collect.TestTracebackCutting.test_traceback_error_during_import": [], "testing.python.collect.TestTracebackCutting.test_traceback_filter_error_during_fixture_collection": [], "testing.python.collect.TestTracebackCutting.test_filter_traceback_generated_code": ["<builtin>.exec", "sys.exc_info", "<builtin>.isinstance", "_pytest._code.filter_traceback"], "_pytest._code.filter_traceback": [], "testing.python.collect.TestTracebackCutting.test_filter_traceback_path_no_longer_valid": ["sys.exc_info", "filter_traceback_entry_as_str.foo", "<builtin>.isinstance", "_pytest._code.filter_traceback"], "filter_traceback_entry_as_str.foo": [], "testing.python.collect.TestReportInfo.test_itemreport_reportinfo": [], "testing.python.collect.TestReportInfo.test_func_reportinfo": ["<builtin>.str", "os.fspath"], "testing.python.collect.TestReportInfo.test_class_reportinfo": ["<builtin>.str", "<builtin>.isinstance", "os.fspath"], "testing.python.collect.TestReportInfo": ["pytest.mark.filterwarnings"], "testing.python.collect.TestReportInfo.test_reportinfo_with_nasty_getattr": ["<builtin>.isinstance", "<builtin>.list"], "testing.python.collect.test_customized_python_discovery": [], "testing.python.collect.test_customized_python_discovery_functions": [], "testing.python.collect.test_unorderable_types": [], "testing.python.collect.test_dont_collect_non_function_callable": [], "testing.python.collect.test_class_injection_does_not_break_collection": [], "testing.python.collect.test_syntax_error_with_non_ascii_chars": [], "testing.python.collect.test_collect_error_with_fulltrace": [], "testing.python.collect.test_skip_duplicates_by_default": ["textwrap.dedent", "<builtin>.str"], "testing.python.collect.test_keep_duplicates": ["textwrap.dedent", "<builtin>.str"], "testing.python.collect.test_package_collection_infinite_recursion": [], "testing.python.collect.test_package_collection_init_given_as_argument": [], "testing.python.collect.test_package_with_modules": ["os.chdir"], "testing.python.collect.test_package_ordering": [], "testing.python.show_fixtures_per_test": [], "testing.python.show_fixtures_per_test.test_no_items_should_not_show_output": [], "testing.python.show_fixtures_per_test.test_fixtures_in_module": [], "testing.python.show_fixtures_per_test.test_fixtures_in_conftest": [], "testing.python.show_fixtures_per_test.test_should_show_fixtures_used_by_test": [], "testing.python.show_fixtures_per_test.test_verbose_include_private_fixtures_and_loc": [], "testing.python.show_fixtures_per_test.test_doctest_items": [], "testing.python.show_fixtures_per_test.test_multiline_docstring_in_module": [], "testing.python.show_fixtures_per_test.test_verbose_include_multiline_docstring": [], "testing.python.integration": [], "testing.python.integration.test_wrapped_getfslineno": ["testing.test_runner.test_makereport_getsource_dynamic_code.findsource.obj", "testing.python.integration.test_wrapped_getfslineno.wrap", "testing.python.integration.test_wrapped_getfslineno.wrapped_func", "_pytest._code.getfslineno", "testing.code.test_source.test_getfslineno.f"], "testing.python.integration.test_wrapped_getfslineno.func": [], "testing.python.integration.test_wrapped_getfslineno.wrap": [], "testing.python.integration.test_wrapped_getfslineno.wrapped_func": [], "testing.test_runner.test_makereport_getsource_dynamic_code.findsource.obj": [], "testing.python.integration.TestMockDecoration.test_wrapped_getfuncargnames": ["_pytest.compat.getfuncargnames", "testing.python.integration.TestMockDecoration.test_wrapped_getfuncargnames.wrap"], "testing.python.integration.TestMockDecoration.test_wrapped_getfuncargnames.wrap": [], "testing.python.integration.TestMockDecoration.test_wrapped_getfuncargnames.wrap.func": [], "testing.python.integration.TestMockDecoration.test_wrapped_getfuncargnames.f": [], "testing.python.integration.TestMockDecoration.test_getfuncargnames_patching": ["unittest.mock.patch.object", "_pytest.compat.getfuncargnames"], "testing.python.integration.TestMockDecoration.test_getfuncargnames_patching.T.original": [], "testing.python.integration.TestMockDecoration.test_getfuncargnames_patching.f": [], "testing.python.integration.TestMockDecoration.test_unittest_mock": [], "testing.python.integration.TestMockDecoration.test_unittest_mock_and_fixture": [], "testing.python.integration.TestMockDecoration.test_unittest_mock_and_pypi_mock": ["pytest.importorskip"], "testing.python.integration.TestMockDecoration.test_mock_sentinel_check_against_numpy_like": [], "testing.python.integration.TestMockDecoration.test_mock": ["pytest.importorskip"], "testing.python.integration.TestMockDecoration.test_mock_sorting": ["pytest.importorskip"], "testing.python.integration.TestMockDecoration.test_mock_double_patch_issue473": ["pytest.importorskip"], "testing.python.integration.TestReRunTests.test_rerun": [], "testing.python.integration.test_pytestconfig_is_session_scoped": ["_pytest.fixtures.getfixturemarker"], "_pytest.fixtures.getfixturemarker": [], "testing.python.integration.TestNoselikeTestAttribute.test_module_with_global_test": [], "testing.python.integration.TestNoselikeTestAttribute.test_class_and_method": [], "testing.python.integration.TestNoselikeTestAttribute.test_unittest_class": ["<builtin>.len"], "testing.python.integration.TestNoselikeTestAttribute.test_class_with_nasty_getattr": [], "testing.python.integration.TestParameterize.test_idfn_marker": [], "testing.python.integration.TestParameterize.test_idfn_fixture": [], "testing.python.integration.test_function_instance": ["<builtin>.len", "<builtin>.isinstance"], "testing.deprecated_test": ["<builtin>.sorted", "pytest.mark.filterwarnings", "pytest.mark.parametrize"], "testing.deprecated_test.test_external_plugins_integrated": ["pytest.warns"], "testing.deprecated_test.test_hookspec_via_function_attributes_are_deprecated": ["_pytest.config.PytestPluginManager", "pytest.warns"], "testing.deprecated_test.test_hookspec_via_function_attributes_are_deprecated.DeprecatedHookMarkerSpec.pytest_bad_hook": [], "testing.deprecated_test.test_hookimpl_via_function_attributes_are_deprecated": ["_pytest.config.PytestPluginManager", "pytest.warns"], "testing.deprecated_test.test_hookimpl_via_function_attributes_are_deprecated.DeprecatedMarkImplPlugin.pytest_runtest_call": [], "testing.deprecated_test.test_fscollector_gethookproxy_isinitpath": ["<builtin>.len", "warnings.catch_warnings", "<builtin>.isinstance", "pytest.warns"], "testing.deprecated_test.test_strict_option_is_deprecated": [], "testing.deprecated_test.test_yield_fixture_is_deprecated": ["pytest.yield_fixture", "pytest.warns"], "pytest.yield_fixture": [], "testing.deprecated_test.test_yield_fixture_is_deprecated.fix": [], "testing.deprecated_test.test_private_is_deprecated": ["testing.deprecated_test.test_private_is_deprecated.PrivateInit.__init__", "pytest.warns"], "testing.deprecated_test.test_private_is_deprecated.PrivateInit.__init__": ["_pytest.deprecated.check_ispytest"], "_pytest.deprecated.check_ispytest": [], "testing.deprecated_test.test_hookproxy_warnings_for_pathlib": ["sys._getframe", "pathlib.Path", "pytest.raises", "pytest.warns", "_pytest.compat.legacy_path"], "testing.deprecated_test.test_warns_none_is_deprecated": ["re.escape", "pytest.warns"], "testing.deprecated_test.TestSkipMsgArgumentDeprecated.test_skip_with_msg_is_deprecated": [], "testing.deprecated_test.TestSkipMsgArgumentDeprecated.test_fail_with_msg_is_deprecated": [], "testing.deprecated_test.TestSkipMsgArgumentDeprecated.test_exit_with_msg_is_deprecated": [], "testing.deprecated_test.test_deprecation_of_cmdline_preparse": [], "testing.deprecated_test.test_node_ctor_fspath_argument_is_deprecated": ["re.escape", "pytest.File.from_parent", "_pytest.compat.legacy_path", "pytest.warns"], "pytest.File.from_parent": [], "testing.deprecated_test.test_importing_instance_is_deprecated": ["re.escape", "pytest.warns"], "testing.deprecated_test.test_nose_deprecated_with_setup": ["pytest.importorskip"], "testing.deprecated_test.test_nose_deprecated_setup_teardown": ["pytest.importorskip"], "testing.test_collection": ["pytest.mark.parametrize", "<builtin>.dict"], "testing.test_collection.ensure_file": [], "testing.test_collection.TestCollector.test_collect_versus_item": ["<builtin>.issubclass"], "testing.test_collection.TestCollector.test_check_equality": ["<builtin>.hash", "<builtin>.isinstance"], "testing.test_collection.TestCollector.test_getparent_and_accessors": ["<builtin>.isinstance"], "testing.test_collection.TestCollector.test_getcustomfile_roundtrip": ["<builtin>.len", "<builtin>.isinstance"], "testing.test_collection.TestCollector.test_can_skip_class_with_test_attr": [], "testing.test_collection.TestCollectFS.test_ignored_certain_directories": ["testing.test_collection.ensure_file"], "testing.test_collection.TestCollectFS": ["pytest.mark.parametrize"], "testing.test_collection.TestCollectFS.test_ignored_virtualenvs": ["testing.test_collection.ensure_file", "sys.platform.startswith"], "testing.test_collection.TestCollectFS.test_ignored_virtualenvs_norecursedirs_precedence": ["testing.test_collection.ensure_file", "sys.platform.startswith"], "testing.test_collection.TestCollectFS.test__in_venv": ["_pytest.main._in_venv", "sys.platform.startswith"], "_pytest.main._in_venv": [], "testing.test_collection.TestCollectFS.test_custom_norecursedirs": ["testing.test_collection.ensure_file"], "testing.test_collection.TestCollectFS.test_testpaths_ini": ["testing.test_collection.ensure_file"], "testing.test_collection.TestCollectPluginHookRelay.test_pytest_collect_file": ["pytest.main", "<builtin>.len"], "testing.test_collection.TestCollectPluginHookRelay.test_pytest_collect_file.Plugin.pytest_collect_file": [], "testing.test_collection.TestPrunetraceback.test_custom_repr_failure": [], "testing.test_collection.TestPrunetraceback": ["pytest.mark.xfail"], "testing.test_collection.TestPrunetraceback.test_collect_report_postprocessing": [], "testing.test_collection.TestCustomConftests.test_ignore_collect_path": ["testing.test_collection.ensure_file"], "testing.test_collection.TestCustomConftests.test_ignore_collect_not_called_on_argument": [], "testing.test_collection.TestCustomConftests.test_collectignore_exclude_on_option": [], "testing.test_collection.TestCustomConftests.test_collectignoreglob_exclude_on_option": [], "testing.test_collection.TestCustomConftests.test_pytest_fs_collect_hooks_are_seen": [], "testing.test_collection.TestCustomConftests.test_pytest_collect_file_from_sister_dir": ["shutil.copy"], "testing.test_collection.TestSession.test_collect_topdir": ["<builtin>.len", "_pytest.main.Session.from_config"], "testing.test_collection.TestSession.get_reported_items": ["<builtin>.isinstance"], "testing.test_collection.TestSession.test_collect_protocol_single_function": ["pprint.pprint", "testing.test_collection.TestSession.get_reported_items"], "testing.test_collection.TestSession.test_collect_protocol_method": ["<builtin>.len", "testing.test_collection.TestSession.get_reported_items"], "testing.test_collection.TestSession.test_collect_custom_nodes_multi_id": ["<builtin>.len", "pprint.pprint", "testing.test_collection.TestSession.get_reported_items"], "testing.test_collection.TestSession.test_collect_subdir_event_ordering": ["<builtin>.len", "pprint.pprint"], "testing.test_collection.TestSession.test_collect_two_commandline_args": ["<builtin>.len", "pprint.pprint", "shutil.copy"], "testing.test_collection.TestSession.test_serialization_byid": ["<builtin>.len"], "testing.test_collection.TestSession.test_find_byid_without_instance_parents": ["<builtin>.len", "testing.test_collection.TestSession.get_reported_items"], "testing.test_collection.Test_getinitialnodes.test_global_file": ["testing.test_collection.ensure_file", "<builtin>.isinstance"], "testing.test_collection.Test_getinitialnodes.test_pkgfile": ["testing.test_collection.ensure_file", "<builtin>.isinstance"], "testing.test_collection.Test_genitems.test_check_collect_hashes": ["<builtin>.len", "<builtin>.enumerate", "<builtin>.hash", "shutil.copy"], "testing.test_collection.Test_genitems.test_example_items1": ["<builtin>.len", "<builtin>.print"], "testing.test_collection.Test_genitems.test_classmethod_is_discovered": [], "testing.test_collection.Test_genitems.test_class_and_functions_discovery_using_glob": [], "testing.test_collection.test_matchnodes_two_collections_same_file": [], "testing.test_collection.TestNodeKeywords.test_no_under": ["<builtin>.repr", "<builtin>.list"], "testing.test_collection.TestNodeKeywords.test_issue345": [], "testing.test_collection.TestNodeKeywords.test_keyword_matching_is_case_insensitive_by_default": [], "testing.test_collection.TestNodeKeywords.test_duplicates_handled_correctly": ["<builtin>.len", "<builtin>.set"], "testing.test_collection.TestNodeKeywords.test_unpacked_marks_added_to_keywords": ["<builtin>.isinstance"], "testing.test_collection.test_exit_on_collection_error": [], "testing.test_collection.test_exit_on_collection_with_maxfail_smaller_than_n_errors": [], "testing.test_collection.test_exit_on_collection_with_maxfail_bigger_than_n_errors": [], "testing.test_collection.test_continue_on_collection_errors": [], "testing.test_collection.test_continue_on_collection_errors_maxfail": [], "testing.test_collection.test_fixture_scope_sibling_conftests": ["textwrap.dedent"], "testing.test_collection.test_collect_init_tests": [], "testing.test_collection.test_collect_invalid_signature_message": [], "testing.test_collection.test_collect_handles_raising_on_dunder_class": [], "testing.test_collection.test_collect_with_chdir_during_import": ["textwrap.dedent", "<builtin>.str"], "testing.test_collection.test_collect_pyargs_with_testpaths": ["textwrap.dedent", "<builtin>.str"], "testing.test_collection.test_collect_symlink_file_arg": ["_pytest.pathlib.symlink_or_skip"], "testing.test_collection.test_collect_symlink_out_of_tree": ["_pytest.pathlib.symlink_or_skip", "textwrap.dedent", "os.chdir"], "testing.test_collection.test_collect_symlink_dir": ["_pytest.pathlib.symlink_or_skip"], "testing.test_collection.test_collectignore_via_conftest": [], "testing.test_collection.test_collect_pkg_init_and_file_in_args": ["<builtin>.str"], "testing.test_collection.test_collect_pkg_init_only": ["<builtin>.str"], "testing.test_collection.test_collect_sub_with_symlinks": ["_pytest.pathlib.symlink_or_skip", "<builtin>.str"], "testing.test_collection.test_collector_respects_tbstyle": [], "testing.test_collection.test_does_not_eagerly_collect_packages": [], "testing.test_collection.test_does_not_put_src_on_path": ["testing.test_collection.ensure_file"], "testing.test_collection.test_fscollector_from_parent": ["pytest.File.from_parent"], "testing.test_collection.test_fscollector_from_parent.MyCollector.__init__": ["<builtin>.super"], "testing.test_collection.test_class_from_parent": ["testing.test_collection.test_class_from_parent.MyCollector.from_parent"], "testing.test_collection.test_class_from_parent.MyCollector.__init__": ["<builtin>.super"], "testing.test_collection.test_class_from_parent.MyCollector.from_parent": ["<builtin>.super"], "testing.test_collection.TestImportModeImportlib.test_collect_duplicate_names": [], "testing.test_collection.TestImportModeImportlib.test_conftest": [], "testing.test_collection.TestImportModeImportlib.setup_conftest_and_foo": [], "testing.test_collection.TestImportModeImportlib.test_modules_importable_as_side_effect": ["testing.test_collection.TestImportModeImportlib.setup_conftest_and_foo"], "testing.test_collection.TestImportModeImportlib.test_modules_not_importable_as_side_effect": ["testing.test_collection.TestImportModeImportlib.setup_conftest_and_foo"], "testing.test_collection.TestImportModeImportlib.test_using_python_path": [], "testing.test_collection.test_does_not_crash_on_error_from_decorated_function": [], "testing.test_collection.test_does_not_crash_on_recursive_symlink": ["_pytest.pathlib.symlink_or_skip"], "testing.test_recwarn": ["pytest.mark.filterwarnings"], "testing.test_recwarn.test_recwarn_stacklevel": ["warnings.warn"], "warnings.warn": [], "testing.test_recwarn.test_recwarn_functional": [], "testing.test_recwarn.test_recwarn_captures_deprecation_warning": ["<builtin>.len", "warnings.warn", "<builtin>.DeprecationWarning"], "<builtin>.DeprecationWarning": [], "testing.test_recwarn.TestWarningsRecorderChecker.test_recording": ["<builtin>.len", "_pytest.recwarn.WarningsRecorder", "<builtin>.DeprecationWarning", "warnings.warn_explicit", "<builtin>.str", "pytest.raises", "warnings.warn"], "_pytest.recwarn.WarningsRecorder": [], "warnings.warn_explicit": [], "testing.test_recwarn.TestWarningsRecorderChecker.test_warn_stacklevel": ["warnings.warn", "_pytest.recwarn.WarningsRecorder"], "testing.test_recwarn.TestWarningsRecorderChecker.test_typechecking": ["_pytest.recwarn.WarningsChecker", "pytest.raises"], "_pytest.recwarn.WarningsChecker": [], "testing.test_recwarn.TestWarningsRecorderChecker.test_invalid_enter_exit": ["_pytest.recwarn.WarningsRecorder", "pytest.raises"], "testing.test_recwarn.TestDeprecatedCall.dep": ["warnings.warn"], "testing.test_recwarn.TestDeprecatedCall.dep_explicit": ["warnings.warn_explicit"], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_raises": ["pytest.deprecated_call", "pytest.raises"], "pytest.deprecated_call": [], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call": ["pytest.deprecated_call"], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_ret": ["pytest.deprecated_call"], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_preserves": ["testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_raises", "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call", "warnings.onceregistry.copy"], "warnings.onceregistry.copy": [], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_explicit_call_raises": ["pytest.deprecated_call", "pytest.raises"], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_explicit_call": ["pytest.deprecated_call"], "testing.test_recwarn.TestDeprecatedCall": ["pytest.mark.filterwarnings", "pytest.mark.parametrize"], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_no_warning": ["testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_no_warning.f", "pytest.deprecated_call", "pytest.raises"], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_no_warning.f": [], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_modes": ["pytest.deprecated_call", "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_modes.f"], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_modes.f": ["warnings.warn"], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_exception_is_raised": ["testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_exception_is_raised.f", "pytest.deprecated_call", "pytest.raises"], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_exception_is_raised.f": ["<builtin>.ValueError"], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_specificity": ["testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_specificity.f", "pytest.deprecated_call", "pytest.raises"], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_specificity.f": ["warnings.warn"], "testing.test_recwarn.TestDeprecatedCall.test_deprecated_call_supports_match": ["warnings.warn", "pytest.raises", "pytest.deprecated_call"], "testing.test_recwarn.TestWarns.test_check_callable": ["pytest.raises", "pytest.warns"], "testing.test_recwarn.TestWarns.test_several_messages": ["pytest.raises", "pytest.warns"], "testing.test_recwarn.TestWarns.test_several_messages.<lambda1>": ["warnings.warn"], "testing.test_recwarn.TestWarns.test_several_messages.<lambda2>": ["warnings.warn"], "testing.test_recwarn.TestWarns.test_several_messages.<lambda3>": ["warnings.warn"], "testing.test_recwarn.TestWarns.test_function": ["pytest.warns"], "testing.test_recwarn.TestWarns.test_function.<lambda1>": ["warnings.warn"], "testing.test_recwarn.TestWarns.test_warning_tuple": ["pytest.raises", "pytest.warns"], "testing.test_recwarn.TestWarns.test_warning_tuple.<lambda1>": ["warnings.warn"], "testing.test_recwarn.TestWarns.test_warning_tuple.<lambda2>": ["warnings.warn"], "testing.test_recwarn.TestWarns.test_warning_tuple.<lambda3>": ["pytest.warns"], "testing.test_recwarn.TestWarns.test_warning_tuple.<lambda3>.<lambda1>": ["warnings.warn"], "testing.test_recwarn.TestWarns.test_as_contextmanager": ["warnings.warn", "<builtin>.str", "pytest.raises", "pytest.warns"], "testing.test_recwarn.TestWarns.test_record": ["<builtin>.len", "warnings.warn", "<builtin>.str", "pytest.warns"], "testing.test_recwarn.TestWarns.test_record_only": ["<builtin>.len", "warnings.warn", "<builtin>.str", "pytest.warns"], "testing.test_recwarn.TestWarns.test_record_only_none_deprecated_warn": ["<builtin>.len", "warnings.simplefilter", "warnings.catch_warnings", "<builtin>.str", "warnings.warn", "pytest.warns"], "testing.test_recwarn.TestWarns.test_record_by_subclass": ["<builtin>.len", "warnings.warn", "<builtin>.str", "pytest.warns"], "testing.test_recwarn.TestWarns.test_double_test": [], "testing.test_recwarn.TestWarns.test_match_regex": ["warnings.warn", "pytest.raises", "pytest.warns"], "testing.test_recwarn.TestWarns.test_one_from_multiple_warns": ["warnings.warn", "pytest.warns"], "testing.test_recwarn.TestWarns.test_none_of_multiple_warns": ["warnings.warn", "pytest.raises", "pytest.warns"], "testing.test_recwarn.TestWarns": ["pytest.mark.filterwarnings"], "testing.test_recwarn.TestWarns.test_can_capture_previously_warned": ["testing.test_recwarn.TestWarns.test_can_capture_previously_warned.f", "pytest.warns"], "testing.test_recwarn.TestWarns.test_can_capture_previously_warned.f": ["<builtin>.UserWarning", "warnings.warn"], "<builtin>.UserWarning": [], "testing.test_recwarn.TestWarns.test_warns_context_manager_with_kwargs": ["<builtin>.str", "pytest.raises", "pytest.warns"], "testing.test_nose": [], "testing.test_nose.setup_module": ["pytest.importorskip"], "testing.test_nose.test_nose_setup": [], "testing.test_nose.test_setup_func_with_setup_decorator": ["_pytest.nose.call_optional"], "testing.test_nose.test_setup_func_with_setup_decorator.A": ["pytest.fixture"], "testing.test_nose.test_setup_func_with_setup_decorator.A.f": [], "_pytest.nose.call_optional": [], "testing.test_nose.test_setup_func_not_callable": ["_pytest.nose.call_optional"], "testing.test_nose.test_nose_setup_func": [], "testing.test_nose.test_nose_setup_func_failure": [], "testing.test_nose.test_nose_setup_func_failure_2": [], "testing.test_nose.test_nose_setup_partial": ["pytest.importorskip"], "testing.test_nose.test_module_level_setup": [], "testing.test_nose.test_nose_style_setup_teardown": [], "testing.test_nose.test_fixtures_nose_setup_issue8394": [], "testing.test_nose.test_nose_setup_ordering": [], "testing.test_nose.test_apiwrapper_problem_issue260": [], "testing.test_nose.test_setup_teardown_linking_issue265": [], "testing.test_nose.test_SkipTest_during_collection": [], "testing.test_nose.test_SkipTest_in_test": [], "testing.test_nose.test_istest_function_decorator": [], "testing.test_nose.test_nottest_function_decorator": [], "testing.test_nose.test_istest_class_decorator": [], "testing.test_nose.test_nottest_class_decorator": [], "testing.test_nose.test_skip_test_with_unicode": [], "testing.test_nose.test_raises": [], "testing.test_nose.test_nose_setup_skipped_if_non_callable": [], "testing.test_warning_types": ["<builtin>.vars", "inspect.isclass", "pytest.mark.filterwarnings", "<builtin>.issubclass", "pytest.mark.parametrize"], "testing.test_warning_types.test_warning_types": [], "testing.test_warning_types.test_pytest_warnings_repr_integration_test": [], "testing.test_warning_types.test_warn_explicit_for_annotates_errors_with_location": ["_pytest.warning_types.warn_explicit_for", "_pytest.warning_types.PytestWarning", "pytest.raises"], "_pytest.warning_types.PytestWarning": [], "_pytest.warning_types.warn_explicit_for": [], "testing.test_session": ["pytest.mark.parametrize"], "testing.test_session.SessionTests.test_basic_testitem_events": ["<builtin>.len", "testing.test_session.SessionTests.test_basic_testitem_events.end"], "testing.test_session.SessionTests.test_basic_testitem_events.end": [], "testing.test_session.SessionTests.test_nested_import_error": ["<builtin>.len", "<builtin>.str"], "testing.test_session.SessionTests.test_raises_output": ["<builtin>.len"], "testing.test_session.SessionTests.test_syntax_error_module": ["<builtin>.len", "<builtin>.str"], "testing.test_session.SessionTests.test_exit_first_problem": [], "testing.test_session.SessionTests.test_maxfail": [], "testing.test_session.SessionTests.test_broken_repr": ["<builtin>.len"], "testing.test_session.SessionTests.test_broken_repr_with_showlocals_verbose": ["<builtin>.len"], "testing.test_session.SessionTests.test_skip_file_by_conftest": ["<builtin>.len", "pytest.fail"], "testing.test_session.TestNewSession.test_order_of_execution": [], "testing.test_session.TestNewSession.test_collect_only_with_various_situations": ["<builtin>.len"], "testing.test_session.TestNewSession.test_minus_x_import_error": ["<builtin>.len"], "testing.test_session.TestNewSession.test_minus_x_overridden_by_maxfail": ["<builtin>.len"], "testing.test_session.test_plugin_specify": ["pytest.raises"], "testing.test_session.test_plugin_already_exists": [], "testing.test_session.test_exclude": [], "testing.test_session.test_exclude_glob": [], "testing.test_session.test_deselect": [], "testing.test_session.test_sessionfinish_with_start": [], "testing.test_session.test_collection_args_do_not_duplicate_modules": [], "testing.test_session.test_rootdir_option_arg": ["<builtin>.str"], "testing.test_session.test_rootdir_wrong_option_arg": [], "testing.test_junitxml": ["pytest.mark.parametrize", "pytest.mark.filterwarnings", "testing.test_junitxml.parametrize_families", "pytest.fixture"], "testing.test_junitxml.schema": ["xmlschema.XMLSchema", "pathlib.Path"], "xmlschema.XMLSchema": [], "testing.test_junitxml.RunAndParse.__init__": [], "testing.test_junitxml.RunAndParse.__call__": ["testing.test_junitxml.DomNode.__init__", "xml.dom.minidom.parse", "<builtin>.str"], "xml.dom.minidom.parse": [], "testing.test_junitxml.DomNode.__init__": [], "testing.test_junitxml.run_and_parse": ["testing.test_junitxml.RunAndParse.__init__"], "testing.test_junitxml.assert_attr": ["testing.test_junitxml.assert_attr.nodeval", "<builtin>.str"], "testing.test_junitxml.assert_attr.nodeval": [], "testing.test_junitxml.DomNode.__repr__": [], "testing.test_junitxml.DomNode.find_first_by_tag": ["testing.test_junitxml.DomNode.find_nth_by_tag"], "testing.test_junitxml.DomNode.find_nth_by_tag": ["testing.test_junitxml.DomNode._by_tag", "<builtin>.type"], "testing.test_junitxml.DomNode._by_tag": [], "testing.test_junitxml.DomNode.children": ["<builtin>.type"], "testing.test_junitxml.DomNode.get_unique_child": ["<builtin>.len"], "testing.test_junitxml.DomNode.find_by_tag": ["<builtin>.type"], "testing.test_junitxml.DomNode.__getitem__": [], "testing.test_junitxml.DomNode.assert_attr": ["testing.test_junitxml.DomNode.assert_attr"], "testing.test_junitxml.DomNode.toxml": [], "testing.test_junitxml.DomNode.text": [], "testing.test_junitxml.DomNode.tag": [], "testing.test_junitxml.DomNode.next_sibling": ["<builtin>.type"], "testing.test_junitxml.TestPython": ["testing.test_junitxml.parametrize_families", "pytest.mark.parametrize"], "testing.test_junitxml.parametrize_families": [], "testing.test_junitxml.TestPython.test_summing_simple": [], "testing.test_junitxml.TestPython.test_summing_simple_with_errors": [], "testing.test_junitxml.TestPython.test_hostname_in_xml": ["platform.node"], "platform.node": [], "testing.test_junitxml.TestPython.test_timestamp_in_xml": ["datetime.datetime.now", "datetime.datetime.strptime"], "datetime.datetime.now": [], "datetime.datetime.strptime": [], "testing.test_junitxml.TestPython.test_timing_function": ["<builtin>.float"], "testing.test_junitxml.TestPython.test_junit_duration_report": ["<builtin>.float"], "testing.test_junitxml.TestPython.test_junit_duration_report.node_reporter_wrapper": ["_pytest.junitxml.LogXML.node_reporter"], "_pytest.junitxml.LogXML.node_reporter": [], "testing.test_junitxml.TestPython.test_setup_error": [], "testing.test_junitxml.TestPython.test_teardown_error": [], "testing.test_junitxml.TestPython.test_call_failure_teardown_error": [], "testing.test_junitxml.TestPython.test_skip_contains_name_reason": [], "testing.test_junitxml.TestPython.test_mark_skip_contains_name_reason": [], "testing.test_junitxml.TestPython.test_mark_skipif_contains_name_reason": [], "testing.test_junitxml.TestPython.test_mark_skip_doesnt_capture_output": [], "testing.test_junitxml.TestPython.test_classname_instance": [], "testing.test_junitxml.TestPython.test_classname_nested_dir": [], "testing.test_junitxml.TestPython.test_internal_error": [], "testing.test_junitxml.TestPython.test_failure_function": [], "testing.test_junitxml.TestPython.test_failure_verbose_message": [], "testing.test_junitxml.TestPython.test_failure_escape": ["<builtin>.enumerate"], "testing.test_junitxml.TestPython.test_junit_prefixing": [], "testing.test_junitxml.TestPython.test_xfailure_function": [], "testing.test_junitxml.TestPython.test_xfailure_marker": [], "testing.test_junitxml.TestPython.test_xfail_captures_output_once": ["<builtin>.len"], "testing.test_junitxml.TestPython.test_xfailure_xpass": [], "testing.test_junitxml.TestPython.test_xfailure_xpass_strict": [], "testing.test_junitxml.TestPython.test_collect_error": [], "testing.test_junitxml.TestPython.test_unicode": [], "testing.test_junitxml.TestPython.test_assertion_binchars": ["<builtin>.print"], "testing.test_junitxml.TestPython.test_pass_captures_stdout": [], "testing.test_junitxml.TestPython.test_pass_captures_stderr": [], "testing.test_junitxml.TestPython.test_setup_error_captures_stdout": [], "testing.test_junitxml.TestPython.test_setup_error_captures_stderr": [], "testing.test_junitxml.TestPython.test_avoid_double_stdout": [], "testing.test_junitxml.test_mangle_test_address": ["_pytest.junitxml.mangle_test_address"], "_pytest.junitxml.mangle_test_address": [], "testing.test_junitxml.test_dont_configure_on_workers": ["<builtin>.len", "_pytest.reports.BaseReport.__init__", "typing.cast", "_pytest.junitxml.pytest_configure", "testing.test_conftest.conftest_setinitial.Namespace.__init__"], "testing.test_junitxml.test_dont_configure_on_workers.FakeConfig.__init__": ["_pytest.stash.Stash"], "_pytest.stash.Stash": [], "testing.test_junitxml.test_dont_configure_on_workers.FakeConfig.getini": [], "testing.test_junitxml.test_dont_configure_on_workers.FakeConfig": ["<builtin>.str"], "_pytest.junitxml.pytest_configure": [], "testing.test_junitxml.TestNonPython": ["testing.test_junitxml.parametrize_families"], "testing.test_junitxml.TestNonPython.test_summing_simple": [], "testing.test_junitxml.test_nullbyte": [], "testing.test_junitxml.test_nullbyte_replace": [], "testing.test_junitxml.test_invalid_xml_escape": ["<builtin>.chr", "_pytest.junitxml.bin_xml_escape"], "_pytest.junitxml.bin_xml_escape": [], "testing.test_junitxml.test_logxml_path_expansion": ["pathlib.Path", "<builtin>.str", "_pytest.junitxml.LogXML", "os.path.expanduser", "os.path.normpath", "os.path.expandvars"], "_pytest.junitxml.LogXML": [], "os.path.expandvars": [], "testing.test_junitxml.test_logxml_changingdir": [], "testing.test_junitxml.test_logxml_makedir": [], "testing.test_junitxml.test_logxml_check_isdir": [], "testing.test_junitxml.test_escaped_parametrized_names_xml": [], "testing.test_junitxml.test_double_colon_split_function_issue469": [], "testing.test_junitxml.test_double_colon_split_method_issue469": [], "testing.test_junitxml.test_unicode_issue368": ["_pytest.junitxml.LogXML", "_pytest.reports.BaseReport.__init__", "typing.cast", "<builtin>.str"], "testing.test_junitxml.test_record_property": [], "testing.test_junitxml.test_record_property_same_name": [], "testing.test_junitxml.test_record_fixtures_without_junitxml": [], "testing.test_junitxml.test_record_attribute": [], "testing.test_junitxml.test_record_fixtures_xunit2": [], "testing.test_junitxml.test_random_report_log_xdist": ["pytest.importorskip"], "testing.test_junitxml.test_root_testsuites_tag": [], "testing.test_junitxml.test_runs_twice": [], "testing.test_junitxml.test_runs_twice_xdist": ["pytest.importorskip"], "testing.test_junitxml.test_fancy_items_regression": ["pprint.pprint", "<builtin>.sorted"], "testing.test_junitxml.test_global_properties": ["_pytest.junitxml.LogXML", "xml.dom.minidom.parse", "<builtin>.str"], "testing.test_junitxml.test_url_property": ["_pytest.reports.BaseReport.__init__", "typing.cast", "<builtin>.str", "_pytest.junitxml.LogXML", "xml.dom.minidom.parse"], "testing.test_junitxml.test_record_testsuite_property": [], "testing.test_junitxml.test_record_testsuite_property_junit_disabled": [], "testing.test_junitxml.test_record_testsuite_property_type_checking": [], "testing.test_junitxml.test_set_suite_name": [], "testing.test_junitxml.test_escaped_skipreason_issue3533": [], "testing.test_junitxml.test_escaped_setup_teardown_error": [], "testing.test_junitxml.test_logging_passing_tests_disabled_does_not_log_test_output": ["<builtin>.len"], "testing.test_junitxml.test_logging_passing_tests_disabled_logs_output_for_failing_test_issue5430": ["<builtin>.len"], "testing.test_reports": [], "testing.test_reports.TestReportSerialization.test_xdist_longrepr_to_str_issue_241": ["<builtin>.len"], "testing.test_reports.TestReportSerialization.test_xdist_report_longrepr_reprcrash_130": ["<builtin>.len", "_pytest.reports.TestReport._from_json", "<builtin>.isinstance", "<builtin>.getattr"], "_pytest.reports.TestReport._from_json": [], "testing.test_reports.TestReportSerialization.test_reprentries_serialization_170": ["<builtin>.len", "_pytest.reports.TestReport._from_json", "<builtin>.isinstance", "<builtin>.range"], "testing.test_reports.TestReportSerialization.test_reprentries_serialization_196": ["<builtin>.len", "_pytest.reports.TestReport._from_json", "<builtin>.isinstance", "<builtin>.range"], "testing.test_reports.TestReportSerialization.test_itemreport_outcomes": ["<builtin>.len", "_pytest.reports.TestReport._from_json", "<builtin>.isinstance", "<builtin>.hasattr"], "testing.test_reports.TestReportSerialization.test_collectreport_passed": ["_pytest.reports.CollectReport._from_json"], "_pytest.reports.CollectReport._from_json": [], "testing.test_reports.TestReportSerialization.test_collectreport_fail": ["_pytest.reports.CollectReport._from_json", "<builtin>.str"], "testing.test_reports.TestReportSerialization.test_extended_report_deserialization": ["_pytest.reports.CollectReport._from_json", "<builtin>.str"], "testing.test_reports.TestReportSerialization.test_paths_support": ["<builtin>.len", "testing.test_reports.TestReportSerialization.test_paths_support.MyPathLike.__init__", "<builtin>.str"], "testing.test_reports.TestReportSerialization.test_paths_support.MyPathLike.__init__": [], "testing.test_reports.TestReportSerialization.test_paths_support.MyPathLike.__fspath__": [], "testing.test_reports.TestReportSerialization.test_deserialization_failure": ["<builtin>.len", "_pytest.reports.TestReport._from_json", "pytest.raises"], "testing.test_reports.TestReportSerialization": ["pytest.mark.parametrize"], "testing.test_reports.TestReportSerialization.test_chained_exceptions": ["<builtin>.len", "<builtin>.isinstance", "testing.test_reports.TestReportSerialization.test_chained_exceptions.check_longrepr"], "testing.test_reports.TestReportSerialization.test_chained_exceptions.check_longrepr": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.str"], "testing.test_reports.TestReportSerialization.test_chained_exceptions_no_reprcrash": ["<builtin>.len", "_pytest.reports.TestReport._from_json", "<builtin>.isinstance", "testing.test_reports.TestReportSerialization.test_chained_exceptions_no_reprcrash.check_longrepr"], "testing.test_reports.TestReportSerialization.test_chained_exceptions_no_reprcrash.check_longrepr": ["<builtin>.len", "<builtin>.isinstance", "<builtin>.str"], "testing.test_reports.TestReportSerialization.test_report_prevent_ConftestImportFailure_hiding_exception": [], "testing.test_reports.TestHooks.test_test_report": ["<builtin>.len"], "testing.test_reports.TestHooks.test_collect_report": ["<builtin>.len"], "testing.test_reports.TestHooks": ["pytest.mark.parametrize"], "testing.test_reports.TestHooks.test_invalid_report_types": ["pytest.raises"], "testing.test_parseopt": ["pytest.fixture"], "testing.test_parseopt.parser": ["_pytest.config.argparsing.Parser"], "_pytest.config.argparsing.Parser": [], "testing.test_parseopt.TestParser.test_no_help_by_default": ["_pytest.config.argparsing.Parser", "pytest.raises"], "testing.test_parseopt.TestParser.test_no_help_by_default.<lambda1>": [], "testing.test_parseopt.TestParser.test_custom_prog": ["os.path.basename"], "testing.test_parseopt.TestParser.test_argument": ["_pytest.config.argparsing.Argument", "pytest.raises", "<builtin>.str"], "_pytest.config.argparsing.Argument": [], "testing.test_parseopt.TestParser.test_argument_type": ["_pytest.config.argparsing.Argument", "pytest.raises", "pytest.warns"], "testing.test_parseopt.TestParser.test_argument_processopt": ["_pytest.config.argparsing.Argument"], "testing.test_parseopt.TestParser.test_group_add_and_get": [], "testing.test_parseopt.TestParser.test_getgroup_simple": [], "testing.test_parseopt.TestParser.test_group_ordering": ["<builtin>.list"], "testing.test_parseopt.TestParser.test_group_addoption": ["<builtin>.len", "<builtin>.isinstance", "_pytest.config.argparsing.OptionGroup"], "_pytest.config.argparsing.OptionGroup": [], "testing.test_parseopt.TestParser.test_group_addoption_conflict": ["pytest.raises", "_pytest.config.argparsing.OptionGroup", "<builtin>.str"], "testing.test_parseopt.TestParser.test_group_shortopt_lowercase": ["<builtin>.len", "pytest.raises"], "testing.test_parseopt.TestParser.test_parser_addoption": ["<builtin>.len"], "testing.test_parseopt.TestParser.test_parse": ["<builtin>.getattr"], "testing.test_parseopt.TestParser.test_parse2": ["<builtin>.getattr"], "testing.test_parseopt.TestParser.test_parse_known_args": ["pathlib.Path"], "testing.test_parseopt.TestParser.test_parse_known_and_unknown_args": [], "testing.test_parseopt.TestParser.test_parse_will_set_default": [], "testing.test_parseopt.TestParser.test_parse_setoption": ["argparse.Namespace"], "argparse.Namespace": [], "testing.test_parseopt.TestParser.test_parse_special_destination": [], "testing.test_parseopt.TestParser.test_parse_split_positional_arguments": ["<builtin>.getattr"], "testing.test_parseopt.TestParser.test_parse_defaultgetter": ["_pytest.config.argparsing.Parser"], "testing.test_parseopt.TestParser.test_parse_defaultgetter.defaultget": ["<builtin>.hasattr"], "testing.test_parseopt.TestParser.test_drop_short_helper": ["argparse.ArgumentParser", "pytest.raises"], "argparse.ArgumentParser": [], "testing.test_parseopt.TestParser.test_drop_short_0": ["pytest.raises"], "testing.test_parseopt.TestParser.test_drop_short_2": [], "testing.test_parseopt.TestParser.test_drop_short_3": [], "testing.test_parseopt.TestParser.test_drop_short_help0": [], "testing.test_parseopt.TestParser.test_drop_short_help1": [], "testing.test_parseopt.TestParser.test_multiple_metavar_help": [], "testing.test_parseopt.test_argcomplete": ["<builtin>.len", "<builtin>.open", "pytest.skip", "os.mkdir", "<builtin>.str", "subprocess.run", "shlex.quote"], "subprocess.run": [], "shlex.quote": [], "os.mkdir": [], "testing.test_error_diffs": ["pytest.param", "pytest.mark.parametrize"], "testing.test_error_diffs.test_error_diff": [], "testing.examples.test_issue519": [], "testing.examples.test_issue519.test_519": [], "testing.test_link_resolve": ["contextlib.contextmanager"], "testing.test_link_resolve.subst_path_windows": ["subprocess.check_call", "pathlib.Path", "<builtin>.str"], "testing.test_link_resolve.subst_path_linux": ["<builtin>.str"], "testing.test_link_resolve.test_link_resolve": ["testing.test_link_resolve.subst_path_windows", "<builtin>.str", "textwrap.dedent", "testing.test_link_resolve.subst_path_linux"], "testing.test_argcomplete": [], "testing.test_argcomplete.equal_with_bash": ["<builtin>.set", "testing.test_argcomplete.FilesCompleter.__init__", "sys.stdout.write"], "testing.test_argcomplete.FilesCompleter.__init__": ["<builtin>.type"], "sys.stdout.write": [], "testing.test_argcomplete._wrapcall": ["subprocess.check_output"], "subprocess.check_output": [], "testing.test_argcomplete.FilesCompleter.__call__": ["<builtin>.set", "testing.test_argcomplete._wrapcall", "<builtin>.list"], "testing.test_argcomplete.TestArgComplete": ["pytest.mark.skipif"], "testing.test_argcomplete.TestArgComplete.test_compare_with_compgen": ["testing.test_argcomplete.equal_with_bash", "testing.test_argcomplete.FilesCompleter.__init__", "_pytest._argcomplete.FastFilesCompleter"], "_pytest._argcomplete.FastFilesCompleter": [], "testing.test_argcomplete.TestArgComplete.test_remove_dir_prefix": ["testing.test_argcomplete.equal_with_bash", "testing.test_argcomplete.FilesCompleter.__init__", "_pytest._argcomplete.FastFilesCompleter"], "testing.test_runner_xunit": ["pytest.mark.parametrize"], "testing.test_runner_xunit.test_module_and_function_setup": [], "testing.test_runner_xunit.test_module_setup_failure_no_teardown": [], "testing.test_runner_xunit.test_setup_function_failure_no_teardown": [], "testing.test_runner_xunit.test_class_setup": [], "testing.test_runner_xunit.test_class_setup_failure_no_teardown": [], "testing.test_runner_xunit.test_method_setup": [], "testing.test_runner_xunit.test_method_setup_failure_no_teardown": [], "testing.test_runner_xunit.test_method_setup_uses_fresh_instances": [], "testing.test_runner_xunit.test_setup_that_skips_calledagain": [], "testing.test_runner_xunit.test_setup_fails_again_on_all_tests": [], "testing.test_runner_xunit.test_setup_funcarg_setup_when_outer_scope_fails": [], "testing.test_runner_xunit.test_setup_teardown_function_level_with_optional_argument": [], "testing.test_pytester": ["pytest.mark.filterwarnings", "pytest.mark.parametrize", "testing.test_pytester.make_holder"], "testing.test_pytester.test_make_hook_recorder": ["<builtin>.len", "pytest.xfail", "pytest.raises"], "testing.test_pytester.test_parseconfig": [], "testing.test_pytester.test_pytester_runs_with_plugin": [], "testing.test_pytester.test_pytester_with_doctest": [], "testing.test_pytester.test_runresult_assertion_on_xfail": [], "testing.test_pytester.test_runresult_assertion_on_xpassed": [], "testing.test_pytester.test_xpassed_with_strict_is_considered_a_failure": [], "testing.test_pytester.make_holder": ["<builtin>.type"], "testing.test_pytester.make_holder.apiclass.pytest_xyz": [], "testing.test_pytester.make_holder.apiclass.pytest_xyz_noarg": [], "testing.test_pytester.make_holder.pytest_xyz": [], "testing.test_pytester.make_holder.pytest_xyz_noarg": [], "testing.test_pytester.test_hookrecorder_basic": ["_pytest.config.PytestPluginManager", "pytest.raises", "_pytest.pytester.HookRecorder"], "_pytest.pytester.HookRecorder": [], "testing.test_pytester.test_makepyfile_unicode": ["<builtin>.chr"], "testing.test_pytester.test_makepyfile_utf8": [], "testing.test_pytester.TestInlineRunModulesCleanup.test_inline_run_test_module_not_cleaned_up": ["<builtin>.str"], "testing.test_pytester.TestInlineRunModulesCleanup.spy_factory": [], "testing.test_pytester.TestInlineRunModulesCleanup.spy_factory.SysModulesSnapshotSpy.__init__": ["_pytest.pytester.SysModulesSnapshot"], "_pytest.pytester.SysModulesSnapshot": [], "testing.test_pytester.TestInlineRunModulesCleanup.spy_factory.SysModulesSnapshotSpy.restore": [], "testing.test_pytester.TestInlineRunModulesCleanup.test_inline_run_taking_and_restoring_a_sys_modules_snapshot": ["<builtin>.len", "testing.test_pytester.TestInlineRunModulesCleanup.spy_factory", "<builtin>.dict", "<builtin>.all", "<builtin>.str"], "<builtin>.all": [], "testing.test_pytester.TestInlineRunModulesCleanup.test_inline_run_sys_modules_snapshot_restore_preserving_modules": ["testing.test_pytester.TestInlineRunModulesCleanup.spy_factory", "<builtin>.str"], "testing.test_pytester.TestInlineRunModulesCleanup.test_external_test_module_imports_not_cleaned_up": ["<builtin>.str"], "testing.test_pytester.test_assert_outcomes_after_pytest_error": ["pytest.raises"], "testing.test_pytester.test_cwd_snapshot": ["_pytest.pytester.CwdSnapshot", "pathlib.Path", "os.chdir"], "_pytest.pytester.CwdSnapshot": [], "testing.test_pytester.TestSysModulesSnapshot.test_remove_added": ["types.ModuleType", "_pytest.pytester.SysModulesSnapshot", "<builtin>.dict"], "testing.test_pytester.TestSysModulesSnapshot.test_add_removed": ["types.ModuleType", "_pytest.pytester.SysModulesSnapshot", "<builtin>.dict"], "testing.test_pytester.TestSysModulesSnapshot.test_restore_reloaded": ["types.ModuleType", "_pytest.pytester.SysModulesSnapshot", "<builtin>.dict"], "testing.test_pytester.TestSysModulesSnapshot.test_preserve_modules": ["types.ModuleType", "<builtin>.enumerate", "<builtin>.any", "<builtin>.dict", "_pytest.pytester.SysModulesSnapshot", "<builtin>.str", "<builtin>.range"], "testing.test_pytester.TestSysModulesSnapshot.test_preserve_modules.preserve": [], "testing.test_pytester.TestSysModulesSnapshot.test_preserve_container": ["types.ModuleType", "_pytest.pytester.SysModulesSnapshot", "<builtin>.dict"], "testing.test_pytester.TestSysPathsSnapshot.path": ["<builtin>.str"], "testing.test_pytester.TestSysPathsSnapshot.test_restore": ["<builtin>.list", "<builtin>.range", "_pytest.pytester.SysPathsSnapshot", "<builtin>.getattr", "testing.test_pytester.TestSysPathsSnapshot.path"], "_pytest.pytester.SysPathsSnapshot": [], "testing.test_pytester.TestSysPathsSnapshot.test_preserve_container": ["_pytest.pytester.SysPathsSnapshot", "<builtin>.list", "<builtin>.getattr"], "testing.test_pytester.test_pytester_subprocess": [], "testing.test_pytester.test_pytester_subprocess_via_runpytest_arg": [], "testing.test_pytester.test_unicode_args": [], "testing.test_pytester.test_pytester_run_no_timeout": [], "testing.test_pytester.test_pytester_run_with_timeout": ["time.time"], "testing.test_pytester.test_pytester_run_timeout_expires": ["pytest.raises"], "testing.test_pytester.test_linematcher_with_nonlist": ["<builtin>.set", "_pytest._code.source.Source", "_pytest.pytester.LineMatcher", "pytest.raises"], "_pytest._code.source.Source": [], "testing.test_pytester.test_linematcher_match_failure": ["_pytest.pytester.LineMatcher", "pytest.raises"], "testing.test_pytester.test_linematcher_consecutive": ["_pytest.pytester.LineMatcher", "pytest.raises", "<builtin>.str"], "testing.test_pytester.test_linematcher_no_matching": ["_pytest.pytester.LineMatcher", "pytest.raises", "<builtin>.str", "<builtin>.range", "<builtin>.getattr"], "testing.test_pytester.test_linematcher_no_matching_after_match": ["_pytest.pytester.LineMatcher", "pytest.raises", "<builtin>.str"], "testing.test_pytester.test_linematcher_string_api": ["_pytest.pytester.LineMatcher", "<builtin>.str"], "testing.test_pytester.test_pytest_addopts_before_pytester": [], "testing.test_pytester.test_run_stdin": ["pytest.raises"], "testing.test_pytester.test_popen_stdin_pipe": [], "testing.test_pytester.test_popen_stdin_bytes": [], "testing.test_pytester.test_popen_default_stdin_stderr_and_stdin_None": ["<builtin>.str"], "testing.test_pytester.test_spawn_uses_tmphome": ["os.environ.get", "<builtin>.str"], "testing.test_pytester.test_run_result_repr": ["<builtin>.repr", "<builtin>.str", "_pytest.pytester.RunResult"], "_pytest.pytester.RunResult": [], "testing.test_pytester.test_pytester_outcomes_with_multiple_errors": ["<builtin>.str"], "testing.test_pytester.test_parse_summary_line_always_plural": ["_pytest.pytester.RunResult.parse_summary_nouns"], "_pytest.pytester.RunResult.parse_summary_nouns": [], "testing.test_pytester.test_makefile_joins_absolute_path": ["<builtin>.str"], "testing.test_pytester.test_pytester_makefile_dot_prefixes_extension_with_warning": ["pytest.raises"], "testing.test_pytester.test_pytester_assert_outcomes_warnings": [], "testing.test_pytester.test_pytester_outcomes_deselected": [], "testing.test_warnings": ["pytest.mark.skip", "pytest.mark.parametrize", "pytest.mark.filterwarnings", "pytest.fixture"], "testing.test_warnings.pyfile_with_warnings": ["<builtin>.str"], "testing.test_warnings.test_normal_flow": [], "testing.test_warnings.test_setup_teardown_warnings": [], "testing.test_warnings.test_as_errors": [], "testing.test_warnings.test_ignore": [], "testing.test_warnings.test_unicode": [], "testing.test_warnings.test_works_with_filterwarnings": [], "testing.test_warnings.test_filterwarnings_mark": [], "testing.test_warnings.test_non_string_warning_argument": [], "testing.test_warnings.test_filterwarnings_mark_registration": [], "testing.test_warnings.test_warning_recorded_hook": ["<builtin>.len", "<builtin>.range", "<builtin>.type", "<builtin>.str"], "testing.test_warnings.test_warning_recorded_hook.WarningCollector.pytest_warning_recorded": ["<builtin>.str"], "testing.test_warnings.test_collection_warnings": [], "testing.test_warnings.test_mark_regex_escape": [], "testing.test_warnings.test_hide_pytest_internal_warnings": [], "testing.test_warnings.test_option_precedence_cmdline_over_ini": [], "testing.test_warnings.test_option_precedence_mark": [], "testing.test_warnings.TestDeprecationWarningsByDefault.create_file": [], "testing.test_warnings.TestDeprecationWarningsByDefault": ["pytest.mark.parametrize"], "testing.test_warnings.TestDeprecationWarningsByDefault.test_shown_by_default": ["testing.test_warnings.TestDeprecationWarningsByDefault.create_file"], "testing.test_warnings.TestDeprecationWarningsByDefault.test_hidden_by_ini": ["testing.test_warnings.TestDeprecationWarningsByDefault.create_file"], "testing.test_warnings.TestDeprecationWarningsByDefault.test_hidden_by_mark": ["testing.test_warnings.TestDeprecationWarningsByDefault.create_file"], "testing.test_warnings.TestDeprecationWarningsByDefault.test_hidden_by_cmdline": ["testing.test_warnings.TestDeprecationWarningsByDefault.create_file"], "testing.test_warnings.TestDeprecationWarningsByDefault.test_hidden_by_system": ["testing.test_warnings.TestDeprecationWarningsByDefault.create_file"], "testing.test_warnings.test_removed_in_x_warning_as_error": [], "testing.test_warnings.TestAssertionWarnings.assert_result_warns": [], "testing.test_warnings.TestAssertionWarnings.test_tuple_warning": ["testing.test_warnings.TestAssertionWarnings.assert_result_warns"], "testing.test_warnings.test_warnings_checker_twice": ["warnings.warn", "pytest.warns"], "testing.test_warnings.test_group_warnings_by_message": [], "testing.test_warnings.test_group_warnings_by_message_summary": [], "testing.test_warnings.test_pytest_configure_warning": ["<builtin>.str"], "testing.test_warnings.TestStackLevel": ["pytest.mark.filterwarnings", "pytest.fixture"], "testing.test_warnings.TestStackLevel.capwarn": [], "testing.test_warnings.TestStackLevel.capwarn.CapturedWarnings.pytest_warning_recorded": [], "testing.test_warnings.TestStackLevel.test_issue4445_rewrite": ["<builtin>.len", "<builtin>.str"], "testing.test_warnings.TestStackLevel.test_issue4445_preparse": ["<builtin>.len", "<builtin>.str"], "testing.test_warnings.TestStackLevel.test_conftest_warning_captured": [], "testing.test_warnings.TestStackLevel.test_issue4445_import_plugin": ["<builtin>.len", "<builtin>.str"], "testing.test_warnings.TestStackLevel.test_issue4445_issue5928_mark_generator": [], "testing.test_warnings.test_resource_warning": [], "testing.test_main": ["pytest.param", "pytest.mark.parametrize"], "testing.test_main.test_wrap_session_notify_exception": [], "testing.test_main.test_wrap_session_exit_sessionfinish": [], "testing.test_main.test_validate_basetemp_ok": ["_pytest.main.validate_basetemp", "<builtin>.str"], "_pytest.main.validate_basetemp": [], "testing.test_main.test_validate_basetemp_fails": ["_pytest.main.validate_basetemp", "pytest.raises", "<builtin>.str"], "testing.test_main.test_validate_basetemp_integration": [], "testing.test_main.TestResolveCollectionArgument": ["pytest.fixture"], "testing.test_main.TestResolveCollectionArgument.invocation_path": [], "testing.test_main.TestResolveCollectionArgument.test_file": ["_pytest.main.resolve_collection_argument"], "_pytest.main.resolve_collection_argument": [], "testing.test_main.TestResolveCollectionArgument.test_dir": ["_pytest.main.resolve_collection_argument", "pytest.raises"], "testing.test_main.TestResolveCollectionArgument.test_pypath": ["_pytest.main.resolve_collection_argument", "pytest.raises"], "testing.test_main.TestResolveCollectionArgument.test_parametrized_name_with_colons": ["_pytest.main.resolve_collection_argument"], "testing.test_main.TestResolveCollectionArgument.test_does_not_exist": ["re.escape", "_pytest.main.resolve_collection_argument", "pytest.raises"], "testing.test_main.TestResolveCollectionArgument.test_absolute_paths_are_resolved_correctly": ["pathlib.Path", "<builtin>.str", "os.path.abspath", "os.path.splitdrive", "_pytest.main.resolve_collection_argument"], "os.path.splitdrive": [], "testing.test_main.test_module_full_path_without_drive": ["os.path.splitdrive", "<builtin>.str"], "testing.test_tmpdir": ["<builtin>.hasattr", "pytest.mark.usefixtures", "pytest.mark.skipif", "pytest.fixture", "sys.platform.startswith", "pytest.mark.parametrize"], "testing.test_tmpdir.test_tmp_path_fixture": [], "testing.test_tmpdir.FakeConfig": ["attr.ib"], "testing.test_tmpdir.FakeConfig.trace": [], "testing.test_tmpdir.FakeConfig.get": [], "testing.test_tmpdir.FakeConfig.get.<lambda1>": [], "testing.test_tmpdir.FakeConfig.getini": [], "testing.test_tmpdir.FakeConfig.option": [], "testing.test_tmpdir.TestTmpPathHandler.test_mktemp": ["_pytest.reports.BaseReport.__init__", "typing.cast", "_pytest.tmpdir.TempPathFactory.from_config", "<builtin>.str", "testing.test_conftest.conftest_setinitial.Namespace.__init__"], "_pytest.tmpdir.TempPathFactory.from_config": [], "testing.test_tmpdir.TestTmpPathHandler.test_tmppath_relative_basetemp_absolute": ["_pytest.tmpdir.TempPathFactory.from_config", "_pytest.reports.BaseReport.__init__", "testing.test_conftest.conftest_setinitial.Namespace.__init__", "typing.cast"], "testing.test_tmpdir.TestConfigTmpPath.test_getbasetemp_custom_removes_old": [], "testing.test_tmpdir.TestConfigTmpPath.test_policy_failed_removes_only_passed_dir": ["<builtin>.len", "<builtin>.list", "<builtin>.filter"], "testing.test_tmpdir.TestConfigTmpPath.test_policy_failed_removes_only_passed_dir.<lambda1>": [], "<builtin>.filter": [], "testing.test_tmpdir.TestConfigTmpPath.test_policy_failed_removes_only_passed_dir.<lambda2>": [], "testing.test_tmpdir.TestConfigTmpPath.test_policy_failed_removes_basedir_when_all_passed": ["<builtin>.len", "<builtin>.list", "<builtin>.filter"], "testing.test_tmpdir.TestConfigTmpPath.test_policy_failed_removes_basedir_when_all_passed.<lambda1>": [], "testing.test_tmpdir.TestConfigTmpPath.test_policy_failed_removes_dir_when_skipped_from_fixture": ["<builtin>.len", "<builtin>.list", "<builtin>.filter"], "testing.test_tmpdir.TestConfigTmpPath.test_policy_failed_removes_dir_when_skipped_from_fixture.<lambda1>": [], "testing.test_tmpdir.TestConfigTmpPath.test_policy_all_keeps_dir_when_skipped_from_fixture": ["<builtin>.len", "<builtin>.list", "<builtin>.filter"], "testing.test_tmpdir.TestConfigTmpPath.test_policy_all_keeps_dir_when_skipped_from_fixture.<lambda1>": [], "testing.test_tmpdir.TestConfigTmpPath.test_policy_all_keeps_dir_when_skipped_from_fixture.<lambda2>": [], "testing.test_tmpdir.test_mktemp": [], "testing.test_tmpdir.test_tmp_path_always_is_realpath": ["testing.test_tmpdir.attempt_symlink_to", "<builtin>.str"], "testing.test_tmpdir.attempt_symlink_to": ["pytest.skip", "pathlib.Path"], "testing.test_tmpdir.test_tmp_path_too_long_on_parametrization": [], "testing.test_tmpdir.test_tmp_path_factory": [], "testing.test_tmpdir.test_tmp_path_fallback_tox_env": [], "testing.test_tmpdir.break_getuser": [], "testing.test_tmpdir.break_getuser.<lambda1>": [], "testing.test_tmpdir.test_tmp_path_fallback_uid_not_found": [], "testing.test_tmpdir.test_get_user_uid_not_found": ["_pytest.tmpdir.get_user"], "_pytest.tmpdir.get_user": [], "testing.test_tmpdir.test_get_user": ["_pytest.tmpdir.get_user"], "testing.test_tmpdir.TestNumberedDir.test_make": ["<builtin>.range", "<builtin>.str", "_pytest.pathlib.make_numbered_dir"], "_pytest.pathlib.make_numbered_dir": [], "testing.test_tmpdir.TestNumberedDir.test_cleanup_lock_create": ["_pytest.pathlib.create_cleanup_lock", "pytest.raises"], "_pytest.pathlib.create_cleanup_lock": [], "testing.test_tmpdir.TestNumberedDir.test_lock_register_cleanup_removal": ["_pytest.pathlib.register_cleanup_lock_removal", "_pytest.pathlib.create_cleanup_lock"], "_pytest.pathlib.register_cleanup_lock_removal": [], "testing.test_tmpdir.TestNumberedDir._do_cleanup": ["_pytest.pathlib.cleanup_numbered_dir", "testing.test_tmpdir.TestNumberedDir.test_make"], "_pytest.pathlib.cleanup_numbered_dir": [], "testing.test_tmpdir.TestNumberedDir.test_cleanup_keep": ["<builtin>.print", "testing.test_tmpdir.TestNumberedDir._do_cleanup"], "testing.test_tmpdir.TestNumberedDir.test_cleanup_keep_0": ["<builtin>.len", "testing.test_tmpdir.TestNumberedDir._do_cleanup", "<builtin>.list"], "testing.test_tmpdir.TestNumberedDir.test_cleanup_locked": ["_pytest.pathlib.ensure_deletable", "_pytest.pathlib.create_cleanup_lock", "_pytest.pathlib.make_numbered_dir"], "_pytest.pathlib.ensure_deletable": [], "testing.test_tmpdir.TestNumberedDir.test_cleanup_ignores_symlink": ["testing.test_tmpdir.attempt_symlink_to", "testing.test_tmpdir.TestNumberedDir._do_cleanup"], "testing.test_tmpdir.TestNumberedDir.test_removal_accepts_lock": ["_pytest.pathlib.create_cleanup_lock", "_pytest.pathlib.maybe_delete_a_numbered_dir", "_pytest.pathlib.make_numbered_dir"], "_pytest.pathlib.maybe_delete_a_numbered_dir": [], "testing.test_tmpdir.TestRmRf.test_rm_rf": ["_pytest.pathlib.rm_rf"], "_pytest.pathlib.rm_rf": [], "testing.test_tmpdir.TestRmRf.test_rm_rf_with_read_only_file": ["testing.test_tmpdir.TestRmRf.chmod_r", "_pytest.pathlib.rm_rf"], "testing.test_tmpdir.TestRmRf.chmod_r": ["os.stat", "os.chmod", "<builtin>.str"], "os.stat": [], "os.chmod": [], "testing.test_tmpdir.TestRmRf.test_rm_rf_with_read_only_directory": ["testing.test_tmpdir.TestRmRf.chmod_r", "_pytest.pathlib.rm_rf"], "testing.test_tmpdir.TestRmRf.test_on_rm_rf_error": ["testing.test_tmpdir.TestRmRf.chmod_r", "<builtin>.FileNotFoundError", "<builtin>.RuntimeError", "warnings.simplefilter", "<builtin>.PermissionError", "<builtin>.str", "warnings.catch_warnings", "pytest.warns", "_pytest.pathlib.on_rm_rf_error"], "_pytest.pathlib.on_rm_rf_error": [], "<builtin>.FileNotFoundError": [], "<builtin>.PermissionError": [], "testing.test_tmpdir.test_basetemp_with_read_only_files": [], "testing.test_tmpdir.test_tmp_path_factory_handles_invalid_dir_characters": ["<builtin>.str"], "testing.test_tmpdir.test_tmp_path_factory_handles_invalid_dir_characters.<lambda1>": [], "testing.test_tmpdir.test_tmp_path_factory_create_directory_with_safe_permissions": ["_pytest.tmpdir.TempPathFactory", "<builtin>.str"], "testing.test_tmpdir.test_tmp_path_factory_create_directory_with_safe_permissions.<lambda1>": [], "_pytest.tmpdir.TempPathFactory": [], "testing.test_tmpdir.test_tmp_path_factory_fixes_up_world_readable_permissions": ["os.chmod", "_pytest.tmpdir.TempPathFactory", "<builtin>.str"], "testing.test_tmpdir.test_tmp_path_factory_fixes_up_world_readable_permissions.<lambda1>": [], "testing.test_tmpdir.test_tmp_path_factory_fixes_up_world_readable_permissions.<lambda2>": [], "testing.test_pastebin": [], "testing.test_pastebin.TestPasteCapture": ["pytest.fixture"], "testing.test_pastebin.TestPasteCapture.pastebinlist": [], "testing.test_pastebin.TestPasteCapture.test_failed": ["<builtin>.len"], "testing.test_pastebin.TestPasteCapture.test_all": ["<builtin>.len", "_pytest.pytester.LineMatcher"], "testing.test_pastebin.TestPasteCapture.test_non_ascii_paste_text": ["<builtin>.len"], "testing.test_pastebin.TestPaste": ["pytest.fixture"], "testing.test_pastebin.TestPaste.pastebin": [], "testing.test_pastebin.TestPaste.mocked_urlopen_fail": [], "testing.test_pastebin.TestPaste.mocked_urlopen_fail.mocked": ["io.BytesIO"], "io.BytesIO": [], "testing.test_pastebin.TestPaste.mocked_urlopen_invalid": [], "testing.test_pastebin.TestPaste.mocked_urlopen_invalid.mocked": [], "testing.test_pastebin.TestPaste.mocked_urlopen_invalid.mocked.DummyFile.read": [], "testing.test_pastebin.TestPaste.mocked_urlopen": [], "testing.test_pastebin.TestPaste.mocked_urlopen.mocked": [], "testing.test_pastebin.TestPaste.mocked_urlopen.mocked.DummyFile.read": [], "testing.test_pastebin.TestPaste.test_pastebin_invalid_url": ["<builtin>.len"], "testing.test_pastebin.TestPaste.test_pastebin_http_error": ["<builtin>.len"], "testing.test_pastebin.TestPaste.test_create_new_paste": ["<builtin>.len", "<builtin>.type"], "testing.test_pastebin.TestPaste.test_create_new_paste_failure": [], "testing.test_pastebin.TestPaste.test_create_new_paste_failure.response": ["io.BytesIO"], "testing.test_pathlib": ["pytest.mark.skipif", "sys.platform.startswith"], "testing.test_pathlib.TestFNMatcherPort": ["pytest.mark.parametrize"], "testing.test_pathlib.TestFNMatcherPort.test_matching": ["_pytest.pathlib.fnmatch_ex"], "_pytest.pathlib.fnmatch_ex": [], "testing.test_pathlib.TestFNMatcherPort.test_matching_abspath": ["_pytest.pathlib.fnmatch_ex"], "testing.test_pathlib.TestFNMatcherPort.test_not_matching": ["_pytest.pathlib.fnmatch_ex"], "testing.test_pathlib.TestImportPath": ["pytest.fixture"], "testing.test_pathlib.TestImportPath.path1": ["testing.test_pathlib.TestImportPath.setuptestfs"], "testing.test_pathlib.TestImportPath.setuptestfs": ["pickle.dumps", "textwrap.dedent"], "testing.test_pathlib.TestImportPath.preserve_sys": ["<builtin>.list"], "pickle.dumps": [], "testing.test_pathlib.TestImportPath.test_smoke_test": ["_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_import_path_missing_file": ["pytest.raises", "_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_renamed_dir_creates_mismatch": ["pytest.raises", "_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_messy_name": ["_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_dir": ["_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_a": ["_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_b": ["_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_c": ["_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_d": ["_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_import_after": ["_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_check_filepath_consistency": ["types.ModuleType", "pytest.raises", "_pytest.pathlib.import_path", "<builtin>.str", "<builtin>.issubclass"], "testing.test_pathlib.TestImportPath.test_issue131_on__init__": ["_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_ensuresyspath_append": ["_pytest.pathlib.import_path", "<builtin>.str"], "testing.test_pathlib.TestImportPath.test_invalid_path": ["pytest.raises", "_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.simple_module": [], "testing.test_pathlib.TestImportPath.test_importmode_importlib": ["<builtin>.str", "_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_importmode_twice_is_different_module": ["_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_no_meta_path_found": ["pytest.raises", "_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportPath.test_no_meta_path_found.<lambda1>": [], "testing.test_pathlib.test_resolve_package_path": ["_pytest.pathlib.resolve_package_path"], "_pytest.pathlib.resolve_package_path": [], "testing.test_pathlib.test_package_unimportable": ["_pytest.pathlib.resolve_package_path"], "testing.test_pathlib.test_access_denied_during_cleanup": ["_pytest.pathlib.get_lock_path", "_pytest.pathlib.maybe_delete_a_numbered_dir"], "testing.test_pathlib.test_access_denied_during_cleanup.renamed_failed": ["<builtin>.OSError"], "_pytest.pathlib.get_lock_path": [], "testing.test_pathlib.test_long_path_during_cleanup": ["<builtin>.len", "_pytest.pathlib.maybe_delete_a_numbered_dir", "<builtin>.str"], "testing.test_pathlib.test_get_extended_length_path_str": ["_pytest.pathlib.get_extended_length_path_str"], "_pytest.pathlib.get_extended_length_path_str": [], "testing.test_pathlib.test_suppress_error_removing_lock": ["_pytest.pathlib.get_lock_path", "_pytest.pathlib.ensure_deletable"], "testing.test_pathlib.test_bestrelpath": ["_pytest.pathlib.bestrelpath", "pathlib.Path"], "testing.test_pathlib.test_commonpath": ["_pytest.pathlib.commonpath", "pathlib.Path", "<builtin>.str"], "_pytest.pathlib.commonpath": [], "testing.test_pathlib.test_visit_ignores_errors": ["_pytest.pathlib.visit", "_pytest.pathlib.symlink_or_skip", "<builtin>.str"], "testing.test_pathlib.test_visit_ignores_errors.<lambda1>": [], "_pytest.pathlib.visit": [], "testing.test_pathlib.test_samefile_false_negatives": ["<builtin>.getattr", "_pytest.pathlib.import_path"], "testing.test_pathlib.test_samefile_false_negatives.<lambda1>": [], "testing.test_pathlib.TestImportLibMode.test_importmode_importlib_with_dataclass": ["<builtin>.getattr", "textwrap.dedent", "_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportLibMode.test_importmode_importlib_with_pickle": ["<builtin>.getattr", "textwrap.dedent", "_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportLibMode.test_importmode_importlib_with_pickle_separate_modules": ["testing.test_pathlib.TestImportLibMode.test_importmode_importlib_with_pickle_separate_modules.round_trip", "<builtin>.getattr", "textwrap.dedent", "_pytest.pathlib.import_path"], "testing.test_pathlib.TestImportLibMode.test_importmode_importlib_with_pickle_separate_modules.round_trip": ["pickle.loads", "pickle.dumps"], "pickle.loads": [], "testing.test_pathlib.TestImportLibMode.test_module_name_from_path": ["pathlib.Path", "_pytest.pathlib.module_name_from_path"], "_pytest.pathlib.module_name_from_path": [], "testing.test_pathlib.TestImportLibMode.test_insert_missing_modules": ["types.ModuleType", "<builtin>.sorted", "_pytest.pathlib.insert_missing_modules"], "_pytest.pathlib.insert_missing_modules": [], "testing.example_scripts.collect.package_init_given_as_arg.pkg": [], "testing.example_scripts.collect.package_init_given_as_arg.pkg.test_foo": [], "testing.example_scripts.collect.package_init_given_as_arg.pkg.test_foo.test": [], "testing.example_scripts.collect.package_infinite_recursion.conftest": [], "testing.example_scripts.collect.package_infinite_recursion.conftest.pytest_ignore_collect": [], "testing.example_scripts.collect.package_infinite_recursion.tests.test_basic": [], "testing.example_scripts.collect.package_infinite_recursion.tests.test_basic.test": [], "testing.example_scripts.collect.package_infinite_recursion.tests": [], "testing.example_scripts.collect.collect_init_tests.tests": [], "testing.example_scripts.collect.collect_init_tests.tests.test_init": [], "testing.example_scripts.collect.collect_init_tests.tests.test_foo": [], "testing.example_scripts.collect.collect_init_tests.tests.test_foo.test_foo": [], "testing.example_scripts.unittest.test_unittest_plain_async": [], "testing.example_scripts.unittest.test_unittest_plain_async.Test.test_foo": [], "testing.example_scripts.unittest.test_setup_skip_class": [], "testing.example_scripts.unittest.test_setup_skip_class.Base.setUpClass": [], "testing.example_scripts.unittest.test_setup_skip_class.Test.test_foo": [], "testing.example_scripts.unittest.test_unittest_asyncio": [], "testing.example_scripts.unittest.test_unittest_asyncio.AsyncArguments.asyncTearDown": [], "testing.example_scripts.unittest.test_unittest_asyncio.AsyncArguments.test_something_async": ["unittest.IsolatedAsyncioTestCase.assertEqual", "testing.example_scripts.unittest.test_unittest_asyncio.AsyncArguments.test_something_async.addition"], "testing.example_scripts.unittest.test_unittest_asyncio.AsyncArguments.test_something_async.addition": [], "unittest.IsolatedAsyncioTestCase.assertEqual": [], "testing.example_scripts.unittest.test_unittest_asyncio.AsyncArguments.test_something_async_fails": ["unittest.IsolatedAsyncioTestCase.assertEqual", "testing.example_scripts.unittest.test_unittest_asyncio.AsyncArguments.test_something_async_fails.addition"], "testing.example_scripts.unittest.test_unittest_asyncio.AsyncArguments.test_something_async_fails.addition": [], "testing.example_scripts.unittest.test_unittest_asyncio.AsyncArguments.test_teardowns": ["<builtin>.len"], "testing.example_scripts.unittest.test_parametrized_fixture_error_message": ["pytest.fixture"], "testing.example_scripts.unittest.test_parametrized_fixture_error_message.two": [], "testing.example_scripts.unittest.test_parametrized_fixture_error_message.TestSomethingElse.test_two": [], "testing.example_scripts.unittest.test_setup_skip_module": [], "testing.example_scripts.unittest.test_setup_skip_module.setUpModule": [], "testing.example_scripts.unittest.test_setup_skip_module.Base.test": [], "testing.example_scripts.unittest.test_setup_skip": [], "testing.example_scripts.unittest.test_setup_skip.Base.setUp": [], "testing.example_scripts.unittest.test_setup_skip.Test.test_foo": [], "testing.example_scripts.unittest.test_unittest_asynctest": [], "testing.example_scripts.unittest.test_unittest_asynctest.Test.tearDown": [], "testing.example_scripts.unittest.test_unittest_asynctest.Test.test_error": ["asyncio.sleep", "asynctest.TestCase.fail"], "asynctest.TestCase.fail": [], "testing.example_scripts.unittest.test_unittest_asynctest.Test.test_ok": ["asyncio.sleep"], "testing.example_scripts.unittest.test_unittest_asynctest.Test.test_teardowns": ["<builtin>.len"], "testing.example_scripts.warnings.test_group_warnings_by_message_summary.test_2": [], "testing.example_scripts.warnings.test_group_warnings_by_message_summary.test_2.test_2": ["test_1.func"], "test_1.func": [], "testing.example_scripts.warnings.test_group_warnings_by_message_summary.test_1": ["<builtin>.range", "pytest.mark.parametrize"], "testing.example_scripts.warnings.test_group_warnings_by_message_summary.test_1.func": ["<builtin>.UserWarning", "warnings.warn"], "testing.example_scripts.warnings.test_group_warnings_by_message_summary.test_1.test_foo": ["testing.example_scripts.warnings.test_group_warnings_by_message_summary.test_1.func"], "testing.example_scripts.warnings.test_group_warnings_by_message_summary.test_1.test_foo_1": ["testing.example_scripts.warnings.test_group_warnings_by_message_summary.test_1.func"], "testing.example_scripts.warnings.test_group_warnings_by_message_summary.test_1.test_bar": ["testing.example_scripts.warnings.test_group_warnings_by_message_summary.test_1.func"], "testing.example_scripts.warnings.test_group_warnings_by_message": ["<builtin>.range", "pytest.mark.parametrize"], "testing.example_scripts.warnings.test_group_warnings_by_message.func": ["<builtin>.UserWarning", "warnings.warn"], "testing.example_scripts.warnings.test_group_warnings_by_message.test_foo": ["testing.example_scripts.warnings.test_group_warnings_by_message.func"], "testing.example_scripts.warnings.test_group_warnings_by_message.test_foo_1": ["testing.example_scripts.warnings.test_group_warnings_by_message.func"], "testing.example_scripts.warnings.test_group_warnings_by_message.test_bar": ["testing.example_scripts.warnings.test_group_warnings_by_message.func"], "testing.example_scripts.issue88_initial_file_multinodes.test_hello": [], "testing.example_scripts.issue88_initial_file_multinodes.test_hello.test_hello": [], "testing.example_scripts.issue88_initial_file_multinodes.conftest": [], "testing.example_scripts.issue88_initial_file_multinodes.conftest.MyFile.collect": ["pytest.Item.from_parent"], "pytest.Item.from_parent": [], "testing.example_scripts.issue88_initial_file_multinodes.conftest.pytest_collect_file": ["pytest.File.from_parent"], "testing.example_scripts.dataclasses.test_compare_dataclasses_field_comparison_off": [], "testing.example_scripts.dataclasses.test_compare_dataclasses_field_comparison_off.test_dataclasses_with_attribute_comparison_off": [], "dataclasses.field": [], "testing.example_scripts.dataclasses.test_compare_dataclasses_field_comparison_off.test_dataclasses_with_attribute_comparison_off.SimpleDataObject": ["dataclasses.field"], "testing.example_scripts.dataclasses.test_compare_dataclasses_with_custom_eq": [], "testing.example_scripts.dataclasses.test_compare_dataclasses_with_custom_eq.test_dataclasses": [], "testing.example_scripts.dataclasses.test_compare_dataclasses_with_custom_eq.test_dataclasses.SimpleDataObject": ["dataclasses.field"], "testing.example_scripts.dataclasses.test_compare_dataclasses_with_custom_eq.test_dataclasses.SimpleDataObject.__eq__": ["<builtin>.super"], "testing.example_scripts.dataclasses.test_compare_dataclasses": [], "testing.example_scripts.dataclasses.test_compare_dataclasses.test_dataclasses": [], "testing.example_scripts.dataclasses.test_compare_dataclasses.test_dataclasses.SimpleDataObject": ["dataclasses.field"], "testing.example_scripts.dataclasses.test_compare_initvar": [], "testing.example_scripts.dataclasses.test_compare_initvar.test_demonstrate": [], "testing.example_scripts.dataclasses.test_compare_two_different_dataclasses": [], "testing.example_scripts.dataclasses.test_compare_two_different_dataclasses.test_comparing_two_different_data_classes": [], "testing.example_scripts.dataclasses.test_compare_two_different_dataclasses.test_comparing_two_different_data_classes.SimpleDataObjectOne": ["dataclasses.field"], "testing.example_scripts.dataclasses.test_compare_two_different_dataclasses.test_comparing_two_different_data_classes.SimpleDataObjectTwo": ["dataclasses.field"], "testing.example_scripts.dataclasses.test_compare_dataclasses_verbose": [], "testing.example_scripts.dataclasses.test_compare_dataclasses_verbose.test_dataclasses_verbose": [], "testing.example_scripts.dataclasses.test_compare_dataclasses_verbose.test_dataclasses_verbose.SimpleDataObject": ["dataclasses.field"], "testing.example_scripts.dataclasses.test_compare_recursive_dataclasses": [], "testing.example_scripts.dataclasses.test_compare_recursive_dataclasses.test_recursive_dataclasses": [], "testing.example_scripts.fixtures.test_fixture_named_request": ["pytest.fixture"], "testing.example_scripts.fixtures.test_fixture_named_request.request": [], "testing.example_scripts.fixtures.test_fixture_named_request.test": [], "testing.example_scripts.fixtures.custom_item.foo": [], "testing.example_scripts.fixtures.custom_item.foo.test_foo": [], "testing.example_scripts.fixtures.custom_item.foo.test_foo.test": [], "testing.example_scripts.fixtures.custom_item.conftest": [], "testing.example_scripts.fixtures.custom_item.conftest.CustomItem.runtest": [], "testing.example_scripts.fixtures.custom_item.conftest.CustomFile.collect": ["pytest.Item.from_parent"], "testing.example_scripts.fixtures.custom_item.conftest.pytest_collect_file": ["pytest.File.from_parent"], "testing.example_scripts.fixtures.test_getfixturevalue_dynamic": ["pytest.fixture"], "testing.example_scripts.fixtures.test_getfixturevalue_dynamic.dynamic": [], "testing.example_scripts.fixtures.test_getfixturevalue_dynamic.a": [], "testing.example_scripts.fixtures.test_getfixturevalue_dynamic.b": [], "testing.example_scripts.fixtures.test_getfixturevalue_dynamic.test": [], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_lookup_modulelevel": ["pytest.fixture"], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_lookup_modulelevel.something": [], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_lookup_modulelevel.TestClass.test_method": [], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_lookup_modulelevel.test_func": [], "testing.example_scripts.fixtures.fill_fixtures.test_detect_recursive_dependency_error": ["pytest.fixture"], "testing.example_scripts.fixtures.fill_fixtures.test_detect_recursive_dependency_error.fix1": [], "testing.example_scripts.fixtures.fill_fixtures.test_detect_recursive_dependency_error.fix2": [], "testing.example_scripts.fixtures.fill_fixtures.test_detect_recursive_dependency_error.test": [], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_lookupfails": ["pytest.fixture"], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_lookupfails.xyzsomething": [], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_lookupfails.test_func": [], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_conftest_module.conftest": ["pytest.fixture"], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_conftest_module.conftest.spam": [], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_conftest_module.test_extend_fixture_conftest_module": ["pytest.fixture"], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_conftest_module.test_extend_fixture_conftest_module.spam": [], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_conftest_module.test_extend_fixture_conftest_module.test_spam": [], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_basic": ["pytest.fixture"], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_basic.some": [], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_basic.other": [], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_basic.test_func": [], "testing.example_scripts.fixtures.fill_fixtures.test_conftest_funcargs_only_available_in_subdir.sub2.test_in_sub2": [], "testing.example_scripts.fixtures.fill_fixtures.test_conftest_funcargs_only_available_in_subdir.sub2.test_in_sub2.test_2": [], "testing.example_scripts.fixtures.fill_fixtures.test_conftest_funcargs_only_available_in_subdir.sub2.conftest": ["pytest.fixture"], "testing.example_scripts.fixtures.fill_fixtures.test_conftest_funcargs_only_available_in_subdir.sub2.conftest.arg2": ["pytest.raises"], "testing.example_scripts.fixtures.fill_fixtures.test_conftest_funcargs_only_available_in_subdir.sub2": [], "testing.example_scripts.fixtures.fill_fixtures.test_conftest_funcargs_only_available_in_subdir.sub1.conftest": ["pytest.fixture"], "testing.example_scripts.fixtures.fill_fixtures.test_conftest_funcargs_only_available_in_subdir.sub1.conftest.arg1": ["pytest.raises"], "testing.example_scripts.fixtures.fill_fixtures.test_conftest_funcargs_only_available_in_subdir.sub1": [], "testing.example_scripts.fixtures.fill_fixtures.test_conftest_funcargs_only_available_in_subdir.sub1.test_in_sub1": [], "testing.example_scripts.fixtures.fill_fixtures.test_conftest_funcargs_only_available_in_subdir.sub1.test_in_sub1.test_1": [], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_conftest_conftest.conftest": ["pytest.fixture"], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_conftest_conftest.conftest.spam": [], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_conftest_conftest.pkg.conftest": ["pytest.fixture"], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_conftest_conftest.pkg.conftest.spam": [], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_conftest_conftest.pkg": [], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_conftest_conftest.pkg.test_spam": [], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_conftest_conftest.pkg.test_spam.test_spam": [], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_module_class": ["pytest.fixture"], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_module_class.spam": [], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_module_class.TestSpam": ["pytest.fixture"], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_module_class.TestSpam.spam": [], "testing.example_scripts.fixtures.fill_fixtures.test_extend_fixture_module_class.TestSpam.test_spam": [], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_lookup_classlevel": [], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_lookup_classlevel.TestClass": ["pytest.fixture"], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_lookup_classlevel.TestClass.something": [], "testing.example_scripts.fixtures.fill_fixtures.test_funcarg_lookup_classlevel.TestClass.test_method": [], "testing.example_scripts.config.collect_pytest_prefix.conftest": [], "testing.example_scripts.config.collect_pytest_prefix.test_foo": [], "testing.example_scripts.config.collect_pytest_prefix.test_foo.test_foo": [], "testing.example_scripts.perf_examples.collect_stats.generate_folders": ["testing.example_scripts.perf_examples.collect_stats.generate_folders.generate_folders", "argparse.ArgumentParser", "pathlib.Path"], "testing.example_scripts.perf_examples.collect_stats.generate_folders.generate_folders": ["<builtin>.len", "<builtin>.range", "testing.example_scripts.perf_examples.collect_stats.generate_folders.generate_folders", "<builtin>.str"], "testing.example_scripts.perf_examples.collect_stats.template_test": [], "testing.example_scripts.perf_examples.collect_stats.template_test.test_x": [], "testing.example_scripts": [], "testing.example_scripts.tmpdir.tmp_path_fixture": ["pytest.mark.parametrize"], "testing.example_scripts.tmpdir.tmp_path_fixture.test_fixture": ["<builtin>.list"], "testing.example_scripts.doctest.main_py.__main__": [], "testing.example_scripts.doctest.main_py.__main__.test_this_is_ignored": [], "testing.example_scripts.doctest.main_py.test_normal_module": [], "testing.example_scripts.doctest.main_py.test_normal_module.test_doc": [], "testing.example_scripts.acceptance.fixture_mock_integration": ["unittest.mock.patch.dict", "pytest.fixture"], "testing.example_scripts.acceptance.fixture_mock_integration.my_fixture": [], "testing.example_scripts.acceptance.fixture_mock_integration.test_foobar": [], "testing.example_scripts.conftest_usageerror.conftest": [], "testing.example_scripts.conftest_usageerror.conftest.pytest_configure": ["pytest.UsageError"], "pytest.UsageError": [], "testing.example_scripts.conftest_usageerror.conftest.pytest_unconfigure": ["<builtin>.print"], "testing.example_scripts.marks.marks_considered_keywords.conftest": [], "testing.example_scripts.marks.marks_considered_keywords.test_marks_as_keywords": ["pytest.mark.foo"], "testing.example_scripts.marks.marks_considered_keywords.test_marks_as_keywords.test_mark": [], "testing.example_scripts.issue_519": ["pytest.fixture"], "testing.example_scripts.issue_519.pytest_generate_tests": [], "testing.example_scripts.issue_519.checked_order": ["pprint.pprint"], "testing.example_scripts.issue_519.fix1": [], "testing.example_scripts.issue_519.fix2": [], "testing.example_scripts.issue_519.test_one": [], "testing.example_scripts.issue_519.test_two": [], "testing.logging.test_formatter": [], "testing.logging.test_formatter.test_coloredlogformatter": ["logging.LogRecord", "_pytest.logging.ColoredLevelFormatter", "_pytest._io.TerminalWriter"], "logging.LogRecord": [], "_pytest.logging.ColoredLevelFormatter": [], "testing.logging.test_formatter.test_coloredlogformatter_with_width_precision": ["logging.LogRecord", "_pytest.logging.ColoredLevelFormatter", "_pytest._io.TerminalWriter"], "testing.logging.test_formatter.test_multiline_message": ["logging.LogRecord", "_pytest.logging.PercentStyleMultiline", "<builtin>.dict"], "_pytest.logging.PercentStyleMultiline": [], "testing.logging.test_formatter.test_colored_short_level": ["logging.LogRecord", "_pytest.logging.ColoredLevelFormatter", "_pytest._io.TerminalWriter"], "testing.logging.test_fixture": ["logging.getLogger", "pytest.fixture"], "logging.getLogger": [], "testing.logging.test_fixture.test_fixture_help": [], "testing.logging.test_fixture.test_change_level": [], "testing.logging.test_fixture.test_change_level_undo": [], "testing.logging.test_fixture.test_change_level_undos_handler_level": [], "testing.logging.test_fixture.test_with_statement": [], "testing.logging.test_fixture.test_log_access": [], "testing.logging.test_fixture.test_messages": ["<builtin>.len", "<builtin>.Exception"], "testing.logging.test_fixture.test_record_tuples": [], "testing.logging.test_fixture.test_unicode": [], "testing.logging.test_fixture.test_clear": ["<builtin>.len"], "testing.logging.test_fixture.logging_during_setup_and_teardown": [], "testing.logging.test_fixture.test_caplog_captures_for_all_stages": ["<builtin>.set"], "testing.logging.test_fixture.test_clear_for_call_stage": ["<builtin>.set", "logging.info"], "logging.info": [], "testing.logging.test_fixture.test_ini_controls_global_log_level": [], "testing.logging.test_fixture.test_caplog_can_override_global_log_level": [], "testing.logging.test_fixture.test_caplog_captures_despite_exception": [], "testing.logging.test_fixture.test_log_report_captures_according_to_config_option_upon_failure": [], "testing.logging.test_reporting": ["pytest.mark.parametrize"], "testing.logging.test_reporting.test_nothing_logged": ["pytest.raises"], "testing.logging.test_reporting.test_messages_logged": [], "testing.logging.test_reporting.test_root_logger_affected": ["<builtin>.open", "os.path.isfile", "<builtin>.str"], "os.path.isfile": [], "testing.logging.test_reporting.test_log_cli_level_log_level_interaction": [], "testing.logging.test_reporting.test_setup_logging": [], "testing.logging.test_reporting.test_teardown_logging": [], "testing.logging.test_reporting.test_log_cli_enabled_disabled": [], "testing.logging.test_reporting.test_log_cli_default_level": [], "testing.logging.test_reporting.test_log_cli_default_level_multiple_tests": [], "testing.logging.test_reporting.test_log_cli_default_level_sections": [], "testing.logging.test_reporting.test_live_logs_unknown_sections": [], "testing.logging.test_reporting.test_sections_single_new_line_after_test_outcome": ["re.search"], "testing.logging.test_reporting.test_log_cli_level": [], "testing.logging.test_reporting.test_log_cli_ini_level": [], "testing.logging.test_reporting.test_log_cli_auto_enable": [], "testing.logging.test_reporting.test_log_file_cli": ["<builtin>.open", "os.path.isfile", "<builtin>.str"], "testing.logging.test_reporting.test_log_file_cli_level": ["<builtin>.open", "os.path.isfile", "<builtin>.str"], "testing.logging.test_reporting.test_log_level_not_changed_by_default": [], "testing.logging.test_reporting.test_log_file_ini": ["<builtin>.open", "os.path.isfile", "<builtin>.str"], "testing.logging.test_reporting.test_log_file_ini_level": ["<builtin>.open", "os.path.isfile", "<builtin>.str"], "testing.logging.test_reporting.test_log_file_unicode": ["<builtin>.open", "os.path.isfile", "<builtin>.str"], "testing.logging.test_reporting.test_live_logging_suspends_capture": ["functools.partial", "_pytest.reports.BaseReport.__init__", "typing.cast", "testing.test_conftest.conftest_setinitial.Namespace.__init__", "logging.getLogger", "_pytest.logging._LiveLoggingStreamHandler"], "testing.logging.test_reporting.test_live_logging_suspends_capture.MockCaptureManager": ["contextlib.contextmanager"], "testing.logging.test_reporting.test_live_logging_suspends_capture.MockCaptureManager.global_and_fixture_disabled": ["_pytest.reports.BaseReport.calls.append"], "_pytest.reports.BaseReport.calls.append": [], "testing.logging.test_reporting.test_live_logging_suspends_capture.DummyTerminal.section": [], "_pytest.logging._LiveLoggingStreamHandler": [], "testing.logging.test_reporting.test_collection_live_logging": [], "testing.logging.test_reporting.test_collection_collect_only_live_logging": [], "testing.logging.test_reporting.test_collection_logging_to_file": ["<builtin>.open", "os.path.isfile", "<builtin>.str"], "testing.logging.test_reporting.test_log_in_hooks": ["<builtin>.open", "<builtin>.str"], "testing.logging.test_reporting.test_log_in_runtest_logreport": ["<builtin>.open", "<builtin>.str"], "testing.logging.test_reporting.test_log_set_path": ["<builtin>.repr", "<builtin>.open", "os.path.join", "<builtin>.str"], "testing.logging.test_reporting.test_colored_captured_log": [], "testing.logging.test_reporting.test_colored_ansi_esc_caplogtext": [], "testing.logging.test_reporting.test_logging_emit_error": [], "testing.logging.test_reporting.test_logging_emit_error_supressed": [], "testing.logging.test_reporting.test_log_file_cli_subdirectories_are_successfully_created": ["os.path.join", "os.path.dirname", "os.listdir", "<builtin>.str"], "os.path.dirname": [], "os.listdir": [], "testing.logging.test_reporting.test_disable_loggers": [], "testing.logging.test_reporting.test_disable_loggers_does_not_propagate": [], "testing.logging.test_reporting.test_log_disabling_works_with_log_cli": [], "testing.test_stash": [], "testing.test_stash.test_stash": ["<builtin>.len", "pytest.raises", "_pytest.stash.Stash"], "testing.test_runner": ["pytest.mark.xfail", "pytest.mark.parametrize"], "testing.test_runner.TestSetupState.test_setup": [], "testing.test_runner.TestSetupState.test_teardown_exact_stack_empty": [], "testing.test_runner.TestSetupState.test_setup_fails_and_failure_is_cached": ["pytest.raises"], "testing.test_runner.TestSetupState.test_teardown_multiple_one_fails": ["pytest.raises"], "testing.test_runner.TestSetupState.test_teardown_multiple_one_fails.fin1": [], "testing.test_runner.TestSetupState.test_teardown_multiple_one_fails.fin2": ["<builtin>.Exception"], "testing.test_runner.TestSetupState.test_teardown_multiple_one_fails.fin3": [], "testing.test_runner.TestSetupState.test_teardown_multiple_fail": ["pytest.raises"], "testing.test_runner.TestSetupState.test_teardown_multiple_fail.fin1": ["<builtin>.Exception"], "testing.test_runner.TestSetupState.test_teardown_multiple_fail.fin2": ["<builtin>.Exception"], "testing.test_runner.TestSetupState.test_teardown_multiple_scopes_one_fails": ["pytest.raises"], "testing.test_runner.TestSetupState.test_teardown_multiple_scopes_one_fails.fin_func": ["<builtin>.Exception"], "testing.test_runner.TestSetupState.test_teardown_multiple_scopes_one_fails.fin_module": [], "testing.test_runner.TestSetupState.test_teardown_multiple_scopes_several_fail": ["functools.partial", "<builtin>.TypeError", "<builtin>.KeyError", "<builtin>.isinstance", "<builtin>.ValueError", "pytest.raises"], "testing.test_runner.TestSetupState.test_teardown_multiple_scopes_several_fail.raiser": [], "testing.test_runner.BaseFunctionalTests.test_passfunction": [], "testing.test_runner.BaseFunctionalTests.test_failfunction": [], "testing.test_runner.BaseFunctionalTests.test_skipfunction": [], "testing.test_runner.BaseFunctionalTests.test_skip_in_setup_function": ["<builtin>.print", "<builtin>.len"], "testing.test_runner.BaseFunctionalTests.test_failure_in_setup_function": ["<builtin>.len"], "testing.test_runner.BaseFunctionalTests.test_failure_in_teardown_function": ["<builtin>.print", "<builtin>.len"], "testing.test_runner.BaseFunctionalTests.test_custom_failure_repr": [], "testing.test_runner.BaseFunctionalTests.test_teardown_final_returncode": [], "testing.test_runner.BaseFunctionalTests.test_logstart_logfinish_hooks": [], "testing.test_runner.BaseFunctionalTests.test_exact_teardown_issue90": ["<builtin>.print", "<builtin>.range", "<builtin>.len"], "testing.test_runner.BaseFunctionalTests.test_exact_teardown_issue1206": ["<builtin>.print", "<builtin>.len", "<builtin>.isinstance"], "testing.test_runner.BaseFunctionalTests.test_failure_in_setup_function_ignores_custom_repr": ["<builtin>.len", "<builtin>.print"], "testing.test_runner.BaseFunctionalTests.test_systemexit_does_not_bail_out": [], "testing.test_runner.BaseFunctionalTests.test_exit_propagates": [], "testing.test_runner.TestExecutionNonForked.getrunner": [], "testing.test_runner.TestExecutionNonForked.getrunner.f": ["_pytest.runner.runtestprotocol"], "_pytest.runner.runtestprotocol": [], "testing.test_runner.TestExecutionNonForked.test_keyboardinterrupt_propagates": [], "testing.test_runner.TestSessionReports.test_collect_result": ["<builtin>.len", "_pytest.runner.collect_one_node"], "_pytest.runner.collect_one_node": [], "testing.test_runner.test_report_extra_parameters": ["inspect.signature", "<builtin>.list"], "inspect.signature": [], "testing.test_runner.test_callinfo": ["<builtin>.repr", "_pytest.runner.CallInfo.from_call", "<builtin>.hasattr", "<builtin>.str"], "testing.test_runner.test_callinfo.<lambda1>": [], "_pytest.runner.CallInfo.from_call": [], "testing.test_runner.test_callinfo.<lambda2>": [], "testing.test_runner.test_callinfo.raise_assertion": [], "testing.test_runner.test_runtest_in_module_ordering": [], "testing.test_runner.test_outcomeexception_exceptionattributes": ["_pytest.outcomes.OutcomeException"], "_pytest.outcomes.OutcomeException": [], "testing.test_runner.test_outcomeexception_passes_except_Exception": ["_pytest.outcomes.OutcomeException", "pytest.raises"], "testing.test_runner.test_pytest_exit": ["pytest.exit", "pytest.raises"], "pytest.exit": [], "testing.test_runner.test_pytest_fail": ["pytest.raises", "pytest.fail"], "testing.test_runner.test_pytest_exit_msg": [], "testing.test_runner._strip_resource_warnings": [], "testing.test_runner.test_pytest_exit_returncode": ["testing.test_runner._strip_resource_warnings"], "testing.test_runner.test_pytest_fail_notrace_runtest": [], "testing.test_runner.test_pytest_fail_notrace_collection": [], "testing.test_runner.test_pytest_fail_notrace_non_ascii": [], "testing.test_runner.test_pytest_no_tests_collected_exit_status": [], "testing.test_runner.test_exception_printing_skip": ["pytest.skip", "_pytest._code.ExceptionInfo.from_current"], "testing.test_runner.test_importorskip": ["types.ModuleType", "pathlib.Path", "_pytest._code.ExceptionInfo.from_current", "pytest.raises", "pytest.importorskip"], "testing.test_runner.test_importorskip.f": ["pytest.importorskip"], "testing.test_runner.test_importorskip_imports_last_module_part": ["pytest.importorskip"], "testing.test_runner.test_importorskip_dev_module": ["types.ModuleType", "_pytest._code.ExceptionInfo.from_current", "pytest.raises", "pytest.importorskip"], "testing.test_runner.test_importorskip_module_level": [], "testing.test_runner.test_importorskip_custom_reason": [], "testing.test_runner.test_pytest_cmdline_main": ["subprocess.Popen", "<builtin>.str"], "subprocess.Popen": [], "testing.test_runner.test_unicode_in_longrepr": [], "testing.test_runner.test_failure_in_setup": [], "testing.test_runner.test_makereport_getsource": [], "testing.test_runner.test_makereport_getsource_dynamic_code": [], "testing.test_runner.test_makereport_getsource_dynamic_code.findsource": ["inspect.findsource", "<builtin>.IndexError"], "testing.test_runner.test_store_except_info_on_error": ["_pytest.runner.pytest_runtest_call", "<builtin>.isinstance", "<builtin>.hasattr"], "testing.test_runner.test_store_except_info_on_error.ItemMightRaise.runtest": ["<builtin>.IndexError"], "_pytest.runner.pytest_runtest_call": [], "testing.test_runner.test_current_test_env_var": [], "testing.test_runner.TestReportContents.getrunner": [], "testing.test_runner.TestReportContents.getrunner.<lambda1>": ["_pytest.runner.runtestprotocol"], "testing.test_runner.TestReportContents.test_longreprtext_pass": [], "testing.test_runner.TestReportContents.test_longreprtext_skip": ["<builtin>.isinstance"], "testing.test_runner.TestReportContents.test_longreprtext_collect_skip": ["<builtin>.isinstance"], "testing.test_runner.TestReportContents.test_longreprtext_failure": [], "testing.test_runner.TestReportContents.test_captured_text": [], "testing.test_runner.TestReportContents.test_no_captured_text": [], "testing.test_runner.TestReportContents.test_longrepr_type": ["<builtin>.isinstance"], "testing.test_runner.test_outcome_exception_bad_msg": ["_pytest.outcomes.OutcomeException", "pytest.raises", "<builtin>.str"], "testing.test_runner.test_outcome_exception_bad_msg.func": ["<builtin>.NotImplementedError"], "testing.test_capture": ["contextlib.contextmanager", "pytest.mark.skipif", "pytest.fixture", "sys.platform.startswith", "pytest.mark.parametrize"], "testing.test_capture.StdCaptureFD": ["_pytest.capture.FDCapture", "_pytest.capture.MultiCapture"], "_pytest.capture.FDCapture": [], "_pytest.capture.MultiCapture": [], "testing.test_capture.StdCapture": ["_pytest.capture.SysCapture", "_pytest.capture.MultiCapture"], "_pytest.capture.SysCapture": [], "testing.test_capture.TeeStdCapture": ["_pytest.capture.SysCapture", "_pytest.capture.MultiCapture"], "testing.test_capture.TestCaptureManager": ["pytest.mark.parametrize"], "testing.test_capture.TestCaptureManager.test_capturing_basic_api": ["<builtin>.print", "testing.test_capture.StdCaptureFD", "_pytest.capture.CaptureManager"], "_pytest.capture.CaptureManager": [], "testing.test_capture.TestCaptureManager.test_init_capturing": ["testing.test_capture.StdCaptureFD", "_pytest.capture.CaptureManager", "pytest.raises"], "testing.test_capture.test_capturing_unicode": [], "testing.test_capture.test_capturing_bytes_in_utf8_encoding": [], "testing.test_capture.test_collect_capturing": [], "testing.test_capture.TestPerTestCapturing.test_capture_and_fixtures": [], "testing.test_capture.TestPerTestCapturing": ["pytest.mark.xfail"], "testing.test_capture.TestPerTestCapturing.test_capture_scope_cache": [], "testing.test_capture.TestPerTestCapturing.test_no_carry_over": [], "testing.test_capture.TestPerTestCapturing.test_teardown_capturing": [], "testing.test_capture.TestPerTestCapturing.test_teardown_capturing_final": [], "testing.test_capture.TestPerTestCapturing.test_capturing_outerr": [], "testing.test_capture.TestLoggingInteraction.test_logging_stream_ownership": [], "testing.test_capture.TestLoggingInteraction.test_logging_and_immediate_setupteardown": ["<builtin>.print"], "testing.test_capture.TestLoggingInteraction.test_logging_and_crossscope_fixtures": ["<builtin>.print"], "testing.test_capture.TestLoggingInteraction.test_conftestlogging_is_shown": [], "testing.test_capture.TestLoggingInteraction.test_conftestlogging_and_test_logging": [], "testing.test_capture.TestLoggingInteraction.test_logging_after_cap_stopped": [], "testing.test_capture.TestCaptureFixture": ["pytest.mark.parametrize"], "testing.test_capture.TestCaptureFixture.test_std_functional": [], "testing.test_capture.TestCaptureFixture.test_capsyscapfd": [], "testing.test_capture.TestCaptureFixture.test_capturing_getfixturevalue": [], "testing.test_capture.TestCaptureFixture.test_capsyscapfdbinary": [], "testing.test_capture.TestCaptureFixture.test_capture_is_represented_on_failure_issue128": [], "testing.test_capture.TestCaptureFixture.test_stdfd_functional": [], "testing.test_capture.TestCaptureFixture.test_cafd_preserves_newlines": ["<builtin>.print"], "testing.test_capture.TestCaptureFixture.test_capfdbinary": [], "testing.test_capture.TestCaptureFixture.test_capsysbinary": ["<builtin>.str"], "testing.test_capture.TestCaptureFixture.test_partial_setup_failure": [], "testing.test_capture.TestCaptureFixture.test_keyboardinterrupt_disables_capturing": [], "testing.test_capture.TestCaptureFixture.test_capture_and_logging": [], "testing.test_capture.TestCaptureFixture.test_disabled_capture_fixture": [], "testing.test_capture.TestCaptureFixture.test_disabled_capture_fixture_twice": [], "testing.test_capture.TestCaptureFixture.test_fixture_use_by_other_fixtures": [], "testing.test_capture.TestCaptureFixture.test_fixture_use_by_other_fixtures_teardown": [], "testing.test_capture.test_setup_failure_does_not_kill_capturing": ["textwrap.dedent"], "testing.test_capture.test_capture_conftest_runtest_setup": [], "testing.test_capture.test_capture_badoutput_issue412": [], "testing.test_capture.test_capture_early_option_parsing": [], "testing.test_capture.test_capture_binary_output": [], "testing.test_capture.test_error_during_readouterr": [], "testing.test_capture.TestCaptureIO.test_text": ["_pytest.capture.CaptureIO"], "_pytest.capture.CaptureIO": [], "testing.test_capture.TestCaptureIO.test_unicode_and_str_mixture": ["_pytest.capture.CaptureIO", "pytest.raises"], "testing.test_capture.TestCaptureIO.test_write_bytes_to_buffer": ["_pytest.capture.CaptureIO"], "testing.test_capture.TestTeeCaptureIO.test_text": ["_pytest.capture.TeeCaptureIO", "io.StringIO"], "_pytest.capture.TeeCaptureIO": [], "testing.test_capture.TestTeeCaptureIO.test_unicode_and_str_mixture": ["_pytest.capture.TeeCaptureIO", "io.StringIO", "pytest.raises"], "testing.test_capture.test_dontreadfrominput": ["_pytest.capture.DontReadFromInput", "<builtin>.iter", "pytest.raises"], "_pytest.capture.DontReadFromInput": [], "<builtin>.iter": [], "testing.test_capture.test_captureresult": ["<builtin>.len", "<builtin>.hash", "pytest.raises", "<builtin>.next", "_pytest.capture.CaptureResult", "<builtin>.iter"], "_pytest.capture.CaptureResult": [], "testing.test_capture.tmpfile": [], "testing.test_capture.lsof_check": ["<builtin>.len", "pytest.skip", "<builtin>.str", "subprocess.check_output", "os.getpid"], "os.getpid": [], "testing.test_capture.TestFDCapture.test_simple": ["_pytest.capture.FDCapture", "os.write", "pytest.raises"], "os.write": [], "testing.test_capture.TestFDCapture.test_simple_many": ["<builtin>.range", "testing.test_capture.TestFDCapture.test_simple"], "testing.test_capture.TestFDCapture.test_simple_many_check_open_files": ["testing.test_capture.lsof_check", "testing.test_capture.TestFDCapture.test_simple_many"], "testing.test_capture.TestFDCapture.test_simple_fail_second_start": ["_pytest.capture.FDCapture", "pytest.raises"], "testing.test_capture.TestFDCapture.test_stderr": ["<builtin>.print", "_pytest.capture.FDCapture"], "testing.test_capture.TestFDCapture.test_stdin": ["os.read", "_pytest.capture.FDCapture"], "os.read": [], "testing.test_capture.TestFDCapture.test_writeorg": ["<builtin>.open", "_pytest.capture.FDCapture"], "testing.test_capture.TestFDCapture.test_simple_resume_suspend": ["os.write", "sys.stdout.write", "pytest.raises", "<builtin>.repr", "_pytest.capture.FDCapture", "testing.test_capture.saved_fd"], "testing.test_capture.saved_fd": ["os.dup2", "os.dup", "os.close"], "testing.test_capture.TestFDCapture.test_capfd_sys_stdout_mode": [], "os.dup": [], "os.dup2": [], "testing.test_capture.TestStdCapture": ["contextlib.contextmanager", "<builtin>.staticmethod"], "testing.test_capture.TestStdCapture.getcapture": [], "testing.test_capture.TestStdCapture.test_capturing_done_simple": ["sys.stderr.write", "sys.stdout.write", "testing.test_capture.TestStdCapture.getcapture"], "sys.stderr.write": [], "testing.test_capture.TestStdCapture.test_capturing_reset_simple": ["<builtin>.print", "sys.stderr.write", "testing.test_capture.TestStdCapture.getcapture"], "testing.test_capture.TestStdCapture.test_capturing_readouterr": ["<builtin>.print", "sys.stderr.write", "testing.test_capture.TestStdCapture.getcapture"], "testing.test_capture.TestStdCapture.test_capture_results_accessible_by_attribute": ["sys.stderr.write", "sys.stdout.write", "testing.test_capture.TestStdCapture.getcapture"], "testing.test_capture.TestStdCapture.test_capturing_readouterr_unicode": ["<builtin>.print", "testing.test_capture.TestStdCapture.getcapture"], "testing.test_capture.TestStdCapture.test_reset_twice_error": ["<builtin>.print", "pytest.raises", "testing.test_capture.TestStdCapture.getcapture"], "testing.test_capture.TestStdCapture.test_capturing_modify_sysouterr_in_between": ["<builtin>.print", "_pytest.capture.CaptureIO", "sys.stdout.write", "sys.stderr.write", "testing.test_capture.TestStdCapture.getcapture"], "testing.test_capture.TestStdCapture.test_capturing_error_recursive": ["<builtin>.print", "testing.test_capture.TestStdCapture.getcapture"], "testing.test_capture.TestStdCapture.test_just_out_capture": ["sys.stderr.write", "sys.stdout.write", "testing.test_capture.TestStdCapture.getcapture"], "testing.test_capture.TestStdCapture.test_just_err_capture": ["sys.stderr.write", "sys.stdout.write", "testing.test_capture.TestStdCapture.getcapture"], "testing.test_capture.TestStdCapture.test_stdin_restored": ["testing.test_capture.TestStdCapture.getcapture"], "testing.test_capture.TestStdCapture.test_stdin_nulled_by_default": ["<builtin>.print", "pytest.raises", "testing.test_capture.TestStdCapture.getcapture"], "testing.test_capture.TestTeeStdCapture": ["<builtin>.staticmethod"], "testing.test_capture.TestTeeStdCapture.test_capturing_error_recursive": ["<builtin>.print", "testing.test_capture.TestStdCapture.getcapture"], "testing.test_capture.TestStdCaptureFD": ["<builtin>.staticmethod"], "testing.test_capture.TestStdCaptureFD.test_simple_only_fd": [], "testing.test_capture.TestStdCaptureFD.test_intermingling": ["os.write", "sys.stdout.write", "sys.stderr.write", "sys.stderr.flush", "<builtin>.str", "sys.stdout.flush", "testing.test_capture.TestStdCapture.getcapture"], "sys.stdout.flush": [], "sys.stderr.flush": [], "testing.test_capture.TestStdCaptureFD.test_many": ["<builtin>.range", "testing.test_capture.StdCaptureFD", "testing.test_capture.lsof_check"], "testing.test_capture.TestStdCaptureFDinvalidFD.test_stdcapture_fd_invalid_fd": [], "testing.test_capture.TestStdCaptureFDinvalidFD.test_fdcapture_invalid_fd_with_fd_reuse": ["_pytest.capture.FDCaptureBinary", "os.write", "os.close", "pytest.raises", "testing.test_capture.saved_fd"], "_pytest.capture.FDCaptureBinary": [], "testing.test_capture.TestStdCaptureFDinvalidFD.test_fdcapture_invalid_fd_without_fd_reuse": ["_pytest.capture.FDCaptureBinary", "os.write", "os.close", "pytest.raises", "testing.test_capture.saved_fd"], "testing.test_capture.test_capture_not_started_but_reset": ["testing.test_capture.StdCapture"], "testing.test_capture.test_using_capsys_fixture_works_with_sys_stdout_encoding": ["<builtin>.print"], "testing.test_capture.test_capsys_results_accessible_by_attribute": ["sys.stderr.write", "sys.stdout.write"], "testing.test_capture.test_fdcapture_tmpfile_remains_the_same": ["testing.test_capture.StdCaptureFD"], "testing.test_capture.test_close_and_capture_again": [], "testing.test_capture.test_capturing_and_logging_fundamentals": [], "testing.test_capture.test_error_attribute_issue555": [], "testing.test_capture.test_windowsconsoleio_workaround_non_standard_streams": ["_pytest.capture._windowsconsoleio_workaround", "_pytest.reports.BaseReport.__init__", "testing.test_conftest.conftest_setinitial.Namespace.__init__", "typing.cast"], "testing.test_capture.test_windowsconsoleio_workaround_non_standard_streams.DummyStream.write": [], "_pytest.capture._windowsconsoleio_workaround": [], "testing.test_capture.test_dontreadfrominput_has_encoding": [], "testing.test_capture.test_crash_on_closing_tmpfile_py27": ["<builtin>.str"], "testing.test_capture.test_global_capture_with_live_logging": ["<builtin>.open"], "testing.test_capture.test_capture_with_live_logging": [], "testing.test_capture.test_typeerror_encodedfile_write": ["<builtin>.str"], "testing.test_capture.test_stderr_write_returns_len": ["sys.stderr.write"], "testing.test_capture.test_encodedfile_writelines": ["_pytest.capture.EncodedFile", "pytest.raises"], "_pytest.capture.EncodedFile": [], "testing.test_capture.test__get_multicapture": ["<builtin>.isinstance", "_pytest.capture._get_multicapture", "pytest.raises"], "_pytest.capture._get_multicapture": [], "testing.test_capture.test_logging_while_collecting": [], "testing.test_helpconfig": [], "testing.test_helpconfig.test_version_verbose": [], "testing.test_helpconfig.test_version_less_verbose": [], "testing.test_helpconfig.test_versions": ["<builtin>.isinstance"], "testing.test_helpconfig.test_help": [], "testing.test_helpconfig.test_none_help_param_raises_exception": [], "testing.test_helpconfig.test_empty_help_param": [], "testing.test_helpconfig.test_hookvalidation_unknown": [], "testing.test_helpconfig.test_hookvalidation_optional": [], "testing.test_helpconfig.test_traceconfig": [], "testing.test_helpconfig.test_debug": [], "testing.test_helpconfig.test_PYTEST_DEBUG": [], "testing.test_assertrewrite": ["pytest.param", "pytest.mark.skipif", "pytest.mark.parametrize"], "testing.test_assertrewrite.rewrite": ["_pytest.assertion.rewrite.rewrite_asserts", "ast.parse"], "ast.parse": [], "_pytest.assertion.rewrite.rewrite_asserts": [], "testing.test_assertrewrite.getmsg": ["<builtin>.exec", "pytest.fail", "<builtin>.str", "<builtin>.compile", "testing.test_assertrewrite.rewrite", "sys.exc_info"], "testing.test_assertrewrite.TestAssertionRewrite.test_place_initial_imports": ["<builtin>.isinstance", "testing.test_assertrewrite.rewrite"], "testing.test_assertrewrite.TestAssertionRewrite.test_location_is_set": ["<builtin>.isinstance", "testing.test_assertrewrite.rewrite", "textwrap.dedent"], "testing.test_assertrewrite.TestAssertionRewrite.test_dont_rewrite": ["<builtin>.len", "<builtin>.isinstance", "testing.test_assertrewrite.rewrite"], "testing.test_assertrewrite.TestAssertionRewrite.test_dont_rewrite_plugin": [], "testing.test_assertrewrite.TestAssertionRewrite.test_rewrites_plugin_as_a_package": [], "testing.test_assertrewrite.TestAssertionRewrite.test_honors_pep_235": ["<builtin>.str"], "testing.test_assertrewrite.TestAssertionRewrite.test_name": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_name.f1": [], "testing.test_assertrewrite.TestAssertionRewrite.test_name.f2": [], "testing.test_assertrewrite.TestAssertionRewrite.test_name.f3": [], "testing.test_assertrewrite.TestAssertionRewrite.test_name.f4": [], "testing.test_assertrewrite.TestAssertionRewrite.test_name.f5": [], "testing.test_assertrewrite.TestAssertionRewrite.test_assertrepr_compare_same_width": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_assertrepr_compare_same_width.f": [], "testing.test_assertrewrite.TestAssertionRewrite.test_dont_rewrite_if_hasattr_fails": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_dont_rewrite_if_hasattr_fails.Y.__getattr__": ["<builtin>.KeyError"], "testing.test_assertrewrite.TestAssertionRewrite.test_dont_rewrite_if_hasattr_fails.Y.__repr__": [], "testing.test_assertrewrite.TestAssertionRewrite.test_dont_rewrite_if_hasattr_fails.Y.__init__": [], "testing.test_assertrewrite.TestAssertionRewrite.test_dont_rewrite_if_hasattr_fails.f": [], "testing.test_assertrewrite.TestAssertionRewrite.test_assert_already_has_message": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_assert_already_has_message.f": [], "testing.test_assertrewrite.TestAssertionRewrite.test_assertion_message": [], "testing.test_assertrewrite.TestAssertionRewrite.test_assertion_message_multiline": [], "testing.test_assertrewrite.TestAssertionRewrite.test_assertion_message_tuple": [], "testing.test_assertrewrite.TestAssertionRewrite.test_assertion_message_expr": [], "testing.test_assertrewrite.TestAssertionRewrite.test_assertion_message_escape": [], "testing.test_assertrewrite.TestAssertionRewrite.test_assertion_messages_bytes": [], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop.f1": [], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop.f2": [], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop.f3": [], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop.f4": [], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop.f5": [], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop.x": [], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop.f6": ["testing.test_assertrewrite.TestAssertionRewrite.test_boolop.x"], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop.f7": ["testing.test_assertrewrite.TestAssertionRewrite.test_boolop.x"], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop.f8": [], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop.f9": [], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop.f10": [], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop.f11": ["testing.test_assertrewrite.TestAssertionRewrite.test_boolop.f11.<lambda1>"], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop.f11.<lambda1>": [], "testing.test_assertrewrite.TestAssertionRewrite.test_short_circuit_evaluation": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_short_circuit_evaluation.f1": [], "testing.test_assertrewrite.TestAssertionRewrite.test_short_circuit_evaluation.f2": [], "testing.test_assertrewrite.TestAssertionRewrite.test_unary_op": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_unary_op.f1": [], "testing.test_assertrewrite.TestAssertionRewrite.test_unary_op.f2": [], "testing.test_assertrewrite.TestAssertionRewrite.test_unary_op.f3": [], "testing.test_assertrewrite.TestAssertionRewrite.test_unary_op.f4": [], "testing.test_assertrewrite.TestAssertionRewrite.test_binary_op": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_binary_op.f1": [], "testing.test_assertrewrite.TestAssertionRewrite.test_binary_op.f2": [], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop_percent": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop_percent.f1": [], "testing.test_assertrewrite.TestAssertionRewrite.test_boolop_percent.f2": [], "testing.test_assertrewrite.TestAssertionRewrite.test_at_operator_issue1290": [], "testing.test_assertrewrite.TestAssertionRewrite.test_starred_with_side_effect": [], "testing.test_assertrewrite.TestAssertionRewrite.test_call": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_call.g": [], "testing.test_assertrewrite.TestAssertionRewrite.test_call.f1": ["testing.test_assertrewrite.TestAssertionRewrite.test_call.g"], "testing.test_assertrewrite.TestAssertionRewrite.test_call.f2": ["testing.test_assertrewrite.TestAssertionRewrite.test_call.g"], "testing.test_assertrewrite.TestAssertionRewrite.test_call.f3": ["testing.test_assertrewrite.TestAssertionRewrite.test_call.g"], "testing.test_assertrewrite.TestAssertionRewrite.test_call.f4": ["testing.test_assertrewrite.TestAssertionRewrite.test_call.g"], "testing.test_assertrewrite.TestAssertionRewrite.test_call.f5": ["testing.test_assertrewrite.TestAssertionRewrite.test_call.g"], "testing.test_assertrewrite.TestAssertionRewrite.test_call.f6": ["testing.test_assertrewrite.TestAssertionRewrite.test_call.g"], "testing.test_assertrewrite.TestAssertionRewrite.test_call.f7": ["testing.test_assertrewrite.TestAssertionRewrite.test_call.g"], "testing.test_assertrewrite.TestAssertionRewrite.test_attribute": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_attribute.f1": [], "testing.test_assertrewrite.TestAssertionRewrite.test_attribute.f2": [], "testing.test_assertrewrite.TestAssertionRewrite.test_comparisons": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_comparisons.f1": ["<builtin>.range"], "testing.test_assertrewrite.TestAssertionRewrite.test_comparisons.f2": ["<builtin>.range"], "testing.test_assertrewrite.TestAssertionRewrite.test_comparisons.f3": ["<builtin>.range"], "testing.test_assertrewrite.TestAssertionRewrite.test_comparisons.f4": ["<builtin>.range"], "testing.test_assertrewrite.TestAssertionRewrite.test_comparisons.f5": ["<builtin>.range"], "testing.test_assertrewrite.TestAssertionRewrite.test_len": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_len.f": ["<builtin>.len", "<builtin>.range", "<builtin>.list"], "testing.test_assertrewrite.TestAssertionRewrite.test_custom_reprcompare": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_custom_reprcompare.my_reprcompare1": [], "testing.test_assertrewrite.TestAssertionRewrite.test_custom_reprcompare.f1": [], "testing.test_assertrewrite.TestAssertionRewrite.test_custom_reprcompare.my_reprcompare2": [], "testing.test_assertrewrite.TestAssertionRewrite.test_custom_reprcompare.f2": [], "testing.test_assertrewrite.TestAssertionRewrite.test_assert_raising__bool__in_comparison": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_assert_raising__bool__in_comparison.f": ["testing.test_assertrewrite.TestAssertionRewrite.test_assert_raising__bool__in_comparison.f.myany"], "testing.test_assertrewrite.TestAssertionRewrite.test_assert_raising__bool__in_comparison.f.A.__bool__": ["<builtin>.ValueError"], "testing.test_assertrewrite.TestAssertionRewrite.test_assert_raising__bool__in_comparison.f.A.__lt__": [], "testing.test_assertrewrite.TestAssertionRewrite.test_assert_raising__bool__in_comparison.f.A.__repr__": [], "testing.test_assertrewrite.TestAssertionRewrite.test_assert_raising__bool__in_comparison.f.myany": [], "testing.test_assertrewrite.TestAssertionRewrite.test_formatchar": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_formatchar.f": [], "testing.test_assertrewrite.TestAssertionRewrite.test_custom_repr": ["testing.test_assertrewrite.getmsg", "_pytest.assertion.util._format_lines"], "testing.test_assertrewrite.TestAssertionRewrite.test_custom_repr.f": [], "testing.test_assertrewrite.TestAssertionRewrite.test_custom_repr.f.Foo.__repr__": [], "_pytest.assertion.util._format_lines": [], "testing.test_assertrewrite.TestAssertionRewrite.test_custom_repr_non_ascii": ["testing.test_assertrewrite.getmsg"], "testing.test_assertrewrite.TestAssertionRewrite.test_custom_repr_non_ascii.f": [], "testing.test_assertrewrite.TestAssertionRewrite.test_custom_repr_non_ascii.f.A.__repr__": [], "testing.test_assertrewrite.TestRewriteOnImport.test_pycache_is_a_file": [], "testing.test_assertrewrite.TestRewriteOnImport.test_pycache_is_readonly": [], "testing.test_assertrewrite.TestRewriteOnImport.test_zipfile": ["zipfile.ZipFile", "<builtin>.str"], "zipfile.ZipFile": [], "testing.test_assertrewrite.TestRewriteOnImport": ["pytest.mark.skipif"], "testing.test_assertrewrite.TestRewriteOnImport.test_load_resource_via_files_with_rewrite": [], "testing.test_assertrewrite.TestRewriteOnImport.test_readonly": [], "testing.test_assertrewrite.TestRewriteOnImport.test_dont_write_bytecode": [], "testing.test_assertrewrite.TestRewriteOnImport.test_orphaned_pyc_file": ["<builtin>.len", "py_compile.compile", "os.path.exists", "os.remove", "glob.glob", "os.rename"], "py_compile.compile": [], "glob.glob": [], "os.rename": [], "testing.test_assertrewrite.TestRewriteOnImport.test_cached_pyc_includes_pytest_version": ["glob.glob"], "testing.test_assertrewrite.TestRewriteOnImport.test_pyc_vs_pyo": ["os.listdir", "pathlib.Path", "_pytest.pathlib.make_numbered_dir"], "testing.test_assertrewrite.TestRewriteOnImport.test_package": [], "testing.test_assertrewrite.TestRewriteOnImport.test_translate_newlines": [], "testing.test_assertrewrite.TestRewriteOnImport.test_package_without__init__py": [], "testing.test_assertrewrite.TestRewriteOnImport.test_rewrite_warning": [], "testing.test_assertrewrite.TestRewriteOnImport.test_rewrite_module_imported_from_conftest": [], "testing.test_assertrewrite.TestRewriteOnImport.test_remember_rewritten_modules": ["_pytest.assertion.rewrite.AssertionRewritingHook", "importlib.util.module_from_spec"], "_pytest.assertion.rewrite.AssertionRewritingHook": [], "testing.test_assertrewrite.TestRewriteOnImport.test_remember_rewritten_modules.<lambda1>": [], "importlib.util.module_from_spec": [], "testing.test_assertrewrite.TestRewriteOnImport.test_rewrite_warning_using_pytest_plugins": [], "testing.test_assertrewrite.TestRewriteOnImport.test_rewrite_warning_using_pytest_plugins_env_var": [], "testing.test_assertrewrite.TestAssertionRewriteHookDetails.test_sys_meta_path_munged": [], "testing.test_assertrewrite.TestAssertionRewriteHookDetails.test_write_pyc": ["unittest.mock.patch.object", "os.stat", "_pytest.assertion.AssertionState", "_pytest.assertion.rewrite._write_pyc", "<builtin>.str", "<builtin>.compile"], "_pytest.assertion.AssertionState": [], "_pytest.assertion.rewrite._write_pyc": [], "testing.test_assertrewrite.TestAssertionRewriteHookDetails.test_resources_provider_for_loader": ["pytest.importorskip"], "testing.test_assertrewrite.TestAssertionRewriteHookDetails.test_read_pyc": ["<builtin>.len", "py_compile.compile", "_pytest.assertion.rewrite._read_pyc", "pathlib.Path", "<builtin>.str"], "_pytest.assertion.rewrite._read_pyc": [], "testing.test_assertrewrite.TestAssertionRewriteHookDetails.test_read_pyc_success": ["_pytest.assertion.rewrite._rewrite_test", "pathlib.Path", "_pytest.assertion.rewrite._read_pyc", "_pytest.assertion.AssertionState", "_pytest.assertion.rewrite._write_pyc", "<builtin>.str"], "_pytest.assertion.rewrite._rewrite_test": [], "testing.test_assertrewrite.TestAssertionRewriteHookDetails.test_read_pyc_more_invalid": ["<builtin>.len", "_pytest.assertion.rewrite._read_pyc", "os.utime", "<builtin>.str", "<builtin>.compile", "marshal.dumps"], "marshal.dumps": [], "testing.test_assertrewrite.TestAssertionRewriteHookDetails.test_reload_is_same_and_reloads": [], "testing.test_assertrewrite.TestAssertionRewriteHookDetails.test_get_data_support": ["textwrap.dedent"], "testing.test_assertrewrite.test_issue731": [], "testing.test_assertrewrite.TestIssue925.test_simple_case": [], "testing.test_assertrewrite.TestIssue925.test_long_case": [], "testing.test_assertrewrite.TestIssue925.test_many_brackets": [], "testing.test_assertrewrite.TestIssue2121.test_rewrite_python_files_contain_subdirs": [], "testing.test_assertrewrite.test_source_mtime_long_long": ["os.utime", "<builtin>.str"], "testing.test_assertrewrite.test_rewrite_infinite_recursion": ["<builtin>.len", "_pytest.assertion.rewrite.AssertionRewritingHook", "importlib.util.module_from_spec"], "testing.test_assertrewrite.test_rewrite_infinite_recursion.spy_write_pyc": ["_pytest.assertion.rewrite._write_pyc"], "testing.test_assertrewrite.TestEarlyRewriteBailout": ["pytest.mark.skipif", "sys.platform.startswith", "pytest.fixture"], "testing.test_assertrewrite.TestEarlyRewriteBailout.hook": ["<builtin>.set", "unittest.mock.patch.object", "_pytest.assertion.rewrite.AssertionRewritingHook"], "testing.test_assertrewrite.TestEarlyRewriteBailout.hook.StubSession.isinitpath": [], "testing.test_assertrewrite.TestEarlyRewriteBailout.hook.spy_find_spec": ["importlib.machinery.PathFinder.find_spec"], "importlib.machinery.PathFinder.find_spec": [], "testing.test_assertrewrite.TestEarlyRewriteBailout.test_basic": [], "testing.test_assertrewrite.TestEarlyRewriteBailout.test_pattern_contains_subdirectories": ["unittest.mock.patch.object"], "testing.test_assertrewrite.TestEarlyRewriteBailout.test_cwd_changed": [], "testing.test_assertrewrite.TestAssertionPass.test_option_default": [], "testing.test_assertrewrite.TestAssertionPass": ["pytest.fixture"], "testing.test_assertrewrite.TestAssertionPass.flag_on": [], "testing.test_assertrewrite.TestAssertionPass.hook_on": [], "testing.test_assertrewrite.TestAssertionPass.test_hook_call": [], "testing.test_assertrewrite.TestAssertionPass.test_hook_call_with_parens": [], "testing.test_assertrewrite.TestAssertionPass.test_hook_not_called_without_hookimpl": [], "testing.test_assertrewrite.TestAssertionPass.test_hook_not_called_without_hookimpl.raise_on_assertionpass": ["<builtin>.Exception"], "testing.test_assertrewrite.TestAssertionPass.test_hook_not_called_without_cmd_option": [], "testing.test_assertrewrite.TestAssertionPass.test_hook_not_called_without_cmd_option.raise_on_assertionpass": ["<builtin>.Exception"], "testing.test_assertrewrite.test_get_assertion_exprs": ["_pytest.assertion.rewrite._get_assertion_exprs"], "_pytest.assertion.rewrite._get_assertion_exprs": [], "testing.test_assertrewrite.test_try_makedirs": ["<builtin>.FileNotFoundError", "functools.partial", "<builtin>.OSError", "<builtin>.PermissionError", "pytest.raises", "<builtin>.NotADirectoryError", "_pytest.assertion.rewrite.try_makedirs"], "_pytest.assertion.rewrite.try_makedirs": [], "testing.test_assertrewrite.test_try_makedirs.fake_mkdir": ["<builtin>.isinstance"], "<builtin>.NotADirectoryError": [], "testing.test_assertrewrite.TestPyCacheDir": ["sys.platform.startswith", "pytest.mark.skipif", "pytest.mark.parametrize"], "testing.test_assertrewrite.TestPyCacheDir.test_get_cache_dir": ["_pytest.assertion.rewrite.get_cache_dir", "pytest.skip", "pathlib.Path"], "_pytest.assertion.rewrite.get_cache_dir": [], "testing.test_assertrewrite.TestPyCacheDir.test_sys_pycache_prefix_integration": ["_pytest.assertion.rewrite.get_cache_dir", "<builtin>.str"], "testing.test_assertrewrite.TestReprSizeVerbosity": ["pytest.mark.parametrize"], "testing.test_assertrewrite.TestReprSizeVerbosity.test_get_maxsize_for_saferepr": ["typing.cast", "_pytest.assertion.rewrite._get_maxsize_for_saferepr"], "testing.test_assertrewrite.TestReprSizeVerbosity.test_get_maxsize_for_saferepr.FakeConfig.getoption": [], "_pytest.assertion.rewrite._get_maxsize_for_saferepr": [], "testing.test_assertrewrite.TestReprSizeVerbosity.create_test_file": [], "testing.test_assertrewrite.TestReprSizeVerbosity.test_default_verbosity": ["testing.test_assertrewrite.TestReprSizeVerbosity.create_test_file"], "testing.test_assertrewrite.TestReprSizeVerbosity.test_increased_verbosity": ["testing.test_assertrewrite.TestReprSizeVerbosity.create_test_file"], "testing.test_assertrewrite.TestReprSizeVerbosity.test_max_increased_verbosity": ["testing.test_assertrewrite.TestReprSizeVerbosity.create_test_file"], "testing.test_entry_points": [], "testing.test_entry_points.test_pytest_entry_points_are_identical": ["_pytest.compat.importlib_metadata.distribution"], "_pytest.compat.importlib_metadata.distribution": [], "testing.test_python_path": ["pytest.fixture"], "testing.test_python_path.file_structure": ["textwrap.dedent"], "testing.test_python_path.test_one_dir": [], "testing.test_python_path.test_two_dirs": [], "testing.test_python_path.test_module_not_found": [], "testing.test_python_path.test_no_ini": [], "testing.test_python_path.test_clean_up": ["<builtin>.any"], "testing.test_python_path.test_clean_up.Plugin": ["pytest.hookimpl"], "testing.test_python_path.test_clean_up.Plugin.pytest_unconfigure": ["sys.path.copy"], "sys.path.copy": [], "testing.test_terminal": ["pytest.mark.xfail", "pytest.mark.skip", "pytest.mark.filterwarnings", "pytest.fixture", "collections.namedtuple", "pytest.mark.parametrize"], "testing.test_terminal.Option.__init__": [], "testing.test_terminal.Option.args": [], "testing.test_terminal.option": [], "testing.test_terminal.test_plugin_nameversion": ["_pytest.terminal._plugin_nameversions"], "_pytest.terminal._plugin_nameversions": [], "testing.test_terminal.TestTerminal.test_pass_skip_fail": [], "testing.test_terminal.TestTerminal.test_internalerror": ["_pytest.terminal.TerminalReporter", "<builtin>.ValueError", "pytest.raises"], "_pytest.terminal.TerminalReporter": [], "testing.test_terminal.TestTerminal.test_writeline": ["_pytest.terminal.TerminalReporter"], "testing.test_terminal.TestTerminal.test_show_runtest_logstart": ["_pytest.terminal.TerminalReporter", "<builtin>.str"], "testing.test_terminal.TestTerminal.test_runtest_location_shown_before_test_starts": [], "testing.test_terminal.TestTerminal.test_report_collect_after_half_a_second": [], "testing.test_terminal.TestTerminal.test_itemreport_subclasses_show_subclassed_file": [], "testing.test_terminal.TestTerminal.test_itemreport_directclasses_not_shown_as_subclasses": ["textwrap.dedent"], "testing.test_terminal.TestTerminal": ["pytest.mark.parametrize"], "testing.test_terminal.TestTerminal.test_keyboard_interrupt": [], "testing.test_terminal.TestTerminal.test_keyboard_in_sessionstart": [], "testing.test_terminal.TestTerminal.test_collect_single_item": [], "testing.test_terminal.TestTerminal.test_rewrite": ["_pytest.reports.TestReport", "testing.logging.test_reporting.CaptureManager", "testing.test_terminal.Config", "testing.test_assertrewrite.Config", "testing.test_terminal.TestReport", "testing.test_terminal.CollectReport", "typing.TextIO", "_pytest.terminal.TerminalReporter", "testing.test_tmpdir.Config", "_pytest.config.Config", "testing.test_junitxml.TestReport"], "_pytest.reports.TestReport": [], "testing.logging.test_reporting.CaptureManager": [], "testing.test_terminal.Config": [], "testing.test_assertrewrite.Config": [], "testing.test_terminal.TestReport": [], "testing.test_terminal.CollectReport": [], "typing.TextIO": [], "testing.test_tmpdir.Config": [], "_pytest.config.Config": [], "testing.test_junitxml.TestReport": [], "testing.test_terminal.TestTerminal.test_rewrite.<lambda1>": [], "testing.test_terminal.TestTerminal.test_report_teststatus_explicit_markup": [], "testing.test_terminal.TestTerminal.test_verbose_skip_reason": [], "testing.test_terminal.TestCollectonly.test_collectonly_basic": [], "testing.test_terminal.TestCollectonly.test_collectonly_skipped_module": [], "testing.test_terminal.TestCollectonly.test_collectonly_displays_test_description": [], "testing.test_terminal.TestCollectonly.test_collectonly_failed_module": [], "testing.test_terminal.TestCollectonly.test_collectonly_fatal": [], "testing.test_terminal.TestCollectonly.test_collectonly_simple": [], "testing.test_terminal.TestCollectonly.test_collectonly_error": ["textwrap.dedent"], "testing.test_terminal.TestCollectonly.test_collectonly_missing_path": [], "testing.test_terminal.TestCollectonly.test_collectonly_quiet": [], "testing.test_terminal.TestCollectonly.test_collectonly_more_quiet": [], "testing.test_terminal.TestCollectonly.test_collect_only_summary_status": [], "testing.test_terminal.TestFixtureReporting.test_setup_fixture_error": [], "testing.test_terminal.TestFixtureReporting.test_teardown_fixture_error": [], "testing.test_terminal.TestFixtureReporting.test_teardown_fixture_error_and_test_failure": [], "testing.test_terminal.TestFixtureReporting.test_setup_teardown_output_and_test_failure": [], "testing.test_terminal.TestTerminalFunctional.test_deselected": [], "testing.test_terminal.TestTerminalFunctional.test_deselected_with_hookwrapper": [], "testing.test_terminal.TestTerminalFunctional.test_show_deselected_items_using_markexpr_before_test_execution": [], "testing.test_terminal.TestTerminalFunctional.test_selected_count_with_error": [], "testing.test_terminal.TestTerminalFunctional.test_no_skip_summary_if_failure": [], "testing.test_terminal.TestTerminalFunctional.test_passes": ["os.chdir"], "testing.test_terminal.TestTerminalFunctional.test_header_trailer_info": ["<builtin>.map"], "testing.test_terminal.TestTerminalFunctional.test_no_header_trailer_info": ["<builtin>.map"], "testing.test_terminal.TestTerminalFunctional.test_header": [], "testing.test_terminal.TestTerminalFunctional.test_header_absolute_testpath": [], "testing.test_terminal.TestTerminalFunctional.test_no_header": [], "testing.test_terminal.TestTerminalFunctional.test_no_summary": [], "testing.test_terminal.TestTerminalFunctional.test_showlocals": [], "testing.test_terminal.TestTerminalFunctional.test_noshowlocals_addopts_override": [], "testing.test_terminal.TestTerminalFunctional.test_showlocals_short": [], "testing.test_terminal.TestTerminalFunctional": ["pytest.mark.parametrize", "pytest.fixture"], "testing.test_terminal.TestTerminalFunctional.verbose_testfile": [], "testing.test_terminal.TestTerminalFunctional.test_verbose_reporting": [], "testing.test_terminal.TestTerminalFunctional.test_verbose_reporting_xdist": ["pytest.skip"], "testing.test_terminal.TestTerminalFunctional.test_quiet_reporting": [], "testing.test_terminal.TestTerminalFunctional.test_more_quiet_reporting": [], "testing.test_terminal.TestTerminalFunctional.test_report_collectionfinish_hook": [], "testing.test_terminal.TestTerminalFunctional.test_summary_f_alias": [], "testing.test_terminal.TestTerminalFunctional.test_summary_s_alias": [], "testing.test_terminal.test_fail_extra_reporting": [], "testing.test_terminal.test_fail_reporting_on_pass": [], "testing.test_terminal.test_pass_extra_reporting": [], "testing.test_terminal.test_pass_reporting_on_fail": [], "testing.test_terminal.test_pass_output_reporting": [], "testing.test_terminal.test_color_yes": ["<builtin>.str"], "testing.test_terminal.test_color_no": [], "testing.test_terminal.test_color_yes_collection_on_non_atty": [], "testing.test_terminal.test_getreportopt": ["_pytest.reports.BaseReport.__init__", "typing.cast", "_pytest.terminal.getreportopt"], "_pytest.terminal.getreportopt": [], "testing.test_terminal.test_terminalreporter_reportopt_addopts": [], "testing.test_terminal.test_tbstyle_short": [], "testing.test_terminal.test_traceconfig": [], "testing.test_terminal.TestGenericReporting.test_collect_fail": [], "testing.test_terminal.TestGenericReporting.test_maxfailures": [], "testing.test_terminal.TestGenericReporting.test_maxfailures_with_interrupted": [], "testing.test_terminal.TestGenericReporting.test_tb_option": ["<builtin>.print"], "testing.test_terminal.TestGenericReporting.test_tb_crashline": [], "testing.test_terminal.TestGenericReporting.test_pytest_report_header": [], "testing.test_terminal.TestGenericReporting.test_show_capture": [], "testing.test_terminal.TestGenericReporting.test_show_capture_with_teardown_logs": [], "testing.test_terminal.test_fdopen_kept_alive_issue124": [], "testing.test_terminal.test_tbstyle_native_setup_error": [], "testing.test_terminal.test_terminal_summary": [], "testing.test_terminal.test_terminal_summary_warnings_are_displayed": [], "testing.test_terminal.test_terminal_summary_warnings_header_once": [], "testing.test_terminal.test_terminal_no_summary_warnings_header_once": [], "testing.test_terminal.tr": ["_pytest.terminal.TerminalReporter"], "testing.test_terminal.test_summary_stats": ["<builtin>.print"], "testing.test_terminal.test_skip_counting_towards_summary": ["_pytest.reports.BaseReport.__init__"], "testing.test_terminal.TestClassicOutputStyle": ["pytest.fixture"], "testing.test_terminal.TestClassicOutputStyle.test_files": [], "testing.test_terminal.TestClassicOutputStyle.test_normal_verbosity": [], "testing.test_terminal.TestClassicOutputStyle.test_verbose": [], "testing.test_terminal.TestClassicOutputStyle.test_quiet": [], "testing.test_terminal.TestProgressOutputStyle": ["pytest.fixture"], "testing.test_terminal.TestProgressOutputStyle.many_tests_files": [], "testing.test_terminal.TestProgressOutputStyle.test_zero_tests_collected": [], "testing.test_terminal.TestProgressOutputStyle.test_normal": [], "testing.test_terminal.TestProgressOutputStyle.test_colored_progress": [], "testing.test_terminal.TestProgressOutputStyle.test_count": [], "testing.test_terminal.TestProgressOutputStyle.test_verbose": [], "testing.test_terminal.TestProgressOutputStyle.test_verbose_count": [], "testing.test_terminal.TestProgressOutputStyle.test_xdist_normal": ["pytest.importorskip"], "testing.test_terminal.TestProgressOutputStyle.test_xdist_normal_count": ["pytest.importorskip"], "testing.test_terminal.TestProgressOutputStyle.test_xdist_verbose": ["pytest.importorskip"], "testing.test_terminal.TestProgressOutputStyle.test_capture_no": [], "testing.test_terminal.TestProgressWithTeardown": ["pytest.fixture"], "testing.test_terminal.TestProgressWithTeardown.contest_with_teardown_fixture": [], "testing.test_terminal.TestProgressWithTeardown.many_files": [], "testing.test_terminal.TestProgressWithTeardown.test_teardown_simple": [], "testing.test_terminal.TestProgressWithTeardown.test_teardown_with_test_also_failing": [], "testing.test_terminal.TestProgressWithTeardown.test_teardown_many": [], "testing.test_terminal.TestProgressWithTeardown.test_teardown_many_verbose": [], "testing.test_terminal.TestProgressWithTeardown.test_xdist_normal": ["pytest.importorskip"], "testing.test_terminal.test_skip_reasons_folding": ["<builtin>.len", "_pytest.reports.BaseReport.__init__", "typing.cast", "pathlib.Path.cwd", "_pytest.terminal._folded_skips"], "_pytest.terminal._folded_skips": [], "testing.test_terminal.test_line_with_reprcrash": ["testing.test_terminal.test_line_with_reprcrash.check"], "testing.test_terminal.test_line_with_reprcrash.mock_get_pos": [], "testing.test_terminal.test_line_with_reprcrash.rep._get_verbose_word": [], "testing.test_terminal.test_line_with_reprcrash.check": ["<builtin>.len", "_pytest._io.wcwidth.wcswidth", "_pytest.terminal._get_line_with_reprcrash_message"], "testing.test_terminal.test_line_with_reprcrash.check.DummyTerminalWriter.markup": [], "_pytest.terminal._get_line_with_reprcrash_message": [], "_pytest._io.wcwidth.wcswidth": [], "testing.test_terminal.test_format_session_duration": ["_pytest.terminal.format_session_duration"], "_pytest.terminal.format_session_duration": [], "testing.test_terminal.test_collecterror": ["<builtin>.str"], "testing.test_terminal.test_no_summary_collecterror": ["<builtin>.str"], "testing.test_terminal.test_via_exec": ["<builtin>.str"], "testing.test_terminal.TestCodeHighlight": ["pytest.mark.skip"], "testing.test_terminal.TestCodeHighlight.test_code_highlight_simple": [], "testing.test_terminal.TestCodeHighlight.test_code_highlight_continuation": [], "testing.test_terminal.TestCodeHighlight.test_code_highlight_custom_theme": [], "testing.test_terminal.TestCodeHighlight.test_code_highlight_invalid_theme": [], "testing.test_terminal.TestCodeHighlight.test_code_highlight_invalid_theme_mode": [], "testing.test_terminal.test_raw_skip_reason_skipped": ["_pytest.terminal._get_raw_skip_reason", "typing.cast", "types.SimpleNamespace"], "types.SimpleNamespace": [], "_pytest.terminal._get_raw_skip_reason": [], "testing.test_terminal.test_raw_skip_reason_xfail": ["_pytest.terminal._get_raw_skip_reason", "typing.cast", "types.SimpleNamespace"], "testing.test_terminal.test_format_trimmed": ["<builtin>.len", "_pytest.terminal._format_trimmed"], "_pytest.terminal._format_trimmed": [], "testing.test_skipping": [], "testing.test_skipping.TestEvaluation.test_no_marker": ["_pytest.skipping.evaluate_skip_marks"], "_pytest.skipping.evaluate_skip_marks": [], "testing.test_skipping.TestEvaluation.test_marked_xfail_no_args": ["_pytest.skipping.evaluate_xfail_marks"], "_pytest.skipping.evaluate_xfail_marks": [], "testing.test_skipping.TestEvaluation.test_marked_skipif_no_args": ["_pytest.skipping.evaluate_skip_marks"], "testing.test_skipping.TestEvaluation.test_marked_one_arg": ["_pytest.skipping.evaluate_skip_marks"], "testing.test_skipping.TestEvaluation.test_marked_one_arg_with_reason": ["_pytest.skipping.evaluate_skip_marks"], "testing.test_skipping.TestEvaluation.test_marked_one_arg_twice": ["<builtin>.range", "_pytest.skipping.evaluate_skip_marks"], "testing.test_skipping.TestEvaluation.test_marked_one_arg_twice2": ["_pytest.skipping.evaluate_skip_marks"], "testing.test_skipping.TestEvaluation.test_marked_skipif_with_boolean_without_reason": ["pytest.raises", "_pytest.skipping.evaluate_skip_marks"], "testing.test_skipping.TestEvaluation.test_marked_skipif_with_invalid_boolean": ["pytest.raises", "_pytest.skipping.evaluate_skip_marks"], "testing.test_skipping.TestEvaluation.test_skipif_class": ["_pytest.skipping.evaluate_skip_marks"], "testing.test_skipping.TestEvaluation.test_skipif_markeval_namespace": [], "testing.test_skipping.TestEvaluation.test_skipif_markeval_namespace_multiple": ["textwrap.dedent"], "testing.test_skipping.TestEvaluation.test_skipif_markeval_namespace_ValueError": [], "testing.test_skipping.TestXFail": ["pytest.mark.parametrize"], "testing.test_skipping.TestXFail.test_xfail_simple": ["<builtin>.len", "_pytest.runner.runtestprotocol"], "testing.test_skipping.TestXFail.test_xfail_xpassed": ["<builtin>.len", "_pytest.runner.runtestprotocol"], "testing.test_skipping.TestXFail.test_xfail_using_platform": ["<builtin>.len", "_pytest.runner.runtestprotocol"], "testing.test_skipping.TestXFail.test_xfail_xpassed_strict": ["<builtin>.len", "_pytest.runner.runtestprotocol", "<builtin>.hasattr", "<builtin>.str"], "testing.test_skipping.TestXFail.test_xfail_run_anyway": [], "testing.test_skipping.TestXFail.test_xfail_run_with_skip_mark": [], "testing.test_skipping.TestXFail.test_xfail_evalfalse_but_fails": ["<builtin>.hasattr", "_pytest.runner.runtestprotocol"], "testing.test_skipping.TestXFail.test_xfail_not_report_default": [], "testing.test_skipping.TestXFail.test_xfail_not_run_xfail_reporting": [], "testing.test_skipping.TestXFail.test_xfail_not_run_no_setup_run": [], "testing.test_skipping.TestXFail.test_xfail_xpass": [], "testing.test_skipping.TestXFail.test_xfail_imperative": [], "testing.test_skipping.TestXFail.test_xfail_imperative_in_setup_function": [], "testing.test_skipping.TestXFail.xtest_dynamic_xfail_set_during_setup": [], "testing.test_skipping.TestXFail.test_dynamic_xfail_no_run": [], "testing.test_skipping.TestXFail.test_dynamic_xfail_set_during_funcarg_setup": [], "testing.test_skipping.TestXFail.test_dynamic_xfail_set_during_runtest_failed": [], "testing.test_skipping.TestXFail.test_dynamic_xfail_set_during_runtest_passed_strict": [], "testing.test_skipping.TestXFail.test_xfail_raises": [], "testing.test_skipping.TestXFail.test_strict_sanity": [], "testing.test_skipping.TestXFail.test_strict_xfail": [], "testing.test_skipping.TestXFail.test_strict_xfail_condition": [], "testing.test_skipping.TestXFail.test_xfail_condition_keyword": [], "testing.test_skipping.TestXFail.test_strict_xfail_default_from_file": [], "testing.test_skipping.TestXFail.test_xfail_markeval_namespace": [], "testing.test_skipping.TestXFailwithSetupTeardown.test_failing_setup_issue9": [], "testing.test_skipping.TestXFailwithSetupTeardown.test_failing_teardown_issue9": [], "testing.test_skipping.TestSkip.test_skip_class": [], "testing.test_skipping.TestSkip.test_skips_on_false_string": [], "testing.test_skipping.TestSkip.test_arg_as_reason": [], "testing.test_skipping.TestSkip.test_skip_no_reason": [], "testing.test_skipping.TestSkip.test_skip_with_reason": [], "testing.test_skipping.TestSkip.test_only_skips_marked_test": [], "testing.test_skipping.TestSkip.test_strict_and_skip": [], "testing.test_skipping.TestSkip.test_wrong_skip_usage": [], "testing.test_skipping.TestSkipif.test_skipif_conditional": ["pytest.raises"], "testing.test_skipping.TestSkipif.test_skipif_conditional.<lambda1>": ["_pytest.skipping.pytest_runtest_setup"], "_pytest.skipping.pytest_runtest_setup": [], "testing.test_skipping.TestSkipif": ["pytest.mark.parametrize"], "testing.test_skipping.TestSkipif.test_skipif_reporting": ["<builtin>.dict"], "testing.test_skipping.TestSkipif.test_skipif_using_platform": ["pytest.raises"], "testing.test_skipping.TestSkipif.test_skipif_using_platform.<lambda1>": ["_pytest.skipping.pytest_runtest_setup"], "testing.test_skipping.TestSkipif.test_skipif_reporting_multiple": [], "testing.test_skipping.test_skip_not_report_default": [], "testing.test_skipping.test_skipif_class": [], "testing.test_skipping.test_skipped_reasons_functional": [], "testing.test_skipping.test_skipped_folding": [], "testing.test_skipping.test_reportchars": [], "testing.test_skipping.test_reportchars_error": [], "testing.test_skipping.test_reportchars_all": [], "testing.test_skipping.test_reportchars_all_error": [], "testing.test_skipping.test_errors_in_xfail_skip_expressions": ["<builtin>.hasattr", "<builtin>.getattr"], "testing.test_skipping.test_xfail_skipif_with_globals": [], "testing.test_skipping.test_default_markers": [], "testing.test_skipping.test_xfail_test_setup_exception": [], "testing.test_skipping.test_imperativeskip_on_xfail_test": [], "testing.test_skipping.TestBooleanCondition.test_skipif": [], "testing.test_skipping.TestBooleanCondition.test_skipif_noreason": [], "testing.test_skipping.TestBooleanCondition.test_xfail": [], "testing.test_skipping.test_xfail_item": ["<builtin>.hasattr"], "testing.test_skipping.test_module_level_skip_error": [], "testing.test_skipping.test_module_level_skip_with_allow_module_level": [], "testing.test_skipping.test_invalid_skip_keyword_parameter": [], "testing.test_skipping.test_mark_xfail_item": ["<builtin>.hasattr"], "testing.test_skipping.test_summary_list_after_errors": [], "testing.test_skipping.test_importorskip": ["pytest.raises", "pytest.importorskip"], "testing.test_skipping.test_relpath_rootdir": [], "testing.test_skipping.test_skip_from_fixture": [], "testing.test_skipping.test_skip_using_reason_works_ok": [], "testing.test_skipping.test_fail_using_reason_works_ok": [], "testing.test_skipping.test_fail_fails_with_msg_and_reason": [], "testing.test_skipping.test_skip_fails_with_msg_and_reason": [], "testing.test_skipping.test_exit_with_msg_and_reason_fails": [], "testing.test_skipping.test_exit_with_reason_works_ok": [], "testing.test_threadexception": ["pytest.skip", "pytest.mark.filterwarnings"], "testing.test_threadexception.test_unhandled_thread_exception": [], "testing.test_threadexception.test_unhandled_thread_exception_in_setup": [], "testing.test_threadexception.test_unhandled_thread_exception_in_teardown": [], "testing.test_threadexception.test_unhandled_thread_exception_warning_error": [], "testing.io.test_terminalwriter": ["<builtin>.int", "pytest.mark.skip", "pytest.mark.skipif", "pytest.mark.parametrize"], "testing.io.test_terminalwriter.test_terminal_width_COLUMNS": ["_pytest._io.terminalwriter.get_terminal_width"], "_pytest._io.terminalwriter.get_terminal_width": [], "testing.io.test_terminalwriter.test_terminalwriter_width_bogus": ["unittest.mock.Mock", "_pytest._io.terminalwriter.TerminalWriter"], "_pytest._io.terminalwriter.TerminalWriter": [], "testing.io.test_terminalwriter.test_terminalwriter_computes_width": ["_pytest._io.terminalwriter.TerminalWriter"], "testing.io.test_terminalwriter.test_terminalwriter_computes_width.<lambda1>": [], "testing.io.test_terminalwriter.test_terminalwriter_dumb_term_no_markup": ["sys.stdout.isatty", "_pytest._io.terminalwriter.TerminalWriter"], "testing.io.test_terminalwriter.test_terminalwriter_dumb_term_no_markup.MyFile.isatty": [], "sys.stdout.isatty": [], "testing.io.test_terminalwriter.test_terminalwriter_not_unicode": ["io.BytesIO", "io.TextIOWrapper", "_pytest._io.terminalwriter.TerminalWriter"], "io.TextIOWrapper": [], "testing.io.test_terminalwriter.TestTerminalWriter": ["pytest.mark.parametrize", "pytest.mark.skipif", "pytest.fixture"], "testing.io.test_terminalwriter.TestTerminalWriter.tw": ["io.StringIO", "<builtin>.open", "_pytest._io.terminalwriter.TerminalWriter", "<builtin>.str"], "testing.io.test_terminalwriter.TestTerminalWriter.tw.getlines": ["<builtin>.open", "<builtin>.str"], "testing.io.test_terminalwriter.TestTerminalWriter.tw.<lambda1>": ["testing.io.test_terminalwriter.TestTerminalWriter.tw.getlines"], "testing.io.test_terminalwriter.TestTerminalWriter.test_line": ["<builtin>.len"], "testing.io.test_terminalwriter.TestTerminalWriter.test_line_unicode": [], "testing.io.test_terminalwriter.TestTerminalWriter.test_sep_no_title": ["<builtin>.len"], "testing.io.test_terminalwriter.TestTerminalWriter.test_sep_with_title": ["<builtin>.len"], "testing.io.test_terminalwriter.TestTerminalWriter.test_sep_longer_than_width": [], "testing.io.test_terminalwriter.TestTerminalWriter.test_markup": [], "testing.io.test_terminalwriter.TestTerminalWriter.test_markup_bad": ["pytest.raises"], "testing.io.test_terminalwriter.TestTerminalWriter.test_line_write_markup": ["<builtin>.len"], "testing.io.test_terminalwriter.TestTerminalWriter.test_attr_fullwidth": ["<builtin>.len"], "testing.io.test_terminalwriter.test_attr_hasmarkup": ["<builtin>.len", "_pytest._io.terminalwriter.TerminalWriter", "io.StringIO"], "testing.io.test_terminalwriter.assert_color_set": ["<builtin>.len", "_pytest._io.terminalwriter.TerminalWriter", "io.StringIO"], "testing.io.test_terminalwriter.assert_color_not_set": ["_pytest._io.terminalwriter.TerminalWriter", "io.StringIO"], "testing.io.test_terminalwriter.assert_color_not_set.<lambda1>": [], "testing.io.test_terminalwriter.test_should_do_markup_PY_COLORS_eq_1": ["testing.io.test_terminalwriter.assert_color_set"], "testing.io.test_terminalwriter.test_should_not_do_markup_PY_COLORS_eq_0": ["testing.io.test_terminalwriter.assert_color_not_set"], "testing.io.test_terminalwriter.test_should_not_do_markup_NO_COLOR": ["testing.io.test_terminalwriter.assert_color_not_set"], "testing.io.test_terminalwriter.test_should_do_markup_FORCE_COLOR": ["testing.io.test_terminalwriter.assert_color_set"], "testing.io.test_terminalwriter.test_should_not_do_markup_NO_COLOR_and_FORCE_COLOR": ["testing.io.test_terminalwriter.assert_color_not_set"], "testing.io.test_terminalwriter.TestTerminalWriterLineWidth.test_init": ["_pytest._io.terminalwriter.TerminalWriter"], "testing.io.test_terminalwriter.TestTerminalWriterLineWidth.test_update": ["_pytest._io.terminalwriter.TerminalWriter"], "testing.io.test_terminalwriter.TestTerminalWriterLineWidth.test_update_with_newline": ["_pytest._io.terminalwriter.TerminalWriter"], "testing.io.test_terminalwriter.TestTerminalWriterLineWidth.test_update_with_wide_text": ["_pytest._io.terminalwriter.TerminalWriter"], "testing.io.test_terminalwriter.TestTerminalWriterLineWidth.test_composed": ["<builtin>.len", "_pytest._io.terminalwriter.TerminalWriter"], "testing.io.test_terminalwriter.TestTerminalWriterLineWidth.test_combining": ["<builtin>.len", "_pytest._io.terminalwriter.TerminalWriter"], "testing.io.test_terminalwriter.test_code_highlight": ["_pytest._io.terminalwriter.TerminalWriter", "re.escape", "io.StringIO", "pytest.raises"], "testing.io.test_wcwidth": ["pytest.mark.parametrize"], "testing.io.test_wcwidth.test_wcwidth": ["_pytest._io.wcwidth.wcwidth"], "_pytest._io.wcwidth.wcwidth": [], "testing.io.test_wcwidth.test_wcswidth": ["_pytest._io.wcwidth.wcswidth"], "testing.io.test_saferepr": [], "testing.io.test_saferepr.test_simple_repr": ["_pytest._io.saferepr.saferepr"], "_pytest._io.saferepr.saferepr": [], "testing.io.test_saferepr.test_maxsize": ["<builtin>.len", "_pytest._io.saferepr.saferepr", "<builtin>.repr"], "testing.io.test_saferepr.test_no_maxsize": ["<builtin>.repr", "_pytest._io.saferepr.saferepr"], "testing.io.test_saferepr.test_maxsize_error_on_instance": ["<builtin>.len", "_pytest._io.saferepr.saferepr"], "testing.io.test_saferepr.test_maxsize_error_on_instance.A.__repr__": ["<builtin>.ValueError"], "testing.io.test_saferepr.test_exceptions": ["<builtin>.Exception", "<builtin>.id", "<builtin>.repr", "_pytest._io.saferepr.saferepr", "testing.io.test_saferepr.test_exceptions.BrokenRepr.__init__"], "testing.io.test_saferepr.test_exceptions.BrokenRepr.__init__": [], "testing.io.test_saferepr.test_exceptions.BrokenRepr.__repr__": [], "<builtin>.id": [], "testing.io.test_saferepr.test_baseexception": ["<builtin>.SystemExit", "<builtin>.BaseException", "testing.io.test_saferepr.test_baseexception.BrokenObj.__init__", "<builtin>.print", "<builtin>.id", "pytest.raises", "<builtin>.KeyboardInterrupt", "testing.io.test_saferepr.test_baseexception.RaisingOnStrRepr.__init__", "_pytest._io.saferepr.saferepr"], "testing.io.test_saferepr.test_baseexception.RaisingOnStrRepr.__init__": [], "testing.io.test_saferepr.test_baseexception.RaisingOnStrRepr.raise_exc": ["<builtin>.hasattr"], "testing.io.test_saferepr.test_baseexception.RaisingOnStrRepr.__str__": ["testing.io.test_saferepr.test_baseexception.RaisingOnStrRepr.raise_exc"], "testing.io.test_saferepr.test_baseexception.RaisingOnStrRepr.__repr__": ["testing.io.test_saferepr.test_baseexception.RaisingOnStrRepr.raise_exc"], "testing.io.test_saferepr.test_baseexception.BrokenObj.__init__": [], "testing.io.test_saferepr.test_baseexception.BrokenObj.__repr__": ["testing.io.test_saferepr.test_baseexception.RaisingOnStrRepr.__init__"], "<builtin>.KeyboardInterrupt": [], "<builtin>.SystemExit": [], "testing.io.test_saferepr.test_buggy_builtin_repr": ["_pytest._io.saferepr.saferepr"], "testing.io.test_saferepr.test_buggy_builtin_repr.int.__repr__": ["<builtin>.ValueError"], "testing.io.test_saferepr.test_big_repr": ["<builtin>.len", "<builtin>.range", "_pytest._io.saferepr.SafeRepr", "_pytest._io.saferepr.saferepr"], "_pytest._io.saferepr.SafeRepr": [], "testing.io.test_saferepr.test_repr_on_newstyle": ["_pytest._io.saferepr.saferepr"], "testing.io.test_saferepr.test_repr_on_newstyle.Function.__repr__": [], "testing.io.test_saferepr.test_unicode": ["_pytest._io.saferepr.saferepr"], "testing.io.test_saferepr.test_pformat_dispatch": ["_pytest._io.saferepr._pformat_dispatch"], "_pytest._io.saferepr._pformat_dispatch": [], "testing.io.test_saferepr.test_broken_getattribute": ["_pytest._io.saferepr.saferepr"], "testing.io.test_saferepr.test_broken_getattribute.SomeClass.__getattribute__": [], "testing.io.test_saferepr.test_broken_getattribute.SomeClass.__repr__": [], "testing.io.test_saferepr.test_saferepr_unlimited": ["<builtin>.range", "_pytest._io.saferepr.saferepr_unlimited"], "_pytest._io.saferepr.saferepr_unlimited": [], "testing.io.test_saferepr.test_saferepr_unlimited_exc": ["_pytest._io.saferepr.saferepr_unlimited"], "testing.io.test_saferepr.test_saferepr_unlimited_exc.A.__repr__": ["<builtin>.ValueError"], "testing.test_findpaths": ["pytest.mark.parametrize"], "testing.test_findpaths.TestLoadConfigDictFromFile.test_empty_pytest_ini": ["_pytest.config.findpaths.load_config_dict_from_file"], "_pytest.config.findpaths.load_config_dict_from_file": [], "testing.test_findpaths.TestLoadConfigDictFromFile.test_pytest_ini": ["_pytest.config.findpaths.load_config_dict_from_file"], "testing.test_findpaths.TestLoadConfigDictFromFile.test_custom_ini": ["_pytest.config.findpaths.load_config_dict_from_file"], "testing.test_findpaths.TestLoadConfigDictFromFile.test_custom_ini_without_section": ["_pytest.config.findpaths.load_config_dict_from_file"], "testing.test_findpaths.TestLoadConfigDictFromFile.test_custom_cfg_file": ["_pytest.config.findpaths.load_config_dict_from_file"], "testing.test_findpaths.TestLoadConfigDictFromFile.test_valid_cfg_file": ["_pytest.config.findpaths.load_config_dict_from_file"], "testing.test_findpaths.TestLoadConfigDictFromFile.test_unsupported_pytest_section_in_cfg_file": ["pytest.raises", "_pytest.config.findpaths.load_config_dict_from_file"], "testing.test_findpaths.TestLoadConfigDictFromFile.test_invalid_toml_file": ["pytest.raises", "_pytest.config.findpaths.load_config_dict_from_file"], "testing.test_findpaths.TestLoadConfigDictFromFile.test_custom_toml_file": ["textwrap.dedent", "_pytest.config.findpaths.load_config_dict_from_file"], "testing.test_findpaths.TestLoadConfigDictFromFile.test_valid_toml_file": ["textwrap.dedent", "_pytest.config.findpaths.load_config_dict_from_file"], "testing.test_findpaths.TestCommonAncestor.test_has_ancestor": ["_pytest.config.findpaths.get_common_ancestor"], "testing.test_findpaths.TestCommonAncestor.test_single_dir": ["_pytest.config.findpaths.get_common_ancestor"], "testing.test_findpaths.TestCommonAncestor.test_single_file": ["_pytest.config.findpaths.get_common_ancestor"], "testing.test_findpaths.test_get_dirs_from_args": ["_pytest.config.findpaths.get_dirs_from_args", "<builtin>.str"], "_pytest.config.findpaths.get_dirs_from_args": [], "testing.test_findpaths.test_is_fs_root": ["_pytest.config.findpaths.is_fs_root", "pathlib.Path"], "_pytest.config.findpaths.is_fs_root": []}