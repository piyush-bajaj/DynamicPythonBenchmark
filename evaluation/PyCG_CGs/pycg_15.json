{"tests.test_utils": ["pytest.mark.parametrize"], "pytest.mark.parametrize": [], "tests.test_utils.test_to_base64url_uint": ["jwt.utils.to_base64url_uint"], "jwt.utils.to_base64url_uint": [], "tests.test_utils.test_from_base64url_uint": ["jwt.utils.from_base64url_uint"], "jwt.utils.from_base64url_uint": [], "tests.test_utils.test_force_bytes_raises_error_on_invalid_object": ["pytest.raises", "jwt.utils.force_bytes"], "pytest.raises": [], "jwt.utils.force_bytes": [], "tests.keys": ["os.path.abspath", "os.path.dirname"], "os.path.abspath": [], "os.path.dirname": [], "tests.keys.decode_value": ["jwt.utils.base64url_decode"], "jwt.utils.base64url_decode": [], "tests.keys.load_hmac_key": ["<builtin>.open", "os.path.join", "json.load", "jwt.utils.base64url_decode"], "os.path.join": [], "<builtin>.open": [], "json.load": [], "tests.keys.load_rsa_key": ["<builtin>.open", "os.path.join", "jwt.algorithms.RSAAlgorithm.from_jwk"], "jwt.algorithms.RSAAlgorithm.from_jwk": [], "tests.keys.load_rsa_pub_key": ["<builtin>.open", "os.path.join", "jwt.algorithms.RSAAlgorithm.from_jwk"], "tests.keys.load_ec_key": ["cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers", "tests.keys.load_ec_pub_key_p_521", "<builtin>.open", "os.path.join", "json.load", "tests.keys.decode_value"], "tests.keys.load_ec_pub_key_p_521": ["<builtin>.open", "os.path.join", "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1", "json.load", "tests.keys.decode_value", "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers"], "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers": [], "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1": [], "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers": [], "tests.test_compressed_jwt": [], "tests.test_compressed_jwt.CompressedPyJWT._decode_payload": ["zlib.decompress", "json.loads"], "zlib.decompress": [], "json.loads": [], "tests.test_compressed_jwt.test_decodes_complete_valid_jwt_with_compressed_payload": ["jwt.PyJWT.__init__", "jwt.PyJWT.decode_complete"], "jwt.PyJWT.__init__": [], "jwt.PyJWT.decode_complete": [], "tests.test_exceptions": [], "tests.test_exceptions.test_missing_required_claim_error_has_proper_str": ["jwt.exceptions.MissingRequiredClaimError", "<builtin>.str"], "jwt.exceptions.MissingRequiredClaimError": [], "<builtin>.str": [], "tests.test_api_jwt": ["pytest.fixture"], "pytest.fixture": [], "tests.test_api_jwt.jwt": ["jwt.api_jwt.PyJWT"], "jwt.api_jwt.PyJWT": [], "tests.test_api_jwt.payload": ["utils.utc_timestamp"], "utils.utc_timestamp": [], "tests.test_api_jwt.TestJWT.test_decodes_valid_jwt": [], "tests.test_api_jwt.TestJWT.test_decodes_complete_valid_jwt": [], "tests.test_api_jwt.TestJWT.test_load_verify_valid_jwt": [], "tests.test_api_jwt.TestJWT.test_decode_invalid_payload_string": ["pytest.raises", "<builtin>.str"], "tests.test_api_jwt.TestJWT.test_decode_with_non_mapping_payload_throws_exception": ["pytest.raises", "<builtin>.str"], "tests.test_api_jwt.TestJWT.test_decode_with_invalid_audience_param_throws_exception": ["pytest.raises", "<builtin>.str"], "tests.test_api_jwt.TestJWT.test_decode_with_nonlist_aud_claim_throws_exception": ["pytest.raises", "<builtin>.str"], "tests.test_api_jwt.TestJWT.test_decode_with_invalid_aud_list_member_throws_exception": ["pytest.raises", "<builtin>.str"], "tests.test_api_jwt.TestJWT.test_encode_bad_type": ["<builtin>.tuple", "pytest.raises", "<builtin>.set", "<builtin>.list"], "<builtin>.tuple": [], "<builtin>.list": [], "<builtin>.set": [], "tests.test_api_jwt.TestJWT.test_encode_bad_type.<lambda1>": [], "tests.test_api_jwt.TestJWT.test_encode_with_typ": ["json.loads", "jwt.utils.base64url_decode"], "tests.test_api_jwt.TestJWT.test_decode_raises_exception_if_exp_is_not_int": ["pytest.raises", "<builtin>.str"], "tests.test_api_jwt.TestJWT.test_decode_raises_exception_if_iat_is_not_int": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_decode_raises_exception_if_iat_is_greater_than_now": ["pytest.raises", "utils.utc_timestamp"], "tests.test_api_jwt.TestJWT.test_decode_works_if_iat_is_str_of_a_number": [], "tests.test_api_jwt.TestJWT.test_decode_raises_exception_if_nbf_is_not_int": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_decode_raises_exception_if_aud_is_none": [], "tests.test_api_jwt.TestJWT.test_encode_datetime": ["calendar.timegm", "datetime.datetime.now"], "datetime.datetime.now": [], "calendar.timegm": [], "tests.test_api_jwt.TestJWT": ["utils.crypto_required"], "utils.crypto_required": [], "tests.test_api_jwt.TestJWT.test_decodes_valid_es256_jwt": ["<builtin>.open", "utils.key_path"], "utils.key_path": [], "tests.test_api_jwt.TestJWT.test_decodes_valid_rs384_jwt": ["<builtin>.open", "utils.key_path"], "tests.test_api_jwt.TestJWT.test_decode_with_expiration": ["pytest.raises", "utils.utc_timestamp"], "tests.test_api_jwt.TestJWT.test_decode_with_notbefore": ["pytest.raises", "utils.utc_timestamp"], "tests.test_api_jwt.TestJWT.test_decode_skip_expiration_verification": ["time.time"], "time.time": [], "tests.test_api_jwt.TestJWT.test_decode_skip_notbefore_verification": ["time.time"], "tests.test_api_jwt.TestJWT.test_decode_with_expiration_with_leeway": ["datetime.timedelta", "pytest.raises", "utils.utc_timestamp"], "datetime.timedelta": [], "tests.test_api_jwt.TestJWT.test_decode_with_notbefore_with_leeway": ["pytest.raises", "utils.utc_timestamp"], "tests.test_api_jwt.TestJWT.test_check_audience_when_valid": [], "tests.test_api_jwt.TestJWT.test_check_audience_list_when_valid": [], "tests.test_api_jwt.TestJWT.test_check_audience_none_specified": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_raise_exception_invalid_audience_list": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_check_audience_in_array_when_valid": [], "tests.test_api_jwt.TestJWT.test_raise_exception_invalid_audience": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_raise_exception_audience_as_bytes": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_raise_exception_invalid_audience_in_array": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_raise_exception_token_without_issuer": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_raise_exception_token_without_audience": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_raise_exception_token_with_aud_none_and_without_audience": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_check_issuer_when_valid": [], "tests.test_api_jwt.TestJWT.test_raise_exception_invalid_issuer": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_skip_check_audience": [], "tests.test_api_jwt.TestJWT.test_skip_check_exp": ["datetime.timedelta", "datetime.datetime.now"], "tests.test_api_jwt.TestJWT.test_decode_should_raise_error_if_exp_required_but_not_present": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_decode_should_raise_error_if_iat_required_but_not_present": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_decode_should_raise_error_if_nbf_required_but_not_present": ["pytest.raises"], "tests.test_api_jwt.TestJWT.test_skip_check_signature": [], "tests.test_api_jwt.TestJWT.test_skip_check_iat": ["datetime.timedelta", "datetime.datetime.now"], "tests.test_api_jwt.TestJWT.test_skip_check_nbf": ["datetime.timedelta", "datetime.datetime.now"], "tests.test_api_jwt.TestJWT.test_custom_json_encoder": ["pytest.raises", "decimal.Decimal"], "tests.test_api_jwt.TestJWT.test_custom_json_encoder.CustomJSONEncoder.default": ["<builtin>.super", "<builtin>.isinstance"], "<builtin>.isinstance": [], "<builtin>.super": [], "decimal.Decimal": [], "tests.test_api_jwt.TestJWT.test_decode_with_verify_exp_option": ["pytest.raises", "utils.utc_timestamp"], "tests.test_api_jwt.TestJWT.test_decode_with_verify_exp_option_and_signature_off": ["pytest.raises", "utils.utc_timestamp"], "tests.test_api_jwt.TestJWT.test_decode_with_optional_algorithms": ["pytest.raises", "<builtin>.str"], "tests.test_api_jwt.TestJWT.test_decode_no_algorithms_verify_signature_false": [], "tests.test_api_jwt.TestJWT.test_decode_legacy_verify_warning": ["pytest.deprecated_call"], "pytest.deprecated_call": [], "tests.test_api_jwt.TestJWT.test_decode_no_options_mutation": [], "tests.test_api_jwt.TestJWT.test_decode_warns_on_unsupported_kwarg": ["<builtin>.str", "<builtin>.len", "pytest.warns"], "pytest.warns": [], "<builtin>.len": [], "tests.test_api_jwt.TestJWT.test_decode_complete_warns_on_unsupported_kwarg": ["<builtin>.str", "<builtin>.len", "pytest.warns"], "tests": [], "tests.test_algorithms": [], "tests.test_algorithms.TestAlgorithms.test_algorithm_should_throw_exception_if_prepare_key_not_impl": ["pytest.raises", "jwt.algorithms.Algorithm"], "jwt.algorithms.Algorithm": [], "tests.test_algorithms.TestAlgorithms.test_algorithm_should_throw_exception_if_sign_not_impl": ["pytest.raises", "jwt.algorithms.Algorithm"], "tests.test_algorithms.TestAlgorithms.test_algorithm_should_throw_exception_if_verify_not_impl": ["pytest.raises", "jwt.algorithms.Algorithm"], "tests.test_algorithms.TestAlgorithms.test_algorithm_should_throw_exception_if_to_jwk_not_impl": ["pytest.raises", "jwt.algorithms.Algorithm"], "tests.test_algorithms.TestAlgorithms.test_algorithm_should_throw_exception_if_from_jwk_not_impl": ["pytest.raises", "jwt.algorithms.Algorithm"], "tests.test_algorithms.TestAlgorithms.test_algorithm_should_throw_exception_if_compute_hash_digest_not_impl": ["pytest.raises", "jwt.algorithms.Algorithm"], "tests.test_algorithms.TestAlgorithms.test_none_algorithm_should_throw_exception_if_key_is_not_none": ["jwt.algorithms.NoneAlgorithm", "pytest.raises"], "jwt.algorithms.NoneAlgorithm": [], "tests.test_algorithms.TestAlgorithms.test_hmac_should_reject_nonstring_key": ["jwt.algorithms.HMACAlgorithm", "pytest.raises", "<builtin>.object", "<builtin>.str"], "jwt.algorithms.HMACAlgorithm": [], "<builtin>.object": [], "tests.test_algorithms.TestAlgorithms.test_hmac_should_accept_unicode_key": ["jwt.algorithms.HMACAlgorithm"], "tests.test_algorithms.TestAlgorithms": ["utils.crypto_required", "pytest.mark.parametrize"], "tests.test_algorithms.TestAlgorithms.test_hmac_should_throw_exception": ["jwt.algorithms.HMACAlgorithm", "pytest.raises", "<builtin>.open", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_hmac_jwk_should_parse_and_verify": ["jwt.algorithms.HMACAlgorithm", "<builtin>.open", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_hmac_to_jwk_returns_correct_values": ["jwt.algorithms.HMACAlgorithm", "json.loads"], "tests.test_algorithms.TestAlgorithms.test_hmac_from_jwk_should_raise_exception_if_not_hmac_key": ["jwt.algorithms.HMACAlgorithm", "<builtin>.open", "pytest.raises", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_rsa_should_parse_pem_public_key": ["jwt.algorithms.RSAAlgorithm", "<builtin>.open", "utils.key_path"], "jwt.algorithms.RSAAlgorithm": [], "tests.test_algorithms.TestAlgorithms.test_rsa_should_accept_pem_private_key_bytes": ["jwt.algorithms.RSAAlgorithm", "<builtin>.open", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_rsa_should_accept_unicode_key": ["jwt.algorithms.RSAAlgorithm", "<builtin>.open", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_rsa_should_reject_non_string_key": ["jwt.algorithms.RSAAlgorithm", "pytest.raises"], "tests.test_algorithms.TestAlgorithms.test_rsa_verify_should_return_false_if_signature_invalid": ["jwt.algorithms.RSAAlgorithm", "base64.b64decode", "<builtin>.open", "utils.key_path"], "base64.b64decode": [], "tests.test_algorithms.TestAlgorithms.test_ec_jwk_public_and_private_keys_should_parse_and_verify": ["<builtin>.open", "jwt.algorithms.ECAlgorithm", "utils.key_path"], "jwt.algorithms.ECAlgorithm": [], "tests.test_algorithms.TestAlgorithms.test_ec_jwk_fails_on_invalid_json": ["jwt.algorithms.ECAlgorithm", "pytest.raises"], "tests.test_algorithms.TestAlgorithms.test_ec_private_key_to_jwk_works_with_from_jwk": ["<builtin>.open", "jwt.algorithms.ECAlgorithm", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_ec_public_key_to_jwk_works_with_from_jwk": ["<builtin>.open", "jwt.algorithms.ECAlgorithm", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_ec_to_jwk_returns_correct_values_for_public_key": ["<builtin>.open", "jwt.algorithms.ECAlgorithm", "json.loads", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_ec_to_jwk_returns_correct_values_for_private_key": ["<builtin>.open", "jwt.algorithms.ECAlgorithm", "json.loads", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_ec_to_jwk_raises_exception_on_invalid_key": ["jwt.algorithms.ECAlgorithm", "pytest.raises"], "tests.test_algorithms.TestAlgorithms.test_ec_to_jwk_with_valid_curves": ["<builtin>.open", "jwt.algorithms.ECAlgorithm", "json.loads", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_ec_to_jwk_with_invalid_curve": ["<builtin>.open", "jwt.algorithms.ECAlgorithm", "pytest.raises", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_rsa_jwk_public_and_private_keys_should_parse_and_verify": ["jwt.algorithms.RSAAlgorithm", "<builtin>.open", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_rsa_private_key_to_jwk_works_with_from_jwk": ["jwt.algorithms.RSAAlgorithm", "<builtin>.open", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_rsa_public_key_to_jwk_works_with_from_jwk": ["jwt.algorithms.RSAAlgorithm", "<builtin>.open", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_rsa_jwk_private_key_with_other_primes_is_invalid": ["utils.key_path", "jwt.algorithms.RSAAlgorithm", "pytest.raises", "<builtin>.open", "json.dumps", "json.loads"], "json.dumps": [], "tests.test_algorithms.TestAlgorithms.test_rsa_jwk_private_key_with_missing_values_is_invalid": ["utils.key_path", "jwt.algorithms.RSAAlgorithm", "pytest.raises", "<builtin>.open", "json.dumps", "json.loads"], "tests.test_algorithms.TestAlgorithms.test_rsa_jwk_private_key_can_recover_prime_factors": ["utils.key_path", "jwt.algorithms.RSAAlgorithm", "<builtin>.open", "json.dumps", "json.loads"], "tests.test_algorithms.TestAlgorithms.test_rsa_jwk_private_key_with_missing_required_values_is_invalid": ["utils.key_path", "jwt.algorithms.RSAAlgorithm", "pytest.raises", "<builtin>.open", "json.dumps", "json.loads"], "tests.test_algorithms.TestAlgorithms.test_rsa_jwk_raises_exception_if_not_a_valid_key": ["jwt.algorithms.RSAAlgorithm", "pytest.raises"], "tests.test_algorithms.TestAlgorithms.test_rsa_to_jwk_returns_correct_values_for_public_key": ["jwt.algorithms.RSAAlgorithm", "<builtin>.open", "json.loads", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_rsa_to_jwk_returns_correct_values_for_private_key": ["jwt.algorithms.RSAAlgorithm", "<builtin>.open", "json.loads", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_rsa_to_jwk_raises_exception_on_invalid_key": ["jwt.algorithms.RSAAlgorithm", "pytest.raises"], "tests.test_algorithms.TestAlgorithms.test_rsa_from_jwk_raises_exception_on_invalid_key": ["jwt.algorithms.RSAAlgorithm", "<builtin>.open", "pytest.raises", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_ec_should_reject_non_string_key": ["jwt.algorithms.ECAlgorithm", "pytest.raises"], "tests.test_algorithms.TestAlgorithms.test_ec_should_accept_pem_private_key_bytes": ["<builtin>.open", "jwt.algorithms.ECAlgorithm", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_ec_should_accept_ssh_public_key_bytes": ["<builtin>.open", "jwt.algorithms.ECAlgorithm", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_ec_verify_should_return_false_if_signature_invalid": ["<builtin>.open", "base64.b64decode", "jwt.algorithms.ECAlgorithm", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_ec_verify_should_return_false_if_signature_wrong_length": ["<builtin>.open", "base64.b64decode", "jwt.algorithms.ECAlgorithm", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_ec_should_throw_exception_on_wrong_key": ["<builtin>.open", "jwt.algorithms.ECAlgorithm", "pytest.raises", "utils.key_path"], "tests.test_algorithms.TestAlgorithms.test_rsa_pss_sign_then_verify_should_return_true": ["<builtin>.open", "jwt.algorithms.RSAPSSAlgorithm", "utils.key_path"], "jwt.algorithms.RSAPSSAlgorithm": [], "tests.test_algorithms.TestAlgorithms.test_rsa_pss_verify_should_return_false_if_signature_invalid": ["<builtin>.open", "base64.b64decode", "jwt.algorithms.RSAPSSAlgorithm", "utils.key_path"], "tests.test_algorithms.TestAlgorithmsRFC7520.test_hmac_verify_should_return_true_for_test_vector": ["jwt.algorithms.HMACAlgorithm", "jwt.utils.base64url_decode", "keys.load_hmac_key"], "keys.load_hmac_key": [], "tests.test_algorithms.TestAlgorithmsRFC7520": ["utils.crypto_required"], "tests.test_algorithms.TestAlgorithmsRFC7520.test_rsa_verify_should_return_true_for_test_vector": ["jwt.algorithms.RSAAlgorithm", "keys.load_rsa_pub_key", "jwt.utils.base64url_decode"], "keys.load_rsa_pub_key": [], "tests.test_algorithms.TestAlgorithmsRFC7520.test_rsapss_verify_should_return_true_for_test_vector": ["jwt.algorithms.RSAPSSAlgorithm", "keys.load_rsa_pub_key", "jwt.utils.base64url_decode"], "tests.test_algorithms.TestAlgorithmsRFC7520.test_ec_verify_should_return_true_for_test_vector": ["utils.key_path", "jwt.algorithms.ECAlgorithm", "jwt.utils.base64url_decode", "keys.load_ec_pub_key_p_521", "<builtin>.open"], "keys.load_ec_pub_key_p_521": [], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed25519_should_reject_non_string_key": ["<builtin>.open", "pytest.raises", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "jwt.algorithms.OKPAlgorithm": [], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed25519_should_accept_unicode_key": ["<builtin>.open", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed25519_sign_should_generate_correct_signature_value": ["<builtin>.open", "base64.b64decode", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed25519_verify_should_return_false_if_signature_invalid": ["<builtin>.open", "base64.b64decode", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed25519_verify_should_return_true_if_signature_valid": ["<builtin>.open", "base64.b64decode", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed25519_prepare_key_should_be_idempotent": ["<builtin>.open", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed25519_jwk_private_key_should_parse_and_verify": ["<builtin>.open", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed25519_jwk_private_key_should_parse_and_verify_with_private_key_as_is": ["<builtin>.open", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed25519_jwk_public_key_should_parse_and_verify": ["<builtin>.open", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed25519_jwk_fails_on_invalid_json": ["utils.key_path", "pytest.raises", "jwt.algorithms.OKPAlgorithm", "<builtin>.open", "json.loads"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed25519_to_jwk_works_with_from_jwk": ["<builtin>.open", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_to_jwk_raises_exception_on_invalid_key": ["pytest.raises", "jwt.algorithms.OKPAlgorithm"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed448_jwk_private_key_should_parse_and_verify": ["<builtin>.open", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed448_jwk_private_key_should_parse_and_verify_with_private_key_as_is": ["<builtin>.open", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed448_jwk_public_key_should_parse_and_verify": ["<builtin>.open", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed448_jwk_fails_on_invalid_json": ["utils.key_path", "pytest.raises", "jwt.algorithms.OKPAlgorithm", "<builtin>.open", "json.loads"], "tests.test_algorithms.TestOKPAlgorithms.test_okp_ed448_to_jwk_works_with_from_jwk": ["<builtin>.open", "jwt.algorithms.OKPAlgorithm", "utils.key_path"], "tests.test_algorithms.TestOKPAlgorithms": ["utils.crypto_required"], "tests.test_algorithms.TestOKPAlgorithms.test_rsa_can_compute_digest": ["jwt.algorithms.RSAAlgorithm", "base64.b64decode"], "tests.test_algorithms.TestOKPAlgorithms.test_hmac_can_compute_digest": ["jwt.algorithms.HMACAlgorithm", "base64.b64decode"], "tests.test_jwt": [], "tests.test_jwt.test_encode_decode": ["utils.utc_timestamp", "jwt.encode", "jwt.decode"], "jwt.encode": [], "jwt.decode": [], "tests.test_api_jws": ["pytest.fixture"], "tests.test_api_jws.jws": ["jwt.api_jws.PyJWS"], "jwt.api_jws.PyJWS": [], "tests.test_api_jws.payload": [], "tests.test_api_jws.TestJWS.test_register_algo_does_not_allow_duplicate_registration": ["pytest.raises", "jwt.algorithms.Algorithm"], "tests.test_api_jws.TestJWS.test_register_algo_rejects_non_algorithm_obj": ["pytest.raises"], "tests.test_api_jws.TestJWS.test_unregister_algo_removes_algorithm": [], "tests.test_api_jws.TestJWS.test_unregister_algo_throws_error_if_not_registered": ["pytest.raises"], "tests.test_api_jws.TestJWS.test_algo_parameter_removes_alg_from_algorithms_list": ["jwt.api_jws.PyJWS"], "tests.test_api_jws.TestJWS.test_override_options": ["jwt.api_jws.PyJWS"], "tests.test_api_jws.TestJWS.test_non_object_options_dont_persist": [], "tests.test_api_jws.TestJWS.test_options_must_be_dict": ["pytest.raises", "<builtin>.object"], "tests.test_api_jws.TestJWS.test_encode_decode": [], "tests.test_api_jws.TestJWS.test_decode_fails_when_alg_is_not_on_method_algorithms_param": ["pytest.raises"], "tests.test_api_jws.TestJWS.test_decode_works_with_unicode_token": [], "tests.test_api_jws.TestJWS.test_decode_missing_segments_throws_exception": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_decode_invalid_token_type_is_none": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_decode_invalid_token_type_is_int": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_decode_with_non_mapping_header_throws_exception": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_encode_algorithm_param_should_be_case_sensitive": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_encode_with_headers_alg_none": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS": ["utils.crypto_required", "pytest.mark.parametrize", "utils.no_crypto_required"], "tests.test_api_jws.TestJWS.test_encode_with_headers_alg_es256": ["cryptography.hazmat.primitives.serialization.load_pem_private_key", "<builtin>.open", "cryptography.hazmat.primitives.serialization.load_pem_public_key", "utils.key_path"], "cryptography.hazmat.primitives.serialization.load_pem_private_key": [], "cryptography.hazmat.primitives.serialization.load_pem_public_key": [], "tests.test_api_jws.TestJWS.test_encode_with_alg_hs256_and_headers_alg_es256": ["cryptography.hazmat.primitives.serialization.load_pem_private_key", "<builtin>.open", "cryptography.hazmat.primitives.serialization.load_pem_public_key", "utils.key_path"], "tests.test_api_jws.TestJWS.test_decode_algorithm_param_should_be_case_sensitive": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_bad_secret": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_decodes_valid_jws": [], "tests.test_api_jws.TestJWS.test_decodes_complete_valid_jws": [], "tests.test_api_jws.TestJWS.test_decodes_valid_es384_jws": ["<builtin>.open", "json.loads", "utils.key_path"], "tests.test_api_jws.TestJWS.test_decodes_valid_rs384_jws": ["<builtin>.open", "json.loads", "utils.key_path"], "tests.test_api_jws.TestJWS.test_load_verify_valid_jws": [], "tests.test_api_jws.TestJWS.test_allow_skip_verification": [], "tests.test_api_jws.TestJWS.test_decode_with_optional_algorithms": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_decode_no_algorithms_verify_signature_false": [], "tests.test_api_jws.TestJWS.test_load_no_verification": [], "tests.test_api_jws.TestJWS.test_no_secret": ["pytest.raises"], "tests.test_api_jws.TestJWS.test_verify_signature_with_no_secret": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_verify_signature_with_no_algo_header_throws_exception": ["pytest.raises"], "tests.test_api_jws.TestJWS.test_invalid_crypto_alg": ["pytest.raises"], "utils.no_crypto_required": [], "tests.test_api_jws.TestJWS.test_missing_crypto_library_better_error_messages": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_unicode_secret": [], "tests.test_api_jws.TestJWS.test_nonascii_secret": [], "tests.test_api_jws.TestJWS.test_bytes_secret": [], "tests.test_api_jws.TestJWS.test_sorting_of_headers": ["jwt.utils.base64url_decode"], "tests.test_api_jws.TestJWS.test_decode_invalid_header_padding": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_decode_invalid_header_string": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_decode_invalid_payload_padding": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_decode_invalid_crypto_padding": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_decode_with_algo_none_should_fail": ["pytest.raises"], "tests.test_api_jws.TestJWS.test_decode_with_algo_none_and_verify_false_should_pass": [], "tests.test_api_jws.TestJWS.test_get_unverified_header_returns_header_values": [], "tests.test_api_jws.TestJWS.test_get_unverified_header_fails_on_bad_header_types": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_encode_decode_rsa_related_algorithms": ["cryptography.hazmat.primitives.serialization.load_pem_private_key", "<builtin>.open", "cryptography.hazmat.primitives.serialization.load_ssh_public_key", "utils.key_path"], "cryptography.hazmat.primitives.serialization.load_ssh_public_key": [], "tests.test_api_jws.TestJWS.test_rsa_related_algorithms": ["jwt.api_jws.PyJWS"], "tests.test_api_jws.TestJWS.test_encode_decode_ecdsa_related_algorithms": ["cryptography.hazmat.primitives.serialization.load_pem_private_key", "<builtin>.open", "cryptography.hazmat.primitives.serialization.load_pem_public_key", "utils.key_path"], "tests.test_api_jws.TestJWS.test_ecdsa_related_algorithms": ["jwt.api_jws.PyJWS"], "tests.test_api_jws.TestJWS.test_skip_check_signature": [], "tests.test_api_jws.TestJWS.test_decode_options_must_be_dict": ["pytest.raises", "<builtin>.object"], "tests.test_api_jws.TestJWS.test_custom_json_encoder": ["json.loads", "pytest.raises", "decimal.Decimal", "jwt.utils.base64url_decode"], "tests.test_api_jws.TestJWS.test_custom_json_encoder.CustomJSONEncoder.default": ["<builtin>.super", "<builtin>.isinstance"], "tests.test_api_jws.TestJWS.test_encode_headers_parameter_adds_headers": ["json.loads", "jwt.utils.base64url_decode", "<builtin>.isinstance"], "tests.test_api_jws.TestJWS.test_encode_with_typ": ["json.loads", "jwt.utils.base64url_decode"], "tests.test_api_jws.TestJWS.test_encode_with_typ_empty_string": ["json.loads", "jwt.utils.base64url_decode"], "tests.test_api_jws.TestJWS.test_encode_with_typ_none": ["json.loads", "jwt.utils.base64url_decode"], "tests.test_api_jws.TestJWS.test_encode_with_typ_without_keywords": ["json.loads", "jwt.utils.base64url_decode"], "tests.test_api_jws.TestJWS.test_encode_fails_on_invalid_kid_types": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_encode_decode_with_detached_content": [], "tests.test_api_jws.TestJWS.test_encode_detached_content_with_b64_header": ["json.loads", "jwt.utils.base64url_decode"], "tests.test_api_jws.TestJWS.test_decode_detached_content_without_proper_argument": ["pytest.raises", "<builtin>.str"], "tests.test_api_jws.TestJWS.test_decode_warns_on_unsupported_kwarg": ["<builtin>.str", "<builtin>.len", "pytest.warns"], "tests.test_api_jws.TestJWS.test_decode_complete_warns_on_unuspported_kwarg": ["<builtin>.str", "<builtin>.len", "pytest.warns"], "tests.utils": [], "tests.utils.utc_timestamp": ["calendar.timegm", "datetime.datetime.now"], "tests.utils.key_path": ["os.path.realpath", "os.path.join", "os.path.dirname"], "os.path.realpath": [], "tests.utils.no_crypto_required": ["pytest.mark.skipif"], "pytest.mark.skipif": [], "tests.utils.crypto_required": ["pytest.mark.skipif"], "tests.test_api_jwk": [], "tests.test_api_jwk.TestPyJWK": ["utils.crypto_required"], "tests.test_api_jwk.TestPyJWK.test_should_load_key_from_jwk_data_dict": ["utils.key_path", "jwt.algorithms.RSAAlgorithm", "<builtin>.open", "jwt.api_jwk.PyJWK.from_dict", "json.loads"], "jwt.api_jwk.PyJWK.from_dict": [], "tests.test_api_jwk.TestPyJWK.test_should_load_key_from_jwk_data_json_string": ["utils.key_path", "jwt.algorithms.RSAAlgorithm", "<builtin>.open", "json.dumps", "json.loads", "jwt.api_jwk.PyJWK.from_json"], "jwt.api_jwk.PyJWK.from_json": [], "tests.test_api_jwk.TestPyJWK.test_should_load_key_without_alg_from_dict": ["utils.key_path", "<builtin>.isinstance", "<builtin>.open", "jwt.api_jwk.PyJWK.from_dict", "json.loads"], "tests.test_api_jwk.TestPyJWK.test_should_load_key_from_dict_with_algorithm": ["utils.key_path", "<builtin>.isinstance", "<builtin>.open", "jwt.api_jwk.PyJWK.from_dict", "json.loads"], "tests.test_api_jwk.TestPyJWK.test_should_load_key_ec_p256_from_dict": ["utils.key_path", "<builtin>.isinstance", "<builtin>.open", "jwt.api_jwk.PyJWK.from_dict", "json.loads"], "tests.test_api_jwk.TestPyJWK.test_should_load_key_ec_p384_from_dict": ["utils.key_path", "<builtin>.isinstance", "<builtin>.open", "jwt.api_jwk.PyJWK.from_dict", "json.loads"], "tests.test_api_jwk.TestPyJWK.test_should_load_key_ec_p521_from_dict": ["utils.key_path", "<builtin>.isinstance", "<builtin>.open", "jwt.api_jwk.PyJWK.from_dict", "json.loads"], "tests.test_api_jwk.TestPyJWK.test_should_load_key_ec_secp256k1_from_dict": ["utils.key_path", "<builtin>.isinstance", "<builtin>.open", "jwt.api_jwk.PyJWK.from_dict", "json.loads"], "tests.test_api_jwk.TestPyJWK.test_should_load_key_hmac_from_dict": ["utils.key_path", "<builtin>.isinstance", "<builtin>.open", "jwt.api_jwk.PyJWK.from_dict", "json.loads"], "tests.test_api_jwk.TestPyJWK.test_should_load_key_hmac_without_alg_from_dict": ["utils.key_path", "<builtin>.isinstance", "<builtin>.open", "jwt.api_jwk.PyJWK.from_dict", "json.loads"], "tests.test_api_jwk.TestPyJWK.test_should_load_key_okp_without_alg_from_dict": ["utils.key_path", "<builtin>.isinstance", "<builtin>.open", "jwt.api_jwk.PyJWK.from_dict", "json.loads"], "tests.test_api_jwk.TestPyJWK.test_from_dict_should_throw_exception_if_arg_is_invalid": ["utils.key_path", "pytest.raises", "<builtin>.open", "jwt.api_jwk.PyJWK.from_dict", "json.loads"], "tests.test_api_jwk.TestPyJWKSet.test_should_load_keys_from_jwk_data_dict": ["jwt.api_jwk.PyJWKSet.from_dict", "utils.key_path", "jwt.algorithms.RSAAlgorithm", "<builtin>.open", "json.loads"], "jwt.api_jwk.PyJWKSet.from_dict": [], "tests.test_api_jwk.TestPyJWKSet.test_should_load_keys_from_jwk_data_json_string": ["jwt.api_jwk.PyJWKSet.from_json", "utils.key_path", "jwt.algorithms.RSAAlgorithm", "<builtin>.open", "json.dumps", "json.loads"], "jwt.api_jwk.PyJWKSet.from_json": [], "tests.test_api_jwk.TestPyJWKSet.test_keyset_should_index_by_kid": ["jwt.api_jwk.PyJWKSet.from_dict", "utils.key_path", "jwt.algorithms.RSAAlgorithm", "pytest.raises", "<builtin>.open", "json.loads"], "tests.test_api_jwk.TestPyJWKSet.test_keyset_with_unknown_alg": ["jwt.api_jwk.PyJWKSet.from_json", "utils.key_path", "pytest.raises", "<builtin>.open", "<builtin>.len", "json.loads"], "tests.test_api_jwk.TestPyJWKSet.test_invalid_keys_list": ["jwt.api_jwk.PyJWKSet", "pytest.raises", "<builtin>.str"], "jwt.api_jwk.PyJWKSet": [], "tests.test_api_jwk.TestPyJWKSet.test_empty_keys_list": ["jwt.api_jwk.PyJWKSet", "pytest.raises", "<builtin>.str"], "tests.test_advisory": [], "tests.test_advisory.TestAdvisory": ["utils.crypto_required"], "tests.test_advisory.TestAdvisory.test_ghsa_ffqj_6fqr_9h24": ["jwt.algorithms.get_default_algorithms", "pytest.raises", "<builtin>.list", "jwt.decode"], "jwt.algorithms.get_default_algorithms": [], "tests.test_jwks_client": ["contextlib.contextmanager"], "contextlib.contextmanager": [], "tests.test_jwks_client.mocked_success_response": ["unittest.mock.Mock", "json.dumps", "unittest.mock.patch"], "unittest.mock.patch": [], "unittest.mock.Mock": [], "tests.test_jwks_client.mocked_failed_response": ["urllib.error.URLError", "unittest.mock.patch"], "urllib.error.URLError": [], "tests.test_jwks_client.mocked_first_call_wrong_kid_second_call_correct_kid": ["unittest.mock.Mock", "json.dumps", "unittest.mock.patch"], "tests.test_jwks_client.TestPyJWKClient.test_fetch_data_forwards_headers_to_correct_url": ["jwt.PyJWKClient", "<builtin>.len", "tests.test_jwks_client.mocked_success_response"], "jwt.PyJWKClient": [], "tests.test_jwks_client.TestPyJWKClient.test_get_jwk_set": ["jwt.PyJWKClient", "<builtin>.len", "tests.test_jwks_client.mocked_success_response"], "tests.test_jwks_client.TestPyJWKClient.test_get_signing_keys": ["jwt.PyJWKClient", "<builtin>.len", "<builtin>.isinstance", "tests.test_jwks_client.mocked_success_response"], "tests.test_jwks_client.TestPyJWKClient.test_get_signing_keys_if_no_use_provided": ["jwt.PyJWKClient", "<builtin>.len", "<builtin>.isinstance", "tests.test_jwks_client.mocked_success_response"], "tests.test_jwks_client.TestPyJWKClient.test_get_signing_keys_raises_if_none_found": ["jwt.PyJWKClient", "pytest.raises", "<builtin>.str", "tests.test_jwks_client.mocked_success_response"], "tests.test_jwks_client.TestPyJWKClient.test_get_signing_key": ["jwt.PyJWKClient", "<builtin>.isinstance", "tests.test_jwks_client.mocked_success_response"], "tests.test_jwks_client.TestPyJWKClient.test_get_signing_key_caches_result": ["jwt.PyJWKClient", "tests.test_jwks_client.mocked_success_response"], "tests.test_jwks_client.TestPyJWKClient.test_get_signing_key_does_not_cache_opt_out": ["jwt.PyJWKClient", "tests.test_jwks_client.mocked_success_response"], "tests.test_jwks_client.TestPyJWKClient.test_get_signing_key_from_jwt": ["jwt.PyJWKClient", "jwt.decode", "tests.test_jwks_client.mocked_success_response"], "tests.test_jwks_client.TestPyJWKClient.test_get_jwk_set_caches_result": ["jwt.PyJWKClient", "tests.test_jwks_client.mocked_success_response"], "tests.test_jwks_client.TestPyJWKClient.test_get_jwt_set_cache_expired_result": ["jwt.PyJWKClient", "time.sleep", "tests.test_jwks_client.mocked_success_response"], "time.sleep": [], "tests.test_jwks_client.TestPyJWKClient.test_get_jwt_set_cache_disabled": ["jwt.PyJWKClient", "time.sleep", "tests.test_jwks_client.mocked_success_response"], "tests.test_jwks_client.TestPyJWKClient.test_get_jwt_set_failed_request_should_clear_cache": ["jwt.PyJWKClient", "pytest.raises", "tests.test_jwks_client.mocked_failed_response", "tests.test_jwks_client.mocked_success_response"], "tests.test_jwks_client.TestPyJWKClient.test_get_jwt_set_refresh_cache": ["jwt.PyJWKClient", "tests.test_jwks_client.mocked_first_call_wrong_kid_second_call_correct_kid"], "tests.test_jwks_client.TestPyJWKClient.test_get_jwt_set_no_matching_kid_after_second_attempt": ["jwt.PyJWKClient", "pytest.raises", "tests.test_jwks_client.mocked_first_call_wrong_kid_second_call_correct_kid"], "tests.test_jwks_client.TestPyJWKClient.test_get_jwt_set_invalid_lifespan": ["jwt.PyJWKClient", "pytest.raises"]}