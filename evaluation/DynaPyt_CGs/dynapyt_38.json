{"tests.base": ["pytz.timezone", "datetime.date", "functools.partial", "marshmallow.fields.String", "marshmallow.fields.Float", "marshmallow.fields.DateTime", "tests.base.Uppercased", "marshmallow.fields.Url", "marshmallow.fields.Email", "marshmallow.fields.Decimal", "marshmallow.fields.Method", "marshmallow.fields.Function", "marshmallow.fields.Boolean", "marshmallow.fields.List", "marshmallow.fields.Integer", "marshmallow.fields.UUID", "marshmallow.fields.Time", "marshmallow.fields.Date", "marshmallow.fields.TimeDelta", "builtins.list", "marshmallow.validate.OneOf", "marshmallow.fields.Dict", "marshmallow.fields.Nested", "tests.base.UserSchema", "tests.base.UserMetaSchema", "str.lower"], "tests.test_decorators": ["marshmallow.fields.Integer", "builtins.range", "tests.test_decorators.Nested", "tests.test_decorators.Example"], "tests.test_deserialization": ["marshmallow.fields.String", "marshmallow.fields.Float", "marshmallow.fields.Email", "marshmallow.validate.OneOf", "marshmallow.fields.Integer", "builtins.len", "str.lower"], "tests.test_error_store": ["collections.namedtuple"], "tests.test_fields": ["marshmallow.fields.Field", "marshmallow.fields.String", "marshmallow.fields.List", "marshmallow.fields.Integer", "marshmallow.fields.Tuple", "marshmallow.fields.Mapping"], "tests.test_options": ["marshmallow.fields.String", "marshmallow.fields.Email", "marshmallow.fields.Integer", "marshmallow.fields.DateTime", "marshmallow.fields.Url", "marshmallow.fields.Date", "marshmallow.fields.Nested"], "tests.test_registry": ["marshmallow.fields.Integer", "marshmallow.fields.Nested"], "tests.test_schema": ["random.Random.seed", "marshmallow.fields.String", "marshmallow.fields.Email", "marshmallow.fields.Integer", "marshmallow.fields.Field", "marshmallow.fields.Method", "marshmallow.fields.Function", "marshmallow.fields.List", "marshmallow.fields.Nested"], "tests.test_utils": ["collections.namedtuple"], "tests.test_utils.PointDict.__init__": ["dict.__init__"], "tests.test_decorators.ExampleSchema.test_decorated_processors": ["marshmallow.fields.Integer"], "tests.test_decorators.test_decorated_processors": ["tests.test_decorators.test_decorated_processors.<locals>.ExampleSchema", "tests.test_decorators.test_decorated_processors.<locals>.<lambda>", "marshmallow.schema.Schema.dump", "marshmallow.schema.Schema.load"], "tests.test_decorators.ExampleSchema.add_envelope": ["tests.test_decorators.test_decorated_processors.<locals>.ExampleSchema.get_envelope_key"], "tests.test_decorators.ExampleSchema.remove_envelope": ["tests.test_decorators.test_decorated_processors.<locals>.ExampleSchema.get_envelope_key"], "tests.test_decorators.ExampleSchema.remove_tag": ["builtins.len"], "tests.test_decorators.PostSchema.test_decorated_processor_returning_none": ["marshmallow.fields.Integer"], "tests.test_decorators.PreSchema.test_decorated_processor_returning_none": ["marshmallow.fields.Integer"], "tests.test_decorators.test_decorated_processor_returning_none": ["tests.test_decorators.test_decorated_processor_returning_none.<locals>.PostSchema", "marshmallow.schema.Schema.dump", "marshmallow.schema.Schema.load", "tests.test_decorators.test_decorated_processor_returning_none.<locals>.PreSchema", "_pytest.python_api.raises"], "tests.test_decorators.MySchema.test_pass_original_single": ["marshmallow.fields.Field"], "tests.test_decorators.TestPassOriginal.test_pass_original_single": ["tests.test_decorators.TestPassOriginal.test_pass_original_single.<locals>.MySchema", "marshmallow.schema.Schema.load", "marshmallow.schema.Schema.dump"], "tests.test_decorators.MySchema.post_load": ["dict.copy", "builtins.zip", "list.append"], "tests.test_decorators.MySchema.post_dump": ["dict.copy", "builtins.zip", "list.append"], "tests.test_decorators.MySchema.test_pass_original_many": ["marshmallow.fields.Field"], "tests.test_decorators.TestPassOriginal.test_pass_original_many": ["tests.test_decorators.TestPassOriginal.test_pass_original_many.<locals>.MySchema", "marshmallow.schema.Schema.load", "marshmallow.schema.Schema.dump"], "tests.test_decorators.test_decorated_processor_inheritance": ["tests.test_decorators.test_decorated_processor_inheritance.<locals>.ParentSchema", "marshmallow.schema.Schema.dump", "tests.test_decorators.test_decorated_processor_inheritance.<locals>.ChildSchema"], "tests.test_decorators.Foo.test_pre_dump_is_invoked_before_implicit_field_generation": ["marshmallow.fields.Integer"], "tests.test_decorators.test_pre_dump_is_invoked_before_implicit_field_generation": ["tests.test_decorators.test_pre_dump_is_invoked_before_implicit_field_generation.<locals>.Foo", "marshmallow.schema.Schema.dump"], "tests.test_decorators.VSchema.test_validates": ["marshmallow.fields.String"], "tests.test_decorators.TestValidatesDecorator.test_validates": ["_pytest.python_api.raises", "tests.test_decorators.TestValidatesDecorator.test_validates.<locals>.VSchema", "marshmallow.schema.Schema.load"], "tests.test_decorators.VSchema.validate_string": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.S1.test_validates_with_attribute": ["marshmallow.fields.String"], "tests.test_decorators.TestValidatesDecorator.test_validates_with_attribute": ["_pytest.python_api.raises", "tests.test_decorators.TestValidatesDecorator.test_validates_with_attribute.<locals>.S1", "marshmallow.schema.Schema.load"], "tests.test_decorators.S1.validate_string": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.TestValidatesDecorator.test_validates_decorator": ["tests.test_decorators.ValidatesSchema", "marshmallow.schema.Schema.validate", "builtins.len", "_pytest.python_api.raises", "marshmallow.schema.Schema.load"], "tests.test_decorators.ValidatesSchema.validate_foo": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.TestValidatesDecorator.test_field_not_present": ["tests.test_decorators.TestValidatesDecorator.test_field_not_present.<locals>.BadSchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.validate"], "tests.test_decorators.Schema2.test_precedence": ["marshmallow.fields.Integer"], "tests.test_decorators.TestValidatesDecorator.test_precedence": ["tests.test_decorators.TestValidatesDecorator.test_precedence.<locals>.Schema2", "marshmallow.schema.Schema.validate", "builtins.len"], "tests.test_decorators.Schema2.validate_bar": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.BadSchema.test_validates_with_data_key": ["marshmallow.fields.String"], "tests.test_decorators.TestValidatesDecorator.test_validates_with_data_key": ["tests.test_decorators.TestValidatesDecorator.test_validates_with_data_key.<locals>.BadSchema", "marshmallow.schema.Schema.validate"], "tests.test_decorators.BadSchema.validate_string": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.NestedSchema.test_validator_nested_many_invalid_data": ["marshmallow.fields.Integer"], "tests.test_decorators.MySchema.test_validator_nested_many_invalid_data": ["marshmallow.fields.Nested"], "tests.test_decorators.TestValidatesSchemaDecorator.test_validator_nested_many_invalid_data": ["tests.test_decorators.TestValidatesSchemaDecorator.test_validator_nested_many_invalid_data.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_decorators.NestedSchema.test_validator_nested_many_schema_error": ["marshmallow.fields.Integer"], "tests.test_decorators.MySchema.test_validator_nested_many_schema_error": ["marshmallow.fields.Nested"], "tests.test_decorators.TestValidatesSchemaDecorator.test_validator_nested_many_schema_error": ["tests.test_decorators.TestValidatesSchemaDecorator.test_validator_nested_many_schema_error.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_decorators.NestedSchema.validate_schema": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.NestedSchema.test_validator_nested_many_field_error": ["marshmallow.fields.Integer"], "tests.test_decorators.MySchema.test_validator_nested_many_field_error": ["marshmallow.fields.Nested"], "tests.test_decorators.TestValidatesSchemaDecorator.test_validator_nested_many_field_error": ["tests.test_decorators.TestValidatesSchemaDecorator.test_validator_nested_many_field_error.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_decorators.NestedSchema.test_validator_nested_many_pass_original_and_pass_many": ["marshmallow.fields.Integer"], "tests.test_decorators.MySchema.test_validator_nested_many_pass_original_and_pass_many": ["marshmallow.fields.Nested"], "tests.test_decorators.TestValidatesSchemaDecorator.test_validator_nested_many_pass_original_and_pass_many": ["tests.test_decorators.TestValidatesSchemaDecorator.test_validator_nested_many_pass_original_and_pass_many.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_decorators.MySchema.test_decorated_validators": ["marshmallow.fields.Integer"], "tests.test_decorators.TestValidatesSchemaDecorator.test_decorated_validators": ["tests.test_decorators.TestValidatesSchemaDecorator.test_decorated_validators.<locals>.MySchema", "marshmallow.schema.Schema.validate", "builtins.len"], "tests.test_decorators.MySchema.validate_schema": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.MySchema.validate_raw": ["builtins.type", "builtins.len", "marshmallow.exceptions.ValidationError"], "tests.test_decorators.MySchema.validate_bar": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.MySchema.test_multiple_validators": ["marshmallow.fields.Integer"], "tests.test_decorators.TestValidatesSchemaDecorator.test_multiple_validators": ["tests.test_decorators.TestValidatesSchemaDecorator.test_multiple_validators.<locals>.MySchema", "marshmallow.schema.Schema.validate", "builtins.type", "builtins.len"], "tests.test_decorators.NestedSchema.test_multiple_validators_merge_dict_errors": ["marshmallow.fields.Integer"], "tests.test_decorators.MySchema.test_multiple_validators_merge_dict_errors": ["marshmallow.fields.Nested"], "tests.test_decorators.TestValidatesSchemaDecorator.test_multiple_validators_merge_dict_errors": ["_pytest.python_api.raises", "tests.test_decorators.TestValidatesSchemaDecorator.test_multiple_validators_merge_dict_errors.<locals>.MySchema", "marshmallow.schema.Schema.load"], "tests.test_decorators.MySchema.validate_nested_bar_1": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.MySchema.validate_nested_bar_2": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.MySchema.validate_nested_foo": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.MySchema.test_passing_original_data": ["marshmallow.fields.Integer"], "tests.test_decorators.TestValidatesSchemaDecorator.test_passing_original_data": ["tests.test_decorators.TestValidatesSchemaDecorator.test_passing_original_data.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_decorators.MySchema.validate_original_bar": ["tests.test_decorators.TestValidatesSchemaDecorator.test_passing_original_data.<locals>.MySchema.validate_original_bar.<locals>.check"], "tests.test_decorators.MySchema.check": ["builtins.isinstance", "marshmallow.exceptions.ValidationError"], "tests.test_decorators.MySchema.validate_original": ["builtins.isinstance", "marshmallow.exceptions.ValidationError"], "tests.test_decorators.NestedSchema.test_allow_reporting_field_errors_in_schema_validator": ["marshmallow.fields.Integer"], "tests.test_decorators.MySchema.test_allow_reporting_field_errors_in_schema_validator": ["marshmallow.fields.Integer", "marshmallow.fields.Nested"], "tests.test_decorators.TestValidatesSchemaDecorator.test_allow_reporting_field_errors_in_schema_validator": ["tests.test_decorators.TestValidatesSchemaDecorator.test_allow_reporting_field_errors_in_schema_validator.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_decorators.MySchema.consistency_validation": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.TestValidatesSchemaDecorator.test_allow_arbitrary_field_names_in_error": ["tests.test_decorators.TestValidatesSchemaDecorator.test_allow_arbitrary_field_names_in_error.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_decorators.MySchema.validator": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.MySchema.test_skip_on_field_errors": ["marshmallow.fields.Integer"], "tests.test_decorators.TestValidatesSchemaDecorator.test_skip_on_field_errors": ["tests.test_decorators.TestValidatesSchemaDecorator.test_skip_on_field_errors.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_decorators.MySchema.validate_many": ["builtins.type", "builtins.len", "marshmallow.exceptions.ValidationError"], "tests.test_decorators.ExampleSchema.test_decorator_error_handling": ["marshmallow.fields.Integer"], "tests.test_decorators.test_decorator_error_handling": ["tests.test_decorators.test_decorator_error_handling.<locals>.ExampleSchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load", "builtins.len"], "tests.test_decorators.ExampleSchema.pre_load_error1": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.ExampleSchema.post_load_error1": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.ExampleSchema.pre_load_error2": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.ExampleSchema.post_load_error2": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.ExampleSchema.pre_load_error3": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.test_decorator_error_handling_with_load": ["tests.test_decorators.test_decorator_error_handling_with_load.<locals>.ExampleSchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load", "builtins.object", "marshmallow.schema.Schema.dump"], "tests.test_decorators.ExampleSchema.raise_value_error": ["marshmallow.exceptions.ValidationError"], "tests.test_decorators.test_decorator_error_handling_with_load_dict_error": ["tests.test_decorators.test_decorator_error_handling_with_load_dict_error.<locals>.ExampleSchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load", "builtins.object", "marshmallow.schema.Schema.dump"], "tests.test_decorators.test_decorator_error_handling_with_dump": ["tests.test_decorators.test_decorator_error_handling_with_dump.<locals>.ExampleSchema", "_pytest.python_api.raises", "builtins.object", "marshmallow.schema.Schema.dump", "marshmallow.schema.Schema.load"], "tests.test_decorators.NestedSchema.test_decorator_post_dump_with_nested_original_and_pass_many": ["marshmallow.fields.Integer"], "tests.test_decorators.ExampleSchema.test_decorator_post_dump_with_nested_original_and_pass_many": ["marshmallow.fields.Nested"], "tests.test_decorators.test_decorator_post_dump_with_nested_original_and_pass_many": ["tests.test_decorators.test_decorator_post_dump_with_nested_original_and_pass_many.<locals>.ExampleSchema", "marshmallow.schema.Schema.dump"], "tests.test_decorators.NestedSchema.test_decorator_post_load_with_nested_original_and_pass_many": ["marshmallow.fields.Integer"], "tests.test_decorators.ExampleSchema.test_decorator_post_load_with_nested_original_and_pass_many": ["marshmallow.fields.Nested"], "tests.test_decorators.test_decorator_post_load_with_nested_original_and_pass_many": ["tests.test_decorators.test_decorator_post_load_with_nested_original_and_pass_many.<locals>.ExampleSchema", "marshmallow.schema.Schema.load"], "tests.test_deserialization.TestDeserializingNone.test_fields_allow_none_deserialize_to_none": ["marshmallow.fields.String", "marshmallow.fields.Field.deserialize", "marshmallow.fields.Integer", "marshmallow.fields.Boolean", "marshmallow.fields.Float", "marshmallow.fields.Number", "marshmallow.fields.DateTime", "marshmallow.fields.Time", "marshmallow.fields.Date", "marshmallow.fields.TimeDelta", "marshmallow.fields.Dict", "marshmallow.fields.Url", "marshmallow.fields.Email", "marshmallow.fields.UUID", "marshmallow.fields.Decimal", "marshmallow.fields.IP", "marshmallow.fields.IPv4", "marshmallow.fields.IPv6", "marshmallow.fields.IPInterface", "marshmallow.fields.IPv4Interface", "marshmallow.fields.IPv6Interface", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'HairColorEnum'>, by_value=<class 'marshmallow.fields.String'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>, by_value=<class 'marshmallow.fields.Integer'>)"], "tests.test_deserialization.TestDeserializingNone.test_fields_dont_allow_none_by_default": ["marshmallow.fields.String", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "marshmallow.fields.Integer", "marshmallow.fields.Boolean", "marshmallow.fields.Float", "marshmallow.fields.Number", "marshmallow.fields.DateTime", "marshmallow.fields.Time", "marshmallow.fields.Date", "marshmallow.fields.TimeDelta", "marshmallow.fields.Dict", "marshmallow.fields.Url", "marshmallow.fields.Email", "marshmallow.fields.UUID", "marshmallow.fields.Decimal", "marshmallow.fields.IP", "marshmallow.fields.IPv4", "marshmallow.fields.IPv6", "marshmallow.fields.IPInterface", "marshmallow.fields.IPv4Interface", "marshmallow.fields.IPv6Interface", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'HairColorEnum'>, by_value=<class 'marshmallow.fields.String'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>, by_value=<class 'marshmallow.fields.Integer'>)"], "tests.test_deserialization.TestDeserializingNone.test_allow_none_is_true_if_missing_is_true": ["marshmallow.fields.Field", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestDeserializingNone.test_list_field_deserialize_none_to_none": ["marshmallow.fields.String", "marshmallow.fields.List", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestDeserializingNone.test_tuple_field_deserialize_none_to_none": ["marshmallow.fields.String", "marshmallow.fields.Tuple", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestDeserializingNone.test_list_of_nested_allow_none_deserialize_none_to_none": ["marshmallow.schema.Schema", "marshmallow.fields.Nested", "marshmallow.fields.List", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestDeserializingNone.test_list_of_nested_non_allow_none_deserialize_none_to_validation_error": ["marshmallow.schema.Schema", "marshmallow.fields.Nested", "marshmallow.fields.List", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_float_field_deserialization": ["marshmallow.fields.Float", "marshmallow.fields.Field.deserialize", "math.isclose"], "tests.test_deserialization.TestFieldDeserialization.test_invalid_float_field_deserialization": ["marshmallow.fields.Float", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_float_field_overflow": ["marshmallow.fields.Float", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_integer_field_deserialization": ["marshmallow.fields.Integer", "marshmallow.fields.Field.deserialize", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_strict_integer_field_deserialization": ["marshmallow.fields.Integer", "marshmallow.fields.Field.deserialize", "_pytest.python_api.raises", "decimal.Decimal"], "tests.test_deserialization.TestFieldDeserialization.test_decimal_field_deserialization": ["decimal.Decimal", "marshmallow.fields.Decimal", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "Decimal.as_tuple", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_decimal_field_with_places": ["decimal.Decimal", "marshmallow.fields.Decimal", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_decimal_field_with_places_and_rounding": ["decimal.Decimal", "marshmallow.fields.Decimal", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_decimal_field_deserialization_string": ["decimal.Decimal", "marshmallow.fields.Decimal", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_decimal_field_special_values": ["marshmallow.fields.Decimal", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "Decimal.is_qnan", "Decimal.is_signed", "Decimal.is_infinite", "Decimal.is_zero"], "tests.test_deserialization.TestFieldDeserialization.test_decimal_field_special_values_not_permitted": ["marshmallow.fields.Decimal", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "builtins.str", "builtins.isinstance", "Decimal.is_zero", "Decimal.is_signed"], "tests.test_deserialization.TestFieldDeserialization.test_float_field_allow_nan": ["marshmallow.fields.Float", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "builtins.str", "builtins.isinstance", "str.endswith", "math.isnan", "builtins.float"], "tests.test_deserialization.TestFieldDeserialization.test_string_field_deserialization": ["marshmallow.fields.String", "marshmallow.fields.Field.deserialize", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_boolean_field_deserialization": ["marshmallow.fields.Boolean", "marshmallow.fields.Field.deserialize", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_boolean_field_deserialization_with_custom_truthy_values": ["tests.test_deserialization.TestFieldDeserialization.test_boolean_field_deserialization_with_custom_truthy_values.<locals>.MyBoolean", "marshmallow.fields.Field.deserialize", "marshmallow.fields.Boolean"], "tests.test_deserialization.TestFieldDeserialization.test_boolean_field_deserialization_with_custom_truthy_values_invalid": ["tests.test_deserialization.TestFieldDeserialization.test_boolean_field_deserialization_with_custom_truthy_values_invalid.<locals>.MyBoolean", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "builtins.str", "marshmallow.fields.Boolean"], "tests.test_deserialization.TestFieldDeserialization.test_boolean_field_deserialization_with_empty_truthy": ["marshmallow.fields.Boolean", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_boolean_field_deserialization_with_custom_falsy_values": ["marshmallow.fields.Boolean", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_field_toggle_show_invalid_value_in_error_message": ["marshmallow.fields.Boolean", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "builtins.str", "marshmallow.fields.Number", "marshmallow.fields.Integer", "marshmallow.fields.DateTime"], "tests.test_deserialization.TestFieldDeserialization.test_invalid_datetime_deserialization": ["marshmallow.fields.DateTime", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_custom_date_format_datetime_field_deserialization": ["marshmallow.fields.DateTime", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "datetime.datetime", "marshmallow.fields.NaiveDateTime", "marshmallow.fields.AwareDateTime"], "tests.test_deserialization.TestFieldDeserialization.test_rfc_datetime_field_deserialization": ["marshmallow.fields.DateTime", "marshmallow.fields.Field.deserialize", "marshmallow.fields.NaiveDateTime", "marshmallow.fields.AwareDateTime", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_iso_datetime_field_deserialization": ["marshmallow.fields.DateTime", "marshmallow.fields.Field.deserialize", "marshmallow.fields.NaiveDateTime", "marshmallow.fields.AwareDateTime", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_timestamp_field_deserialization": ["marshmallow.fields.DateTime", "marshmallow.fields.Field.deserialize", "marshmallow.fields.NaiveDateTime", "marshmallow.fields.AwareDateTime", "_pytest.python_api.raises", "datetime.replace"], "tests.test_deserialization.TestFieldDeserialization.test_invalid_timestamp_field_deserialization": ["marshmallow.fields.DateTime", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_naive_datetime_with_timezone": ["marshmallow.fields.NaiveDateTime", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_aware_datetime_default_timezone": ["marshmallow.fields.AwareDateTime", "marshmallow.fields.Field.deserialize", "datetime.datetime"], "tests.test_deserialization.TestFieldDeserialization.test_time_field_deserialization": ["marshmallow.fields.Time", "datetime.time", "time.isoformat", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "tests.base.assert_time_equal"], "tests.test_deserialization.TestFieldDeserialization.test_invalid_time_field_deserialization": ["marshmallow.fields.Time", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_custom_time_format_time_field_deserialization": ["marshmallow.fields.Time", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "datetime.time"], "tests.test_deserialization.TestFieldDeserialization.test_iso_time_field_deserialization": ["marshmallow.fields.Time", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_invalid_timedelta_precision": ["_pytest.python_api.raises", "marshmallow.fields.TimeDelta"], "tests.test_deserialization.TestFieldDeserialization.test_timedelta_field_deserialization": ["marshmallow.fields.TimeDelta", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "datetime.timedelta", "timedelta.total_seconds", "math.isclose", "math.floor"], "tests.test_deserialization.TestFieldDeserialization.test_invalid_timedelta_field_deserialization": ["marshmallow.fields.TimeDelta", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_date_field_deserialization": ["marshmallow.fields.Date", "datetime.date", "date.isoformat", "marshmallow.fields.Field.deserialize", "builtins.type", "tests.base.assert_date_equal"], "tests.test_deserialization.TestFieldDeserialization.test_invalid_date_field_deserialization": ["marshmallow.fields.Date", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_dict_field_deserialization": ["marshmallow.fields.Dict", "marshmallow.fields.Field.deserialize", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_structured_dict_value_deserialization": ["marshmallow.fields.List", "marshmallow.fields.Dict", "marshmallow.fields.Field.deserialize", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_structured_dict_key_deserialization": ["marshmallow.fields.Dict", "marshmallow.fields.Field.deserialize", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_structured_dict_key_value_deserialization": ["marshmallow.validate.Email", "marshmallow.validate.Regexp", "marshmallow.fields.String", "marshmallow.fields.Dict", "marshmallow.fields.Field.deserialize", "decimal.Decimal", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_url_field_deserialization": ["marshmallow.fields.Url", "marshmallow.fields.Field.deserialize", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_url_field_non_list_validators": ["marshmallow.validate.Length", "marshmallow.fields.Url", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_relative_url_field_deserialization": ["marshmallow.fields.Url", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_url_field_schemes_argument": ["marshmallow.fields.Url", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_email_field_deserialization": ["marshmallow.fields.Email", "marshmallow.fields.Field.deserialize", "_pytest.python_api.raises", "marshmallow.validate.Length"], "tests.test_deserialization.TestFieldDeserialization.test_email_field_non_list_validators": ["marshmallow.validate.Length", "marshmallow.fields.Email", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_function_field_deserialization_is_noop_by_default": ["marshmallow.fields.Function", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_function_field_deserialization_with_callable": ["marshmallow.fields.Function", "marshmallow.fields.Field.deserialize", "str.upper"], "tests.test_deserialization.TestFieldDeserialization.test_function_field_deserialization_with_context": ["marshmallow.fields.Function", "tests.test_deserialization.TestFieldDeserialization.test_function_field_deserialization_with_context.<locals>.Parent", "marshmallow.fields.Field.deserialize", "str.upper"], "tests.test_deserialization.TestFieldDeserialization.test_function_field_passed_deserialize_only_is_load_only": ["marshmallow.fields.Function"], "tests.test_deserialization.TestFieldDeserialization.test_function_field_passed_deserialize_and_serialize_is_not_load_only": ["marshmallow.fields.Function"], "tests.test_deserialization.TestFieldDeserialization.test_uuid_field_deserialization": ["marshmallow.fields.UUID", "uuid.uuid4", "builtins.str", "marshmallow.fields.Field.deserialize", "builtins.isinstance"], "tests.test_deserialization.TestFieldDeserialization.test_invalid_uuid_deserialization": ["marshmallow.fields.UUID", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_ip_field_deserialization": ["marshmallow.fields.IP", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "builtins.str"], "tests.test_deserialization.TestFieldDeserialization.test_invalid_ip_deserialization": ["marshmallow.fields.IP", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_ipv4_field_deserialization": ["marshmallow.fields.IPv4", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "builtins.str"], "tests.test_deserialization.TestFieldDeserialization.test_invalid_ipv4_deserialization": ["marshmallow.fields.IPv4", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_ipv6_field_deserialization": ["marshmallow.fields.IPv6", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "builtins.str"], "tests.test_deserialization.TestFieldDeserialization.test_ipinterface_field_deserialization": ["marshmallow.fields.IPInterface", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "builtins.str"], "tests.test_deserialization.TestFieldDeserialization.test_invalid_ipinterface_deserialization": ["marshmallow.fields.IPInterface", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_ipv4interface_field_deserialization": ["marshmallow.fields.IPv4Interface", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "builtins.str"], "tests.test_deserialization.TestFieldDeserialization.test_invalid_ipv4interface_deserialization": ["marshmallow.fields.IPv4Interface", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_ipv6interface_field_deserialization": ["marshmallow.fields.IPv6Interface", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "builtins.str"], "tests.test_deserialization.TestFieldDeserialization.test_invalid_ipv6interface_deserialization": ["marshmallow.fields.IPv6Interface", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_enum_field_by_symbol_deserialization": ["marshmallow.fields.Enum", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_enum_field_by_symbol_invalid_value": ["marshmallow.fields.Enum", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_enum_field_by_symbol_not_string": ["marshmallow.fields.Enum", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_enum_field_by_value_true_deserialization": ["marshmallow.fields.Enum", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_enum_field_by_value_field_deserialization": ["marshmallow.fields.Enum", "marshmallow.fields.Field.deserialize", "marshmallow.fields.Date"], "tests.test_deserialization.TestFieldDeserialization.test_enum_field_by_value_true_invalid_value": ["marshmallow.fields.Enum", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_enum_field_by_value_field_invalid_value": ["marshmallow.fields.Enum", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "marshmallow.fields.Date"], "tests.test_deserialization.TestFieldDeserialization.test_enum_field_by_value_true_wrong_type": ["marshmallow.fields.Enum", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_enum_field_by_value_field_wrong_type": ["marshmallow.fields.Enum", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "marshmallow.fields.Date"], "tests.test_deserialization.TestFieldDeserialization.test_deserialization_function_must_be_callable": ["_pytest.python_api.raises", "marshmallow.fields.Function"], "tests.test_deserialization.MiniUserSchema.test_method_field_deserialization_is_noop_by_default": ["marshmallow.fields.Method"], "tests.test_deserialization.TestFieldDeserialization.test_method_field_deserialization_is_noop_by_default": ["tests.test_deserialization.TestFieldDeserialization.test_method_field_deserialization_is_noop_by_default.<locals>.MiniUserSchema", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.MiniUserSchema.test_deserialization_method": ["marshmallow.fields.Method"], "tests.test_deserialization.TestFieldDeserialization.test_deserialization_method": ["tests.test_deserialization.TestFieldDeserialization.test_deserialization_method.<locals>.MiniUserSchema", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.MiniUserSchema.lowercase_name": ["str.lower"], "tests.test_deserialization.BadSchema.test_deserialization_method_must_be_a_method": ["marshmallow.fields.Method"], "tests.test_deserialization.TestFieldDeserialization.test_deserialization_method_must_be_a_method": ["_pytest.python_api.raises", "tests.test_deserialization.TestFieldDeserialization.test_deserialization_method_must_be_a_method.<locals>.BadSchema"], "tests.test_deserialization.MethodDeserializeOnly.test_method_field_deserialize_only": ["marshmallow.fields.Method"], "tests.test_deserialization.TestFieldDeserialization.test_method_field_deserialize_only": ["tests.test_deserialization.TestFieldDeserialization.test_method_field_deserialize_only.<locals>.MethodDeserializeOnly", "marshmallow.schema.Schema.load"], "tests.test_deserialization.MethodDeserializeOnly.lowercase_name": ["str.lower"], "tests.test_deserialization.TestFieldDeserialization.test_datetime_list_field_deserialization": ["datetime.now", "datetime.utcnow", "datetime.isoformat", "marshmallow.fields.DateTime", "marshmallow.fields.List", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "builtins.zip", "tests.base.assert_date_equal"], "tests.test_deserialization.TestFieldDeserialization.test_list_field_deserialize_invalid_item": ["marshmallow.fields.List", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "marshmallow.fields.String"], "tests.test_deserialization.TestFieldDeserialization.test_list_field_deserialize_multiple_invalid_items": ["marshmallow.validate.Range", "marshmallow.fields.Integer", "marshmallow.fields.List", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "builtins.len"], "tests.test_deserialization.TestFieldDeserialization.test_list_field_deserialize_value_that_is_not_a_list": ["marshmallow.fields.String", "marshmallow.fields.List", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_datetime_int_tuple_field_deserialization": ["datetime.now", "datetime.isoformat", "marshmallow.fields.DateTime", "marshmallow.fields.Integer", "marshmallow.fields.Tuple", "marshmallow.fields.Field.deserialize", "builtins.isinstance", "builtins.len", "builtins.zip"], "tests.test_deserialization.TestFieldDeserialization.test_tuple_field_deserialize_invalid_item": ["marshmallow.fields.Tuple", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_deserialization.TestFieldDeserialization.test_tuple_field_deserialize_multiple_invalid_items": ["marshmallow.validate.Range", "marshmallow.fields.Integer", "marshmallow.fields.Tuple", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "builtins.len"], "tests.test_deserialization.TestFieldDeserialization.test_tuple_field_deserialize_value_that_is_not_a_collection": ["marshmallow.fields.String", "marshmallow.fields.Tuple", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_tuple_field_deserialize_invalid_length": ["marshmallow.fields.String", "marshmallow.fields.Tuple", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.TestFieldDeserialization.test_constant_field_deserialization": ["marshmallow.fields.Constant", "marshmallow.fields.Field.deserialize"], "tests.test_deserialization.MySchema.test_constant_is_always_included_in_deserialized_data": ["marshmallow.fields.Constant"], "tests.test_deserialization.TestFieldDeserialization.test_constant_is_always_included_in_deserialized_data": ["tests.test_deserialization.TestFieldDeserialization.test_constant_is_always_included_in_deserialized_data.<locals>.MySchema", "marshmallow.schema.Schema.load"], "tests.test_deserialization.TestFieldDeserialization.test_field_deserialization_with_user_validator_function": ["marshmallow.fields.String", "marshmallow.fields.Field.deserialize", "str.lower", "_pytest.python_api.raises", "builtins.type"], "tests.test_deserialization.TestFieldDeserialization.test_field_deserialization_with_user_validator_class_that_returns_bool": ["tests.test_deserialization.TestFieldDeserialization.test_field_deserialization_with_user_validator_class_that_returns_bool.<locals>.MyValidator", "marshmallow.fields.Field", "marshmallow.fields.Field.deserialize", "_pytest.python_api.raises"], "tests.test_deserialization.MySchema.test_field_deserialization_with_user_validator_that_raises_error_with_list": ["marshmallow.fields.Field"], "tests.test_deserialization.TestFieldDeserialization.test_field_deserialization_with_user_validator_that_raises_error_with_list": ["tests.test_deserialization.TestFieldDeserialization.test_field_deserialization_with_user_validator_that_raises_error_with_list.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_deserialization.TestFieldDeserialization.validator": ["marshmallow.exceptions.ValidationError"], "tests.test_deserialization.TestFieldDeserialization.test_validator_must_return_false_to_raise_error": ["marshmallow.fields.String", "marshmallow.fields.Field.deserialize", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_field_deserialization_with_validator_with_nonascii_input": ["marshmallow.fields.String", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "builtins.type"], "tests.test_deserialization.TestFieldDeserialization.test_field_deserialization_with_user_validators": ["marshmallow.fields.String", "marshmallow.fields.Field.deserialize", "str.lower", "_pytest.python_api.raises"], "tests.test_deserialization.TestFieldDeserialization.test_field_deserialization_with_custom_error_message": ["marshmallow.fields.String", "_pytest.python_api.raises", "marshmallow.fields.Field.deserialize", "str.lower"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_to_dict": ["tests.test_deserialization.SimpleUserSchema", "marshmallow.schema.Schema.load", "math.isclose"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_missing_values": ["tests.test_deserialization.SimpleUserSchema", "marshmallow.schema.Schema.load"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_many": ["tests.test_deserialization.SimpleUserSchema", "marshmallow.schema.Schema.load", "builtins.isinstance", "builtins.int"], "tests.test_deserialization.TestSchemaDeserialization.test_exclude": ["tests.test_deserialization.SimpleUserSchema", "marshmallow.schema.Schema.load"], "tests.test_deserialization.SimpleBlogSerializer.test_nested_single_deserialization_to_dict": ["marshmallow.fields.String", "marshmallow.fields.Nested"], "tests.test_deserialization.TestSchemaDeserialization.test_nested_single_deserialization_to_dict": ["tests.test_deserialization.TestSchemaDeserialization.test_nested_single_deserialization_to_dict.<locals>.SimpleBlogSerializer", "marshmallow.schema.Schema.load"], "tests.test_deserialization.SimpleBlogSerializer.test_nested_list_deserialization_to_dict": ["marshmallow.fields.String", "marshmallow.fields.Nested"], "tests.test_deserialization.TestSchemaDeserialization.test_nested_list_deserialization_to_dict": ["tests.test_deserialization.TestSchemaDeserialization.test_nested_list_deserialization_to_dict.<locals>.SimpleBlogSerializer", "marshmallow.schema.Schema.load", "builtins.isinstance"], "tests.test_deserialization.PetSchema.test_nested_single_none_not_allowed": ["marshmallow.fields.String"], "tests.test_deserialization.OwnerSchema.test_nested_single_none_not_allowed": ["tests.test_deserialization.TestSchemaDeserialization.test_nested_single_none_not_allowed.<locals>.PetSchema", "marshmallow.fields.Nested"], "tests.test_deserialization.TestSchemaDeserialization.test_nested_single_none_not_allowed": ["tests.test_deserialization.TestSchemaDeserialization.test_nested_single_none_not_allowed.<locals>.OwnerSchema", "marshmallow.schema.Schema.validate"], "tests.test_deserialization.PetSchema.test_nested_many_non_not_allowed": ["marshmallow.fields.String"], "tests.test_deserialization.StoreSchema.test_nested_many_non_not_allowed": ["tests.test_deserialization.TestSchemaDeserialization.test_nested_many_non_not_allowed.<locals>.PetSchema", "marshmallow.fields.Nested"], "tests.test_deserialization.TestSchemaDeserialization.test_nested_many_non_not_allowed": ["tests.test_deserialization.TestSchemaDeserialization.test_nested_many_non_not_allowed.<locals>.StoreSchema", "marshmallow.schema.Schema.validate"], "tests.test_deserialization.PetSchema.test_nested_single_required_missing": ["marshmallow.fields.String"], "tests.test_deserialization.OwnerSchema.test_nested_single_required_missing": ["tests.test_deserialization.TestSchemaDeserialization.test_nested_single_required_missing.<locals>.PetSchema", "marshmallow.fields.Nested"], "tests.test_deserialization.TestSchemaDeserialization.test_nested_single_required_missing": ["tests.test_deserialization.TestSchemaDeserialization.test_nested_single_required_missing.<locals>.OwnerSchema", "marshmallow.schema.Schema.validate"], "tests.test_deserialization.PetSchema.test_nested_many_required_missing": ["marshmallow.fields.String"], "tests.test_deserialization.StoreSchema.test_nested_many_required_missing": ["tests.test_deserialization.TestSchemaDeserialization.test_nested_many_required_missing.<locals>.PetSchema", "marshmallow.fields.Nested"], "tests.test_deserialization.TestSchemaDeserialization.test_nested_many_required_missing": ["tests.test_deserialization.TestSchemaDeserialization.test_nested_many_required_missing.<locals>.StoreSchema", "marshmallow.schema.Schema.validate"], "tests.test_deserialization.ANestedSchema.test_nested_only_basestring": ["marshmallow.fields.String"], "tests.test_deserialization.MainSchema.test_nested_only_basestring": ["marshmallow.fields.String", "marshmallow.fields.Pluck"], "tests.test_deserialization.TestSchemaDeserialization.test_nested_only_basestring": ["tests.test_deserialization.TestSchemaDeserialization.test_nested_only_basestring.<locals>.MainSchema", "marshmallow.schema.Schema.load"], "tests.test_deserialization.ANestedSchema.test_nested_only_basestring_with_list_data": ["marshmallow.fields.String"], "tests.test_deserialization.MainSchema.test_nested_only_basestring_with_list_data": ["marshmallow.fields.String", "marshmallow.fields.Pluck"], "tests.test_deserialization.TestSchemaDeserialization.test_nested_only_basestring_with_list_data": ["tests.test_deserialization.TestSchemaDeserialization.test_nested_only_basestring_with_list_data.<locals>.MainSchema", "marshmallow.schema.Schema.load"], "tests.test_deserialization.SimpleBlogSerializer.test_nested_none_deserialization": ["marshmallow.fields.String", "marshmallow.fields.Nested"], "tests.test_deserialization.TestSchemaDeserialization.test_nested_none_deserialization": ["tests.test_deserialization.TestSchemaDeserialization.test_nested_none_deserialization.<locals>.SimpleBlogSerializer", "marshmallow.schema.Schema.load"], "tests.test_deserialization.AliasingUserSerializer.test_deserialize_with_attribute_param": ["marshmallow.fields.Email", "marshmallow.fields.Integer"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_attribute_param": ["tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_attribute_param.<locals>.AliasingUserSerializer", "marshmallow.schema.Schema.load"], "tests.test_deserialization.MySchema.test_deserialize_with_attribute_param_symmetry": ["marshmallow.fields.Field"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_attribute_param_symmetry": ["tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_attribute_param_symmetry.<locals>.MySchema", "marshmallow.schema.Schema.dump", "marshmallow.schema.Schema.load"], "tests.test_deserialization.AliasingUserSerializer.test_deserialize_with_attribute_param_error_returns_field_name_not_attribute_name": ["marshmallow.fields.Email", "marshmallow.fields.Integer"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_attribute_param_error_returns_field_name_not_attribute_name": ["_pytest.python_api.raises", "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_attribute_param_error_returns_field_name_not_attribute_name.<locals>.AliasingUserSerializer", "marshmallow.schema.Schema.load"], "tests.test_deserialization.AliasingUserSerializer.test_deserialize_with_attribute_param_error_returns_data_key_not_attribute_name": ["marshmallow.fields.String", "marshmallow.fields.Email", "marshmallow.fields.Integer"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_attribute_param_error_returns_data_key_not_attribute_name": ["_pytest.python_api.raises", "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_attribute_param_error_returns_data_key_not_attribute_name.<locals>.AliasingUserSerializer", "marshmallow.schema.Schema.load"], "tests.test_deserialization.AliasingUserSerializer.test_deserialize_with_data_key_param": ["marshmallow.fields.String", "marshmallow.fields.Email", "marshmallow.fields.Integer"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_data_key_param": ["tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_data_key_param.<locals>.AliasingUserSerializer", "marshmallow.schema.Schema.load"], "tests.test_deserialization.MySchema.test_deserialize_with_data_key_as_empty_string": ["marshmallow.fields.Field"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_data_key_as_empty_string": ["tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_data_key_as_empty_string.<locals>.MySchema", "marshmallow.schema.Schema.load"], "tests.test_deserialization.AliasingUserSerializer.test_deserialize_with_dump_only_param": ["marshmallow.fields.String", "marshmallow.fields.Integer", "marshmallow.fields.List"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_dump_only_param": ["tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_dump_only_param.<locals>.AliasingUserSerializer", "marshmallow.schema.Schema.load"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_missing_param_value": ["datetime.datetime", "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_missing_param_value.<locals>.AliasingUserSerializer", "marshmallow.schema.Schema.load"], "tests.test_deserialization.AliasingUserSerializer.test_deserialize_with_missing_param_value": ["marshmallow.fields.String", "marshmallow.fields.DateTime"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_missing_param_callable": ["datetime.datetime", "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_missing_param_callable.<locals>.AliasingUserSerializer", "marshmallow.schema.Schema.load"], "tests.test_deserialization.AliasingUserSerializer.test_deserialize_with_missing_param_callable": ["marshmallow.fields.String", "marshmallow.fields.DateTime"], "tests.test_deserialization.AliasingUserSerializer.test_deserialize_with_missing_param_none": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_missing_param_none": ["tests.test_deserialization.TestSchemaDeserialization.test_deserialize_with_missing_param_none.<locals>.AliasingUserSerializer", "marshmallow.schema.Schema.load"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialization_raises_with_errors": ["tests.test_deserialization.Validator", "_pytest.python_api.raises", "marshmallow.schema.Schema.load"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialization_raises_with_errors_with_multiple_validators": ["tests.test_deserialization.Validators", "_pytest.python_api.raises", "marshmallow.schema.Schema.load"], "tests.test_deserialization.TestSchemaDeserialization.test_deserialization_many_raises_errors": ["tests.test_deserialization.Validator", "_pytest.python_api.raises", "marshmallow.schema.Schema.load"], "tests.test_deserialization.MySchema.test_validation_errors_are_stored": ["marshmallow.fields.Field"], "tests.test_deserialization.TestSchemaDeserialization.test_validation_errors_are_stored": ["_pytest.python_api.raises", "tests.test_deserialization.TestSchemaDeserialization.test_validation_errors_are_stored.<locals>.MySchema", "marshmallow.schema.Schema.load"], "tests.test_deserialization.TestSchemaDeserialization.validate_field": ["marshmallow.exceptions.ValidationError"], "tests.test_deserialization.MySchema.test_multiple_errors_can_be_stored_for_a_field": ["marshmallow.fields.Field"], "tests.test_deserialization.TestSchemaDeserialization.test_multiple_errors_can_be_stored_for_a_field": ["_pytest.python_api.raises", "tests.test_deserialization.TestSchemaDeserialization.test_multiple_errors_can_be_stored_for_a_field.<locals>.MySchema", "marshmallow.schema.Schema.load", "builtins.type", "builtins.len"], "tests.test_deserialization.TestSchemaDeserialization.validate_with_error": ["marshmallow.exceptions.ValidationError"], "tests.test_deserialization.MySchema.test_multiple_errors_can_be_stored_for_an_email_field": ["marshmallow.fields.Email"], "tests.test_deserialization.TestSchemaDeserialization.test_multiple_errors_can_be_stored_for_an_email_field": ["_pytest.python_api.raises", "tests.test_deserialization.TestSchemaDeserialization.test_multiple_errors_can_be_stored_for_an_email_field.<locals>.MySchema", "marshmallow.schema.Schema.load", "builtins.len"], "tests.test_deserialization.MySchema.test_multiple_errors_can_be_stored_for_a_url_field": ["marshmallow.fields.Url"], "tests.test_deserialization.TestSchemaDeserialization.test_multiple_errors_can_be_stored_for_a_url_field": ["_pytest.python_api.raises", "tests.test_deserialization.TestSchemaDeserialization.test_multiple_errors_can_be_stored_for_a_url_field.<locals>.MySchema", "marshmallow.schema.Schema.load", "builtins.len"], "tests.test_deserialization.MySchema.test_required_value_only_passed_to_validators_if_provided": ["marshmallow.fields.Field"], "tests.test_deserialization.TestSchemaDeserialization.test_required_value_only_passed_to_validators_if_provided": ["_pytest.python_api.raises", "tests.test_deserialization.TestSchemaDeserialization.test_required_value_only_passed_to_validators_if_provided.<locals>.MySchema", "marshmallow.schema.Schema.load", "builtins.len"], "tests.test_deserialization.MySchema.test_partial_deserialization": ["marshmallow.fields.Field"], "tests.test_deserialization.TestSchemaDeserialization.test_partial_deserialization": ["tests.test_deserialization.TestSchemaDeserialization.test_partial_deserialization.<locals>.MySchema", "marshmallow.schema.Schema.load"], "tests.test_deserialization.MySchema.test_partial_fields_deserialization": ["marshmallow.fields.Field"], "tests.test_deserialization.TestSchemaDeserialization.test_partial_fields_deserialization": ["_pytest.python_api.raises", "tests.test_deserialization.TestSchemaDeserialization.test_partial_fields_deserialization.<locals>.MySchema", "builtins.tuple", "marshmallow.schema.Schema.load"], "tests.test_deserialization.MySchema.test_partial_fields_validation": ["marshmallow.fields.Field"], "tests.test_deserialization.TestSchemaDeserialization.test_partial_fields_validation": ["tests.test_deserialization.TestSchemaDeserialization.test_partial_fields_validation.<locals>.MySchema", "builtins.tuple", "marshmallow.schema.Schema.validate"], "tests.test_deserialization.MySchema.test_unknown_fields_deserialization": ["marshmallow.fields.Integer"], "tests.test_deserialization.TestSchemaDeserialization.test_unknown_fields_deserialization": ["tests.test_deserialization.TestSchemaDeserialization.test_unknown_fields_deserialization.<locals>.MySchema", "marshmallow.schema.Schema.load", "_pytest.python_api.raises"], "tests.test_deserialization.MySchema.test_unknown_fields_deserialization_precedence": ["marshmallow.fields.Integer"], "tests.test_deserialization.TestSchemaDeserialization.test_unknown_fields_deserialization_precedence": ["tests.test_deserialization.TestSchemaDeserialization.test_unknown_fields_deserialization_precedence.<locals>.MySchema", "marshmallow.schema.Schema.load", "_pytest.python_api.raises"], "tests.test_deserialization.MySchema.test_unknown_fields_deserialization_with_data_key": ["marshmallow.fields.Integer"], "tests.test_deserialization.TestSchemaDeserialization.test_unknown_fields_deserialization_with_data_key": ["tests.test_deserialization.TestSchemaDeserialization.test_unknown_fields_deserialization_with_data_key.<locals>.MySchema", "marshmallow.schema.Schema.load", "_pytest.python_api.raises"], "tests.test_deserialization.MySchema.test_unknown_fields_deserialization_with_index_errors_false": ["marshmallow.fields.Integer"], "tests.test_deserialization.TestSchemaDeserialization.test_unknown_fields_deserialization_with_index_errors_false": ["_pytest.python_api.raises", "tests.test_deserialization.TestSchemaDeserialization.test_unknown_fields_deserialization_with_index_errors_false.<locals>.MySchema", "marshmallow.schema.Schema.load"], "tests.test_deserialization.MySchema.test_dump_only_fields_considered_unknown": ["marshmallow.fields.Integer"], "tests.test_deserialization.TestSchemaDeserialization.test_dump_only_fields_considered_unknown": ["_pytest.python_api.raises", "tests.test_deserialization.TestSchemaDeserialization.test_dump_only_fields_considered_unknown.<locals>.MySchema", "marshmallow.schema.Schema.load"], "tests.test_deserialization.MySchema.test_unknown_fields_do_not_unpack_dotted_names": ["marshmallow.fields.String"], "tests.test_deserialization.TestSchemaDeserialization.test_unknown_fields_do_not_unpack_dotted_names": ["tests.test_deserialization.TestSchemaDeserialization.test_unknown_fields_do_not_unpack_dotted_names.<locals>.MySchema", "marshmallow.schema.Schema.load"], "tests.test_deserialization.TestValidation.test_integer_with_validator": ["marshmallow.fields.Integer", "marshmallow.fields.Field.deserialize", "_pytest.python_api.raises"], "tests.test_deserialization.TestValidation.test_integer_with_validators": ["marshmallow.fields.Field.deserialize", "_pytest.python_api.raises"], "tests.test_deserialization.TestValidation.test_float_with_validators": ["marshmallow.fields.Field.deserialize", "_pytest.python_api.raises"], "tests.test_deserialization.TestValidation.test_string_validator": ["marshmallow.fields.String", "marshmallow.fields.Field.deserialize", "builtins.len", "_pytest.python_api.raises"], "tests.test_deserialization.TestValidation.test_function_validator": ["marshmallow.fields.Function", "marshmallow.fields.Field.deserialize", "builtins.len", "_pytest.python_api.raises"], "tests.test_deserialization.TestValidation.test_function_validators": ["marshmallow.fields.Field.deserialize", "_pytest.python_api.raises"], "tests.test_deserialization.MethodSerializer.test_method_validator": ["marshmallow.fields.Method", "builtins.len"], "tests.test_deserialization.TestValidation.test_method_validator": ["tests.test_deserialization.TestValidation.test_method_validator.<locals>.MethodSerializer", "marshmallow.schema.Schema.load", "_pytest.python_api.raises"], "tests.test_deserialization.MethodSerializer.get_name": ["str.upper"], "tests.test_deserialization.SchemaA.test_nested_data_is_stored_when_validation_fails": ["marshmallow.fields.Integer"], "tests.test_deserialization.SchemaB.test_nested_data_is_stored_when_validation_fails": ["marshmallow.fields.Integer", "marshmallow.fields.Nested"], "tests.test_deserialization.TestValidation.test_nested_data_is_stored_when_validation_fails": ["tests.test_deserialization.TestValidation.test_nested_data_is_stored_when_validation_fails.<locals>.SchemaB", "_pytest.python_api.raises", "marshmallow.schema.Schema.load"], "tests.test_deserialization.Sch.test_false_value_validation": ["marshmallow.fields.Raw", "marshmallow.validate.Equal"], "tests.test_deserialization.TestValidation.test_false_value_validation": ["tests.test_deserialization.TestValidation.test_false_value_validation.<locals>.Sch", "marshmallow.schema.Schema.validate"], "tests.test_deserialization.SchemaA.test_nested_partial_load": ["marshmallow.fields.Integer"], "tests.test_deserialization.SchemaB.test_nested_partial_load": ["marshmallow.fields.Nested"], "tests.test_deserialization.TestValidation.test_nested_partial_load": ["tests.test_deserialization.TestValidation.test_nested_partial_load.<locals>.SchemaB", "marshmallow.schema.Schema.load", "_pytest.python_api.raises"], "tests.test_deserialization.SchemaC.test_deeply_nested_partial_load": ["marshmallow.fields.Integer"], "tests.test_deserialization.SchemaB.test_deeply_nested_partial_load": ["marshmallow.fields.Nested"], "tests.test_deserialization.SchemaA.test_deeply_nested_partial_load": ["marshmallow.fields.Nested"], "tests.test_deserialization.TestValidation.test_deeply_nested_partial_load": ["tests.test_deserialization.TestValidation.test_deeply_nested_partial_load.<locals>.SchemaA", "marshmallow.schema.Schema.load", "_pytest.python_api.raises"], "tests.test_deserialization.SchemaA.test_nested_partial_tuple": ["marshmallow.fields.Integer"], "tests.test_deserialization.SchemaB.test_nested_partial_tuple": ["marshmallow.fields.Nested"], "tests.test_deserialization.TestValidation.test_nested_partial_tuple": ["tests.test_deserialization.TestValidation.test_nested_partial_tuple.<locals>.SchemaB", "marshmallow.schema.Schema.load", "_pytest.python_api.raises"], "tests.test_deserialization.RequireSchema.test_required_field_failure": ["marshmallow.fields.String", "marshmallow.fields.Integer", "marshmallow.fields.Boolean", "marshmallow.fields.Float", "marshmallow.fields.Number", "marshmallow.fields.DateTime", "marshmallow.fields.Time", "marshmallow.fields.Date", "marshmallow.fields.TimeDelta", "marshmallow.fields.Dict", "marshmallow.fields.Url", "marshmallow.fields.Email", "marshmallow.fields.UUID", "marshmallow.fields.Decimal", "marshmallow.fields.IP", "marshmallow.fields.IPv4", "marshmallow.fields.IPv6", "marshmallow.fields.IPInterface", "marshmallow.fields.IPv4Interface", "marshmallow.fields.IPv6Interface", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'HairColorEnum'>, by_value=<class 'marshmallow.fields.String'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>, by_value=<class 'marshmallow.fields.Integer'>)"], "tests.test_deserialization.test_required_field_failure": ["_pytest.python_api.raises", "tests.test_deserialization.test_required_field_failure.<locals>.RequireSchema", "marshmallow.schema.Schema.load"], "tests.test_deserialization.RequireSchema.test_required_message_can_be_changed": ["marshmallow.fields.Integer"], "tests.test_deserialization.test_required_message_can_be_changed": ["_pytest.python_api.raises", "tests.test_deserialization.test_required_message_can_be_changed.<locals>.RequireSchema", "marshmallow.schema.Schema.load", "builtins.isinstance"], "tests.test_deserialization.MySchema.test_deserialize_raises_exception_if_input_type_is_incorrect": ["marshmallow.fields.Field"], "tests.test_deserialization.test_deserialize_raises_exception_if_input_type_is_incorrect": ["_pytest.python_api.raises", "tests.test_deserialization.test_deserialize_raises_exception_if_input_type_is_incorrect.<locals>.MySchema", "marshmallow.schema.Schema.load", "dict.keys", "builtins.list"], "tests.test_error_store.test_missing_is_falsy": ["builtins.bool"], "tests.test_error_store.TestMergeErrors.test_merging_none_and_string": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_none_and_custom_error": ["dynapyt.runtime.CustomError", "marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_none_and_list": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_none_and_dict": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_string_and_none": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_custom_error_and_none": ["dynapyt.runtime.CustomError", "marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_list_and_none": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_dict_and_none": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_string_and_string": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_custom_error_and_string": ["dynapyt.runtime.CustomError", "marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_string_and_custom_error": ["dynapyt.runtime.CustomError", "marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_custom_error_and_custom_error": ["dynapyt.runtime.CustomError", "marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_string_and_list": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_string_and_dict": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_string_and_dict_with_schema_error": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_custom_error_and_list": ["dynapyt.runtime.CustomError", "marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_custom_error_and_dict": ["dynapyt.runtime.CustomError", "marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_custom_error_and_dict_with_schema_error": ["dynapyt.runtime.CustomError", "marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_list_and_string": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_list_and_custom_error": ["dynapyt.runtime.CustomError", "marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_list_and_list": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_list_and_dict": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_list_and_dict_with_schema_error": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_dict_and_string": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_dict_and_custom_error": ["dynapyt.runtime.CustomError", "marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_dict_and_list": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_merging_dict_and_dict": ["marshmallow.error_store.merge_errors"], "tests.test_error_store.TestMergeErrors.test_deep_merging_dicts": ["marshmallow.error_store.merge_errors"], "tests.test_exceptions.TestValidationError.test_stores_message_in_list": ["marshmallow.exceptions.ValidationError"], "tests.test_exceptions.TestValidationError.test_can_pass_list_of_messages": ["marshmallow.exceptions.ValidationError"], "tests.test_exceptions.TestValidationError.test_stores_dictionaries": ["marshmallow.exceptions.ValidationError"], "tests.test_exceptions.TestValidationError.test_can_store_field_name": ["marshmallow.exceptions.ValidationError"], "tests.test_exceptions.TestValidationError.test_str": ["marshmallow.exceptions.ValidationError", "builtins.str"], "tests.test_exceptions.TestValidationError.test_stores_dictionaries_in_messages_dict": ["marshmallow.exceptions.ValidationError"], "tests.test_exceptions.TestValidationError.test_messages_dict_type_error_on_badval": ["marshmallow.exceptions.ValidationError", "_pytest.python_api.raises", "builtins.str"], "tests.test_fields.TestField.test_repr": ["marshmallow.fields.Field", "builtins.repr", "str.format", "marshmallow.fields.Integer"], "tests.test_fields.TestField.test_error_raised_if_uncallable_validator_passed": ["_pytest.python_api.raises", "marshmallow.fields.Field"], "tests.test_fields.TestField.test_error_raised_if_missing_is_set_on_required_field": ["_pytest.python_api.raises", "marshmallow.fields.Field"], "tests.test_fields.MySchema.test_custom_field_receives_attr_and_obj": ["tests.test_fields.TestField.test_custom_field_receives_attr_and_obj.<locals>.MyField"], "tests.test_fields.TestField.test_custom_field_receives_attr_and_obj": ["tests.test_fields.TestField.test_custom_field_receives_attr_and_obj.<locals>.MySchema", "marshmallow.schema.Schema.load"], "tests.test_fields.MySchema.test_custom_field_receives_data_key_if_set": ["tests.test_fields.TestField.test_custom_field_receives_data_key_if_set.<locals>.MyField"], "tests.test_fields.TestField.test_custom_field_receives_data_key_if_set": ["tests.test_fields.TestField.test_custom_field_receives_data_key_if_set.<locals>.MySchema", "marshmallow.schema.Schema.load"], "tests.test_fields.MySchema.test_custom_field_follows_data_key_if_set": ["tests.test_fields.TestField.test_custom_field_follows_data_key_if_set.<locals>.MyField"], "tests.test_fields.TestField.test_custom_field_follows_data_key_if_set": ["tests.test_fields.TestField.test_custom_field_follows_data_key_if_set.<locals>.MySchema", "marshmallow.schema.Schema.dump"], "tests.test_fields.TestParentAndName.schema": ["tests.test_fields.TestParentAndName.MySchema"], "tests.test_fields.TestParentAndName.test_unbound_field_root_returns_none": ["marshmallow.fields.String", "tests.test_fields.TestParentAndName.MySchema", "marshmallow.fields.Nested", "marshmallow.fields.List"], "tests.test_fields.TestParentAndName.test_list_root_inheritance": ["tests.test_fields.TestParentAndName.test_list_root_inheritance.<locals>.OtherSchema"], "tests.test_fields.MySchema.test_dict_root_inheritance": ["marshmallow.fields.String", "marshmallow.fields.Integer", "marshmallow.fields.Dict"], "tests.test_fields.TestParentAndName.test_dict_root_inheritance": ["tests.test_fields.TestParentAndName.test_dict_root_inheritance.<locals>.MySchema", "tests.test_fields.TestParentAndName.test_dict_root_inheritance.<locals>.OtherSchema"], "tests.test_fields.MySchema.test_datetime_list_inner_format": ["marshmallow.fields.DateTime", "marshmallow.fields.List", "marshmallow.fields.Tuple", "marshmallow.fields.Date"], "tests.test_fields.TestParentAndName.test_datetime_list_inner_format": ["tests.test_fields.TestParentAndName.test_datetime_list_inner_format.<locals>.MySchema"], "tests.test_fields.MySchema.test_field_named_parent_has_root": ["marshmallow.fields.Field"], "tests.test_fields.TestParentAndName.test_field_named_parent_has_root": ["tests.test_fields.TestParentAndName.test_field_named_parent_has_root.<locals>.MySchema"], "tests.test_fields.TestMetadata.test_extra_metadata_may_be_added_to_field": ["_pytest.recwarn.warns", "marshmallow.fields.String", "marshmallow.fields.Integer", "marshmallow.fields.Boolean", "marshmallow.fields.Float", "marshmallow.fields.Number", "marshmallow.fields.DateTime", "marshmallow.fields.Time", "marshmallow.fields.Date", "marshmallow.fields.TimeDelta", "marshmallow.fields.Dict", "marshmallow.fields.Url", "marshmallow.fields.Email", "marshmallow.fields.UUID", "marshmallow.fields.Decimal", "marshmallow.fields.IP", "marshmallow.fields.IPv4", "marshmallow.fields.IPv6", "marshmallow.fields.IPInterface", "marshmallow.fields.IPv4Interface", "marshmallow.fields.IPv6Interface", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'HairColorEnum'>, by_value=<class 'marshmallow.fields.String'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>, by_value=<class 'marshmallow.fields.Integer'>)"], "tests.test_fields.TestMetadata.test_field_metadata_added_in_deprecated_style_warns": ["_pytest.recwarn.warns", "marshmallow.fields.String", "marshmallow.fields.Integer", "marshmallow.fields.Boolean", "marshmallow.fields.Float", "marshmallow.fields.Number", "marshmallow.fields.DateTime", "marshmallow.fields.Time", "marshmallow.fields.Date", "marshmallow.fields.TimeDelta", "marshmallow.fields.Dict", "marshmallow.fields.Url", "marshmallow.fields.Email", "marshmallow.fields.UUID", "marshmallow.fields.Decimal", "marshmallow.fields.IP", "marshmallow.fields.IPv4", "marshmallow.fields.IPv6", "marshmallow.fields.IPInterface", "marshmallow.fields.IPv4Interface", "marshmallow.fields.IPv6Interface", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'HairColorEnum'>, by_value=<class 'marshmallow.fields.String'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>, by_value=<class 'marshmallow.fields.Integer'>)"], "tests.test_fields.TestDeprecatedDefaultAndMissing.test_load_default_in_deprecated_style_warns": ["_pytest.recwarn.warns", "marshmallow.fields.String", "marshmallow.fields.Integer", "marshmallow.fields.Boolean", "marshmallow.fields.Float", "marshmallow.fields.Number", "marshmallow.fields.DateTime", "marshmallow.fields.Time", "marshmallow.fields.Date", "marshmallow.fields.TimeDelta", "marshmallow.fields.Dict", "marshmallow.fields.Url", "marshmallow.fields.Email", "marshmallow.fields.UUID", "marshmallow.fields.Decimal", "marshmallow.fields.IP", "marshmallow.fields.IPv4", "marshmallow.fields.IPv6", "marshmallow.fields.IPInterface", "marshmallow.fields.IPv4Interface", "marshmallow.fields.IPv6Interface", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'HairColorEnum'>, by_value=<class 'marshmallow.fields.String'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>, by_value=<class 'marshmallow.fields.Integer'>)"], "tests.test_fields.TestDeprecatedDefaultAndMissing.test_dump_default_in_deprecated_style_warns": ["_pytest.recwarn.warns", "marshmallow.fields.String", "marshmallow.fields.Integer", "marshmallow.fields.Boolean", "marshmallow.fields.Float", "marshmallow.fields.Number", "marshmallow.fields.DateTime", "marshmallow.fields.Time", "marshmallow.fields.Date", "marshmallow.fields.TimeDelta", "marshmallow.fields.Dict", "marshmallow.fields.Url", "marshmallow.fields.Email", "marshmallow.fields.UUID", "marshmallow.fields.Decimal", "marshmallow.fields.IP", "marshmallow.fields.IPv4", "marshmallow.fields.IPv6", "marshmallow.fields.IPInterface", "marshmallow.fields.IPv4Interface", "marshmallow.fields.IPv6Interface", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'HairColorEnum'>, by_value=<class 'marshmallow.fields.String'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>, by_value=<class 'marshmallow.fields.Integer'>)"], "tests.test_fields.TestErrorMessages.test_default_error_messages_get_merged_with_parent_error_messages_cstm_msg": ["tests.test_fields.TestErrorMessages.MyField"], "tests.test_fields.TestErrorMessages.test_default_error_messages_get_merged_with_parent_error_messages": ["tests.test_fields.TestErrorMessages.MyField"], "tests.test_fields.TestErrorMessages.test_make_error": ["tests.test_fields.TestErrorMessages.MyField", "marshmallow.fields.Field.make_error"], "tests.test_fields.TestErrorMessages.test_fail": ["tests.test_fields.TestErrorMessages.MyField", "_pytest.recwarn.warns", "marshmallow.fields.Field.fail"], "tests.test_fields.TestErrorMessages.test_make_error_key_doesnt_exist": ["_pytest.python_api.raises", "tests.test_fields.TestErrorMessages.MyField", "marshmallow.fields.Field.make_error"], "tests.test_fields.TestNestedField.test_nested_only_and_exclude_as_string": ["_pytest.python_api.raises", "marshmallow.fields.Nested"], "tests.test_fields.MySchema.test_nested_instantiation_from_dict": ["marshmallow.fields.Nested"], "tests.test_fields.TestNestedField.test_nested_instantiation_from_dict": ["tests.test_fields.TestNestedField.test_nested_instantiation_from_dict.<locals>.MySchema", "marshmallow.schema.Schema.load", "_pytest.python_api.raises"], "tests.test_fields.MySchema.test_nested_unknown_override": ["marshmallow.fields.Nested"], "tests.test_fields.TestNestedField.test_nested_unknown_override": ["tests.test_fields.TestNestedField.test_nested_unknown_override.<locals>.MySchema", "marshmallow.schema.Schema.load", "_pytest.python_api.raises"], "tests.test_fields.NestedSchema.test_ordered_instanced_nested_schema_only_and_exclude": ["marshmallow.fields.String"], "tests.test_fields.MySchema.test_ordered_instanced_nested_schema_only_and_exclude": ["tests.test_fields.TestNestedField.test_ordered_instanced_nested_schema_only_and_exclude.<locals>.NestedSchema", "marshmallow.fields.Nested"], "tests.test_fields.TestNestedField.test_ordered_instanced_nested_schema_only_and_exclude": ["tests.test_fields.TestNestedField.test_ordered_instanced_nested_schema_only_and_exclude.<locals>.MySchema", "marshmallow.schema.Schema.dump"], "tests.test_fields.Child.test_list_nested_only_exclude_dump_only_load_only_propagated_to_nested": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_fields.Family.test_list_nested_only_exclude_dump_only_load_only_propagated_to_nested": ["marshmallow.fields.Nested", "marshmallow.fields.List"], "tests.test_fields.TestListNested.test_list_nested_only_exclude_dump_only_load_only_propagated_to_nested": ["tests.test_fields.TestListNested.test_list_nested_only_exclude_dump_only_load_only_propagated_to_nested.<locals>.Family", "builtins.getattr"], "tests.test_fields.Child.test_list_nested_class_only_and_exclude_merged_with_nested": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_fields.Family.test_list_nested_class_only_and_exclude_merged_with_nested": ["marshmallow.fields.Nested", "marshmallow.fields.List"], "tests.test_fields.TestListNested.test_list_nested_class_only_and_exclude_merged_with_nested": ["tests.test_fields.TestListNested.test_list_nested_class_only_and_exclude_merged_with_nested.<locals>.Family", "builtins.getattr", "marshmallow.schema.Schema.dump"], "tests.test_fields.Child.test_list_nested_class_multiple_dumps": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_fields.Family.test_list_nested_class_multiple_dumps": ["marshmallow.fields.Nested", "marshmallow.fields.List"], "tests.test_fields.TestListNested.test_list_nested_class_multiple_dumps": ["tests.test_fields.TestListNested.test_list_nested_class_multiple_dumps.<locals>.Family", "marshmallow.schema.Schema.dump"], "tests.test_fields.Child.test_list_nested_instance_only_and_exclude_merged_with_nested": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_fields.Family.test_list_nested_instance_only_and_exclude_merged_with_nested": ["tests.test_fields.TestListNested.test_list_nested_instance_only_and_exclude_merged_with_nested.<locals>.Child", "marshmallow.fields.Nested", "marshmallow.fields.List"], "tests.test_fields.TestListNested.test_list_nested_instance_only_and_exclude_merged_with_nested": ["tests.test_fields.TestListNested.test_list_nested_instance_only_and_exclude_merged_with_nested.<locals>.Family", "builtins.getattr", "marshmallow.schema.Schema.dump"], "tests.test_fields.Child.test_list_nested_instance_multiple_dumps": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_fields.Family.test_list_nested_instance_multiple_dumps": ["tests.test_fields.TestListNested.test_list_nested_instance_multiple_dumps.<locals>.Child", "marshmallow.fields.Nested", "marshmallow.fields.List"], "tests.test_fields.TestListNested.test_list_nested_instance_multiple_dumps": ["tests.test_fields.TestListNested.test_list_nested_instance_multiple_dumps.<locals>.Family", "marshmallow.schema.Schema.dump"], "tests.test_fields.Child.test_list_nested_lambda_only_and_exclude_merged_with_nested": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_fields.Family.test_list_nested_lambda_only_and_exclude_merged_with_nested": ["marshmallow.fields.Nested", "marshmallow.fields.List", "tests.test_fields.TestListNested.test_list_nested_lambda_only_and_exclude_merged_with_nested.<locals>.Child"], "tests.test_fields.TestListNested.test_list_nested_lambda_only_and_exclude_merged_with_nested": ["tests.test_fields.TestListNested.test_list_nested_lambda_only_and_exclude_merged_with_nested.<locals>.Family", "builtins.getattr", "marshmallow.schema.Schema.dump"], "tests.test_fields.Child.test_list_nested_partial_propagated_to_nested": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_fields.Family.test_list_nested_partial_propagated_to_nested": ["marshmallow.fields.Nested", "marshmallow.fields.List"], "tests.test_fields.TestListNested.test_list_nested_partial_propagated_to_nested": ["tests.test_fields.TestListNested.test_list_nested_partial_propagated_to_nested.<locals>.Family", "marshmallow.schema.Schema.load", "_pytest.python_api.raises"], "tests.test_fields.Child.test_tuple_nested_only_exclude_dump_only_load_only_propagated_to_nested": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_fields.Family.test_tuple_nested_only_exclude_dump_only_load_only_propagated_to_nested": ["marshmallow.fields.Nested", "marshmallow.fields.Tuple"], "tests.test_fields.TestTupleNested.test_tuple_nested_only_exclude_dump_only_load_only_propagated_to_nested": ["tests.test_fields.TestTupleNested.test_tuple_nested_only_exclude_dump_only_load_only_propagated_to_nested.<locals>.Family", "builtins.getattr"], "tests.test_fields.Child.test_tuple_nested_partial_propagated_to_nested": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_fields.Family.test_tuple_nested_partial_propagated_to_nested": ["marshmallow.fields.Nested", "marshmallow.fields.Tuple"], "tests.test_fields.TestTupleNested.test_tuple_nested_partial_propagated_to_nested": ["tests.test_fields.TestTupleNested.test_tuple_nested_partial_propagated_to_nested.<locals>.Family", "marshmallow.schema.Schema.load", "_pytest.python_api.raises"], "tests.test_fields.Child.test_dict_nested_only_exclude_dump_only_load_only_propagated_to_nested": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_fields.Family.test_dict_nested_only_exclude_dump_only_load_only_propagated_to_nested": ["marshmallow.fields.Nested", "marshmallow.fields.Dict"], "tests.test_fields.TestDictNested.test_dict_nested_only_exclude_dump_only_load_only_propagated_to_nested": ["tests.test_fields.TestDictNested.test_dict_nested_only_exclude_dump_only_load_only_propagated_to_nested.<locals>.Family", "builtins.getattr"], "tests.test_fields.Child.test_dict_nested_only_and_exclude_merged_with_nested": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_fields.Family.test_dict_nested_only_and_exclude_merged_with_nested": ["marshmallow.fields.Nested", "marshmallow.fields.Dict"], "tests.test_fields.TestDictNested.test_dict_nested_only_and_exclude_merged_with_nested": ["tests.test_fields.TestDictNested.test_dict_nested_only_and_exclude_merged_with_nested.<locals>.Family", "builtins.getattr"], "tests.test_fields.Child.test_dict_nested_partial_propagated_to_nested": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_fields.Family.test_dict_nested_partial_propagated_to_nested": ["marshmallow.fields.Nested", "marshmallow.fields.Dict"], "tests.test_fields.TestDictNested.test_dict_nested_partial_propagated_to_nested": ["tests.test_fields.TestDictNested.test_dict_nested_partial_propagated_to_nested.<locals>.Family", "marshmallow.schema.Schema.load", "_pytest.python_api.raises"], "tests.test_options.TestUnordered.test_unordered_dump_returns_dict": ["tests.test_options.TestUnordered.UnorderedSchema", "tests.base.User", "marshmallow.schema.Schema.dump", "builtins.isinstance", "builtins.type"], "tests.base.User.__init__": ["datetime.datetime", "pytz.tzinfo.DstTzInfo.localize", "builtins.list", "uuid.uuid1", "datetime.time", "datetime.date"], "tests.test_options.TestUnordered.test_unordered_load_returns_dict": ["tests.test_options.TestUnordered.UnorderedSchema", "marshmallow.schema.Schema.load", "builtins.isinstance", "builtins.type"], "tests.conftest.user": ["tests.base.User"], "tests.test_options.TestFieldOrdering.test_ordered_option_is_inherited": ["tests.test_options.TestFieldOrdering.test_ordered_option_is_inherited.<locals>.ChildOrderedSchema", "marshmallow.schema.Schema.dump", "builtins.list", "tests.test_options.TestFieldOrdering.test_ordered_option_is_inherited.<locals>.ChildUnorderedSchema"], "tests.test_options.TestFieldOrdering.test_ordering_is_off_by_default": ["tests.test_options.TestFieldOrdering.test_ordering_is_off_by_default.<locals>.DummySchema"], "tests.test_options.TestFieldOrdering.test_declared_field_order_is_maintained_on_dump": ["tests.test_options.KeepOrder", "marshmallow.schema.Schema.dump", "builtins.list"], "tests.conftest.serialized_user": ["tests.base.UserSchema", "marshmallow.schema.Schema.dump"], "tests.base.Uppercased._serialize": ["str.upper"], "tests.base.UserSchema.get_is_old": ["builtins.isinstance", "dict.get"], "tests.base.get_lowername": ["builtins.isinstance", "str.lower", "dict.get"], "tests.base.User.since_created": ["datetime.datetime"], "tests.test_options.TestFieldOrdering.test_declared_field_order_is_maintained_on_load": ["tests.test_options.KeepOrder", "marshmallow.schema.Schema.load", "builtins.list"], "tests.test_options.TestFieldOrdering.test_nested_field_order_with_only_arg_is_maintained_on_dump": ["tests.test_options.OrderedNestedOnly", "marshmallow.schema.Schema.dump", "builtins.list"], "tests.test_options.TestFieldOrdering.test_nested_field_order_with_only_arg_is_maintained_on_load": ["tests.test_options.OrderedNestedOnly", "datetime.now", "datetime.isoformat", "datetime.date", "date.isoformat", "marshmallow.schema.Schema.load", "builtins.list"], "tests.test_options.HasNestedExclude.test_nested_field_order_with_exclude_arg_is_maintained": ["marshmallow.fields.Nested"], "tests.test_options.TestFieldOrdering.test_nested_field_order_with_exclude_arg_is_maintained": ["tests.test_options.TestFieldOrdering.test_nested_field_order_with_exclude_arg_is_maintained.<locals>.HasNestedExclude", "marshmallow.schema.Schema.dump", "builtins.list"], "tests.test_options.TestFieldOrdering.test_meta_fields_order_is_maintained_on_dump": ["tests.test_options.OrderedMetaSchema", "marshmallow.schema.Schema.dump", "builtins.list"], "tests.test_options.TestFieldOrdering.test_meta_fields_order_is_maintained_on_load": ["tests.test_options.OrderedMetaSchema", "marshmallow.schema.Schema.load", "builtins.list"], "tests.test_options.TestIncludeOption.test_fields_are_added": ["tests.test_options.TestIncludeOption.AddFieldsSchema", "marshmallow.schema.Schema.load"], "tests.test_options.AddFieldsOrdered.test_ordered_included": ["marshmallow.fields.String"], "tests.test_options.Meta.test_ordered_included": ["marshmallow.fields.String"], "tests.test_options.TestIncludeOption.test_ordered_included": ["tests.test_options.TestIncludeOption.test_ordered_included.<locals>.AddFieldsOrdered", "OrderedDict.keys", "builtins.list", "marshmallow.schema.Schema.load"], "tests.test_options.AddFieldsChild.test_added_fields_are_inherited": ["marshmallow.fields.String"], "tests.test_options.TestIncludeOption.test_added_fields_are_inherited": ["tests.test_options.TestIncludeOption.test_added_fields_are_inherited.<locals>.AddFieldsChild", "dict.keys", "builtins.isinstance"], "tests.test_registry.test_serializer_class_registry_register_same_classname_different_module": ["builtins.len", "builtins.type", "dict.get"], "tests.test_registry.test_serializer_class_registry_override_if_same_classname_same_module": ["builtins.len", "builtins.type", "dict.get"], "tests.test_registry.test_two_way_nesting": ["tests.test_registry.A", "tests.test_registry.B", "tests.test_registry.ASchema", "marshmallow.schema.Schema.dump", "tests.test_registry.BSchema"], "tests.test_registry.test_nesting_with_class_name_many": ["tests.test_registry.B", "tests.test_registry.C", "tests.test_registry.CSchema", "marshmallow.schema.Schema.dump", "builtins.len"], "tests.test_registry.MySchema.test_invalid_class_name_in_nested_field_raises_error": ["marshmallow.fields.Nested"], "tests.test_registry.test_invalid_class_name_in_nested_field_raises_error": ["tests.test_registry.test_invalid_class_name_in_nested_field_raises_error.<locals>.MySchema", "str.format", "_pytest.python_api.raises", "marshmallow.schema.Schema.dump"], "tests.foo_serializer": ["marshmallow.fields.Integer"], "tests.test_registry.MySchema.test_multiple_classes_with_same_name_raises_error": ["marshmallow.fields.Nested"], "tests.test_registry.test_multiple_classes_with_same_name_raises_error": ["tests.test_registry.test_multiple_classes_with_same_name_raises_error.<locals>.MySchema", "str.format", "_pytest.python_api.raises", "marshmallow.schema.Schema.dump"], "tests.test_registry.test_multiple_classes_with_all": ["marshmallow.class_registry.get_class", "builtins.len"], "tests.test_registry.Schema1.test_can_use_full_module_path_to_class": ["marshmallow.fields.Nested"], "tests.test_registry.test_can_use_full_module_path_to_class": ["tests.test_registry.test_can_use_full_module_path_to_class.<locals>.Schema1", "marshmallow.schema.Schema.dump", "tests.test_registry.test_can_use_full_module_path_to_class.<locals>.Schema2"], "tests.test_registry.Schema2.test_can_use_full_module_path_to_class": ["marshmallow.fields.Nested"], "tests.test_schema.test_serializing_basic_object": ["tests.base.UserSchema", "marshmallow.schema.Schema.dump", "math.isclose", "tests.base.UserMetaSchema"], "tests.base.UserMetaSchema.get_is_old": ["builtins.isinstance"], "tests.test_schema.test_serializer_dump": ["tests.base.UserSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.MySchema.test_load_resets_errors": ["marshmallow.fields.Email"], "tests.test_schema.test_load_resets_errors": ["tests.test_schema.test_load_resets_errors.<locals>.MySchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load", "builtins.len"], "tests.test_schema.MySchema.test_load_validation_error_stores_input_data_and_valid_data": ["marshmallow.fields.DateTime", "marshmallow.fields.Field"], "tests.test_schema.test_load_validation_error_stores_input_data_and_valid_data": ["tests.test_schema.test_load_validation_error_stores_input_data_and_valid_data.<locals>.MySchema", "datetime.utcnow", "datetime.isoformat", "marshmallow.schema.Schema.load", "builtins.isinstance"], "tests.test_schema.MySchema.test_load_resets_error_fields": ["marshmallow.fields.Email", "marshmallow.fields.String"], "tests.test_schema.test_load_resets_error_fields": ["tests.test_schema.test_load_resets_error_fields.<locals>.MySchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load", "dict.keys", "builtins.len"], "tests.test_schema.MySchema.test_errored_fields_do_not_appear_in_output": ["tests.test_schema.test_errored_fields_do_not_appear_in_output.<locals>.MyField"], "tests.test_schema.test_errored_fields_do_not_appear_in_output": ["tests.test_schema.test_errored_fields_do_not_appear_in_output.<locals>.MySchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load"], "tests.test_schema.test_load_many_stores_error_indices": ["tests.base.UserSchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load"], "tests.test_schema.test_dump_many": ["tests.base.UserSchema", "tests.base.User", "marshmallow.schema.Schema.dump", "builtins.len"], "tests.test_schema.MySchema.test_boolean_can_dump_unhashable": ["marshmallow.fields.Boolean"], "tests.test_schema.test_boolean_can_dump_unhashable": ["tests.test_schema.test_boolean_can_dump_unhashable.<locals>.MySchema", "marshmallow.schema.Schema.dump", "builtins.bool"], "tests.test_schema.MySchema.test_multiple_errors_can_be_stored_for_a_given_index": ["marshmallow.fields.String", "marshmallow.fields.Integer", "builtins.len"], "tests.test_schema.test_multiple_errors_can_be_stored_for_a_given_index": ["tests.test_schema.test_multiple_errors_can_be_stored_for_a_given_index.<locals>.MySchema", "marshmallow.schema.Schema.validate", "builtins.len"], "tests.test_schema.test_dump_returns_a_dict": ["tests.base.UserSchema", "marshmallow.schema.Schema.dump", "builtins.type"], "tests.test_schema.test_dumps_returns_a_string": ["tests.base.UserSchema", "marshmallow.schema.Schema.dumps", "builtins.type"], "tests.test_schema.test_dumping_single_object_with_collection_schema": ["tests.base.UserSchema", "marshmallow.schema.Schema.dump", "builtins.type"], "tests.test_schema.test_loading_single_object_with_collection_schema": ["tests.base.UserSchema", "marshmallow.schema.Schema.load", "builtins.type"], "tests.base.UserSchema.make_user": ["tests.base.User"], "tests.test_schema.test_dumps_many": ["tests.base.UserSchema", "tests.base.User", "marshmallow.schema.Schema.dumps", "simplejson.loads", "builtins.len", "marshmallow.schema.Schema.dump"], "tests.test_schema.test_load_returns_an_object": ["tests.base.UserSchema", "marshmallow.schema.Schema.load", "builtins.type"], "tests.test_schema.test_load_many": ["tests.base.UserSchema", "marshmallow.schema.Schema.load", "builtins.type"], "tests.test_schema.Sch.test_load_invalid_input_type": ["marshmallow.fields.String"], "tests.test_schema.test_load_invalid_input_type": ["_pytest.python_api.raises", "tests.test_schema.test_load_invalid_input_type.<locals>.Sch", "marshmallow.schema.Schema.load"], "tests.test_schema.Sch.test_load_many_invalid_input_type": ["marshmallow.fields.String"], "tests.test_schema.test_load_many_invalid_input_type": ["_pytest.python_api.raises", "tests.test_schema.test_load_many_invalid_input_type.<locals>.Sch", "marshmallow.schema.Schema.load"], "tests.test_schema.Sch.test_load_many_empty_collection": ["marshmallow.fields.String"], "tests.test_schema.test_load_many_empty_collection": ["tests.test_schema.test_load_many_empty_collection.<locals>.Sch", "marshmallow.schema.Schema.load"], "tests.test_schema.Inner.test_load_many_in_nested_invalid_input_type": ["marshmallow.fields.String"], "tests.test_schema.Outer.test_load_many_in_nested_invalid_input_type": ["marshmallow.fields.Nested", "marshmallow.fields.List"], "tests.test_schema.test_load_many_in_nested_invalid_input_type": ["_pytest.python_api.raises", "tests.test_schema.test_load_many_in_nested_invalid_input_type.<locals>.Outer", "marshmallow.schema.Schema.load"], "tests.test_schema.Inner.test_load_many_in_nested_empty_collection": ["marshmallow.fields.String"], "tests.test_schema.Outer.test_load_many_in_nested_empty_collection": ["marshmallow.fields.Nested", "marshmallow.fields.List"], "tests.test_schema.test_load_many_in_nested_empty_collection": ["tests.test_schema.test_load_many_in_nested_empty_collection.<locals>.Outer", "marshmallow.schema.Schema.load"], "tests.test_schema.test_loads_returns_a_user": ["tests.base.UserSchema", "simplejson.dumps", "marshmallow.schema.Schema.loads", "builtins.type"], "tests.test_schema.test_loads_many": ["tests.base.UserSchema", "simplejson.dumps", "marshmallow.schema.Schema.loads", "builtins.type"], "tests.test_schema.test_loads_deserializes_from_json": ["simplejson.dumps", "tests.base.UserSchema", "marshmallow.schema.Schema.loads", "builtins.isinstance", "math.isclose"], "tests.test_schema.MySchema.test_serializing_none": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_schema.test_serializing_none": ["tests.base.UserSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.test_default_many_symmetry": ["tests.base.UserSchema", "tests.base.User", "marshmallow.schema.Schema.dump", "marshmallow.schema.Schema.load", "marshmallow.schema.Schema.dumps", "marshmallow.schema.Schema.loads"], "tests.test_schema.MySchema.test_on_bind_field_hook": ["marshmallow.fields.String"], "tests.test_schema.test_on_bind_field_hook": ["tests.test_schema.test_on_bind_field_hook.<locals>.MySchema"], "tests.test_schema.NestedSchema.test_nested_on_bind_field_hook": ["marshmallow.fields.String"], "tests.test_schema.MySchema.test_nested_on_bind_field_hook": ["marshmallow.fields.Nested"], "tests.test_schema.test_nested_on_bind_field_hook": ["tests.test_schema.test_nested_on_bind_field_hook.<locals>.MySchema"], "tests.test_schema.TestValidate.test_validate_raises_with_errors_dict": ["tests.base.UserSchema", "marshmallow.schema.Schema.validate", "builtins.type"], "tests.test_schema.TestValidate.test_validate_many": ["tests.base.UserSchema", "marshmallow.schema.Schema.validate"], "tests.test_schema.NoIndex.test_validate_many_doesnt_store_index_if_index_errors_option_is_false": ["marshmallow.fields.Email"], "tests.test_schema.TestValidate.test_validate_many_doesnt_store_index_if_index_errors_option_is_false": ["tests.test_schema.TestValidate.test_validate_many_doesnt_store_index_if_index_errors_option_is_false.<locals>.NoIndex", "marshmallow.schema.Schema.validate"], "tests.test_schema.TestValidate.test_validate": ["tests.base.UserSchema", "marshmallow.schema.Schema.validate"], "tests.test_schema.MySchema.test_validate_required": ["marshmallow.fields.Field"], "tests.test_schema.TestValidate.test_validate_required": ["tests.test_schema.TestValidate.test_validate_required.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_schema.test_fields_are_not_copies": ["tests.base.UserSchema", "tests.base.UserMetaSchema"], "tests.test_schema.test_dumps_returns_json": ["tests.base.UserSchema", "marshmallow.schema.Schema.dump", "marshmallow.schema.Schema.dumps", "builtins.type", "simplejson.dumps"], "tests.test_schema.test_naive_datetime_field": ["marshmallow.utils.isoformat"], "tests.test_schema.test_datetime_formatted_field": ["datetime.strftime"], "tests.test_schema.test_datetime_iso_field": ["marshmallow.utils.isoformat"], "tests.test_schema.test_tz_datetime_field": ["marshmallow.utils.isoformat"], "tests.test_schema.test_serialize_many": ["tests.base.User", "tests.base.UserSchema", "marshmallow.schema.Schema.dump", "builtins.len", "tests.base.UserMetaSchema"], "tests.test_schema.test_inheriting_schema": ["tests.base.ExtendedUserSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.test_custom_field": ["str.upper"], "tests.test_schema.test_relative_url_field": ["tests.base.UserRelativeUrlSchema", "marshmallow.schema.Schema.load"], "tests.test_schema.test_stores_invalid_url_error": ["_pytest.python_api.raises", "tests.base.UserSchema", "marshmallow.schema.Schema.load", "tests.base.UserMetaSchema"], "tests.test_schema.test_email_field": ["tests.base.User", "tests.base.UserSchema", "marshmallow.schema.Schema.dump", "tests.base.UserMetaSchema"], "tests.test_schema.test_stored_invalid_email": ["_pytest.python_api.raises", "tests.base.UserSchema", "marshmallow.schema.Schema.load"], "tests.test_schema.test_integer_field": ["tests.base.User", "tests.base.UserIntSchema", "marshmallow.schema.Schema.dump", "builtins.type"], "tests.test_schema.test_as_string": ["tests.base.User", "tests.base.UserFloatStringSchema", "marshmallow.schema.Schema.dump", "builtins.type", "builtins.float", "math.isclose"], "tests.test_schema.test_method_field": ["tests.base.User", "tests.base.UserSchema", "marshmallow.schema.Schema.dump", "tests.base.UserMetaSchema"], "tests.test_schema.test_function_field": ["str.lower"], "tests.test_schema.test_fields_must_be_declared_as_instances": ["_pytest.python_api.raises", "tests.test_schema.test_fields_must_be_declared_as_instances.<locals>.BadUserSchema"], "tests.test_schema.MySchema.test_bind_field_does_not_swallow_typeerror": ["marshmallow.fields.String"], "tests.test_schema.test_bind_field_does_not_swallow_typeerror": ["_pytest.python_api.raises", "tests.test_schema.test_bind_field_does_not_swallow_typeerror.<locals>.MySchema"], "tests.test_schema.MySchema.on_bind_field": ["builtins.TypeError"], "tests.test_schema.test_serializing_generator": ["tests.base.User", "tests.base.UserSchema", "marshmallow.schema.Schema.dump", "builtins.len", "tests.base.UserMetaSchema"], "tests.test_schema.test_serializing_empty_list_returns_empty_list": ["tests.base.UserSchema", "marshmallow.schema.Schema.dump", "tests.base.UserMetaSchema"], "tests.test_schema.test_serializing_dict": ["tests.base.UserSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.test_serializing_dict_with_meta_fields": ["tests.test_schema.test_serializing_dict_with_meta_fields.<locals>.MySchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.test_exclude_in_init": ["tests.base.UserSchema", "marshmallow.schema.Schema.dump", "tests.base.UserMetaSchema"], "tests.test_schema.test_only_in_init": ["tests.base.UserSchema", "marshmallow.schema.Schema.dump", "tests.base.UserMetaSchema"], "tests.test_schema.test_invalid_only_param": ["_pytest.python_api.raises", "tests.base.UserSchema"], "tests.test_schema.test_can_serialize_uuid": ["builtins.str"], "tests.test_schema.test_can_serialize_time": ["time.isoformat"], "tests.test_schema.test_json_module_is_deprecated": ["_pytest.recwarn.deprecated_call", "tests.base.User", "tests.test_schema.test_json_module_is_deprecated.<locals>.UserJSONSchema", "marshmallow.schema.Schema.dumps", "tests.base.mockjson.dumps"], "tests.test_schema.UserJSONSchema.test_json_module_is_deprecated": ["marshmallow.fields.String"], "tests.test_schema.UserJSONSchema.test_render_module": ["marshmallow.fields.String"], "tests.test_schema.test_render_module": ["tests.base.User", "tests.test_schema.test_render_module.<locals>.UserJSONSchema", "marshmallow.schema.Schema.dumps", "tests.base.mockjson.dumps"], "tests.test_schema.ErrorSchema.test_custom_error_message": ["marshmallow.fields.Email", "marshmallow.fields.Url", "marshmallow.fields.Decimal"], "tests.test_schema.test_custom_error_message": ["tests.test_schema.test_custom_error_message.<locals>.ErrorSchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load"], "tests.test_schema.ErrorSchema.test_custom_unknown_error_message": ["marshmallow.fields.String"], "tests.test_schema.test_custom_unknown_error_message": ["tests.test_schema.test_custom_unknown_error_message.<locals>.ErrorSchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load"], "tests.test_schema.ErrorSchema.test_custom_type_error_message": ["marshmallow.fields.String"], "tests.test_schema.test_custom_type_error_message": ["tests.test_schema.test_custom_type_error_message.<locals>.ErrorSchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load"], "tests.test_schema.ErrorSchema.test_custom_type_error_message_with_many": ["marshmallow.fields.String"], "tests.test_schema.test_custom_type_error_message_with_many": ["tests.test_schema.test_custom_type_error_message_with_many.<locals>.ErrorSchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load"], "tests.test_schema.ParentSchema.test_custom_error_messages_with_inheritance": ["marshmallow.fields.String"], "tests.test_schema.test_custom_error_messages_with_inheritance": ["tests.test_schema.test_custom_error_messages_with_inheritance.<locals>.ParentSchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load", "tests.test_schema.test_custom_error_messages_with_inheritance.<locals>.ChildSchema"], "tests.test_schema.ErrorSchema.test_load_errors_with_many": ["marshmallow.fields.Email"], "tests.test_schema.test_load_errors_with_many": ["_pytest.python_api.raises", "tests.test_schema.test_load_errors_with_many.<locals>.ErrorSchema", "marshmallow.schema.Schema.load"], "tests.test_schema.test_error_raised_if_fields_option_is_not_list": ["_pytest.python_api.raises"], "tests.test_schema.BadSchema.test_error_raised_if_fields_option_is_not_list": ["marshmallow.fields.String"], "tests.test_schema.test_error_raised_if_additional_option_is_not_list": ["_pytest.python_api.raises"], "tests.test_schema.BadSchema.test_error_raised_if_additional_option_is_not_list": ["marshmallow.fields.String"], "tests.test_schema.ChildSchema.test_nested_custom_set_in_exclude_reusing_schema": ["marshmallow.fields.Field"], "tests.test_schema.ParentSchema.test_nested_custom_set_in_exclude_reusing_schema": ["marshmallow.fields.Nested"], "tests.test_schema.test_nested_custom_set_in_exclude_reusing_schema": ["tests.test_schema.test_nested_custom_set_in_exclude_reusing_schema.<locals>.ParentSchema", "tests.test_schema.test_nested_custom_set_in_exclude_reusing_schema.<locals>.CustomSet", "builtins.dict", "marshmallow.schema.Schema.dumps", "marshmallow.schema.Schema.load"], "tests.test_schema.ChildSchema.test_nested_only": ["marshmallow.fields.Field"], "tests.test_schema.ParentSchema.test_nested_only": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.test_nested_only": ["tests.test_schema.test_nested_only.<locals>.ParentSchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.ChildSchema.test_nested_only_inheritance": ["marshmallow.fields.Field"], "tests.test_schema.ParentSchema.test_nested_only_inheritance": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.test_nested_only_inheritance": ["tests.test_schema.test_nested_only_inheritance.<locals>.ParentSchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.ChildSchema.test_nested_only_empty_inheritance": ["marshmallow.fields.Field"], "tests.test_schema.ParentSchema.test_nested_only_empty_inheritance": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.test_nested_only_empty_inheritance": ["tests.test_schema.test_nested_only_empty_inheritance.<locals>.ParentSchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.ChildSchema.test_nested_exclude": ["marshmallow.fields.Field"], "tests.test_schema.ParentSchema.test_nested_exclude": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.test_nested_exclude": ["tests.test_schema.test_nested_exclude.<locals>.ParentSchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.ChildSchema.test_nested_exclude_inheritance": ["marshmallow.fields.Field"], "tests.test_schema.ParentSchema.test_nested_exclude_inheritance": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.test_nested_exclude_inheritance": ["tests.test_schema.test_nested_exclude_inheritance.<locals>.ParentSchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.ChildSchema.test_nested_only_and_exclude": ["marshmallow.fields.Field"], "tests.test_schema.ParentSchema.test_nested_only_and_exclude": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.test_nested_only_and_exclude": ["tests.test_schema.test_nested_only_and_exclude.<locals>.ParentSchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.ChildSchema.test_nested_only_then_exclude_inheritance": ["marshmallow.fields.Field"], "tests.test_schema.ParentSchema.test_nested_only_then_exclude_inheritance": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.test_nested_only_then_exclude_inheritance": ["tests.test_schema.test_nested_only_then_exclude_inheritance.<locals>.ParentSchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.ChildSchema.test_nested_exclude_then_only_inheritance": ["marshmallow.fields.Field"], "tests.test_schema.ParentSchema.test_nested_exclude_then_only_inheritance": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.test_nested_exclude_then_only_inheritance": ["tests.test_schema.test_nested_exclude_then_only_inheritance.<locals>.ParentSchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.ChildSchema.test_nested_exclude_and_only_inheritance": ["marshmallow.fields.Field"], "tests.test_schema.ParentSchema.test_nested_exclude_and_only_inheritance": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.test_nested_exclude_and_only_inheritance": ["tests.test_schema.test_nested_exclude_and_only_inheritance.<locals>.ParentSchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.BookSchema.test_nested_instance_many": ["marshmallow.fields.Integer", "marshmallow.fields.String"], "tests.test_schema.UserSchema.test_nested_instance_many": ["marshmallow.fields.Integer", "marshmallow.fields.String", "tests.test_schema.test_nested_instance_many.<locals>.BookSchema", "marshmallow.fields.Nested"], "tests.test_schema.test_nested_instance_many": ["tests.test_schema.test_nested_instance_many.<locals>.UserSchema", "marshmallow.schema.Schema.dump", "marshmallow.schema.Schema.load"], "tests.test_schema.ArtistSchema.test_nested_instance_only": ["marshmallow.fields.String"], "tests.test_schema.AlbumSchema.test_nested_instance_only": ["marshmallow.fields.String", "tests.test_schema.test_nested_instance_only.<locals>.ArtistSchema", "marshmallow.fields.Nested"], "tests.test_schema.test_nested_instance_only": ["tests.test_schema.test_nested_instance_only.<locals>.AlbumSchema", "marshmallow.schema.Schema.load", "marshmallow.schema.Schema.dump"], "tests.test_schema.ArtistSchema.test_nested_instance_exclude": ["marshmallow.fields.String"], "tests.test_schema.AlbumSchema.test_nested_instance_exclude": ["marshmallow.fields.String", "tests.test_schema.test_nested_instance_exclude.<locals>.ArtistSchema", "marshmallow.fields.Nested"], "tests.test_schema.test_nested_instance_exclude": ["tests.test_schema.test_nested_instance_exclude.<locals>.AlbumSchema", "marshmallow.schema.Schema.load", "marshmallow.schema.Schema.dump"], "tests.test_schema.ChildSchema.test_meta_nested_exclude": ["marshmallow.fields.Field"], "tests.test_schema.ParentSchema.test_meta_nested_exclude": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.test_meta_nested_exclude": ["builtins.dict", "tests.test_schema.test_meta_nested_exclude.<locals>.ParentSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.ChildSchema.test_nested_custom_set_not_implementing_getitem": ["marshmallow.fields.String"], "tests.test_schema.ParentSchema.test_nested_custom_set_not_implementing_getitem": ["marshmallow.fields.Nested"], "tests.test_schema.test_nested_custom_set_not_implementing_getitem": ["tests.test_schema.test_nested_custom_set_not_implementing_getitem.<locals>.Child", "tests.test_schema.test_nested_custom_set_not_implementing_getitem.<locals>.ListLikeParent", "tests.test_schema.test_nested_custom_set_not_implementing_getitem.<locals>.ParentSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.GrandChildSchema.test_deeply_nested_only_and_exclude": ["marshmallow.fields.Field"], "tests.test_schema.ChildSchema.test_deeply_nested_only_and_exclude": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.ParentSchema.test_deeply_nested_only_and_exclude": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.test_deeply_nested_only_and_exclude": ["tests.test_schema.test_deeply_nested_only_and_exclude.<locals>.ParentSchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.ChildSchema.test_nested_lambda": ["marshmallow.fields.String", "marshmallow.fields.Nested", "marshmallow.fields.List", "tests.test_schema.test_nested_lambda.<locals>.ChildSchema", "tests.test_schema.test_nested_lambda.<locals>.ParentSchema"], "tests.test_schema.ParentSchema.test_nested_lambda": ["marshmallow.fields.String", "marshmallow.fields.Nested", "marshmallow.fields.List", "tests.test_schema.test_nested_lambda.<locals>.ChildSchema", "tests.test_schema.test_nested_lambda.<locals>.ParentSchema"], "tests.test_schema.test_nested_lambda": ["tests.test_schema.test_nested_lambda.<locals>.ParentSchema", "marshmallow.schema.Schema.load", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.MySchema.test_data_key_collision": ["marshmallow.fields.Field"], "tests.test_schema.test_data_key_collision": ["_pytest.python_api.raises", "tests.test_schema.test_data_key_collision.<locals>.MySchema"], "tests.test_schema.MySchema.test_attribute_collision": ["marshmallow.fields.Field"], "tests.test_schema.test_attribute_collision": ["_pytest.python_api.raises", "tests.test_schema.test_attribute_collision.<locals>.MySchema"], "tests.test_schema.GrandChildSchema.schema": ["marshmallow.fields.String"], "tests.test_schema.ChildSchema.schema": ["marshmallow.fields.String", "marshmallow.fields.Nested"], "tests.test_schema.ParentSchema.schema": ["marshmallow.fields.String", "marshmallow.fields.Nested", "marshmallow.fields.List"], "tests.test_schema.TestDeeplyNestedLoadOnly.schema": ["tests.test_schema.TestDeeplyNestedLoadOnly.schema.<locals>.ParentSchema"], "tests.test_schema.TestDeeplyNestedLoadOnly.data": ["builtins.dict"], "tests.test_schema.TestDeeplyNestedLoadOnly.test_load_only": ["marshmallow.schema.Schema.dump"], "tests.test_schema.TestDeeplyNestedLoadOnly.test_dump_only": ["marshmallow.schema.Schema.load"], "tests.test_schema.TestDeeplyNestedListLoadOnly.schema": ["tests.test_schema.TestDeeplyNestedListLoadOnly.schema.<locals>.ParentSchema"], "tests.test_schema.TestDeeplyNestedListLoadOnly.data": ["builtins.dict"], "tests.test_schema.TestDeeplyNestedListLoadOnly.test_load_only": ["marshmallow.schema.Schema.dump"], "tests.test_schema.TestDeeplyNestedListLoadOnly.test_dump_only": ["marshmallow.schema.Schema.load"], "tests.test_schema.GrandChildSchema.test_nested_constructor_only_and_exclude": ["marshmallow.fields.Field"], "tests.test_schema.ChildSchema.test_nested_constructor_only_and_exclude": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.ParentSchema.test_nested_constructor_only_and_exclude": ["marshmallow.fields.Field", "marshmallow.fields.Nested"], "tests.test_schema.test_nested_constructor_only_and_exclude": ["tests.test_schema.test_nested_constructor_only_and_exclude.<locals>.ParentSchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.MySchema.test_only_and_exclude": ["marshmallow.fields.Field"], "tests.test_schema.test_only_and_exclude": ["tests.test_schema.test_only_and_exclude.<locals>.MySchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.MySchema.test_only_and_exclude_with_fields": ["marshmallow.fields.Field"], "tests.test_schema.test_only_and_exclude_with_fields": ["tests.test_schema.test_only_and_exclude_with_fields.<locals>.MySchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.MySchema.test_invalid_only_and_exclude_with_fields": ["marshmallow.fields.Field"], "tests.test_schema.test_invalid_only_and_exclude_with_fields": ["_pytest.python_api.raises", "tests.test_schema.test_invalid_only_and_exclude_with_fields.<locals>.MySchema", "builtins.str"], "tests.test_schema.MySchema.test_only_and_exclude_with_additional": ["marshmallow.fields.Field"], "tests.test_schema.test_only_and_exclude_with_additional": ["tests.test_schema.test_only_and_exclude_with_additional.<locals>.MySchema", "builtins.dict", "marshmallow.schema.Schema.dump"], "tests.test_schema.MySchema.test_invalid_only_and_exclude_with_additional": ["marshmallow.fields.Field"], "tests.test_schema.test_invalid_only_and_exclude_with_additional": ["_pytest.python_api.raises", "tests.test_schema.test_invalid_only_and_exclude_with_additional.<locals>.MySchema", "builtins.str"], "tests.test_schema.MySchema.test_exclude_invalid_attribute": ["marshmallow.fields.Field"], "tests.test_schema.test_exclude_invalid_attribute": ["_pytest.python_api.raises", "tests.test_schema.test_exclude_invalid_attribute.<locals>.MySchema"], "tests.test_schema.test_only_bounded_by_fields": ["_pytest.python_api.raises", "tests.test_schema.test_only_bounded_by_fields.<locals>.MySchema"], "tests.test_schema.test_only_bounded_by_additional": ["_pytest.python_api.raises", "tests.test_schema.test_only_bounded_by_additional.<locals>.MySchema"], "tests.test_schema.MySchema.test_only_empty": ["marshmallow.fields.Field"], "tests.test_schema.test_only_empty": ["tests.test_schema.test_only_empty.<locals>.MySchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.MySchema.test_only_and_exclude_as_string": ["marshmallow.fields.Field"], "tests.test_schema.test_only_and_exclude_as_string": ["_pytest.python_api.raises", "tests.test_schema.test_only_and_exclude_as_string.<locals>.MySchema"], "tests.test_schema.Inner.test_nested_with_sets": ["marshmallow.fields.Field"], "tests.test_schema.Outer.test_nested_with_sets": ["marshmallow.fields.Nested"], "tests.test_schema.test_nested_with_sets": ["tests.test_schema.test_nested_with_sets.<locals>.Outer", "collections.namedtuple", "dynapyt.runtime.DataClass", "builtins.dict", "marshmallow.schema.Schema.dump", "builtins.len"], "tests.test_schema.test_meta_serializer_fields": ["tests.base.User", "tests.base.UserMetaSchema", "marshmallow.schema.Schema.dump", "decimal.Decimal", "marshmallow.utils.isoformat", "builtins.dict"], "tests.test_schema.test_meta_fields_mapping": ["tests.base.UserMetaSchema", "marshmallow.schema.Schema.dump", "builtins.type"], "tests.test_schema.test_meta_field_not_on_obj_raises_attribute_error": ["_pytest.python_api.raises", "tests.test_schema.test_meta_field_not_on_obj_raises_attribute_error.<locals>.BadUserSchema"], "tests.test_schema.test_exclude_fields": ["tests.base.UserExcludeSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.test_fields_option_must_be_list_or_tuple": ["_pytest.python_api.raises"], "tests.test_schema.test_exclude_option_must_be_list_or_tuple": ["_pytest.python_api.raises"], "tests.test_schema.DateTimeFormatSchema.test_datetimeformat_option": ["marshmallow.fields.DateTime"], "tests.test_schema.test_datetimeformat_option": ["tests.test_schema.test_datetimeformat_option.<locals>.DateTimeFormatSchema", "marshmallow.schema.Schema.dump", "datetime.strftime"], "tests.test_schema.DateFormatSchema.test_dateformat_option": ["marshmallow.fields.Date"], "tests.test_schema.test_dateformat_option": ["tests.test_schema.test_dateformat_option.<locals>.DateFormatSchema", "marshmallow.schema.Schema.dump", "date.strftime"], "tests.test_schema.TimeFormatSchema.test_timeformat_option": ["marshmallow.fields.Time"], "tests.test_schema.test_timeformat_option": ["tests.test_schema.test_timeformat_option.<locals>.TimeFormatSchema", "marshmallow.schema.Schema.dump", "time.strftime"], "tests.test_schema.DateFormatSchema.test_default_dateformat": ["marshmallow.fields.DateTime"], "tests.test_schema.test_default_dateformat": ["tests.test_schema.test_default_dateformat.<locals>.DateFormatSchema", "marshmallow.schema.Schema.dump", "marshmallow.utils.isoformat", "datetime.strftime"], "tests.test_schema.test_inherit_meta": ["tests.test_schema.test_inherit_meta.<locals>.InheritedMetaSchema", "marshmallow.schema.Schema.dump", "tests.base.UserMetaSchema"], "tests.test_schema.test_inherit_meta_override": ["tests.test_schema.test_inherit_meta_override.<locals>.Child"], "tests.test_schema.test_additional": ["tests.base.UserAdditionalSchema", "marshmallow.schema.Schema.dump", "str.lower"], "tests.test_schema.test_cant_set_both_additional_and_fields": ["_pytest.python_api.raises"], "tests.test_schema.BadSchema.test_cant_set_both_additional_and_fields": ["marshmallow.fields.String"], "tests.test_schema.test_serializing_none_meta": ["tests.base.UserMetaSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.MySchema.test_errors_are_cleared_after_loading_collection": ["marshmallow.fields.String"], "tests.test_schema.TestFieldValidation.test_errors_are_cleared_after_loading_collection": ["tests.test_schema.TestFieldValidation.test_errors_are_cleared_after_loading_collection.<locals>.MySchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load", "builtins.len"], "tests.test_schema.TestFieldValidation.always_fail": ["marshmallow.exceptions.ValidationError"], "tests.test_schema.MySchema.test_raises_error_with_list": ["marshmallow.fields.Field"], "tests.test_schema.TestFieldValidation.test_raises_error_with_list": ["tests.test_schema.TestFieldValidation.test_raises_error_with_list.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_schema.TestFieldValidation.validator": ["marshmallow.exceptions.ValidationError"], "tests.test_schema.MySchema.test_raises_error_with_dict": ["marshmallow.fields.Field"], "tests.test_schema.TestFieldValidation.test_raises_error_with_dict": ["tests.test_schema.TestFieldValidation.test_raises_error_with_dict.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_schema.MySchema.test_ignored_if_not_in_only": ["marshmallow.fields.Field"], "tests.test_schema.TestFieldValidation.test_ignored_if_not_in_only": ["tests.test_schema.TestFieldValidation.test_ignored_if_not_in_only.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_schema.MySchema.validate_b": ["marshmallow.exceptions.ValidationError"], "tests.test_schema.MySchema.test_schema_repr": ["marshmallow.fields.String"], "tests.test_schema.test_schema_repr": ["tests.test_schema.test_schema_repr.<locals>.MySchema", "builtins.repr"], "tests.test_schema.TestNestedSchema.user": ["tests.base.User"], "tests.test_schema.SimpleBlogSchema.test_nested_many_with_missing_attribute": ["marshmallow.fields.String", "marshmallow.fields.Nested"], "tests.test_schema.TestNestedSchema.test_nested_many_with_missing_attribute": ["tests.base.Blog", "tests.test_schema.TestNestedSchema.test_nested_many_with_missing_attribute.<locals>.SimpleBlogSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.InnerSchema.test_nested_with_attribute_none": ["marshmallow.fields.Field"], "tests.test_schema.MySchema.test_nested_with_attribute_none": ["marshmallow.fields.Nested"], "tests.test_schema.MySchema2.test_nested_with_attribute_none": ["marshmallow.fields.Nested"], "tests.test_schema.TestNestedSchema.test_nested_with_attribute_none": ["tests.test_schema.TestNestedSchema.test_nested_with_attribute_none.<locals>.MySchema", "marshmallow.schema.Schema.dump", "tests.test_schema.TestNestedSchema.test_nested_with_attribute_none.<locals>.MySchema2"], "tests.test_schema.BlogRequiredSchema.test_nested_field_does_not_validate_required": ["marshmallow.fields.Nested"], "tests.test_schema.TestNestedSchema.test_nested_field_does_not_validate_required": ["tests.base.Blog", "tests.test_schema.TestNestedSchema.test_nested_field_does_not_validate_required.<locals>.BlogRequiredSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.BlogDefaultSchema.test_nested_none": ["marshmallow.fields.Nested"], "tests.test_schema.TestNestedSchema.test_nested_none": ["tests.base.Blog", "tests.test_schema.TestNestedSchema.test_nested_none.<locals>.BlogDefaultSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.TestNestedSchema.blog": ["tests.base.User", "tests.base.Blog"], "tests.test_schema.TestNestedSchema.test_nested": ["tests.base.BlogSchema", "marshmallow.schema.Schema.dump", "tests.base.UserSchema", "_pytest.python_api.raises", "marshmallow.schema.Schema.load"], "tests.test_schema.TestNestedSchema.test_nested_many_fields": ["tests.base.BlogSchema", "marshmallow.schema.Schema.dump", "tests.base.UserSchema"], "tests.test_schema.TestNestedSchema.test_nested_meta_many": ["tests.base.BlogUserMetaSchema", "marshmallow.schema.Schema.dump", "builtins.len", "tests.base.UserMetaSchema"], "tests.test_schema.TestNestedSchema.test_nested_only": ["tests.base.User", "tests.base.BlogOnlySchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.TestNestedSchema.test_exclude": ["tests.base.BlogSchemaExclude", "marshmallow.schema.Schema.dump", "dict.keys"], "tests.test_schema.TestNestedSchema.test_list_field": ["tests.base.BlogSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.TestNestedSchema.test_nested_load_many": ["tests.base.BlogSchema", "marshmallow.schema.Schema.load", "builtins.len", "builtins.type"], "tests.test_schema.TestNestedSchema.test_nested_errors": ["_pytest.python_api.raises", "tests.base.BlogSchema", "marshmallow.schema.Schema.load", "builtins.len"], "tests.test_schema.TestNestedSchema.test_nested_method_field": ["tests.base.BlogSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.TestNestedSchema.test_nested_function_field": ["tests.base.BlogSchema", "marshmallow.schema.Schema.dump", "str.lower"], "tests.test_schema.TestNestedSchema.test_serializer_meta_with_nested_fields": ["tests.base.BlogSchemaMeta", "marshmallow.schema.Schema.dump", "tests.base.UserSchema"], "tests.test_schema.TestNestedSchema.test_serializer_with_nested_meta_fields": ["tests.base.BlogUserMetaSchema", "marshmallow.schema.Schema.dump", "tests.base.UserMetaSchema"], "tests.test_schema.BadNestedFieldSchema.test_nested_fields_must_be_passed_a_serializer": ["marshmallow.fields.Nested"], "tests.test_schema.TestNestedSchema.test_nested_fields_must_be_passed_a_serializer": ["_pytest.python_api.raises", "tests.test_schema.TestNestedSchema.test_nested_fields_must_be_passed_a_serializer.<locals>.BadNestedFieldSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.InnerSchema.test_invalid_type_passed_to_nested_field": ["marshmallow.fields.Field"], "tests.test_schema.MySchema.test_invalid_type_passed_to_nested_field": ["marshmallow.fields.Nested"], "tests.test_schema.TestNestedSchema.test_invalid_type_passed_to_nested_field": ["tests.test_schema.TestNestedSchema.test_invalid_type_passed_to_nested_field.<locals>.MySchema", "marshmallow.schema.Schema.load", "_pytest.python_api.raises", "tests.test_schema.TestNestedSchema.test_invalid_type_passed_to_nested_field.<locals>.OuterSchema"], "tests.test_schema.OuterSchema.test_invalid_type_passed_to_nested_field": ["marshmallow.fields.Nested"], "tests.test_schema.Inner.test_all_errors_on_many_nested_field_with_validates_decorator": ["marshmallow.fields.Field"], "tests.test_schema.Outer.test_all_errors_on_many_nested_field_with_validates_decorator": ["marshmallow.fields.Nested"], "tests.test_schema.TestNestedSchema.test_all_errors_on_many_nested_field_with_validates_decorator": ["tests.test_schema.TestNestedSchema.test_all_errors_on_many_nested_field_with_validates_decorator.<locals>.Outer", "_pytest.python_api.raises", "marshmallow.schema.Schema.load"], "tests.test_schema.Outer.validates_inner": ["marshmallow.exceptions.ValidationError"], "tests.test_schema.ChildSchema.test_nested_unknown_validation": ["marshmallow.fields.Integer"], "tests.test_schema.ParentSchema.test_nested_unknown_validation": ["marshmallow.fields.Nested"], "tests.test_schema.TestNestedSchema.test_nested_unknown_validation": ["_pytest.python_api.raises", "tests.test_schema.TestNestedSchema.test_nested_unknown_validation.<locals>.ParentSchema", "marshmallow.schema.Schema.load"], "tests.conftest.blog": ["tests.base.User", "tests.base.Blog"], "tests.test_schema.FlatBlogSchema.test_pluck": ["marshmallow.fields.Pluck"], "tests.test_schema.TestPluckSchema.test_pluck": ["tests.test_schema.TestPluckSchema.test_pluck.<locals>.FlatBlogSchema", "marshmallow.schema.Schema.dump", "builtins.enumerate"], "tests.test_schema.FlatBlogSchema.test_pluck_none": ["marshmallow.fields.Pluck"], "tests.test_schema.TestPluckSchema.test_pluck_none": ["tests.base.User", "tests.base.Blog", "tests.test_schema.TestPluckSchema.test_pluck_none.<locals>.FlatBlogSchema", "marshmallow.schema.Schema.dump", "builtins.enumerate"], "tests.test_schema.UserSchema.test_pluck_with_data_key": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_schema.FlatBlogSchema.test_pluck_with_data_key": ["marshmallow.fields.Pluck"], "tests.test_schema.TestPluckSchema.test_pluck_with_data_key": ["tests.test_schema.TestPluckSchema.test_pluck_with_data_key.<locals>.FlatBlogSchema", "marshmallow.schema.Schema.dump", "builtins.enumerate", "marshmallow.schema.Schema.load"], "tests.test_schema.TestSelfReference.employer": ["tests.base.User"], "tests.test_schema.TestSelfReference.user": ["tests.base.User"], "tests.test_schema.SelfReferencingSchema.test_nesting_schema_by_passing_lambda": ["marshmallow.fields.String", "marshmallow.fields.Integer", "marshmallow.fields.Nested", "tests.test_schema.TestSelfReference.test_nesting_schema_by_passing_lambda.<locals>.SelfReferencingSchema"], "tests.test_schema.TestSelfReference.test_nesting_schema_by_passing_lambda": ["tests.test_schema.TestSelfReference.test_nesting_schema_by_passing_lambda.<locals>.SelfReferencingSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.SelfReferencingSchema.test_nesting_schema_by_passing_class_name": ["marshmallow.fields.String", "marshmallow.fields.Integer", "marshmallow.fields.Nested"], "tests.test_schema.TestSelfReference.test_nesting_schema_by_passing_class_name": ["tests.test_schema.TestSelfReference.test_nesting_schema_by_passing_class_name.<locals>.SelfReferencingSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.TestSelfReference.test_nesting_schema_self_string": ["_pytest.recwarn.warns", "tests.test_schema.TestSelfReference.test_nesting_schema_self_string.<locals>.SelfSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.SelfSchema.test_nesting_schema_self_string": ["marshmallow.fields.String", "marshmallow.fields.Integer", "marshmallow.fields.Nested"], "tests.test_schema.SelfSchema.test_nesting_within_itself_meta": ["marshmallow.fields.Nested", "tests.test_schema.TestSelfReference.test_nesting_within_itself_meta.<locals>.SelfSchema"], "tests.test_schema.TestSelfReference.test_nesting_within_itself_meta": ["tests.test_schema.TestSelfReference.test_nesting_within_itself_meta.<locals>.SelfSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.SelfSchema.test_nested_self_with_only_param": ["marshmallow.fields.Nested", "tests.test_schema.TestSelfReference.test_nested_self_with_only_param.<locals>.SelfSchema"], "tests.test_schema.TestSelfReference.test_nested_self_with_only_param": ["tests.test_schema.TestSelfReference.test_nested_self_with_only_param.<locals>.SelfSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.MultipleSelfSchema.test_multiple_pluck_self_lambda": ["marshmallow.fields.Pluck", "tests.test_schema.TestSelfReference.test_multiple_pluck_self_lambda.<locals>.MultipleSelfSchema"], "tests.test_schema.TestSelfReference.test_multiple_pluck_self_lambda": ["tests.test_schema.TestSelfReference.test_multiple_pluck_self_lambda.<locals>.MultipleSelfSchema", "tests.base.User", "marshmallow.schema.Schema.dump", "builtins.len"], "tests.test_schema.TestSelfReference.test_multiple_pluck_self_string": ["_pytest.recwarn.warns", "tests.test_schema.TestSelfReference.test_multiple_pluck_self_string.<locals>.MultipleSelfSchema", "tests.base.User", "marshmallow.schema.Schema.dump", "builtins.len"], "tests.test_schema.MultipleSelfSchema.test_multiple_pluck_self_string": ["marshmallow.fields.Pluck"], "tests.test_schema.SelfManySchema.test_nested_self_many_lambda": ["marshmallow.fields.Nested", "tests.test_schema.TestSelfReference.test_nested_self_many_lambda.<locals>.SelfManySchema"], "tests.test_schema.TestSelfReference.test_nested_self_many_lambda": ["tests.base.User", "tests.test_schema.TestSelfReference.test_nested_self_many_lambda.<locals>.SelfManySchema", "marshmallow.schema.Schema.dump", "builtins.len"], "tests.test_schema.TestSelfReference.test_nested_self_many_string": ["_pytest.recwarn.warns", "tests.base.User", "tests.test_schema.TestSelfReference.test_nested_self_many_string.<locals>.SelfManySchema", "marshmallow.schema.Schema.dump", "builtins.len"], "tests.test_schema.SelfManySchema.test_nested_self_many_string": ["marshmallow.fields.Nested"], "tests.test_schema.SelfListSchema.test_nested_self_list": ["marshmallow.fields.Nested", "marshmallow.fields.List", "tests.test_schema.TestSelfReference.test_nested_self_list.<locals>.SelfListSchema"], "tests.test_schema.TestSelfReference.test_nested_self_list": ["tests.base.User", "tests.test_schema.TestSelfReference.test_nested_self_list.<locals>.SelfListSchema", "marshmallow.schema.Schema.dump", "builtins.len"], "tests.test_schema.TestSelfReference.test_nested_self_list_string": ["_pytest.recwarn.warns", "tests.base.User", "tests.test_schema.TestSelfReference.test_nested_self_list_string.<locals>.SelfListSchema", "marshmallow.schema.Schema.dump", "builtins.len"], "tests.test_schema.SelfListSchema.test_nested_self_list_string": ["marshmallow.fields.Nested", "marshmallow.fields.List"], "tests.test_schema.test_serialization_with_required_field": ["tests.base.User", "tests.test_schema.RequiredUserSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.test_deserialization_with_required_field": ["_pytest.python_api.raises", "tests.test_schema.RequiredUserSchema", "marshmallow.schema.Schema.load"], "tests.test_schema.ValidatingSchema.test_deserialization_with_required_field_and_custom_validator": ["marshmallow.fields.String", "str.lower"], "tests.test_schema.test_deserialization_with_required_field_and_custom_validator": ["_pytest.python_api.raises", "tests.test_schema.test_deserialization_with_required_field_and_custom_validator.<locals>.ValidatingSchema", "marshmallow.schema.Schema.load"], "tests.test_schema.TestContext.test_context_method": ["tests.base.User", "tests.base.Blog", "tests.test_schema.UserContextSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.TestContext.test_context_method_function": ["tests.base.User", "tests.base.Blog", "list.append", "tests.test_schema.UserContextSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.UserFunctionContextSchema.test_function_field_raises_error_when_context_not_available": ["marshmallow.fields.Function"], "tests.test_schema.TestContext.test_function_field_raises_error_when_context_not_available": ["tests.base.User", "tests.test_schema.TestContext.test_function_field_raises_error_when_context_not_available.<locals>.UserFunctionContextSchema", "str.format", "_pytest.python_api.raises", "marshmallow.schema.Schema.dump"], "tests.test_schema.TestContext.test_function_field_handles_bound_serializer": ["tests.test_schema.TestContext.test_function_field_handles_bound_serializer.<locals>.SerializeA", "tests.base.User", "tests.test_schema.TestContext.test_function_field_handles_bound_serializer.<locals>.UserFunctionContextSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.UserFunctionContextSchema.test_function_field_handles_bound_serializer": ["marshmallow.fields.Function"], "tests.test_schema.CSchema.test_fields_context": ["marshmallow.fields.String"], "tests.test_schema.TestContext.test_fields_context": ["tests.test_schema.TestContext.test_fields_context.<locals>.CSchema"], "tests.test_schema.InnerSchema.test_nested_fields_inherit_context": ["marshmallow.fields.Function"], "tests.test_schema.CSchema.test_nested_fields_inherit_context": ["marshmallow.fields.Nested"], "tests.test_schema.TestContext.test_nested_fields_inherit_context": ["tests.test_schema.TestContext.test_nested_fields_inherit_context.<locals>.CSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.InnerSchema.test_nested_list_fields_inherit_context": ["marshmallow.fields.Field"], "tests.test_schema.OuterSchema.test_nested_list_fields_inherit_context": ["tests.test_schema.TestContext.test_nested_list_fields_inherit_context.<locals>.InnerSchema", "marshmallow.fields.Nested", "marshmallow.fields.List"], "tests.test_schema.TestContext.test_nested_list_fields_inherit_context": ["tests.test_schema.TestContext.test_nested_list_fields_inherit_context.<locals>.InnerSchema", "marshmallow.schema.Schema.load", "tests.test_schema.TestContext.test_nested_list_fields_inherit_context.<locals>.OuterSchema"], "tests.test_schema.InnerSchema.test_nested_dict_fields_inherit_context": ["marshmallow.fields.Field"], "tests.test_schema.OuterSchema.test_nested_dict_fields_inherit_context": ["tests.test_schema.TestContext.test_nested_dict_fields_inherit_context.<locals>.InnerSchema", "marshmallow.fields.Nested", "marshmallow.fields.Dict"], "tests.test_schema.TestContext.test_nested_dict_fields_inherit_context": ["tests.test_schema.TestContext.test_nested_dict_fields_inherit_context.<locals>.InnerSchema", "marshmallow.schema.Schema.load", "tests.test_schema.TestContext.test_nested_dict_fields_inherit_context.<locals>.OuterSchema"], "tests.test_schema.InnerSchema.test_nested_field_with_unpicklable_object_in_context": ["marshmallow.fields.Field"], "tests.test_schema.OuterSchema.test_nested_field_with_unpicklable_object_in_context": ["tests.test_schema.TestContext.test_nested_field_with_unpicklable_object_in_context.<locals>.Unpicklable", "tests.test_schema.TestContext.test_nested_field_with_unpicklable_object_in_context.<locals>.InnerSchema", "marshmallow.fields.Nested"], "tests.test_schema.TestContext.test_nested_field_with_unpicklable_object_in_context": ["tests.test_schema.TestContext.test_nested_field_with_unpicklable_object_in_context.<locals>.OuterSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.BlogUsernameSchema.test_serializer_can_specify_nested_object_as_attribute": ["marshmallow.fields.String"], "tests.test_schema.test_serializer_can_specify_nested_object_as_attribute": ["tests.test_schema.test_serializer_can_specify_nested_object_as_attribute.<locals>.BlogUsernameSchema", "marshmallow.schema.Schema.dump"], "tests.test_schema.TestFieldInheritance.test_inherit_fields_from_schema_subclass": ["marshmallow.fields.Number"], "tests.test_schema.TestFieldInheritance.test_inherit_fields_from_non_schema_subclass": ["marshmallow.fields.Number"], "tests.test_schema.TestFieldInheritance.test_inheritance_follows_mro": ["marshmallow.fields.String"], "tests.test_schema.UserDictSchema.test_get_attribute_is_used": ["marshmallow.fields.String", "marshmallow.fields.Email"], "tests.test_schema.TestGetAttribute.test_get_attribute_is_used": ["tests.test_schema.TestGetAttribute.test_get_attribute_is_used.<locals>.UserDictSchema", "marshmallow.schema.Schema.dump", "tests.base.User", "_pytest.python_api.raises"], "tests.test_schema.UserDictSchema.get_attribute": ["tests.test_schema.get_from_dict"], "tests.test_schema.get_from_dict": ["dict.get"], "tests.test_schema.UserDictSchema.test_get_attribute_with_many": ["marshmallow.fields.String", "marshmallow.fields.Email"], "tests.test_schema.TestGetAttribute.test_get_attribute_with_many": ["tests.test_schema.TestGetAttribute.test_get_attribute_with_many.<locals>.UserDictSchema", "marshmallow.schema.Schema.dump", "builtins.zip", "tests.base.User", "_pytest.python_api.raises"], "tests.test_schema.TestRequiredFields.string_schema": ["tests.test_schema.TestRequiredFields.StringSchema"], "tests.test_schema.TestRequiredFields.data": ["builtins.dict"], "tests.test_schema.TestRequiredFields.test_required_string_field_missing": ["marshmallow.schema.Schema.validate"], "tests.test_schema.TestRequiredFields.test_required_string_field_failure": ["marshmallow.schema.Schema.validate"], "tests.test_schema.TestRequiredFields.test_allow_none_param": ["marshmallow.schema.Schema.validate"], "tests.test_schema.MySchema.test_allow_none_custom_message": ["marshmallow.fields.Field"], "tests.test_schema.TestRequiredFields.test_allow_none_custom_message": ["tests.test_schema.TestRequiredFields.test_allow_none_custom_message.<locals>.MySchema", "marshmallow.schema.Schema.validate"], "tests.test_schema.TestDefaults.schema": ["tests.test_schema.TestDefaults.MySchema"], "tests.test_schema.TestDefaults.data": ["builtins.dict"], "tests.test_schema.TestDefaults.test_missing_inputs_are_excluded_from_dump_output": ["dict.copy", "marshmallow.schema.Schema.dump", "dict.keys"], "tests.test_schema.TestDefaults.test_none_is_serialized_to_none": ["marshmallow.schema.Schema.validate", "marshmallow.schema.Schema.dump", "dict.keys"], "tests.test_schema.TestDefaults.test_default_and_value_missing": ["marshmallow.schema.Schema.dump"], "tests.test_schema.TestDefaults.test_loading_none": ["marshmallow.schema.Schema.load", "dict.keys"], "tests.test_schema.TestDefaults.test_missing_inputs_are_excluded_from_load_output": ["dict.copy", "marshmallow.schema.Schema.load", "dict.keys"], "tests.test_schema.TestLoadOnly.schema": ["tests.test_schema.TestLoadOnly.MySchema"], "tests.test_schema.TestLoadOnly.data": ["builtins.dict"], "tests.test_schema.TestLoadOnly.test_load_only": ["marshmallow.schema.Schema.dump"], "tests.test_schema.TestLoadOnly.test_dump_only": ["marshmallow.schema.Schema.load"], "tests.test_schema.NoTldTestSchema.test_url_field_requre_tld_false": ["marshmallow.fields.Url"], "tests.test_schema.TestLoadOnly.test_url_field_requre_tld_false": ["tests.test_schema.TestLoadOnly.test_url_field_requre_tld_false.<locals>.NoTldTestSchema", "marshmallow.schema.Schema.load"], "tests.test_schema.TestFromDict.test_generates_schema": ["marshmallow.fields.String", "marshmallow.schema.Schema.from_dict", "builtins.issubclass"], "tests.test_schema.TestFromDict.test_name": ["marshmallow.fields.String", "marshmallow.schema.Schema.from_dict", "builtins.repr", "marshmallow.fields.Integer"], "tests.test_schema.TestFromDict.test_generated_schemas_are_not_registered": ["builtins.len", "marshmallow.fields.String", "marshmallow.schema.Schema.from_dict", "_pytest.python_api.raises", "marshmallow.class_registry.get_class"], "tests.test_schema.TestFromDict.test_meta_options_are_applied": ["marshmallow.fields.Integer", "marshmallow.schema.Schema.from_dict", "marshmallow.schema.GeneratedSchema", "marshmallow.schema.Schema.dump", "builtins.isinstance"], "tests.test_schema.test_class_registry_returns_schema_type": ["marshmallow.class_registry.get_class"], "tests.test_schema.MySchema.test_unknown_parameter_value_is_validated": ["marshmallow.fields.String"], "tests.test_schema.test_unknown_parameter_value_is_validated": ["_pytest.python_api.raises", "tests.test_schema.test_unknown_parameter_value_is_validated.<locals>.MySchema", "marshmallow.schema.Schema.load"], "tests.test_serialization.TestFieldSerialization.user": ["tests.base.User"], "tests.test_serialization.TestFieldSerialization.test_number": ["marshmallow.fields.Number", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_number_as_string": ["marshmallow.fields.Number", "marshmallow.fields.Field.serialize", "builtins.float", "builtins.str"], "tests.test_serialization.TestFieldSerialization.test_number_as_string_passed_none": ["marshmallow.fields.Number", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_function_field_passed_func": ["marshmallow.fields.Function", "marshmallow.fields.Field.serialize", "str.upper"], "tests.test_serialization.TestFieldSerialization.test_function_field_passed_serialize_only_is_dump_only": ["marshmallow.fields.Function"], "tests.test_serialization.TestFieldSerialization.test_function_field_passed_deserialize_and_serialize_is_not_dump_only": ["marshmallow.fields.Function"], "tests.test_serialization.TestFieldSerialization.test_function_field_passed_serialize": ["marshmallow.fields.Function", "marshmallow.fields.Field.serialize", "str.upper"], "tests.test_serialization.TestFieldSerialization.test_function_field_does_not_swallow_attribute_error": ["marshmallow.fields.Function", "_pytest.python_api.raises", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.raise_error": ["builtins.AttributeError"], "tests.test_serialization.AliasingUserSerializer.test_serialize_with_load_only_param": ["marshmallow.fields.String", "marshmallow.fields.Integer", "marshmallow.fields.List"], "tests.test_serialization.TestFieldSerialization.test_serialize_with_load_only_param": ["tests.test_serialization.TestFieldSerialization.test_serialize_with_load_only_param.<locals>.AliasingUserSerializer", "marshmallow.schema.Schema.dump"], "tests.test_serialization.TestFieldSerialization.test_function_field_load_only": ["marshmallow.fields.Function"], "tests.test_serialization.TestFieldSerialization.test_function_field_passed_serialize_with_context": ["marshmallow.fields.Function", "tests.test_serialization.TestFieldSerialization.test_function_field_passed_serialize_with_context.<locals>.Parent", "marshmallow.fields.Field.serialize", "str.upper"], "tests.test_serialization.TestFieldSerialization.test_function_field_passed_uncallable_object": ["_pytest.python_api.raises", "marshmallow.fields.Function"], "tests.test_serialization.TestFieldSerialization.test_integer_field": ["marshmallow.fields.Integer", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_integer_as_string_field": ["marshmallow.fields.Integer", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_integer_field_default": ["marshmallow.fields.Integer", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_integer_field_default_set_to_none": ["marshmallow.fields.Integer", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_uuid_field": ["uuid.UUID", "marshmallow.fields.UUID", "marshmallow.fields.Field.serialize", "builtins.isinstance"], "tests.test_serialization.TestFieldSerialization.test_ip_address_field": ["ipaddress.ip_address", "marshmallow.fields.IP", "marshmallow.fields.Field.serialize", "builtins.isinstance"], "tests.test_serialization.TestFieldSerialization.test_ipv4_address_field": ["ipaddress.ip_address", "marshmallow.fields.IPv4", "marshmallow.fields.Field.serialize", "builtins.isinstance"], "tests.test_serialization.TestFieldSerialization.test_ipv6_address_field": ["ipaddress.ip_address", "marshmallow.fields.IPv6", "marshmallow.fields.Field.serialize", "builtins.isinstance"], "tests.test_serialization.TestFieldSerialization.test_ip_interface_field": ["ipaddress.ip_interface", "marshmallow.fields.IPInterface", "marshmallow.fields.Field.serialize", "builtins.isinstance"], "tests.test_serialization.TestFieldSerialization.test_ipv4_interface_field": ["ipaddress.ip_interface", "marshmallow.fields.IPv4Interface", "marshmallow.fields.Field.serialize", "builtins.isinstance"], "tests.test_serialization.TestFieldSerialization.test_ipv6_interface_field": ["ipaddress.ip_interface", "marshmallow.fields.IPv6Interface", "marshmallow.fields.Field.serialize", "builtins.isinstance"], "tests.test_serialization.TestFieldSerialization.test_enum_field_by_symbol_serialization": ["marshmallow.fields.Enum", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_enum_field_by_value_true_serialization": ["marshmallow.fields.Enum", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_enum_field_by_value_field_serialization": ["marshmallow.fields.Enum", "marshmallow.fields.Field.serialize", "marshmallow.fields.Date"], "tests.test_serialization.TestFieldSerialization.test_decimal_field": ["decimal.Decimal", "marshmallow.fields.Decimal", "marshmallow.fields.Field.serialize", "builtins.isinstance"], "tests.test_serialization.TestFieldSerialization.test_decimal_field_string": ["decimal.Decimal", "marshmallow.fields.Decimal", "marshmallow.fields.Field.serialize", "builtins.isinstance"], "tests.test_serialization.TestFieldSerialization.test_decimal_field_special_values": ["marshmallow.fields.Decimal", "marshmallow.fields.Field.serialize", "builtins.isinstance", "Decimal.is_qnan", "Decimal.is_signed", "Decimal.is_infinite", "Decimal.is_zero"], "tests.test_serialization.TestFieldSerialization.test_decimal_field_special_values_not_permitted": ["marshmallow.fields.Decimal", "marshmallow.fields.Field.serialize", "builtins.isinstance", "Decimal.is_zero", "Decimal.is_signed"], "tests.test_serialization.TestFieldSerialization.test_decimal_field_fixed_point_representation": ["marshmallow.fields.Decimal", "marshmallow.fields.Field.serialize", "builtins.isinstance", "decimal.Decimal"], "tests.test_serialization.TestFieldSerialization.test_boolean_field_serialization": ["marshmallow.fields.Boolean", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_email_field_serialize_none": ["marshmallow.fields.Email", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_dict_field_serialize_none": ["marshmallow.fields.Dict", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_dict_field_serialize": ["marshmallow.fields.Dict", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_dict_field_serialize_ordereddict": ["collections.OrderedDict", "marshmallow.fields.Dict", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_structured_dict_value_serialize": ["decimal.Decimal", "marshmallow.fields.Dict", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_structured_dict_key_serialize": ["marshmallow.fields.Dict", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_structured_dict_key_value_serialize": ["decimal.Decimal", "marshmallow.fields.Dict", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_url_field_serialize_none": ["marshmallow.fields.Url", "marshmallow.fields.Field.serialize"], "tests.test_serialization.BadSerializer.test_method_field_with_method_missing": ["marshmallow.fields.Method"], "tests.test_serialization.TestFieldSerialization.test_method_field_with_method_missing": ["_pytest.python_api.raises", "tests.test_serialization.TestFieldSerialization.test_method_field_with_method_missing.<locals>.BadSerializer"], "tests.test_serialization.TestFieldSerialization.test_method_field_passed_serialize_only_is_dump_only": ["marshmallow.fields.Method"], "tests.test_serialization.TestFieldSerialization.test_method_field_passed_deserialize_only_is_load_only": ["marshmallow.fields.Method"], "tests.test_serialization.BadSerializer.test_method_field_with_uncallable_attribute": ["marshmallow.fields.Method"], "tests.test_serialization.TestFieldSerialization.test_method_field_with_uncallable_attribute": ["_pytest.python_api.raises", "tests.test_serialization.TestFieldSerialization.test_method_field_with_uncallable_attribute.<locals>.BadSerializer"], "tests.test_serialization.MySchema.test_method_field_does_not_swallow_attribute_error": ["marshmallow.fields.Method"], "tests.test_serialization.TestFieldSerialization.test_method_field_does_not_swallow_attribute_error": ["_pytest.python_api.raises", "tests.test_serialization.TestFieldSerialization.test_method_field_does_not_swallow_attribute_error.<locals>.MySchema", "marshmallow.schema.Schema.dump"], "tests.test_serialization.MySchema.raise_error": ["builtins.AttributeError"], "tests.test_serialization.TestFieldSerialization.test_method_with_no_serialize_is_missing": ["marshmallow.fields.Method", "marshmallow.schema.Schema", "marshmallow.fields.Field.serialize"], "tests.test_serialization.DumpToSchema.test_serialize_with_data_key_param": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_serialization.TestFieldSerialization.test_serialize_with_data_key_param": ["tests.test_serialization.TestFieldSerialization.test_serialize_with_data_key_param.<locals>.DumpToSchema", "marshmallow.schema.Schema.dump"], "tests.test_serialization.MySchema.test_serialize_with_data_key_as_empty_string": ["marshmallow.fields.Field"], "tests.test_serialization.TestFieldSerialization.test_serialize_with_data_key_as_empty_string": ["tests.test_serialization.TestFieldSerialization.test_serialize_with_data_key_as_empty_string.<locals>.MySchema", "marshmallow.schema.Schema.dump"], "tests.test_serialization.ConfusedDumpToAndAttributeSerializer.test_serialize_with_attribute_and_data_key_uses_data_key": ["marshmallow.fields.String", "marshmallow.fields.Integer"], "tests.test_serialization.TestFieldSerialization.test_serialize_with_attribute_and_data_key_uses_data_key": ["tests.test_serialization.TestFieldSerialization.test_serialize_with_attribute_and_data_key_uses_data_key.<locals>.ConfusedDumpToAndAttributeSerializer", "marshmallow.schema.Schema.dump"], "tests.test_serialization.TestFieldSerialization.test_datetime_field_rfc822": ["marshmallow.fields.DateTime", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_datetime_field_timestamp": ["marshmallow.fields.DateTime", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_datetime_field_iso8601": ["marshmallow.fields.DateTime", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_datetime_field_format": ["marshmallow.fields.DateTime", "marshmallow.fields.Field.serialize", "datetime.strftime"], "tests.test_serialization.TestFieldSerialization.test_string_field": ["marshmallow.fields.String", "tests.base.User", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_string_field_default_to_empty_string": ["marshmallow.fields.String", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_time_field": ["marshmallow.fields.Time", "time.isoformat", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_time_field_iso8601": ["marshmallow.fields.Time", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_time_field_format": ["marshmallow.fields.Time", "marshmallow.fields.Field.serialize", "time.strftime"], "tests.test_serialization.TestFieldSerialization.test_date_field": ["marshmallow.fields.Date", "marshmallow.fields.Field.serialize", "date.isoformat"], "tests.test_serialization.TestFieldSerialization.test_timedelta_field": ["datetime.timedelta", "marshmallow.fields.TimeDelta", "marshmallow.fields.Field.serialize", "timedelta.total_seconds", "math.isclose", "_pytest.python_api.raises"], "tests.test_serialization.TestFieldSerialization.test_datetime_list_field": ["datetime.utcnow", "datetime.now", "tests.test_serialization.DateTimeList", "marshmallow.fields.List", "marshmallow.fields.Field.serialize", "builtins.type"], "tests.test_serialization.TestFieldSerialization.test_list_field_serialize_none_returns_none": ["tests.test_serialization.DateTimeList", "marshmallow.fields.List", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_list_field_work_with_generator_single_value": ["tests.test_serialization.TestFieldSerialization.test_list_field_work_with_generator_single_value.<locals>.custom_generator", "tests.test_serialization.DateTimeList", "marshmallow.fields.List", "marshmallow.fields.Field.serialize", "builtins.len"], "tests.test_serialization.TestFieldSerialization.custom_generator": ["datetime.utcnow", "datetime.now"], "tests.test_serialization.TestFieldSerialization.test_list_field_work_with_generators_multiple_values": ["tests.test_serialization.TestFieldSerialization.test_list_field_work_with_generators_multiple_values.<locals>.custom_generator", "tests.test_serialization.DateTimeList", "marshmallow.fields.List", "marshmallow.fields.Field.serialize", "builtins.len"], "tests.test_serialization.TestFieldSerialization.test_list_field_work_with_generators_empty_generator_returns_none_for_every_non_returning_yield_statement": ["tests.test_serialization.TestFieldSerialization.test_list_field_work_with_generators_empty_generator_returns_none_for_every_non_returning_yield_statement.<locals>.custom_generator", "tests.test_serialization.DateTimeList", "marshmallow.fields.List", "marshmallow.fields.Field.serialize", "builtins.len"], "tests.test_serialization.TestFieldSerialization.test_list_field_work_with_set": ["tests.test_serialization.IntegerList", "marshmallow.fields.List", "marshmallow.fields.Field.serialize", "builtins.len"], "tests.test_serialization.TestFieldSerialization.test_list_field_work_with_custom_class_with_iterator_protocol": ["tests.test_serialization.TestFieldSerialization.test_list_field_work_with_custom_class_with_iterator_protocol.<locals>.IteratorSupportingClass", "tests.test_serialization.IntegerList", "marshmallow.fields.List", "marshmallow.fields.Field.serialize", "builtins.len"], "tests.test_serialization.IteratorSupportingClass.__iter__": ["builtins.iter"], "tests.test_serialization.ASchema.test_bad_list_field": ["marshmallow.fields.Integer"], "tests.test_serialization.TestFieldSerialization.test_bad_list_field": ["_pytest.python_api.raises", "marshmallow.fields.List"], "tests.test_serialization.TestFieldSerialization.test_datetime_integer_tuple_field": ["datetime.utcnow", "tests.test_serialization.DateTimeIntegerTuple", "marshmallow.fields.Tuple", "marshmallow.fields.Field.serialize", "builtins.type"], "tests.test_serialization.TestFieldSerialization.test_tuple_field_serialize_none_returns_none": ["tests.test_serialization.DateTimeIntegerTuple", "marshmallow.fields.Tuple", "marshmallow.fields.Field.serialize"], "tests.test_serialization.ASchema.test_bad_tuple_field": ["marshmallow.fields.Integer"], "tests.test_serialization.TestFieldSerialization.test_bad_tuple_field": ["_pytest.python_api.raises", "marshmallow.fields.Tuple"], "tests.test_serialization.TestFieldSerialization.test_serialize_does_not_apply_validators": ["marshmallow.fields.Field", "marshmallow.fields.Field.serialize"], "tests.test_serialization.TestFieldSerialization.test_constant_field_serialization": ["marshmallow.fields.Constant", "marshmallow.fields.Field.serialize"], "tests.test_serialization.MySchema.test_constant_is_always_included_in_serialized_data": ["marshmallow.fields.Constant"], "tests.test_serialization.TestFieldSerialization.test_constant_is_always_included_in_serialized_data": ["tests.test_serialization.TestFieldSerialization.test_constant_is_always_included_in_serialized_data.<locals>.MySchema", "marshmallow.schema.Schema.dump"], "tests.test_serialization.MiniUserSchema.test_constant_field_serialize_when_omitted": ["marshmallow.fields.Constant"], "tests.test_serialization.TestFieldSerialization.test_constant_field_serialize_when_omitted": ["tests.test_serialization.TestFieldSerialization.test_constant_field_serialize_when_omitted.<locals>.MiniUserSchema", "marshmallow.schema.Schema.dump"], "tests.test_serialization.TestFieldSerialization.test_all_fields_serialize_none_to_none": ["marshmallow.fields.String", "marshmallow.fields.Field.serialize", "marshmallow.fields.Integer", "marshmallow.fields.Boolean", "marshmallow.fields.Float", "marshmallow.fields.Number", "marshmallow.fields.DateTime", "marshmallow.fields.Time", "marshmallow.fields.Date", "marshmallow.fields.TimeDelta", "marshmallow.fields.Dict", "marshmallow.fields.Url", "marshmallow.fields.Email", "marshmallow.fields.UUID", "marshmallow.fields.Decimal", "marshmallow.fields.IP", "marshmallow.fields.IPv4", "marshmallow.fields.IPv6", "marshmallow.fields.IPInterface", "marshmallow.fields.IPv4Interface", "marshmallow.fields.IPv6Interface", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'HairColorEnum'>, by_value=<class 'marshmallow.fields.String'>)", "functools.partial(<class 'marshmallow.fields.Enum'>, <enum 'GenderEnum'>, by_value=<class 'marshmallow.fields.Integer'>)"], "tests.test_serialization.AliasingUserSerializer.test_serialize_with_missing_param_value": ["marshmallow.fields.String", "datetime.datetime", "marshmallow.fields.DateTime"], "tests.test_serialization.TestSchemaSerialization.test_serialize_with_missing_param_value": ["tests.test_serialization.TestSchemaSerialization.test_serialize_with_missing_param_value.<locals>.AliasingUserSerializer", "marshmallow.schema.Schema.dump"], "tests.test_serialization.AliasingUserSerializer.test_serialize_with_missing_param_callable": ["marshmallow.fields.String", "marshmallow.fields.DateTime", "datetime.datetime"], "tests.test_serialization.TestSchemaSerialization.test_serialize_with_missing_param_callable": ["tests.test_serialization.TestSchemaSerialization.test_serialize_with_missing_param_callable.<locals>.AliasingUserSerializer", "marshmallow.schema.Schema.dump"], "tests.test_serialization.test_serializing_named_tuple": ["collections.namedtuple", "marshmallow.fields.Field", "dynapyt.runtime.Point", "marshmallow.fields.Field.serialize"], "tests.test_serialization.test_serializing_named_tuple_with_meta": ["collections.namedtuple", "dynapyt.runtime.Point", "tests.test_serialization.test_serializing_named_tuple_with_meta.<locals>.PointSerializer", "marshmallow.schema.Schema.dump"], "tests.test_serialization.test_serializing_slice": ["builtins.range", "itertools.islice", "tests.test_serialization.test_serializing_slice.<locals>.ValueSchema", "marshmallow.schema.Schema.dump"], "tests.test_serialization.ValueSchema.test_serializing_slice": ["marshmallow.fields.Integer"], "tests.test_serialization.MySchema.test_nested_field_many_serializing_generator": ["marshmallow.fields.String"], "tests.test_serialization.OtherSchema.test_nested_field_many_serializing_generator": ["marshmallow.fields.Nested"], "tests.test_serialization.test_nested_field_many_serializing_generator": ["tests.test_serialization.test_nested_field_many_serializing_generator.<locals>.gen", "tests.test_serialization.test_nested_field_many_serializing_generator.<locals>.OtherSchema", "marshmallow.schema.Schema.dump", "dict.get"], "tests.test_utils.test_missing_singleton_copy": ["copy.copy", "copy.deepcopy"], "tests.test_utils.test_get_value_from_object": ["marshmallow.utils.get_value"], "tests.test_utils.test_get_value_from_namedtuple_with_default": ["dynapyt.runtime.PointNT", "marshmallow.utils.get_value"], "tests.test_utils.test_get_value_for_nested_object": ["tests.test_utils.PointClass", "dynapyt.runtime.PointNT", "tests.test_utils.Triangle", "marshmallow.utils.get_value"], "tests.test_utils.test_get_value_from_dict": ["builtins.dict", "marshmallow.utils.get_value"], "tests.test_utils.test_get_value": ["marshmallow.utils.get_value", "tests.test_utils.test_get_value.<locals>.MyInt"], "tests.test_utils.test_set_value": ["marshmallow.utils.set_value", "_pytest.python_api.raises"], "tests.test_utils.test_is_keyed_tuple": ["collections.namedtuple", "dynapyt.runtime.Point", "marshmallow.utils.is_keyed_tuple"], "tests.test_utils.test_is_collection": ["marshmallow.utils.is_collection"], "tests.test_utils.test_rfc_format": ["marshmallow.utils.rfcformat"], "tests.test_utils.test_isoformat": ["marshmallow.utils.isoformat"], "tests.test_utils.test_from_rfc": ["marshmallow.utils.from_rfc", "builtins.type"], "tests.test_utils.test_from_iso_datetime": ["marshmallow.utils.from_iso_datetime", "builtins.type"], "tests.test_utils.test_from_iso_time_with_microseconds": ["datetime.time", "time.isoformat", "marshmallow.utils.from_iso_time", "builtins.type", "tests.base.assert_time_equal"], "tests.test_utils.test_from_iso_time_without_microseconds": ["datetime.time", "time.isoformat", "marshmallow.utils.from_iso_time", "builtins.type", "tests.base.assert_time_equal"], "tests.test_utils.test_from_iso_date": ["datetime.date", "date.isoformat", "marshmallow.utils.from_iso_date", "builtins.type", "tests.base.assert_date_equal"], "tests.test_utils.test_get_func_args": ["functools.partial", "tests.test_utils.test_get_func_args.<locals>.F3", "marshmallow.utils.get_func_args"], "tests.test_utils.MySchema.test_function_field_using_type_annotation": ["marshmallow.fields.Function"], "tests.test_utils.test_function_field_using_type_annotation": ["tests.test_utils.test_function_field_using_type_annotation.<locals>.MySchema", "marshmallow.schema.Schema.load"], "tests.test_utils.get_split_words": ["str.split"], "tests.test_validate.test_url_absolute_valid": ["marshmallow.validate.URL", "<URL(relative=False, error='Not a valid URL.')>"], "tests.test_validate.test_url_absolute_invalid": ["marshmallow.validate.URL", "_pytest.python_api.raises", "<URL(relative=False, error='Not a valid URL.')>"], "tests.test_validate.test_url_relative_valid": ["marshmallow.validate.URL", "<URL(relative=True, error='Not a valid URL.')>"], "tests.test_validate.test_url_relative_invalid": ["marshmallow.validate.URL", "_pytest.python_api.raises", "<URL(relative=True, error='Not a valid URL.')>"], "tests.test_validate.test_url_dont_require_tld_valid": ["marshmallow.validate.URL", "<URL(relative=False, error='Not a valid URL.')>"], "tests.test_validate.test_url_dont_require_tld_invalid": ["marshmallow.validate.URL", "_pytest.python_api.raises", "<URL(relative=False, error='Not a valid URL.')>"], "tests.test_validate.test_url_custom_scheme": ["marshmallow.validate.URL", "_pytest.python_api.raises", "<URL(relative=False, error='Not a valid URL.')>"], "tests.test_validate.test_url_relative_and_custom_schemes": ["marshmallow.validate.URL", "_pytest.python_api.raises", "<URL(relative=True, error='Not a valid URL.')>"], "tests.test_validate.test_url_custom_message": ["marshmallow.validate.URL", "_pytest.python_api.raises", "<URL(relative=False, error=\"{input} ain't an URL\")>"], "tests.test_validate.test_url_repr": ["marshmallow.validate.URL", "builtins.repr", "str.format"], "tests.test_validate.test_email_valid": ["marshmallow.validate.Email", "<Email(error='Not a valid email address.')>"], "tests.test_validate.test_email_invalid": ["marshmallow.validate.Email", "_pytest.python_api.raises", "<Email(error='Not a valid email address.')>"], "tests.test_validate.test_email_custom_message": ["marshmallow.validate.Email", "_pytest.python_api.raises", "<Email(error='{input} is not an email addy.')>"], "tests.test_validate.test_email_repr": ["marshmallow.validate.Email", "builtins.repr", "str.format"], "tests.test_validate.test_range_min": ["marshmallow.validate.Range", "<Range(min=1, max=2, min_inclusive=True, max_inclusive=True, error=None)>", "<Range(min=0, max=None, min_inclusive=True, max_inclusive=True, error=None)>", "<Range(min=None, max=None, min_inclusive=True, max_inclusive=True, error=None)>", "<Range(min=None, max=None, min_inclusive=False, max_inclusive=False, error=None)>", "<Range(min=1, max=1, min_inclusive=True, max_inclusive=True, error=None)>", "_pytest.python_api.raises", "<Range(min=2, max=3, min_inclusive=True, max_inclusive=True, error=None)>", "<Range(min=2, max=None, min_inclusive=True, max_inclusive=True, error=None)>", "<Range(min=1, max=2, min_inclusive=False, max_inclusive=True, error=None)>", "<Range(min=1, max=1, min_inclusive=True, max_inclusive=False, error=None)>"], "tests.test_validate.test_range_max": ["marshmallow.validate.Range", "<Range(min=1, max=2, min_inclusive=True, max_inclusive=True, error=None)>", "<Range(min=None, max=2, min_inclusive=True, max_inclusive=True, error=None)>", "<Range(min=None, max=None, min_inclusive=True, max_inclusive=True, error=None)>", "<Range(min=None, max=None, min_inclusive=False, max_inclusive=False, error=None)>", "<Range(min=2, max=2, min_inclusive=True, max_inclusive=True, error=None)>", "_pytest.python_api.raises", "<Range(min=0, max=1, min_inclusive=True, max_inclusive=True, error=None)>", "<Range(min=None, max=1, min_inclusive=True, max_inclusive=True, error=None)>", "<Range(min=1, max=2, min_inclusive=True, max_inclusive=False, error=None)>", "<Range(min=2, max=2, min_inclusive=False, max_inclusive=True, error=None)>"], "tests.test_validate.test_range_custom_message": ["marshmallow.validate.Range", "_pytest.python_api.raises", "<Range(min=2, max=3, min_inclusive=True, max_inclusive=True, error='{input} is not between {min} and {max}')>", "<Range(min=2, max=None, min_inclusive=True, max_inclusive=True, error='{input} is less than {min}')>", "<Range(min=None, max=3, min_inclusive=True, max_inclusive=True, error='{input} is greater than {max}')>"], "tests.test_validate.test_range_repr": ["marshmallow.validate.Range", "builtins.repr", "str.format"], "tests.test_validate.test_length_min": ["marshmallow.validate.Length", "<Length(min=3, max=5, equal=None, error=None)>", "<Length(min=0, max=None, equal=None, error=None)>", "<Length(min=None, max=None, equal=None, error=None)>", "<Length(min=1, max=1, equal=None, error=None)>", "_pytest.python_api.raises", "<Length(min=4, max=5, equal=None, error=None)>", "<Length(min=5, max=None, equal=None, error=None)>"], "tests.test_validate.test_length_max": ["marshmallow.validate.Length", "<Length(min=1, max=3, equal=None, error=None)>", "<Length(min=None, max=1, equal=None, error=None)>", "<Length(min=None, max=None, equal=None, error=None)>", "<Length(min=2, max=2, equal=None, error=None)>", "_pytest.python_api.raises", "<Length(min=1, max=2, equal=None, error=None)>", "<Length(min=None, max=2, equal=None, error=None)>"], "tests.test_validate.test_length_equal": ["marshmallow.validate.Length", "<Length(min=None, max=None, equal=3, error=None)>", "<Length(min=None, max=None, equal=None, error=None)>", "_pytest.python_api.raises", "<Length(min=None, max=None, equal=2, error=None)>"], "tests.test_validate.test_length_custom_message": ["marshmallow.validate.Length", "_pytest.python_api.raises", "<Length(min=5, max=6, equal=None, error='{input} is not between {min} and {max}')>", "<Length(min=5, max=None, equal=None, error='{input} is shorter than {min}')>", "<Length(min=None, max=2, equal=None, error='{input} is longer than {max}')>", "<Length(min=None, max=None, equal=4, error='{input} does not have {equal}')>"], "tests.test_validate.test_length_repr": ["marshmallow.validate.Length", "builtins.repr", "str.format"], "tests.test_validate.test_equal": ["marshmallow.validate.Equal", "<Equal(comparable='a', error='Must be equal to {other}.')>", "<Equal(comparable=1, error='Must be equal to {other}.')>", "<Equal(comparable=[1], error='Must be equal to {other}.')>", "_pytest.python_api.raises", "<Equal(comparable='b', error='Must be equal to {other}.')>", "<Equal(comparable=2, error='Must be equal to {other}.')>", "<Equal(comparable=[2], error='Must be equal to {other}.')>"], "tests.test_validate.test_equal_custom_message": ["marshmallow.validate.Equal", "_pytest.python_api.raises", "<Equal(comparable='a', error='{input} is not equal to {other}.')>"], "tests.test_validate.test_equal_repr": ["marshmallow.validate.Equal", "builtins.repr", "str.format"], "tests.test_validate.test_regexp_str": ["marshmallow.validate.Regexp", "<Regexp(regex=re.compile('a'), error='String does not match expected pattern.')>", "<Regexp(regex=re.compile('\\\\w'), error='String does not match expected pattern.')>", "<Regexp(regex=re.compile('\\\\s'), error='String does not match expected pattern.')>", "<Regexp(regex=re.compile('1'), error='String does not match expected pattern.')>", "<Regexp(regex=re.compile('[0-9]+'), error='String does not match expected pattern.')>", "<Regexp(regex=re.compile('a', re.IGNORECASE), error='String does not match expected pattern.')>", "_pytest.python_api.raises", "<Regexp(regex=re.compile('[a-z]+'), error='String does not match expected pattern.')>"], "tests.test_validate.test_regexp_compile": ["re.compile", "marshmallow.validate.Regexp", "<Regexp(regex=re.compile('a'), error='String does not match expected pattern.')>", "<Regexp(regex=re.compile('\\\\w'), error='String does not match expected pattern.')>", "<Regexp(regex=re.compile('\\\\s'), error='String does not match expected pattern.')>", "<Regexp(regex=re.compile('1'), error='String does not match expected pattern.')>", "<Regexp(regex=re.compile('[0-9]+'), error='String does not match expected pattern.')>", "<Regexp(regex=re.compile('a', re.IGNORECASE), error='String does not match expected pattern.')>", "_pytest.python_api.raises", "<Regexp(regex=re.compile('[a-z]+'), error='String does not match expected pattern.')>"], "tests.test_validate.test_regexp_custom_message": ["marshmallow.validate.Regexp", "_pytest.python_api.raises", "<Regexp(regex=re.compile('[0-9]+'), error='{input} does not match {regex}')>"], "tests.test_validate.test_regexp_repr": ["marshmallow.validate.Regexp", "builtins.repr", "re.compile", "str.format"], "tests.test_validate.test_predicate": ["tests.test_validate.test_predicate.<locals>.Dummy", "marshmallow.validate.Predicate", "<Predicate(method='_true', kwargs={}, error='Invalid input.')>", "<Predicate(method='_list', kwargs={}, error='Invalid input.')>", "<Predicate(method='_identity', kwargs={'arg': True}, error='Invalid input.')>", "<Predicate(method='_identity', kwargs={'arg': 1}, error='Invalid input.')>", "<Predicate(method='_identity', kwargs={'arg': 'abc'}, error='Invalid input.')>", "_pytest.python_api.raises", "<Predicate(method='_false', kwargs={}, error='Invalid input.')>", "<Predicate(method='_empty', kwargs={}, error='Invalid input.')>", "<Predicate(method='_identity', kwargs={'arg': False}, error='Invalid input.')>", "<Predicate(method='_identity', kwargs={'arg': 0}, error='Invalid input.')>", "<Predicate(method='_identity', kwargs={'arg': ''}, error='Invalid input.')>"], "tests.test_validate.test_predicate_custom_message": ["tests.test_validate.test_predicate_custom_message.<locals>.Dummy", "_pytest.python_api.raises", "marshmallow.validate.Predicate", "<Predicate(method='_false', kwargs={}, error='{input}.{method} is invalid!')>"], "tests.test_validate.test_predicate_repr": ["marshmallow.validate.Predicate", "builtins.repr", "str.format"], "tests.test_validate.test_noneof": ["marshmallow.validate.NoneOf", "<NoneOf(iterable=[1, 2, 3], error='Invalid input.')>", "<NoneOf(iterable='abc', error='Invalid input.')>", "<NoneOf(iterable='', error='Invalid input.')>", "<NoneOf(iterable=[], error='Invalid input.')>", "_pytest.python_api.raises", "<NoneOf(iterable=[1, 2, None], error='Invalid input.')>"], "tests.test_validate.test_noneof_custom_message": ["_pytest.python_api.raises", "marshmallow.validate.NoneOf", "<NoneOf(iterable=[1, 2], error='<not valid>')>", "<NoneOf(iterable=[1, 2], error='{input} cannot be one of {values}')>"], "tests.test_validate.test_noneof_repr": ["marshmallow.validate.NoneOf", "builtins.repr", "str.format"], "tests.test_validate.test_oneof": ["marshmallow.validate.OneOf", "<OneOf(choices=[1, 2, 3], labels=[], error='Must be one of: {choices}.')>", "<OneOf(choices='abc', labels=[], error='Must be one of: {choices}.')>", "<OneOf(choices='', labels=[], error='Must be one of: {choices}.')>", "builtins.dict", "<OneOf(choices={'a': 0, 'b': 1}, labels=[], error='Must be one of: {choices}.')>", "<OneOf(choices=(1, 2, None), labels=[], error='Must be one of: {choices}.')>", "_pytest.python_api.raises", "<OneOf(choices=(1, 2, 3), labels=[], error='Must be one of: {choices}.')>", "<OneOf(choices=[], labels=[], error='Must be one of: {choices}.')>", "<OneOf(choices=(), labels=[], error='Must be one of: {choices}.')>", "<OneOf(choices='123', labels=[], error='Must be one of: {choices}.')>"], "tests.test_validate.test_oneof_options": ["marshmallow.validate.OneOf", "marshmallow.validate.OneOf.options", "builtins.list"], "tests.test_validate.test_oneof_text": ["marshmallow.validate.OneOf", "builtins.dict", "str.split", "builtins.sorted", "str.join"], "tests.test_validate.test_oneof_custom_message": ["marshmallow.validate.OneOf", "_pytest.python_api.raises", "<OneOf(choices=[1, 2, 3], labels=[], error='{input} is not one of {choices}')>", "builtins.str", "<OneOf(choices=[1, 2, 3], labels=['one', 'two', 'three'], error='{input} is not one of {labels}')>"], "tests.test_validate.test_oneof_repr": ["marshmallow.validate.OneOf", "builtins.repr", "str.format"], "tests.test_validate.test_containsonly_in_list": ["marshmallow.validate.ContainsOnly", "<ContainsOnly(choices=[], labels=[], error='One or more of the choices you made was not in: {choices}.')>", "<ContainsOnly(choices=[1, 2, 3], labels=[], error='One or more of the choices you made was not in: {choices}.')>", "<ContainsOnly(choices=[1, 1, 2], labels=[], error='One or more of the choices you made was not in: {choices}.')>", "_pytest.python_api.raises"], "tests.test_validate.test_contains_only_unhashable_types": ["marshmallow.validate.ContainsOnly", "<ContainsOnly(choices=[[1], [2], [3]], labels=[], error='One or more of the choices you made was not in: {choices}.')>", "<ContainsOnly(choices=[[1], [1], [2]], labels=[], error='One or more of the choices you made was not in: {choices}.')>", "_pytest.python_api.raises", "<ContainsOnly(choices=[], labels=[], error='One or more of the choices you made was not in: {choices}.')>"], "tests.test_validate.test_containsonly_in_tuple": ["marshmallow.validate.ContainsOnly", "<ContainsOnly(choices=(), labels=[], error='One or more of the choices you made was not in: {choices}.')>", "<ContainsOnly(choices=(1, 2, 3), labels=[], error='One or more of the choices you made was not in: {choices}.')>", "<ContainsOnly(choices=(1, 1, 2), labels=[], error='One or more of the choices you made was not in: {choices}.')>", "builtins.tuple", "_pytest.python_api.raises"], "tests.test_validate.test_contains_only_in_string": ["marshmallow.validate.ContainsOnly", "<ContainsOnly(choices='', labels=[], error='One or more of the choices you made was not in: {choices}.')>", "<ContainsOnly(choices='abc', labels=[], error='One or more of the choices you made was not in: {choices}.')>", "<ContainsOnly(choices='aab', labels=[], error='One or more of the choices you made was not in: {choices}.')>", "_pytest.python_api.raises"], "tests.test_validate.test_containsonly_custom_message": ["marshmallow.validate.ContainsOnly", "_pytest.python_api.raises", "<ContainsOnly(choices=[1, 2, 3], labels=[], error='{input} is not one of {choices}')>", "builtins.str", "<ContainsOnly(choices=[1, 2, 3], labels=['one', 'two', 'three'], error='{input} is not one of {labels}')>"], "tests.test_validate.test_containsonly_repr": ["marshmallow.validate.ContainsOnly", "builtins.repr", "str.format"], "tests.test_validate.test_containsnoneof_error_message": ["_pytest.python_api.raises", "marshmallow.validate.ContainsNoneOf", "<ContainsNoneOf(iterable=[1], error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=[1, 2, 3], error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=['one', 'two'], error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable='@!&?', error='One or more of the choices you made was in: {values}.')>"], "tests.test_validate.test_containsnoneof_in_list": ["marshmallow.validate.ContainsNoneOf", "<ContainsNoneOf(iterable=[], error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=[4], error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=[2], error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=[1, 2, 3], error='One or more of the choices you made was in: {values}.')>", "_pytest.python_api.raises", "<ContainsNoneOf(iterable=[1], error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=[1, 1, 1], error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=[1, 2], error='One or more of the choices you made was in: {values}.')>"], "tests.test_validate.test_containsnoneof_unhashable_types": ["marshmallow.validate.ContainsNoneOf", "<ContainsNoneOf(iterable=[[1], [2], [3]], error='One or more of the choices you made was in: {values}.')>", "_pytest.python_api.raises"], "tests.test_validate.test_containsnoneof_in_tuple": ["marshmallow.validate.ContainsNoneOf", "<ContainsNoneOf(iterable=(), error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=(4,), error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=(2,), error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=(1, 2, 3), error='One or more of the choices you made was in: {values}.')>", "_pytest.python_api.raises", "<ContainsNoneOf(iterable=(1,), error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=(1, 1, 1), error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=(1, 2), error='One or more of the choices you made was in: {values}.')>"], "tests.test_validate.test_containsnoneof_in_string": ["marshmallow.validate.ContainsNoneOf", "<ContainsNoneOf(iterable='', error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable='d', error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable='b', error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable='abc', error='One or more of the choices you made was in: {values}.')>", "_pytest.python_api.raises", "<ContainsNoneOf(iterable='a', error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable='aaa', error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable='ab', error='One or more of the choices you made was in: {values}.')>"], "tests.test_validate.test_containsnoneof_custom_message": ["marshmallow.validate.ContainsNoneOf", "_pytest.python_api.raises", "<ContainsNoneOf(iterable=[1, 2, 3], error='{input} was in the banned list: {values}')>"], "tests.test_validate.test_containsnoneof_mixing_types": ["_pytest.python_api.raises", "marshmallow.validate.ContainsNoneOf", "<ContainsNoneOf(iterable='abc', error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=['a', 'b', 'c'], error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=(1, 2, 3), error='One or more of the choices you made was in: {values}.')>", "<ContainsNoneOf(iterable=[1, 2, 3], error='One or more of the choices you made was in: {values}.')>"], "tests.test_validate.test_and": ["marshmallow.validate.Range", "marshmallow.validate.And", "<And(validators=(<Range(min=0, max=None, min_inclusive=True, max_inclusive=True, error=None)>, <function is_even at 0x7f84eefd04c0>), error='Invalid value.')>", "_pytest.python_api.raises", "<And(validators=(<And(validators=(<Range(min=0, max=None, min_inclusive=True, max_inclusive=True, error=None)>, <function is_even at 0x7f84eefd04c0>), error='Invalid value.')>, <Range(min=None, max=6, min_inclusive=True, max_inclusive=True, error=None)>), error='Invalid value.')>"], "tests.test_validate.is_even": ["marshmallow.exceptions.ValidationError"]}
