{"pyquery.text": ["re.compile"], "tests.test_pyquery": ["posixpath.dirname", "list.insert", "posixpath.abspath", "posixpath.join"], "pyquery.text.extract_text": ["pyquery.text.extract_text_array", "pyquery.text._merge_original_parts", "pyquery.text._squash_artifical_nl", "pyquery.text._strip_artifical_nl", "str.strip"], "pyquery.text.extract_text_array": ["builtins.callable", "list.append", "lxml.etree._Element.getchildren", "pyquery.text.extract_text_array", "list.extend", "pyquery.text._squash_artifical_nl", "pyquery.text._strip_artifical_nl"], "pyquery.text._squash_artifical_nl": ["list.append"], "pyquery.text._strip_artifical_nl": ["builtins.enumerate", "builtins.isinstance"], "pyquery.text._merge_original_parts": ["builtins.isinstance", "list.append", "pyquery.text._merge_original_parts.<locals>.flush"], "pyquery.text.flush": ["str.join", "pyquery.text.squash_html_whitespace", "str.strip", "list.append"], "pyquery.text.squash_html_whitespace": ["Pattern.sub"], "pyquery.cssselectpatch.XPathExpr.__str__": ["cssselect.xpath.XPathExpr.__str__"], "tests.browser_base.TextExtractionMixin.test_block_tags": ["tests.test_browser.TestInnerText._simple_test"], "tests.test_browser.TestInnerText._simple_test": ["tests.test_browser.TestInnerText._prepare_dom", "pyquery.pyquery.PyQuery.text", "unittest.case.TestCase.assertEqual"], "tests.test_browser.TestInnerText._prepare_dom": ["tests.browser_base.TextExtractionMixin._prepare_dom", "pyquery.pyquery.PyQuery"], "tests.browser_base.TextExtractionMixin.test_inline_tags": ["tests.test_browser.TestInnerText._simple_test"], "tests.browser_base.TextExtractionMixin.test_separators": ["tests.test_browser.TestInnerText._simple_test"], "tests.browser_base.TextExtractionMixin.test_strip": ["tests.test_browser.TestInnerText._simple_test"], "tests.browser_base.TextExtractionMixin.test_ul_li": ["tests.test_browser.TestInnerText._simple_test"], "tests.test_pyquery.TestUnicode.test_unicode": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.html", "builtins.type", "unittest.case.TestCase.assertEqual", "builtins.str", "<html><p>\u00e9</p></html>"], "pyquery.cssselectpatch.JQueryTranslator.xpath_contains_function": ["cssselect.parser.Function.argument_types", "cssselect.xpath.GenericTranslator.xpath_literal", "pyquery.cssselectpatch.XPathExpr.add_post_condition"], "tests.test_pyquery.TestAttributeCase.test_html_upper_element_name": ["pyquery.pyquery.PyQuery", "<x>foo</x>", "builtins.len", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestAttributeCase.test_xml_upper_element_name": ["pyquery.pyquery.PyQuery", "<X>foo</X>", "builtins.len", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestSelector.test_class": ["pyquery.pyquery.PyQuery", "builtins.isinstance", "<html>\n            <body>\n              <div>node1</div>\n              <div id=\"node2\">node2</div>\n              <div class=\"node3\">node3</div>\n            </body>\n           </html>"], "tests.test_pyquery.TestSelector.test_get_root": ["pyquery.pyquery.PyQuery", "builtins.isinstance", "unittest.case.TestCase.assertEqual", "pyquery.pyquery.PyQuery.children", "pyquery.pyquery.PyQuery.eq", "unittest.case.TestCase.assertNotEqual", "unittest.case.TestCase.assertTrue"], "tests.test_pyquery.TestSelector.test_on_the_fly_dom_creation": ["pyquery.pyquery.PyQuery", "<html>\n            <body>\n              <div>node1</div>\n              <div id=\"node2\">node2</div>\n              <div class=\"node3\">node3</div>\n            </body>\n           </html>", "pyquery.pyquery.PyQuery.text"], "tests.test_pyquery.TestSelector.test_pseudo_classes": ["pyquery.pyquery.PyQuery", "<html>\n            <body>\n              <div>node1</div>\n              <div id=\"node2\">node2</div>\n              <div class=\"node3\">node3</div>\n            </body>\n           </html>", "pyquery.pyquery.PyQuery.text", "unittest.case.TestCase.assertEqual", "<html>\n            <body>\n              <form action=\"/\">\n                <input name=\"enabled\" type=\"text\" value=\"test\"/>\n                <b disabled=\"disabled\">Not :disabled</b>\n                <input name=\"disabled\" type=\"text\" value=\"disabled\" disabled=\"disabled\"/>\n                <fieldset>\n                    <input name=\"fieldset-enabled\"/>\n                </fieldset>\n                <fieldset disabled=\"disabled\">\n                    <legend>\n                        <input name=\"legend-enabled\"/>\n                    </legend>\n                    <input name=\"fieldset-disabled\"/>\n                    <legend>\n                        <input name=\"legend-disabled\"/>\n                    </legend>\n                    <select id=\"disabled-select\">\n                        <optgroup>\n                            <option/>\n                        </optgroup>\n                    </select>\n                </fieldset>\n                <select>\n                    <optgroup id=\"disabled-optgroup\" disabled=\"disabled\">\n                        <option id=\"disabled-from-optgroup\"/>\n                        <option id=\"disabled-option\" disabled=\"disabled\"/>\n                    </optgroup>\n                </select>\n                <input name=\"file\" type=\"file\"/>\n                <select name=\"select\">\n                  <option value=\"\">Choose something</option>\n                  <option value=\"one\">One</option>\n                  <option value=\"two\" selected=\"selected\">Two</option>\n                  <option value=\"three\">Three</option>\n                </select>\n                <input name=\"radio\" type=\"radio\" value=\"one\"/>\n                <input name=\"radio\" type=\"radio\" value=\"two\" checked=\"checked\"/>\n                <input name=\"radio\" type=\"radio\" value=\"three\"/>\n                <input name=\"checkbox\" type=\"checkbox\" value=\"a\"/>\n                <input name=\"checkbox\" type=\"checkbox\" value=\"b\" checked=\"checked\"/>\n                <input name=\"checkbox\" type=\"checkbox\" value=\"c\"/>\n                <input name=\"button\" type=\"button\" value=\"button\"/>\n                <button>button</button>\n              </form>\n            </body>\n           </html>", "unittest.case.TestCase.assertIn", "builtins.len", "<html>\n            <body>\n              <h1>Heading 1</h1>\n              <h2>Heading 2</h2>\n              <h3>Heading 3</h3>\n              <h4>Heading 4</h4>\n              <h5>Heading 5</h5>\n              <h6>Heading 6</h6>\n              <div/>\n            </body>\n           </html>"], "pyquery.cssselectpatch.JQueryTranslator.xpath_first_pseudo": ["pyquery.cssselectpatch.XPathExpr.add_post_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_last_pseudo": ["pyquery.cssselectpatch.XPathExpr.add_post_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_even_pseudo": ["pyquery.cssselectpatch.XPathExpr.add_post_condition"], "pyquery.cssselectpatch.XPathExpr.join": ["cssselect.xpath.XPathExpr.join"], "pyquery.cssselectpatch.JQueryTranslator.xpath_gt_function": ["cssselect.parser.Function.argument_types", "builtins.int", "pyquery.cssselectpatch.XPathExpr.add_post_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_lt_function": ["cssselect.parser.Function.argument_types", "builtins.int", "pyquery.cssselectpatch.XPathExpr.add_post_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_eq_function": ["cssselect.parser.Function.argument_types", "builtins.int", "pyquery.cssselectpatch.XPathExpr.add_post_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_disabled_pseudo": ["pyquery.cssselectpatch.JQueryTranslator._format_disabled_xpath", "cssselect.xpath.XPathExpr.add_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_enabled_pseudo": ["pyquery.cssselectpatch.JQueryTranslator._format_disabled_xpath", "cssselect.xpath.XPathExpr.add_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_selected_pseudo": ["cssselect.xpath.XPathExpr.add_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_checked_pseudo": ["cssselect.xpath.XPathExpr.add_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_file_pseudo": ["cssselect.xpath.XPathExpr.add_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_input_pseudo": ["cssselect.xpath.XPathExpr.add_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_button_pseudo": ["cssselect.xpath.XPathExpr.add_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_radio_pseudo": ["cssselect.xpath.XPathExpr.add_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_checkbox_pseudo": ["cssselect.xpath.XPathExpr.add_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_header_pseudo": ["cssselect.xpath.XPathExpr.add_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_parent_pseudo": ["cssselect.xpath.XPathExpr.add_condition"], "pyquery.cssselectpatch.JQueryTranslator.xpath_empty_pseudo": ["cssselect.xpath.XPathExpr.add_condition"], "tests.test_pyquery.TestSelector.test_selector_from_doc": ["lxml.etree.fromstring", "pyquery.pyquery.PyQuery", "builtins.len"], "tests.test_pyquery.TestSelector.test_selector_from_html": ["pyquery.pyquery.PyQuery", "builtins.len"], "tests.test_pyquery.TestSelector.test_selector_from_html_from_obj": ["pyquery.pyquery.PyQuery", "<html>\n            <body>\n              <div>node1</div>\n              <div id=\"node2\">node2</div>\n              <div class=\"node3\">node3</div>\n            </body>\n           </html>", "builtins.len"], "tests.test_pyquery.TestSelector.test_selector_from_obj": ["pyquery.pyquery.PyQuery", "<html>\n            <body>\n              <div>node1</div>\n              <div id=\"node2\">node2</div>\n              <div class=\"node3\">node3</div>\n            </body>\n           </html>", "builtins.len"], "tests.test_pyquery.TestTraversal.test_closest": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.closest", "builtins.len"], "tests.test_pyquery.TestTraversal.test_each": ["pyquery.pyquery.PyQuery", "<html>\n            <body>\n              <div id=\"node1\"><span>node1</span></div>\n              <div id=\"node2\" class=\"node3\">\n                        <span>node2</span><span> booyah</span></div>\n            </body>\n           </html>", "pyquery.pyquery.PyQuery.each", "pyquery.pyquery.PyQuery.wrap", "<html>\n            <body>\n              <div id=\"node1\"><em><span>node1</span></em></div>\n              <div id=\"node2\" class=\"node3\">\n                        <span>node2</span><span> booyah</span></div>\n            </body>\n           </html>", "<html>\n            <body>\n              <div id=\"node1\"><em><span>node1</span></em></div>\n              <div id=\"node2\" class=\"node3\">\n                        <em><span>node2</span></em><span> booyah</span></div>\n            </body>\n           </html>", "<html>\n            <body>\n              <div id=\"node1\"><em><span>node1</span></em></div>\n              <div id=\"node2\" class=\"node3\">\n                        <em><span>node2</span></em><em><span> booyah</span></em></div>\n            </body>\n           </html>", "builtins.len"], "tests.test_pyquery.TestTraversal.test_end": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.find", "pyquery.pyquery.PyQuery.end", "builtins.len"], "tests.test_pyquery.TestTraversal.test_filter": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.filter", "builtins.len", "<p>Hello <b>warming</b> world</p>", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestTraversal.test_find": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.find", "builtins.len"], "tests.test_pyquery.TestTraversal.test_is": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.is_"], "tests.test_pyquery.TestTraversal.test_map": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.map"], "tests.test_pyquery.TestTraversal.ids_minus_one": ["pyquery.pyquery.PyQuery"], "tests.test_pyquery.TestTraversal.test_next_all": ["pyquery.pyquery.PyQuery", "<html>\n             <body>\n               <dl>\n                 <dt id=\"term-1\">term 1</dt>\n                 <dd>definition 1-a</dd>\n                 <dd>definition 1-b</dd>\n                 <dd>definition 1-c</dd>\n                 <dd>definition 1-d</dd>\n                 <dt id=\"term-2\">term 2</dt>\n                 <dd>definition 2-a</dd>\n                 <dd class=\"strange\">definition 2-b</dd>\n                 <dd>definition 2-c</dd>\n                 <dt id=\"term-3\">term 3</dt>\n                 <dd>definition 3-a</dd>\n                 <dd>definition 3-b</dd>\n               </dl>\n             </body>\n            </html>", "pyquery.pyquery.PyQuery.next_all", "builtins.len", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestTraversal.test_next_until": ["pyquery.pyquery.PyQuery", "<html>\n             <body>\n               <dl>\n                 <dt id=\"term-1\">term 1</dt>\n                 <dd>definition 1-a</dd>\n                 <dd>definition 1-b</dd>\n                 <dd>definition 1-c</dd>\n                 <dd>definition 1-d</dd>\n                 <dt id=\"term-2\">term 2</dt>\n                 <dd>definition 2-a</dd>\n                 <dd class=\"strange\">definition 2-b</dd>\n                 <dd>definition 2-c</dd>\n                 <dt id=\"term-3\">term 3</dt>\n                 <dd>definition 3-a</dd>\n                 <dd>definition 3-b</dd>\n               </dl>\n             </body>\n            </html>", "pyquery.pyquery.PyQuery.next_until", "builtins.len", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestTraversal.test_not": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.not_", "builtins.len"], "tests.test_pyquery.TestOpener.test_custom_opener": ["pyquery.pyquery.PyQuery", "<html><body><div class=\"node\"/></body></html>", "builtins.len"], "tests.test_pyquery.TestOpener.test_invalid_filename": ["pyquery.pyquery.PyQuery", "<html>\n<body>\n<p class=\"hello\" id=\"hello\">Hello world !</p>\n\n<p id=\"test\">\nhello <a href=\"http://python.org\">python</a> !\n</p>\n\n<p>\n</p></body>\n</html>", "pyquery.pyquery.PyQuery.text", "builtins.len", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestOpener.test_open_filename": ["pyquery.pyquery.PyQuery", "<html>\n  <body>\n    <p class=\"hello\" id=\"hello\">Hello world !</p>\n\n    <p id=\"test\">hello <a href=\"http://python.org\">python</a> !</p>\n  </body>\n</html>", "pyquery.pyquery.PyQuery.text", "builtins.len", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestConstruction.test_typeerror_on_invalid_value": ["builtins.object", "unittest.case.TestCase.assertRaises"], "tests.test_pyquery.TestComment.test_comment": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.text", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestCallback.test_S_this_inside_callback": ["pyquery.pyquery.PyQuery", "<ol>\n            <li>Coffee</li>\n            <li>Tea</li>\n            <li>Milk</li>\n        </ol>", "pyquery.pyquery.PyQuery.map", "pyquery.pyquery.PyQuery.html", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestCallback.test_parameterless_callback": ["pyquery.pyquery.PyQuery", "<ol>\n            <li>Coffee</li>\n            <li>Tea</li>\n            <li>Milk</li>\n        </ol>", "pyquery.pyquery.PyQuery.map", "pyquery.pyquery.PyQuery.html", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestHook.test_fn": ["pyquery.pyquery.PyQuery", "<ol>\n            <li>Coffee</li>\n            <li>Tea</li>\n            <li>Milk</li>\n        </ol>", "pyquery.pyquery.PyQuery.Fn.__setattr__.<locals>.fn", "pyquery.pyquery.PyQuery.map", "pyquery.pyquery.outer_html", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestHook.test_fn_with_kwargs": ["pyquery.pyquery.PyQuery", "<ol>\n            <li>Coffee</li>\n            <li>Tea</li>\n            <li>Milk</li>\n        </ol>", "pyquery.pyquery.PyQuery.Fn.__setattr__.<locals>.fn", "pyquery.pyquery.PyQuery.eq", "pyquery.pyquery.PyQuery.text", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestManipulating.test_attr_empty_string": ["pyquery.pyquery.PyQuery"], "tests.test_pyquery.TestManipulating.test_class": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.remove_class", "builtins.str"], "tests.test_pyquery.TestManipulating.test_html_escape": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.html", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestManipulating.test_html_replacement": ["str.replace", "pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.find", "pyquery.pyquery.PyQuery.html", "pyquery.pyquery.outer_html", "unittest.case.TestCase.assertEqual", "unittest.case.TestCase.assertIn"], "tests.test_pyquery.TestManipulating.test_remove": ["pyquery.pyquery.PyQuery", "<div class=\"portlet\">\n      <a href=\"/toto\">Test<img src=\"myimage\"/>My link text</a>\n      <a href=\"/toto2\"><img src=\"myimage2\"/>My link text 2</a>\n    </div>", "pyquery.pyquery.PyQuery.remove", "<div class=\"portlet\">\n      <a href=\"/toto\">TestMy link text</a>\n      <a href=\"/toto2\">My link text 2</a>\n    </div>", "pyquery.pyquery.PyQuery.html"], "tests.test_pyquery.TestManipulating.test_val_checkbox_no_value_attribute": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.val", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestManipulating.test_val_for_input_and_textarea_given_array_value": ["pyquery.pyquery.PyQuery", "<input type=\"text\"/>", "pyquery.pyquery.PyQuery.val", "<input type=\"text\" value=\"spam,eggs\"/>", "unittest.case.TestCase.assertEqual", "<textarea/>", "<textarea>spam,eggs</textarea>"], "tests.test_pyquery.TestManipulating.test_val_for_inputs": ["pyquery.pyquery.PyQuery", "<span><input name=\"spam\" value=\"Spam\"/>\n        <input name=\"eggs\" value=\"Eggs\"/>\n        <input type=\"checkbox\" value=\"Bacon\"/>\n        <input type=\"radio\" value=\"Ham\"/>\n    </span>", "pyquery.pyquery.PyQuery.val", "unittest.case.TestCase.assertIsNone", "unittest.case.TestCase.assertEqual", "<span><input name=\"spam\" value=\"42\"/>\n        <input name=\"eggs\" value=\"Eggs\"/>\n        <input type=\"checkbox\" value=\"Bacon\"/>\n        <input type=\"radio\" value=\"Ham\"/>\n    </span>", "<span><input name=\"spam\" value=\"42\"/>\n        <input name=\"eggs\" value=\"43\"/>\n        <input type=\"checkbox\" value=\"Bacon\"/>\n        <input type=\"radio\" value=\"Ham\"/>\n    </span>", "<span><input name=\"spam\" value=\"42\"/>\n        <input name=\"eggs\" value=\"43\"/>\n        <input type=\"checkbox\" value=\"44\"/>\n        <input type=\"radio\" value=\"Ham\"/>\n    </span>", "<span><input name=\"spam\" value=\"42\"/>\n        <input name=\"eggs\" value=\"43\"/>\n        <input type=\"checkbox\" value=\"44\"/>\n        <input type=\"radio\" value=\"45\"/>\n    </span>"], "tests.test_pyquery.TestManipulating.test_val_for_inputs_with_newline": ["pyquery.pyquery.PyQuery", "<span><input id=\"newline-text\" type=\"text\" name=\"order\" value=\"S&#10;pam\"/>\n        <input id=\"newline-radio\" type=\"radio\" name=\"order\" value=\"S&#10;pam\"/>\n    </span>", "pyquery.pyquery.PyQuery.val", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestManipulating.test_val_for_multiple_elements": ["pyquery.pyquery.PyQuery", "<div>\n            <input id=\"first\" value=\"spam\"/>\n            <input id=\"second\" value=\"eggs\"/>\n            <textarea id=\"third\">bacon</textarea>\n        </div>\n    ", "pyquery.pyquery.PyQuery.val", "unittest.case.TestCase.assertEqual", "<div>\n            <input id=\"first\" value=\"42\"/>\n            <input id=\"second\" value=\"42\"/>\n            <textarea id=\"third\">42</textarea>\n        </div>\n    "], "tests.test_pyquery.TestManipulating.test_val_for_select": ["pyquery.pyquery.PyQuery", "<div><select id=\"first\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\">Eggs</option>\n        </select>\n        <select id=\"second\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\" selected=\"selected\">Eggs</option>\n            <option value=\"bacon\">Bacon</option>\n        </select>\n        <select id=\"third\">\n        </select>\n        <select id=\"fourth\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"spam\">Eggs</option>\n            <option value=\"spam\">Bacon</option>\n        </select>\n    </div>", "pyquery.pyquery.PyQuery.val", "unittest.case.TestCase.assertEqual", "unittest.case.TestCase.assertIsNone", "<div><select id=\"first\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\" selected=\"selected\">Eggs</option>\n        </select>\n        <select id=\"second\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\" selected=\"selected\">Eggs</option>\n            <option value=\"bacon\">Bacon</option>\n        </select>\n        <select id=\"third\">\n        </select>\n        <select id=\"fourth\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"spam\">Eggs</option>\n            <option value=\"spam\">Bacon</option>\n        </select>\n    </div>", "<div><select id=\"first\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\" selected=\"selected\">Eggs</option>\n        </select>\n        <select id=\"second\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\">Eggs</option>\n            <option value=\"bacon\" selected=\"selected\">Bacon</option>\n        </select>\n        <select id=\"third\">\n        </select>\n        <select id=\"fourth\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"spam\">Eggs</option>\n            <option value=\"spam\">Bacon</option>\n        </select>\n    </div>", "<div><select id=\"first\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\">Eggs</option>\n        </select>\n        <select id=\"second\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\">Eggs</option>\n            <option value=\"bacon\" selected=\"selected\">Bacon</option>\n        </select>\n        <select id=\"third\">\n        </select>\n        <select id=\"fourth\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"spam\">Eggs</option>\n            <option value=\"spam\">Bacon</option>\n        </select>\n    </div>", "<div><select id=\"first\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\">Eggs</option>\n        </select>\n        <select id=\"second\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\" selected=\"selected\">Eggs</option>\n            <option value=\"bacon\">Bacon</option>\n        </select>\n        <select id=\"third\">\n        </select>\n        <select id=\"fourth\">\n            <option value=\"spam\" selected=\"selected\">Spam</option>\n            <option value=\"spam\">Eggs</option>\n            <option value=\"spam\">Bacon</option>\n        </select>\n    </div>", "pyquery.pyquery.PyQuery.text"], "tests.test_pyquery.TestManipulating.test_val_for_select_multiple": ["pyquery.pyquery.PyQuery", "<div><select id=\"first\" multiple=\"multiple\">\n            <option value=\"spam\" selected=\"selected\">Spam</option>\n            <option value=\"eggs\" selected=\"selected\">Eggs</option>\n            <option value=\"bacon\">Bacon</option>\n        </select>\n        <select id=\"second\" multiple=\"multiple\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\">Eggs</option>\n            <option value=\"bacon\">Bacon</option>\n        </select>\n        <select id=\"third\" multiple=\"multiple\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"spam\">Eggs</option>\n            <option value=\"spam\">Bacon</option>\n        </select>\n    </div>", "pyquery.pyquery.PyQuery.val", "unittest.case.TestCase.assertEqual", "<div><select id=\"first\" multiple=\"multiple\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\" selected=\"selected\">Eggs</option>\n            <option value=\"bacon\" selected=\"selected\">Bacon</option>\n        </select>\n        <select id=\"second\" multiple=\"multiple\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\">Eggs</option>\n            <option value=\"bacon\">Bacon</option>\n        </select>\n        <select id=\"third\" multiple=\"multiple\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"spam\">Eggs</option>\n            <option value=\"spam\">Bacon</option>\n        </select>\n    </div>", "<div><select id=\"first\" multiple=\"multiple\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\" selected=\"selected\">Eggs</option>\n            <option value=\"bacon\" selected=\"selected\">Bacon</option>\n        </select>\n        <select id=\"second\" multiple=\"multiple\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\" selected=\"selected\">Eggs</option>\n            <option value=\"bacon\">Bacon</option>\n        </select>\n        <select id=\"third\" multiple=\"multiple\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"spam\">Eggs</option>\n            <option value=\"spam\">Bacon</option>\n        </select>\n    </div>", "<div><select id=\"first\" multiple=\"multiple\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\" selected=\"selected\">Eggs</option>\n            <option value=\"bacon\" selected=\"selected\">Bacon</option>\n        </select>\n        <select id=\"second\" multiple=\"multiple\">\n            <option value=\"spam\">Spam</option>\n            <option value=\"eggs\">Eggs</option>\n            <option value=\"bacon\">Bacon</option>\n        </select>\n        <select id=\"third\" multiple=\"multiple\">\n            <option value=\"spam\" selected=\"selected\">Spam</option>\n            <option value=\"spam\" selected=\"selected\">Eggs</option>\n            <option value=\"spam\" selected=\"selected\">Bacon</option>\n        </select>\n    </div>"], "tests.test_pyquery.TestManipulating.test_val_for_textarea": ["pyquery.pyquery.PyQuery", "<span><textarea id=\"textarea-single\">Spam</textarea>\n        <textarea id=\"textarea-multi\">Spam\n<b>Eggs</b>\nBacon</textarea>\n    </span>", "pyquery.pyquery.PyQuery.val", "unittest.case.TestCase.assertEqual", "pyquery.pyquery.PyQuery.text", "<span><textarea id=\"textarea-single\">42</textarea>\n        <textarea id=\"textarea-multi\">Spam\n<b>Eggs</b>\nBacon</textarea>\n    </span>", "<span><textarea id=\"textarea-single\">42</textarea>\n        <textarea id=\"textarea-multi\">Bacon\n&lt;b&gt;Eggs&lt;/b&gt;\nSpam</textarea>\n    </span>"], "tests.test_pyquery.TestManipulating.test_val_input_has_no_value_attr": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.val", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestManipulating.test_val_radio_no_value_attribute": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.val", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestManipulating.test_val_value_is_empty_string": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.val", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestAjax.test_serialize": ["pyquery.pyquery.PyQuery", "<form>\n    <input name=\"spam\" value=\"Spam/&#10;spam\"/>\n    <select name=\"order\" multiple=\"multiple\">\n    <option value=\"baked&#10;beans\" selected=\"selected\">\n    </option><option value=\"tomato\" selected=\"selected\">\n    </option><option value=\"spam\">\n    </option></select>\n    <textarea name=\"multiline\">multiple\nlines\nof text</textarea>\n    </form>\n    ", "pyquery.pyquery.PyQuery.serialize", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestAjax.test_serialize_array": ["pyquery.pyquery.PyQuery", "<form>\n    <input name=\"spam\" value=\"Spam/&#10;spam\"/>\n    <select name=\"order\" multiple=\"multiple\">\n    <option value=\"baked&#10;beans\" selected=\"selected\">\n    </option><option value=\"tomato\" selected=\"selected\">\n    </option><option value=\"spam\">\n    </option></select>\n    <textarea name=\"multiline\">multiple\nlines\nof text</textarea>\n    </form>\n    ", "pyquery.pyquery.PyQuery.serialize_array", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestAjax.test_serialize_dict": ["pyquery.pyquery.PyQuery", "<form>\n    <input name=\"spam\" value=\"Spam/&#10;spam\"/>\n    <select name=\"order\" multiple=\"multiple\">\n    <option value=\"baked&#10;beans\" selected=\"selected\">\n    </option><option value=\"tomato\" selected=\"selected\">\n    </option><option value=\"spam\">\n    </option></select>\n    <textarea name=\"multiline\">multiple\nlines\nof text</textarea>\n    </form>\n    ", "pyquery.pyquery.PyQuery.serialize_dict", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestAjax.test_serialize_pairs_filter_controls": ["pyquery.pyquery.PyQuery", "<form>\n    <input name=\"order\" value=\"spam\"/>\n    <input id=\"noname\" value=\"sausage\"/>\n    <fieldset disabled=\"disabled\">\n    <input name=\"order\" value=\"sausage\"/>\n    </fieldset>\n    <input name=\"disabled\" value=\"ham\" disabled=\"disabled\"/>\n    <input type=\"submit\" name=\"submit\" value=\"Submit\"/>\n    <input type=\"button\" name=\"button\" value=\"\"/>\n    <input type=\"image\" name=\"image\" value=\"\"/>\n    <input type=\"reset\" name=\"reset\" value=\"Reset\"/>\n    <input type=\"file\" name=\"file\" value=\"\"/>\n    <button type=\"submit\" name=\"submit\" value=\"submit\"/>\n    <input type=\"checkbox\" name=\"spam\"/>\n    <input type=\"radio\" name=\"eggs\"/>\n    </form>\n    ", "pyquery.pyquery.PyQuery.serialize_pairs", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestAjax.test_serialize_pairs_form_controls": ["pyquery.pyquery.PyQuery", "<div><form id=\"first\">\n    <input name=\"order\" value=\"spam\"/>\n    <fieldset>\n    <input name=\"fieldset\" value=\"eggs\"/>\n    <input id=\"input\" name=\"fieldset\" value=\"ham\"/>\n    </fieldset>\n    </form>\n    <form id=\"datalist\">\n    <datalist><div><input name=\"datalist\" value=\"eggs\"/></div></datalist>\n    <input type=\"checkbox\" name=\"checkbox\" checked=\"checked\"/>\n    <input type=\"radio\" name=\"radio\" checked=\"checked\"/>\n    </form>\n    </div>", "pyquery.pyquery.PyQuery.serialize_pairs", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestAjax.test_serialize_pairs_form_id": ["pyquery.pyquery.PyQuery", "<div><div id=\"div\">\n    <input form=\"dispersed\" name=\"order\" value=\"spam\"/>\n    </div>\n    <form id=\"dispersed\">\n    <div><input name=\"order\" value=\"eggs\"/></div>\n    <input form=\"dispersed\" name=\"order\" value=\"ham\"/>\n    <input form=\"other-form\" name=\"order\" value=\"nothing\"/>\n    <input form=\"\" name=\"order\" value=\"nothing\"/>\n    </form>\n    <form id=\"other-form\">\n    <input form=\"dispersed\" name=\"order\" value=\"tomato\"/>\n    </form>\n    <form class=\"no-id\">\n    <input form=\"dispersed\" name=\"order\" value=\"baked beans\"/>\n    <input name=\"spam\" value=\"Spam\"/>\n    </form>\n    </div>", "pyquery.pyquery.PyQuery.serialize_pairs", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestAjax.test_serialize_pairs_form_values": ["pyquery.pyquery.PyQuery", "<form>\n    <input name=\"spam\" value=\"Spam/&#10;spam\"/>\n    <select name=\"order\" multiple=\"multiple\">\n    <option value=\"baked&#10;beans\" selected=\"selected\">\n    </option><option value=\"tomato\" selected=\"selected\">\n    </option><option value=\"spam\">\n    </option></select>\n    <textarea name=\"multiline\">multiple\nlines\nof text</textarea>\n    </form>\n    ", "pyquery.pyquery.PyQuery.serialize_pairs", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestMakeLinks.test_make_link": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.make_links_absolute", "<html>\n    <div>\n    <a href=\"http://example.com/path_info\">with href</a>\n    <a>without href</a>\n    </div>\n    </html>", "builtins.len", "unittest.case.TestCase.assertTrue"], "tests.test_pyquery.TestHTMLParser.test_parser_persistance": ["pyquery.pyquery.PyQuery", "unittest.case.TestCase.assertRaises", "pyquery.pyquery.PyQuery.after"], "tests.test_pyquery.TestHTMLParser.test_replaceWith": ["pyquery.pyquery.PyQuery", "<div class=\"portlet\">\n      <a href=\"/toto\">TestimageMy link text</a>\n      <a href=\"/toto2\">imageMy link text 2</a>\n      Behind you, a three-headed HTML&amp;dash;Entity!\n    </div>", "pyquery.pyquery.PyQuery.replace_with", "pyquery.pyquery.PyQuery.__html__"], "tests.test_pyquery.TestHTMLParser.test_replaceWith_with_function": ["pyquery.pyquery.PyQuery", "<div class=\"portlet\">\n      <a href=\"/toto\">TestimageMy link text</a>\n      <a href=\"/toto2\">imageMy link text 2</a>\n      Behind you, a three-headed HTML&amp;dash;Entity!\n    </div>", "pyquery.pyquery.PyQuery.replace_with", "pyquery.pyquery.PyQuery.html", "pyquery.pyquery.PyQuery.__html__"], "tests.test_pyquery.TestXMLNamespace.test_namespace_traversal": ["str.encode", "pyquery.pyquery.PyQuery", "<foo xmlns:bar=\"http://example.com/bar\">\n    <bar:blah>What</bar:blah>\n    <idiot>123</idiot>\n    <baz xmlns=\"http://example.com/baz\" a=\"b\">\n          <subbaz/>\n    </baz>\n    </foo>", "pyquery.pyquery.PyQuery.closest"], "tests.test_pyquery.TestXMLNamespace.test_persistent_namespaces": ["str.encode", "pyquery.pyquery.PyQuery", "<foo xmlns:bar=\"http://example.com/bar\">\n    <bar:blah>What</bar:blah>\n    <idiot>123</idiot>\n    <baz xmlns=\"http://example.com/baz\" a=\"b\">\n          <subbaz/>\n    </baz>\n    </foo>", "pyquery.pyquery.PyQuery.text", "builtins.repr", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestXMLNamespace.test_remove_namespaces": ["str.encode", "pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.remove_namespaces", "<foo xmlns:bar=\"http://example.com/bar\">\n    <blah>What</blah>\n    <idiot>123</idiot>\n    <baz xmlns=\"http://example.com/baz\" a=\"b\">\n          <subbaz/>\n    </baz>\n    </foo>", "pyquery.pyquery.PyQuery.text", "builtins.repr", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestXMLNamespace.test_selector": ["str.encode", "pyquery.pyquery.PyQuery", "<foo xmlns:bar=\"http://example.com/bar\">\n    <bar:blah>What</bar:blah>\n    <idiot>123</idiot>\n    <baz xmlns=\"http://example.com/baz\" a=\"b\">\n          <subbaz/>\n    </baz>\n    </foo>", "pyquery.pyquery.PyQuery.text", "builtins.repr", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestXMLNamespace.test_selector_html": ["str.split", "pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.text", "builtins.repr", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestXMLNamespace.test_selector_with_xml": ["str.encode", "pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.text", "builtins.repr", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestXMLNamespace.test_xhtml_namespace": ["str.encode", "pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.xhtml_to_html", "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n    <body>\n    <div>What</div>\n    </body>\n    </html>", "pyquery.pyquery.PyQuery.text", "builtins.repr", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestXMLNamespace.test_xhtml_namespace_html_parser": ["pyquery.pyquery.PyQuery", "pyquery.pyquery.PyQuery.xhtml_to_html", "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n    <body>\n    <div>What</div>\n    </body>\n    </html>", "pyquery.pyquery.PyQuery.text", "builtins.repr", "unittest.case.TestCase.assertEqual"], "tests.test_pyquery.TestWebScrapping.setUp": ["webtest.http.StopableWSGIServer.create", "webtest.http.StopableWSGIServer.wait", "str.rstrip"], "tests.test_pyquery.TestWebScrapping.test_get": ["pyquery.pyquery.PyQuery", "builtins.print", "<html><body><p>HTTP_ACCEPT_ENCODING: identity\nHTTP_CONNECTION: close\nHTTP_HOST: 127.0.0.1:50477\nHTTP_USER_AGENT: Python-urllib/3.10\nPATH_INFO: /\nQUERY_STRING: q=foo\nREMOTE_ADDR: 127.0.0.1\nREMOTE_HOST: 127.0.0.1\nREMOTE_PORT: 59762\nREQUEST_METHOD: GET\nREQUEST_URI: /?q=foo\nSCRIPT_NAME: \nSERVER_NAME: waitress.invalid\nSERVER_PORT: 50477\nSERVER_PROTOCOL: HTTP/1.1\nSERVER_SOFTWARE: waitress\nwaitress.client_disconnected: <bound method=\"\" httpchannel.check_client_disconnected=\"\" of=\"\" connected=\"\" at=\"\">&gt;\nwebob._parsed_query_vars: (GET([('q', 'foo')]), 'q=foo')\nwsgi.errors: &lt;_io.TextIOWrapper name=\"&lt;_io.FileIO name=9 mode='rb+' closefd=True&gt;\" mode='r+' encoding='utf-8'&gt;\nwsgi.file_wrapper: <class>\nwsgi.input: &lt;_io.BytesIO object at 0x7fa5e46bde90&gt;\nwsgi.input_terminated: True\nwsgi.multiprocess: False\nwsgi.multithread: True\nwsgi.run_once: False\nwsgi.url_scheme: 'http'\nwsgi.version: (1, 0)\n</class></bound></p></body></html>", "pyquery.pyquery.PyQuery.text", "unittest.case.TestCase.assertIn"], "pyquery.openers.url_opener": ["pyquery.openers._urllib"], "pyquery.openers._urllib": ["dict.get", "pyquery.openers._query", "urllib.request.urlopen"], "pyquery.openers._query": ["dict.pop", "builtins.type", "urllib.parse.urlencode", "builtins.isinstance", "str.lower", "str.encode"], "tests.test_pyquery.TestWebScrapping.tearDown": ["webtest.http.StopableWSGIServer.shutdown"], "tests.test_pyquery.TestWebScrapping.test_post": ["pyquery.pyquery.PyQuery", "<html><body><p>CONTENT_LENGTH: 5\nCONTENT_TYPE: application/x-www-form-urlencoded\nHTTP_ACCEPT_ENCODING: identity\nHTTP_CONNECTION: close\nHTTP_HOST: 127.0.0.1:55331\nHTTP_USER_AGENT: Python-urllib/3.10\nPATH_INFO: /\nQUERY_STRING: \nREMOTE_ADDR: 127.0.0.1\nREMOTE_HOST: 127.0.0.1\nREMOTE_PORT: 55554\nREQUEST_METHOD: POST\nREQUEST_URI: /\nSCRIPT_NAME: \nSERVER_NAME: waitress.invalid\nSERVER_PORT: 55331\nSERVER_PROTOCOL: HTTP/1.1\nSERVER_SOFTWARE: waitress\nwaitress.client_disconnected: <bound method=\"\" httpchannel.check_client_disconnected=\"\" of=\"\" connected=\"\" at=\"\">&gt;\nwebob._parsed_query_vars: (GET([]), '')\nwsgi.errors: &lt;_io.TextIOWrapper name=\"&lt;_io.FileIO name=9 mode='rb+' closefd=True&gt;\" mode='r+' encoding='utf-8'&gt;\nwsgi.file_wrapper: <class>\nwsgi.input: &lt;_io.BytesIO object at 0x7fa5e46c5260&gt;\nwsgi.input_terminated: True\nwsgi.multiprocess: False\nwsgi.multithread: True\nwsgi.run_once: False\nwsgi.url_scheme: 'http'\nwsgi.version: (1, 0)\n-- Body ----------\nq=foo</class></bound></p></body></html>", "pyquery.pyquery.PyQuery.text", "unittest.case.TestCase.assertIn"], "tests.test_pyquery.TestWebScrapping.test_session": ["unittest.case.TestCase.skipTest"], "tests.test_pyquery.TestWebScrappingTimeouts.setUp": ["webtest.http.StopableWSGIServer.create", "webtest.http.StopableWSGIServer.wait", "str.rstrip"], "tests.test_pyquery.TestWebScrappingTimeouts.test_get": ["pyquery.pyquery.PyQuery", "unittest.case.TestCase.assertRaises"], "tests.test_pyquery.TestWebScrappingTimeouts.app": ["waitress.task.WSGITask.execute.<locals>.start_response", "time.sleep"], "tests.test_pyquery.TestWebScrappingTimeouts.tearDown": ["webtest.http.StopableWSGIServer.shutdown"]}
